[{"key": "61bb6091-9e9c-4404-96c1-cb17b00fdd76", "page": "cli/docs/seldon_server_status", "section": "seldon-server-status", "text": "\nseldon server status\u00b6\nget status for server\n\nSynopsis\u00b6\nget the status for a server\nseldon server status [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for status\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n\n\nSEE ALSO\u00b6\n\nseldon server\t - manage servers\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_server_status.html", "key": "cli/docs/seldon_server_status"}}, {"key": "14346cb2-8fb7-40cc-a484-739cba7109da", "page": "cli/docs/seldon_server_status", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for status\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_server_status.html", "key": "cli/docs/seldon_server_status"}}, {"key": "a2fe4037-e308-4bdd-96a4-2f01e5e66ec4", "page": "metrics/usage", "section": "usage-metrics", "text": "\nUsage Metrics\u00b6\nThere are various interesting system metrics about how Seldon Core v2 is used.\nThese metrics can be recorded anonymously and sent to Seldon by a lightweight, optional, stand-alone component called Hodometer.\nWhen provided, these metrics will be used to understand the adoption of Seldon Core v2 and how people interact with it.\nFor example, knowing how many clusters Seldon Core v2 is running on, if it is used in Kubernetes or for local development, and how many people are benefitting from features like multi-model serving.\n\nArchitecture\u00b6\n\nHodometer is not an integral part of Seldon Core v2, but rather an independent component which connects to the public APIs of the Seldon Core v2 scheduler.\nIf deployed in Kubernetes, it will also try to request some basic information from the Kubernetes API.\nRecorded metrics are sent to Seldon and, optionally, to any additional endpoints you define.\n\n\nPrivacy\u00b6\nHodometer was explicitly designed with privacy of user information and transparency of implementation in mind.\nIt does not record any sensitive or identifying information.\nFor example, it has no knowledge of IP addresses, model names, or user information.\nAll information sent to Seldon is anonymised with a completely random cluster identifier.\nHodometer supports different information levels, so you have full control over what metrics are provided to Seldon, if any.\nFor transparency, the implementation is fully open-source and designed to be easy to read.\nThe full source code is available here, with metrics defined in code here.\nSee below for an equivalent table of metrics.\n\n\nPerformance\u00b6\nMetrics are collected as periodic snapshots a few times per day.\nThey are lightweight to collect, coming mostly from the Seldon Core v2", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "ba7c57aa-2255-44ca-a988-fce78de0dd93", "page": "metrics/usage", "section": "usage-metrics", "text": "full control over what metrics are provided to Seldon, if any.\nFor transparency, the implementation is fully open-source and designed to be easy to read.\nThe full source code is available here, with metrics defined in code here.\nSee below for an equivalent table of metrics.\n\n\nPerformance\u00b6\nMetrics are collected as periodic snapshots a few times per day.\nThey are lightweight to collect, coming mostly from the Seldon Core v2 scheduler, and are heavily aggregated.\nAs such, they should have minimal impact on CPU, memory, and network consumption.\nHodometer does not store anything it records, so does not have any persistent storage.\nAs a result, it should not be considered a replacement for tools like Prometheus.\n\n\nConfiguration\u00b6\n\nMetrics levels\u00b6\nHodometer supports 3 different metrics levels:\n\n\nLevel\nDescription\n\n\n\nCluster\nBasic information about the Seldon Core v2 installation\n\nResource\nHigh-level information about which Seldon Core v2 resources are used\n\nFeature\nMore detailed information about how resources are used and whether or not certain feature flags are enabled\n\n\n\nAlternatively, usage metrics can be completely disabled.\nTo do so, simply remove any existing deployment of Hodometer or disable it in the installation for your environment, discussed below.\n\n\nOptions\u00b6\nThe following environment variables control the behaviour of Hodometer, regardless of the environment it is installed in.\n\n\nFlag\nFormat\nExample\nDescription\n\n\n\nMETRICS_LEVEL\nstring\nfeature\nLevel of detail for recorded metrics; one of feature, resource, or cluster\n\nEXTRA_PUBLISH_URLS\ncomma-separated list of URLs\nhttp://my-endpoint-1:8000,http://my-endpoint-2:8000\nAdditional endpoints to publish metrics to\n\nSCHEDULER_HOST\nstring\nseldon-scheduler\nHostname for Seldon Core v2 scheduler\n\nSCHEDULER_PORT\ninteger\n9004\nPort for Seldon Core v2 scheduler\n\nLOG_LEVEL\nstring\ninfo\nLevel of detail for application logs\n\n\n\n\n\nKubernetes\u00b6\nHodometer is installed as a separate deployment, by default in the same namespace as the rest of the Seldon components.\n\nHelmIf you install Seldon Core v2 by Helm chart, there are values corresponding to the key environment", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "6260c631-7bcc-4be6-9fef-3864cc68d562", "page": "metrics/usage", "section": "usage-metrics", "text": "one of feature, resource, or cluster\n\nEXTRA_PUBLISH_URLS\ncomma-separated list of URLs\nhttp://my-endpoint-1:8000,http://my-endpoint-2:8000\nAdditional endpoints to publish metrics to\n\nSCHEDULER_HOST\nstring\nseldon-scheduler\nHostname for Seldon Core v2 scheduler\n\nSCHEDULER_PORT\ninteger\n9004\nPort for Seldon Core v2 scheduler\n\nLOG_LEVEL\nstring\ninfo\nLevel of detail for application logs\n\n\n\n\n\nKubernetes\u00b6\nHodometer is installed as a separate deployment, by default in the same namespace as the rest of the Seldon components.\n\nHelmIf you install Seldon Core v2 by Helm chart, there are values corresponding to the key environment variables discussed above.\nThese Helm values and their equivalents are provided below:\n\n\nHelm value\nEnvironment variable\n\n\n\nhodometer.metricsLevel\nMETRICS_LEVEL\n\nhodometer.extraPublishUrls\nEXTRA_PUBLISH_URLS\n\nhodometer.logLevel\nLOG_LEVEL\n\n\n\nIf you do not want usage metrics to be recorded, you can disable Hodometer via the hodometer.disable Helm value when installing the runtime Helm chart.\nThe following command disables collection of usage metrics in fresh installations and also serves to remove Hodometer from an existing installation:\nhelm install seldon-v2-runtime k8s/helm-charts/seldon-core-v2-runtime \\\n  --namespace seldon-mesh \\\n  --set hodometer.disable=true\n\n\n\nNote\nIt is a good practice to set Helm values in values file.\nThese can be applied by using the -f <filename> switch when running Helm.\n\n\n\n\nDocker Compose\u00b6\nThe Compose setup provides a pre-configured and opinionated, yet still flexible, approach to using Seldon Core v2.\nHodometer is defined as a service called hodometer in the Docker Compose manifest.\nIt is automatically enabled when running as per the installation instructions.\nYou can disable Hodometer in Docker Compose by removing the corresponding service from the base manifest.\nAlternatively, you can gate it behind a profile.\nIf the service is already running, you can stop it directly using docker-compose stop ....\nConfiguration can be provided by environment variables when running make or directly invoking docker-compose.\nThe available variables are defined in the Docker Compose environment file, prefixed with HODOMETER_.\n\n\nExtra", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "36a123c4-27d8-4334-bb3a-551b192aea67", "page": "metrics/usage", "section": "usage-metrics", "text": "installation instructions.\nYou can disable Hodometer in Docker Compose by removing the corresponding service from the base manifest.\nAlternatively, you can gate it behind a profile.\nIf the service is already running, you can stop it directly using docker-compose stop ....\nConfiguration can be provided by environment variables when running make or directly invoking docker-compose.\nThe available variables are defined in the Docker Compose environment file, prefixed with HODOMETER_.\n\n\nExtra publish URLs\u00b6\nHodometer can be instructed to publish metrics not only to Seldon, but also to any extra endpoints you specify.\nThis is controlled by the EXTRA_PUBLISH_URLS environment variable, which expects a comma-separated list of HTTP-compatible URLs.\nYou might choose to use this for your own usage monitoring.\nFor example, you could capture these metrics and expose them to Prometheus or another monitoring system using your own service.\nMetrics are recorded in MixPanel-compatible format, which employs a highly flexible JSON schema.\nFor an example of how to define your own metrics listener, see the receiver Go package in the hodometer sub-project.\n\n\n\nList of metrics\u00b6\n\n\nMetric name\nLevel\nFormat\nNotes\n\n\n\ncluster_id\ncluster\nUUID\nA random identifier for this cluster for de-duplication\n\nseldon_core_version\ncluster\nVersion number\nE.g. 1.2.3\n\nis_global_installation\ncluster\nBoolean\nWhether installation is global or namespaced\n\nis_kubernetes\ncluster\nBoolean\nWhether or not the installation is in Kubernetes\n\nkubernetes_version\ncluster\nVersion number\nKubernetes server version, if inside Kubernetes\n\nnode_count\ncluster\nInteger\nNumber of nodes in the cluster, if inside Kubernetes\n\nmodel_count\nresource\nInteger\nNumber of Model resources\n\npipeline_count\nresource\nInteger\nNumber of Pipeline resources\n\nexperiment_count\nresource\nInteger\nNumber of Experiment resources\n\nserver_count\nresource\nInteger\nNumber of Server resources\n\nserver_replica_count\nresource\nInteger\nTotal number of Server resource replicas\n\nmultimodel_enabled_count\nfeature\nInteger\nNumber of Server resources with multi-model serving enabled\n\novercommit_enabled_count\nfeature\nInteger\nNumber of Server resources with overcommitting enabled\n\ngpu_enabled_count\nfeature\nInteger\nNumber of Server resources with GPUs attached\n\ninference_server_name\nfeature\nString\nName of inference server, e.g. MLServer or Triton\n\nserver_cpu_cores_sum\nfeature\nFloat\nTotal of CPU limits across all Server resource replicas, in cores\n\nserver_memory_gb_sum\nfeature\nFloat\nTotal of memory limits across all Server", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "2166f307-698b-4472-bc4d-3881e1f3f3a8", "page": "metrics/usage", "section": "usage-metrics", "text": "the cluster, if inside Kubernetes\n\nmodel_count\nresource\nInteger\nNumber of Model resources\n\npipeline_count\nresource\nInteger\nNumber of Pipeline resources\n\nexperiment_count\nresource\nInteger\nNumber of Experiment resources\n\nserver_count\nresource\nInteger\nNumber of Server resources\n\nserver_replica_count\nresource\nInteger\nTotal number of Server resource replicas\n\nmultimodel_enabled_count\nfeature\nInteger\nNumber of Server resources with multi-model serving enabled\n\novercommit_enabled_count\nfeature\nInteger\nNumber of Server resources with overcommitting enabled\n\ngpu_enabled_count\nfeature\nInteger\nNumber of Server resources with GPUs attached\n\ninference_server_name\nfeature\nString\nName of inference server, e.g. MLServer or Triton\n\nserver_cpu_cores_sum\nfeature\nFloat\nTotal of CPU limits across all Server resource replicas, in cores\n\nserver_memory_gb_sum\nfeature\nFloat\nTotal of memory limits across all Server resource replicas, in GiB\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "47e60651-e9e7-487e-8333-f5c68ff84993", "page": "metrics/usage", "section": "privacy", "text": "\nPrivacy\u00b6\nHodometer was explicitly designed with privacy of user information and transparency of implementation in mind.\nIt does not record any sensitive or identifying information.\nFor example, it has no knowledge of IP addresses, model names, or user information.\nAll information sent to Seldon is anonymised with a completely random cluster identifier.\nHodometer supports different information levels, so you have full control over what metrics are provided to Seldon, if any.\nFor transparency, the implementation is fully open-source and designed to be easy to read.\nThe full source code is available here, with metrics defined in code here.\nSee below for an equivalent table of metrics.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "c422f3d3-20ad-4152-8db3-1c163c9006f3", "page": "metrics/usage", "section": "performance", "text": "\nPerformance\u00b6\nMetrics are collected as periodic snapshots a few times per day.\nThey are lightweight to collect, coming mostly from the Seldon Core v2 scheduler, and are heavily aggregated.\nAs such, they should have minimal impact on CPU, memory, and network consumption.\nHodometer does not store anything it records, so does not have any persistent storage.\nAs a result, it should not be considered a replacement for tools like Prometheus.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "37192a3b-ea02-464d-aba5-94f0038afb46", "page": "metrics/usage", "section": "configuration", "text": "\nConfiguration\u00b6\n\nMetrics levels\u00b6\nHodometer supports 3 different metrics levels:\n\n\nLevel\nDescription\n\n\n\nCluster\nBasic information about the Seldon Core v2 installation\n\nResource\nHigh-level information about which Seldon Core v2 resources are used\n\nFeature\nMore detailed information about how resources are used and whether or not certain feature flags are enabled\n\n\n\nAlternatively, usage metrics can be completely disabled.\nTo do so, simply remove any existing deployment of Hodometer or disable it in the installation for your environment, discussed below.\n\n\nOptions\u00b6\nThe following environment variables control the behaviour of Hodometer, regardless of the environment it is installed in.\n\n\nFlag\nFormat\nExample\nDescription\n\n\n\nMETRICS_LEVEL\nstring\nfeature\nLevel of detail for recorded metrics; one of feature, resource, or cluster\n\nEXTRA_PUBLISH_URLS\ncomma-separated list of URLs\nhttp://my-endpoint-1:8000,http://my-endpoint-2:8000\nAdditional endpoints to publish metrics to\n\nSCHEDULER_HOST\nstring\nseldon-scheduler\nHostname for Seldon Core v2 scheduler\n\nSCHEDULER_PORT\ninteger\n9004\nPort for Seldon Core v2 scheduler\n\nLOG_LEVEL\nstring\ninfo\nLevel of detail for application logs\n\n\n\n\n\nKubernetes\u00b6\nHodometer is installed as a separate deployment, by default in the same namespace as the rest of the Seldon components.\n\nHelmIf you install Seldon Core v2 by Helm chart, there are values corresponding to the key environment variables discussed above.\nThese Helm values and their equivalents are provided below:\n\n\nHelm value\nEnvironment variable\n\n\n\nhodometer.metricsLevel\nMETRICS_LEVEL\n\nhodometer.extraPublishUrls\nEXTRA_PUBLISH_URLS\n\nhodometer.logLevel\nLOG_LEVEL\n\n\n\nIf you do not want usage metrics to be recorded, you can disable Hodometer via the hodometer.disable Helm value when installing the runtime Helm chart.\nThe following command disables collection of usage metrics in fresh installations and also serves to remove Hodometer from an existing installation:\nhelm install seldon-v2-runtime k8s/helm-charts/seldon-core-v2-runtime \\\n  --namespace seldon-mesh \\\n  --set hodometer.disable=true\n\n\n\nNote\nIt is a good practice to set Helm values in values file.\nThese can be applied by using the -f <filename> switch when running Helm.\n\n\n\n\nDocker Compose\u00b6\nThe Compose setup provides a pre-configured and opinionated, yet still flexible, approach to using Seldon", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "f43b295e-66f8-45f4-81eb-811c5a37603c", "page": "metrics/usage", "section": "configuration", "text": "usage metrics in fresh installations and also serves to remove Hodometer from an existing installation:\nhelm install seldon-v2-runtime k8s/helm-charts/seldon-core-v2-runtime \\\n  --namespace seldon-mesh \\\n  --set hodometer.disable=true\n\n\n\nNote\nIt is a good practice to set Helm values in values file.\nThese can be applied by using the -f <filename> switch when running Helm.\n\n\n\n\nDocker Compose\u00b6\nThe Compose setup provides a pre-configured and opinionated, yet still flexible, approach to using Seldon Core v2.\nHodometer is defined as a service called hodometer in the Docker Compose manifest.\nIt is automatically enabled when running as per the installation instructions.\nYou can disable Hodometer in Docker Compose by removing the corresponding service from the base manifest.\nAlternatively, you can gate it behind a profile.\nIf the service is already running, you can stop it directly using docker-compose stop ....\nConfiguration can be provided by environment variables when running make or directly invoking docker-compose.\nThe available variables are defined in the Docker Compose environment file, prefixed with HODOMETER_.\n\n\nExtra publish URLs\u00b6\nHodometer can be instructed to publish metrics not only to Seldon, but also to any extra endpoints you specify.\nThis is controlled by the EXTRA_PUBLISH_URLS environment variable, which expects a comma-separated list of HTTP-compatible URLs.\nYou might choose to use this for your own usage monitoring.\nFor example, you could capture these metrics and expose them to Prometheus or another monitoring system using your own service.\nMetrics are recorded in MixPanel-compatible format, which employs a highly flexible JSON schema.\nFor an example of how to define your own metrics listener, see the receiver Go package in the hodometer sub-project.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "297e9fb3-7b22-436b-8f94-ad6fa12d0eb2", "page": "metrics/usage", "section": "metrics-levels", "text": "\nMetrics levels\u00b6\nHodometer supports 3 different metrics levels:\n\n\nLevel\nDescription\n\n\n\nCluster\nBasic information about the Seldon Core v2 installation\n\nResource\nHigh-level information about which Seldon Core v2 resources are used\n\nFeature\nMore detailed information about how resources are used and whether or not certain feature flags are enabled\n\n\n\nAlternatively, usage metrics can be completely disabled.\nTo do so, simply remove any existing deployment of Hodometer or disable it in the installation for your environment, discussed below.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "d06d0c42-9f7a-4e05-9bc3-7dd2b8dd75b0", "page": "metrics/usage", "section": "kubernetes", "text": "\nKubernetes\u00b6\nHodometer is installed as a separate deployment, by default in the same namespace as the rest of the Seldon components.\n\nHelmIf you install Seldon Core v2 by Helm chart, there are values corresponding to the key environment variables discussed above.\nThese Helm values and their equivalents are provided below:\n\n\nHelm value\nEnvironment variable\n\n\n\nhodometer.metricsLevel\nMETRICS_LEVEL\n\nhodometer.extraPublishUrls\nEXTRA_PUBLISH_URLS\n\nhodometer.logLevel\nLOG_LEVEL\n\n\n\nIf you do not want usage metrics to be recorded, you can disable Hodometer via the hodometer.disable Helm value when installing the runtime Helm chart.\nThe following command disables collection of usage metrics in fresh installations and also serves to remove Hodometer from an existing installation:\nhelm install seldon-v2-runtime k8s/helm-charts/seldon-core-v2-runtime \\\n  --namespace seldon-mesh \\\n  --set hodometer.disable=true\n\n\n\nNote\nIt is a good practice to set Helm values in values file.\nThese can be applied by using the -f <filename> switch when running Helm.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "61f5b3ec-8057-470f-a469-6dc062da3a78", "page": "metrics/usage", "section": "docker-compose", "text": "\nDocker Compose\u00b6\nThe Compose setup provides a pre-configured and opinionated, yet still flexible, approach to using Seldon Core v2.\nHodometer is defined as a service called hodometer in the Docker Compose manifest.\nIt is automatically enabled when running as per the installation instructions.\nYou can disable Hodometer in Docker Compose by removing the corresponding service from the base manifest.\nAlternatively, you can gate it behind a profile.\nIf the service is already running, you can stop it directly using docker-compose stop ....\nConfiguration can be provided by environment variables when running make or directly invoking docker-compose.\nThe available variables are defined in the Docker Compose environment file, prefixed with HODOMETER_.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "5cb2fa84-8ece-41d4-9b10-bc876805fa78", "page": "metrics/usage", "section": "extra-publish-urls", "text": "\nExtra publish URLs\u00b6\nHodometer can be instructed to publish metrics not only to Seldon, but also to any extra endpoints you specify.\nThis is controlled by the EXTRA_PUBLISH_URLS environment variable, which expects a comma-separated list of HTTP-compatible URLs.\nYou might choose to use this for your own usage monitoring.\nFor example, you could capture these metrics and expose them to Prometheus or another monitoring system using your own service.\nMetrics are recorded in MixPanel-compatible format, which employs a highly flexible JSON schema.\nFor an example of how to define your own metrics listener, see the receiver Go package in the hodometer sub-project.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "34982c79-8cd7-4e7c-ab7a-b84dbe3deb96", "page": "metrics/usage", "section": "list-of-metrics", "text": "\nList of metrics\u00b6\n\n\nMetric name\nLevel\nFormat\nNotes\n\n\n\ncluster_id\ncluster\nUUID\nA random identifier for this cluster for de-duplication\n\nseldon_core_version\ncluster\nVersion number\nE.g. 1.2.3\n\nis_global_installation\ncluster\nBoolean\nWhether installation is global or namespaced\n\nis_kubernetes\ncluster\nBoolean\nWhether or not the installation is in Kubernetes\n\nkubernetes_version\ncluster\nVersion number\nKubernetes server version, if inside Kubernetes\n\nnode_count\ncluster\nInteger\nNumber of nodes in the cluster, if inside Kubernetes\n\nmodel_count\nresource\nInteger\nNumber of Model resources\n\npipeline_count\nresource\nInteger\nNumber of Pipeline resources\n\nexperiment_count\nresource\nInteger\nNumber of Experiment resources\n\nserver_count\nresource\nInteger\nNumber of Server resources\n\nserver_replica_count\nresource\nInteger\nTotal number of Server resource replicas\n\nmultimodel_enabled_count\nfeature\nInteger\nNumber of Server resources with multi-model serving enabled\n\novercommit_enabled_count\nfeature\nInteger\nNumber of Server resources with overcommitting enabled\n\ngpu_enabled_count\nfeature\nInteger\nNumber of Server resources with GPUs attached\n\ninference_server_name\nfeature\nString\nName of inference server, e.g. MLServer or Triton\n\nserver_cpu_cores_sum\nfeature\nFloat\nTotal of CPU limits across all Server resource replicas, in cores\n\nserver_memory_gb_sum\nfeature\nFloat\nTotal of memory limits across all Server resource replicas, in GiB\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/usage.html", "key": "metrics/usage"}}, {"key": "9ec62177-f851-4870-937a-e6af5e809319", "page": "examples/cifar10", "section": "production-image-classifier", "text": "\nProduction Image Classifier\u00b6\nRun these examples from the samples/examples/image_classifier folder.\n\nCIFAR10 Image Classification Production Deployment\u00b6\n\nWe show an image classifier (CIFAR10) with associated outlier and drift detectors using a Pipeline.\n\nThe model is a tensorflow CIFAR10 image classfier\nThe outlier detector is created from the CIFAR10 VAE Outlier example.\nThe drift detector is created from the CIFAR10 KS Drift example\n\n\nModel Training (optional for notebook)\u00b6\nTo run local training run the training notebook.\nimport requests\nimport json\nfrom typing import Dict, List\nimport numpy as np\nimport os\nimport tensorflow as tf\nfrom alibi_detect.utils.perturbation import apply_mask\nfrom alibi_detect.datasets import fetch_cifar10c\nimport matplotlib.pyplot as plt\ntf.keras.backend.clear_session()\n\n\n2023-06-30 15:39:28.732453: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n2023-06-30 15:39:28.732465: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n\n\n\ntrain, test = tf.keras.datasets.cifar10.load_data()\nX_train, y_train = train\nX_test, y_test = test\n\nX_train = X_train.astype('float32') / 255\nX_test = X_test.astype('float32') / 255\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nclasses = (\n    \"plane\",\n    \"car\",\n    \"bird\",\n    \"cat\",\n    \"deer\",\n    \"dog\",\n    \"frog\",\n    \"horse\",\n    \"ship\",\n    \"truck\",\n)\n\n\n\n(50000, 32, 32, 3) (50000, 1) (10000, 32, 32, 3) (10000, 1)\n\n\n\noutliers = []\nfor idx in range(0,X_train.shape[0]):\n    X_mask, mask = apply_mask(X_train[idx].reshape(1, 32, 32, 3),\n                                  mask_size=(14,14),\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "c4d80e98-81a8-4799-8420-afc911c6dd8d", "page": "examples/cifar10", "section": "production-image-classifier", "text": "(50000, 1) (10000, 32, 32, 3) (10000, 1)\n\n\n\noutliers = []\nfor idx in range(0,X_train.shape[0]):\n    X_mask, mask = apply_mask(X_train[idx].reshape(1, 32, 32, 3),\n                                  mask_size=(14,14),\n                                  n_masks=1,\n                                  channels=[0,1,2],\n                                  mask_type='normal',\n                                  noise_distr=(0,1),\n                                  clip_rng=(0,1))\n    outliers.append(X_mask)\nX_outliers = np.vstack(outliers)\nX_outliers.shape\n\n\n(50000, 32, 32, 3)\n\n\n\ncorruption = ['brightness']\nX_corr, y_corr = fetch_cifar10c(corruption=corruption, severity=5, return_X_y=True)\nX_corr = X_corr.astype('float32') / 255\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\n\ndef infer(resourceName: str, batchSz: int, requestType:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "bb4e830c-fd34-45e5-b5b7-538a95dc7cf1", "page": "examples/cifar10", "section": "production-image-classifier", "text": "noise_distr=(0,1),\n                                  clip_rng=(0,1))\n    outliers.append(X_mask)\nX_outliers = np.vstack(outliers)\nX_outliers.shape\n\n\n(50000, 32, 32, 3)\n\n\n\ncorruption = ['brightness']\nX_corr, y_corr = fetch_cifar10c(corruption=corruption, severity=5, return_X_y=True)\nX_corr = X_corr.astype('float32') / 255\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\n\ndef infer(resourceName: str, batchSz: int, requestType: str):\n    if requestType == \"outlier\":\n        rows = X_outliers[0:0+batchSz]\n    elif requestType == \"drift\":\n        rows = X_corr[0:0+batchSz]\n    else:\n        rows = X_train[0:0+batchSz]\n    for i in range(batchSz):\n        show(rows[i])\n    reqJson[\"inputs\"][0][\"data\"] = rows.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [batchSz, 32, 32, 3]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":resourceName}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    print(response_raw)\n    print(response_raw.json())\n\n\ndef show(X):\n    plt.imshow(X.reshape(32, 32, 3))\n    plt.axis(\"off\")\n    plt.show()\n\n\n\n\n\nPipeline\u00b6\ncat ../../models/cifar10.yaml\necho \"---\"\ncat ../../models/cifar10-outlier-detect.yaml\necho \"---\"\ncat ../../models/cifar10-drift-detect.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10\nspec:\n  storageUri: \"gs://seldon-models/triton/tf_cifar10\"\n  requirements:\n  - tensorflow\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/cifar10.yaml\nseldon model load -f ../../models/cifar10-outlier-detect.yaml\nseldon model load -f ../../models/cifar10-drift-detect.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status cifar10 -w", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "285fd418-9947-4fb2-beae-b5f32cb7f7ff", "page": "examples/cifar10", "section": "production-image-classifier", "text": " storageUri: \"gs://seldon-models/triton/tf_cifar10\"\n  requirements:\n  - tensorflow\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/cifar10.yaml\nseldon model load -f ../../models/cifar10-outlier-detect.yaml\nseldon model load -f ../../models/cifar10-drift-detect.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status cifar10 -w ModelAvailable | jq .\nseldon model status cifar10-outlier -w ModelAvailable | jq .\nseldon model status cifar10-drift -w ModelAvailable | jq .\n\n\n{}\n{}\n{}\n\n\ncat ../../pipelines/cifar10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: cifar10-production\nspec:\n  steps:\n    - name: cifar10\n    - name: cifar10-outlier\n    - name: cifar10-drift\n      batch:\n        size: 20\n  output:\n    steps:\n    - cifar10\n    - cifar10-outlier.outputs.is_outlier\n\n\nseldon pipeline load -f ../../pipelines/cifar10.yaml\n\n\nseldon pipeline status cifar10-production -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"cifar10-production\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"cifar10-production\",\n        \"uid\": \"cifeii2ufmbc73e5insg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"cifar10\"\n          },\n          {\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "f75e2c34-9853-4655-bf07-9a6c9416ed50", "page": "examples/cifar10", "section": "production-image-classifier", "text": "    \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"cifar10\"\n          },\n          {\n            \"name\": \"cifar10-drift\",\n            \"batch\": {\n              \"size\": 20\n            }\n          },\n          {\n            \"name\": \"cifar10-outlier\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"cifar10.outputs\",\n            \"cifar10-outlier.outputs.is_outlier\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "07fe1327-a064-4001-8290-ba2b5396c323", "page": "examples/cifar10", "section": "production-image-classifier", "text": " \"cifar10.outputs\",\n            \"cifar10-outlier.outputs.is_outlier\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:40:09.047429817Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\ninfer(\"cifar10-production.pipeline\",20, \"normal\")\n\n\n![png](infer_files/infer_14_0.png)\n\n\n\n![png](infer_files/infer_14_1.png)\n\n\n\n![png](infer_files/infer_14_2.png)\n\n\n\n![png](infer_files/infer_14_3.png)\n\n\n\n![png](infer_files/infer_14_4.png)\n\n\n\n![png](infer_files/infer_14_5.png)\n\n\n\n![png](infer_files/infer_14_6.png)\n\n\n\n![png](infer_files/infer_14_7.png)\n\n\n\n![png](infer_files/infer_14_8.png)\n\n\n\n![png](infer_files/infer_14_9.png)\n\n\n\n![png](infer_files/infer_14_10.png)\n\n\n\n![png](infer_files/infer_14_11.png)\n\n\n\n![png](infer_files/infer_14_12.png)\n\n\n\n![png](infer_files/infer_14_13.png)\n\n\n\n![png](infer_files/infer_14_14.png)\n\n\n\n![png](infer_files/infer_14_15.png)\n\n\n\n![png](infer_files/infer_14_16.png)\n\n\n\n![png](infer_files/infer_14_17.png)\n\n\n\n![png](infer_files/infer_14_18.png)\n\n\n\n![png](infer_files/infer_14_19.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [1.45001495e-08, 1.2525752e-09, 1.6298458e-07, 0.11529388, 1.7431412e-07, 6.1856604e-06, 0.8846994, 6.0739285e-09, 7.437921e-08, 4.7317337e-09, 1.26449e-06, 4.8814868e-09, 1.5153439e-09, 8.490656e-09, 5.5131194e-10, 1.1617216e-09, 5.7729294e-10, 2.8839776e-07, 0.0006149016, 0.99938357, 0.888746, 2.5331951e-06, 0.00012967695, 0.10531583, 2.4284174e-05, 6.3332986e-06, 0.0016261435, 1.13079e-05, 0.0013286703, 0.0028091935, 2.0993439e-06, 3.680449e-08, 0.0013269952, 2.1766558e-05, 0.99841356, 0.00015300694, 6.9472035e-06, 1.3277059e-05, 6.1860555e-05, 3.4072806e-07, 1.1205097e-05, 0.99997175, 1.9948227e-07, 6.9880834e-08, 3.3387135e-08, 5.2603138e-08, 3.0352305e-07, 4.3738982e-08, 5.3243946e-07, 1.5870584e-05, 0.0006525102, 0.013322109, 1.480307e-06, 0.9766325, 4.9847167e-05, 0.00058075984, 0.008405659, 5.2234273e-06, 0.00023390084, 0.000116047224, 1.6682397e-06, 5.7737526e-10, 0.9975605, 6.45564e-05, 0.002371972, 1.0392675e-07, 9.747962e-08, 1.4484569e-07, 8.762438e-07, 2.4758325e-08, 5.028761e-09, 6.856381e-11, 5.9932094e-12, 4.921233e-10, 1.471166e-07, 2.7940719e-06, 3.4563383e-09, 0.99999714, 5.9420524e-10, 9.445026e-11, 4.1854888e-05, 5.041549e-08, 8.0302314e-08, 1.2119854e-07, 6.781646e-09, 1.2616152e-08, 1.1878505e-08, 1.628573e-09, 0.9999578, 3.281738e-08, 0.08930307, 1.4065135e-07, 4.1117343e-07, 0.90898305, 8.933351e-07, 0.0015637449, 0.00013868928, 9.092981e-06, 4.8759745e-07, 4.3976044e-07, 0.00016094849, 3.5653954e-07, 0.0760521, 0.8927447, 0.0011777573, 0.00265573, 0.027189083, 4.1892267e-06, 1.329405e-05, 1.8564688e-06, 1.3373891e-06, 1.0251247e-07, 8.651912e-09, 4.458202e-06, 1.4646349e-05, 1.260957e-06, 1.046087e-08, 0.9998946, 8.332438e-05, 3.900894e-07, 6.53852e-05, 3.012202e-08, 1.0247197e-07, 1.8824371e-06, 0.0004958526, 3.533475e-05, 2.739997e-07, 0.99939275, 4.840305e-06, 3.5346695e-06, 0.0005518078, 3.1597017e-07, 0.99902296, 0.00031509742, 8.07886e-07, 1.6366084e-06, 2.795575e-06, 6.112367e-06, 9.817249e-05,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "a5007467-91a8-4c7c-bc2d-071d6a93eaad", "page": "examples/cifar10", "section": "production-image-classifier", "text": "2.7940719e-06, 3.4563383e-09, 0.99999714, 5.9420524e-10, 9.445026e-11, 4.1854888e-05, 5.041549e-08, 8.0302314e-08, 1.2119854e-07, 6.781646e-09, 1.2616152e-08, 1.1878505e-08, 1.628573e-09, 0.9999578, 3.281738e-08, 0.08930307, 1.4065135e-07, 4.1117343e-07, 0.90898305, 8.933351e-07, 0.0015637449, 0.00013868928, 9.092981e-06, 4.8759745e-07, 4.3976044e-07, 0.00016094849, 3.5653954e-07, 0.0760521, 0.8927447, 0.0011777573, 0.00265573, 0.027189083, 4.1892267e-06, 1.329405e-05, 1.8564688e-06, 1.3373891e-06, 1.0251247e-07, 8.651912e-09, 4.458202e-06, 1.4646349e-05, 1.260957e-06, 1.046087e-08, 0.9998946, 8.332438e-05, 3.900894e-07, 6.53852e-05, 3.012202e-08, 1.0247197e-07, 1.8824371e-06, 0.0004958526, 3.533475e-05, 2.739997e-07, 0.99939275, 4.840305e-06, 3.5346695e-06, 0.0005518078, 3.1597017e-07, 0.99902296, 0.00031509742, 8.07886e-07, 1.6366084e-06, 2.795575e-06, 6.112367e-06, 9.817249e-05, 2.602709e-07, 0.0004561966, 5.360607e-06, 2.8656412e-05, 0.000116040654, 6.881144e-05, 8.844774e-06, 4.4655946e-05, 3.5564542e-05, 0.006564381, 0.9926715, 0.007300911, 1.766928e-06, 3.0520596e-07, 0.026906287, 1.3769699e-06, 0.00027539674, 5.583593e-06, 3.792553e-06, 0.0003876767, 0.9651169, 0.18114138, 2.8360228e-05, 0.00019927241, 0.007685872, 0.00014663498, 3.9361137e-05, 5.941682e-05, 7.36174e-05, 0.79936546, 0.01126067, 2.3992783e-11, 7.6336457e-16, 1.4644799e-15, 1, 2.4652159e-14, 1.1786078e-10, 1.9402116e-13, 4.2408636e-15, 1.209294e-15, 2.9042784e-15, 1.5366902e-08, 1.2476195e-09, 1.3560152e-07, 0.999997, 4.3113017e-11, 2.8163534e-08, 2.4494727e-06, 1.3122828e-10, 3.8081083e-07, 2.1628158e-11, 0.0004926238, 6.9424555e-06, 2.827196e-05, 0.92534137, 9.500486e-06, 0.00036133997, 0.072713904, 1.2831057e-07, 0.0010457055, 2.8514464e-07], 'name': 'fc10', 'shape': [20, 10], 'datatype': 'FP32'}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect cifar10-production.cifar10-drift.outputs.is_drift\n\n\nseldon.default.model.cifar10-drift.outputs\tcifeij8fh5ss738i5bp0\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"0\"]}}\n\n\n\ninfer(\"cifar10-production.pipeline\",20, \"drift\")\n\n\n![png](infer_files/infer_16_0.png)\n\n\n\n![png](infer_files/infer_16_1.png)\n\n\n\n![png](infer_files/infer_16_2.png)\n\n\n\n![png](infer_files/infer_16_3.png)\n\n\n\n![png](infer_files/infer_16_4.png)\n\n\n\n![png](infer_files/infer_16_5.png)\n\n\n\n![png](infer_files/infer_16_6.png)\n\n\n\n![png](infer_files/infer_16_7.png)\n\n\n\n![png](infer_files/infer_16_8.png)\n\n\n\n![png](infer_files/infer_16_9.png)\n\n\n\n![png](infer_files/infer_16_10.png)\n\n\n\n![png](infer_files/infer_16_11.png)\n\n\n\n![png](infer_files/infer_16_12.png)\n\n\n\n![png](infer_files/infer_16_13.png)\n\n\n\n![png](infer_files/infer_16_14.png)\n\n\n\n![png](infer_files/infer_16_15.png)\n\n\n\n![png](infer_files/infer_16_16.png)\n\n\n\n![png](infer_files/infer_16_17.png)\n\n\n\n![png](infer_files/infer_16_18.png)\n\n\n\n![png](infer_files/infer_16_19.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [8.080701e-09, 2.3025173e-12, 2.2681688e-09, 1, 4.1828953e-11, 4.48467e-09, 3.216822e-08, 2.8404365e-13, 5.217064e-09, 3.3497323e-13, 0.96965235, 4.7030144e-06, 1.6964266e-07, 1.7355454e-05, 2.6667e-06, 1.9505828e-06, 1.1363079e-07, 3.3352034e-08, 0.030320557, 1.7086056e-07, 0.03725602, 6.8623276e-06, 7.5557014e-05, 0.00018132397, 2.2838503e-05, 0.000110639296, 2.3732607e-06, 2.1210687e-06, 0.9623351, 7.131072e-06, 0.999079, 4.207448e-09, 1.5788535e-08, 2.723756e-08, 2.6555508e-11, 2.1526697e-10, 2.7599315e-10, 2.0737433e-10, 0.0009210062, 3.0885383e-09, 6.665241e-07, 1.7765576e-09, 1.4911559e-07, 0.9765331, 1.9476123e-07, 2.8244015e-06, 0.023463126, 5.8030287e-09, 3.243206e-09, 1.12179785e-08, 4.4123663e-06, 4.7628927e-09, 1.1727273e-08, 0.9761534, 1.1409252e-08, 8.922882e-05, 0.023752932, 3.1563903e-08, 2.7916305e-09, 8.7746266e-10, 1.0166265e-05, 0.999703, 4.5408615e-05, 0.00022673907, 1.7365853e-07, 1.0147362e-06, 6.253448e-06, 2.9711526e-07, 7.811687e-07, 6.183683e-06, 0.86618125, 5.47548e-07, 0.00038408802, 0.013155022, 3.6916779e-06, 0.0006137024, 0.11965008, 3.6425424e-06, 6.7638084e-06, 1.2372367e-06,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "f2032042-c9bc-4f27-8ad8-070e413fef0b", "page": "examples/cifar10", "section": "production-image-classifier", "text": "1.1363079e-07, 3.3352034e-08, 0.030320557, 1.7086056e-07, 0.03725602, 6.8623276e-06, 7.5557014e-05, 0.00018132397, 2.2838503e-05, 0.000110639296, 2.3732607e-06, 2.1210687e-06, 0.9623351, 7.131072e-06, 0.999079, 4.207448e-09, 1.5788535e-08, 2.723756e-08, 2.6555508e-11, 2.1526697e-10, 2.7599315e-10, 2.0737433e-10, 0.0009210062, 3.0885383e-09, 6.665241e-07, 1.7765576e-09, 1.4911559e-07, 0.9765331, 1.9476123e-07, 2.8244015e-06, 0.023463126, 5.8030287e-09, 3.243206e-09, 1.12179785e-08, 4.4123663e-06, 4.7628927e-09, 1.1727273e-08, 0.9761534, 1.1409252e-08, 8.922882e-05, 0.023752932, 3.1563903e-08, 2.7916305e-09, 8.7746266e-10, 1.0166265e-05, 0.999703, 4.5408615e-05, 0.00022673907, 1.7365853e-07, 1.0147362e-06, 6.253448e-06, 2.9711526e-07, 7.811687e-07, 6.183683e-06, 0.86618125, 5.47548e-07, 0.00038408802, 0.013155022, 3.6916779e-06, 0.0006137024, 0.11965008, 3.6425424e-06, 6.7638084e-06, 1.2372367e-06, 1.9545263e-05, 1.1281859e-13, 1.6811868e-14, 0.9999777, 1.9805435e-11, 2.7563674e-06, 2.9651657e-09, 1.1363432e-12, 2.9902746e-13, 1.220973e-12, 2.9895918e-05, 3.4964305e-07, 1.1331837e-08, 1.7012125e-06, 3.6088227e-07, 3.035954e-08, 2.2102333e-06, 1.7414077e-08, 0.9999455, 1.9921794e-05, 0.9999999, 5.3446598e-11, 6.3188843e-10, 1.0956511e-07, 1.1538642e-10, 8.113561e-10, 4.7179572e-08, 1.4544753e-11, 5.490219e-08, 1.3347151e-10, 1.5363307e-07, 6.604881e-09, 2.424105e-10, 9.963063e-09, 3.9349533e-09, 1.5709017e-09, 7.705774e-10, 4.8085802e-08, 1.8885139e-05, 0.9999809, 7.147243e-08, 3.143131e-13, 2.1447092e-13, 0.00042652222, 6.945973e-12, 0.9995734, 6.174434e-09, 4.1128205e-11, 3.4031404e-13, 8.573159e-15, 1.2226405e-09, 2.3768018e-10, 2.822187e-07, 8.016278e-08, 4.0692296e-08, 6.8023346e-06, 2.3926754e-07, 0.9999925, 6.652648e-09, 7.743497e-09, 7.6360675e-06, 5.9386625e-09, 1.5675019e-09, 2.136716e-07, 1.3074002e-06, 3.700079e-10, 1.0984521e-09, 6.2138824e-08, 0.9609078, 0.03908287, 0.0008332255, 7.696685e-08, 2.4428939e-09, 7.186676e-05, 1.4520063e-09, 1.4521317e-08, 1.09093e-06, 1.2531165e-10, 0.9990938, 5.798501e-09, 5.785368e-05, 3.82365e-09, 7.404351e-08, 0.008338481, 8.048078e-10, 0.99157715, 1.1663455e-05, 1.4583546e-05, 8.3543476e-08, 3.274394e-08, 2.4682688e-05, 1.3951502e-09, 1.0260489e-08, 0.9998845, 1.9418138e-08, 8.667954e-07, 2.1851054e-07, 8.917964e-05, 4.4437223e-07, 1.1292918e-07, 4.5302792e-07, 5.631744e-08, 2.9086214e-08, 3.1013877e-07, 7.695681e-09, 2.1452344e-09, 1.1493902e-08, 6.1980093e-10, 0.99999917, 1.1436694e-08, 2.42685e-05, 8.557389e-08, 0.024081504, 0.0073837163, 4.8152968e-05, 5.128531e-07, 0.9684405, 9.630179e-08, 2.1060101e-05, 1.901065e-07], 'name': 'fc10', 'shape': [20, 10], 'datatype': 'FP32'}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect cifar10-production.cifar10-drift.outputs.is_drift\n\n\nseldon.default.model.cifar10-drift.outputs\tcifeimgfh5ss738i5bpg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\ninfer(\"cifar10-production.pipeline\",1, \"outlier\")\n\n\n![png](infer_files/infer_18_0.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [6.3606867e-06, 0.0006106364, 0.0054279356, 0.6536454, 1.4738829e-05, 2.6104701e-06, 0.3397848, 1.3538776e-05, 0.0004458526, 4.807229e-05], 'name': 'fc10', 'shape': [1, 10], 'datatype': 'FP32'}, {'data': [1], 'name': 'is_outlier',", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "4cb973f0-44b0-4409-ae8d-894460db4d7c", "page": "examples/cifar10", "section": "production-image-classifier", "text": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect cifar10-production.cifar10-drift.outputs.is_drift\n\n\nseldon.default.model.cifar10-drift.outputs\tcifeimgfh5ss738i5bpg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\ninfer(\"cifar10-production.pipeline\",1, \"outlier\")\n\n\n![png](infer_files/infer_18_0.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [6.3606867e-06, 0.0006106364, 0.0054279356, 0.6536454, 1.4738829e-05, 2.6104701e-06, 0.3397848, 1.3538776e-05, 0.0004458526, 4.807229e-05], 'name': 'fc10', 'shape': [1, 10], 'datatype': 'FP32'}, {'data': [1], 'name': 'is_outlier', 'shape': [1, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\ninfer(\"cifar10-production.pipeline\",1, \"ok\")\n\n\n![png](infer_files/infer_19_0.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [1.45001495e-08, 1.2525752e-09, 1.6298458e-07, 0.11529388, 1.7431412e-07, 6.1856604e-06, 0.8846994, 6.0739285e-09, 7.43792e-08, 4.7317337e-09], 'name': 'fc10', 'shape': [1, 10], 'datatype': 'FP32'}, {'data': [0], 'name': 'is_outlier', 'shape': [1, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nUse the seldon CLI to look at the outputs from the CIFAR10 model. It will decode the Triton binary outputs for us.\nseldon pipeline inspect cifar10-production.cifar10.outputs\n\n\nseldon.default.model.cifar10.outputs\tcifeiq8fh5ss738i5bqg\t{\"modelName\":\"cifar10_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"fc10\", \"datatype\":\"FP32\", \"shape\":[\"1\", \"10\"], \"contents\":{\"fp32Contents\":[1.45001495e-8, 1.2525752e-9, 1.6298458e-7, 0.11529388, 1.7431412e-7, 0.0000061856604, 0.8846994, 6.0739285e-9, 7.43792e-8, 4.7317337e-9]}}]}\n\n\n\nseldon pipeline unload cifar10-production\n\n\nseldon model unload cifar10\nseldon model unload cifar10-outlier\nseldon model unload cifar10-drift\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "549a0206-a2ca-40d5-9d2a-97da46ddee5e", "page": "examples/cifar10", "section": "cifar10-image-classification-production-deployment", "text": "\nCIFAR10 Image Classification Production Deployment\u00b6\n\nWe show an image classifier (CIFAR10) with associated outlier and drift detectors using a Pipeline.\n\nThe model is a tensorflow CIFAR10 image classfier\nThe outlier detector is created from the CIFAR10 VAE Outlier example.\nThe drift detector is created from the CIFAR10 KS Drift example\n\n\nModel Training (optional for notebook)\u00b6\nTo run local training run the training notebook.\nimport requests\nimport json\nfrom typing import Dict, List\nimport numpy as np\nimport os\nimport tensorflow as tf\nfrom alibi_detect.utils.perturbation import apply_mask\nfrom alibi_detect.datasets import fetch_cifar10c\nimport matplotlib.pyplot as plt\ntf.keras.backend.clear_session()\n\n\n2023-06-30 15:39:28.732453: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n2023-06-30 15:39:28.732465: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n\n\n\ntrain, test = tf.keras.datasets.cifar10.load_data()\nX_train, y_train = train\nX_test, y_test = test\n\nX_train = X_train.astype('float32') / 255\nX_test = X_test.astype('float32') / 255\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nclasses = (\n    \"plane\",\n    \"car\",\n    \"bird\",\n    \"cat\",\n    \"deer\",\n    \"dog\",\n    \"frog\",\n    \"horse\",\n    \"ship\",\n    \"truck\",\n)\n\n\n\n(50000, 32, 32, 3) (50000, 1) (10000, 32, 32, 3) (10000, 1)\n\n\n\noutliers = []\nfor idx in range(0,X_train.shape[0]):\n    X_mask, mask = apply_mask(X_train[idx].reshape(1, 32, 32, 3),\n                                  mask_size=(14,14),\n               ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "0b68ac38-d081-4e9d-8828-d4382e024d5b", "page": "examples/cifar10", "section": "cifar10-image-classification-production-deployment", "text": "= []\nfor idx in range(0,X_train.shape[0]):\n    X_mask, mask = apply_mask(X_train[idx].reshape(1, 32, 32, 3),\n                                  mask_size=(14,14),\n                                  n_masks=1,\n                                  channels=[0,1,2],\n                                  mask_type='normal',\n                                  noise_distr=(0,1),\n                                  clip_rng=(0,1))\n    outliers.append(X_mask)\nX_outliers = np.vstack(outliers)\nX_outliers.shape\n\n\n(50000, 32, 32, 3)\n\n\n\ncorruption = ['brightness']\nX_corr, y_corr = fetch_cifar10c(corruption=corruption, severity=5, return_X_y=True)\nX_corr = X_corr.astype('float32') / 255\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\n\ndef infer(resourceName: str, batchSz: int, requestType: str):\n    if requestType == \"outlier\":\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "8625d1fd-bf62-4abf-9a32-8c4b0d78bc50", "page": "examples/cifar10", "section": "cifar10-image-classification-production-deployment", "text": "                          clip_rng=(0,1))\n    outliers.append(X_mask)\nX_outliers = np.vstack(outliers)\nX_outliers.shape\n\n\n(50000, 32, 32, 3)\n\n\n\ncorruption = ['brightness']\nX_corr, y_corr = fetch_cifar10c(corruption=corruption, severity=5, return_X_y=True)\nX_corr = X_corr.astype('float32') / 255\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\n\ndef infer(resourceName: str, batchSz: int, requestType: str):\n    if requestType == \"outlier\":\n        rows = X_outliers[0:0+batchSz]\n    elif requestType == \"drift\":\n        rows = X_corr[0:0+batchSz]\n    else:\n        rows = X_train[0:0+batchSz]\n    for i in range(batchSz):\n        show(rows[i])\n    reqJson[\"inputs\"][0][\"data\"] = rows.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [batchSz, 32, 32, 3]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":resourceName}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    print(response_raw)\n    print(response_raw.json())\n\n\ndef show(X):\n    plt.imshow(X.reshape(32, 32, 3))\n    plt.axis(\"off\")\n    plt.show()\n\n\n\n\n\nPipeline\u00b6\ncat ../../models/cifar10.yaml\necho \"---\"\ncat ../../models/cifar10-outlier-detect.yaml\necho \"---\"\ncat ../../models/cifar10-drift-detect.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10\nspec:\n  storageUri: \"gs://seldon-models/triton/tf_cifar10\"\n  requirements:\n  - tensorflow\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/cifar10.yaml\nseldon model load -f ../../models/cifar10-outlier-detect.yaml\nseldon model load -f ../../models/cifar10-drift-detect.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status cifar10 -w ModelAvailable | jq .\nseldon model status cifar10-outlier -w", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "fe2d455d-a2c1-4edd-a0b3-da0e6a26652a", "page": "examples/cifar10", "section": "cifar10-image-classification-production-deployment", "text": "mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/cifar10.yaml\nseldon model load -f ../../models/cifar10-outlier-detect.yaml\nseldon model load -f ../../models/cifar10-drift-detect.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status cifar10 -w ModelAvailable | jq .\nseldon model status cifar10-outlier -w ModelAvailable | jq .\nseldon model status cifar10-drift -w ModelAvailable | jq .\n\n\n{}\n{}\n{}\n\n\ncat ../../pipelines/cifar10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: cifar10-production\nspec:\n  steps:\n    - name: cifar10\n    - name: cifar10-outlier\n    - name: cifar10-drift\n      batch:\n        size: 20\n  output:\n    steps:\n    - cifar10\n    - cifar10-outlier.outputs.is_outlier\n\n\nseldon pipeline load -f ../../pipelines/cifar10.yaml\n\n\nseldon pipeline status cifar10-production -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"cifar10-production\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"cifar10-production\",\n        \"uid\": \"cifeii2ufmbc73e5insg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"cifar10\"\n          },\n          {\n            \"name\": \"cifar10-drift\",\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "1b1e5e49-6311-4aff-a428-1f11e8e3bc21", "page": "examples/cifar10", "section": "cifar10-image-classification-production-deployment", "text": "     \"steps\": [\n          {\n            \"name\": \"cifar10\"\n          },\n          {\n            \"name\": \"cifar10-drift\",\n            \"batch\": {\n              \"size\": 20\n            }\n          },\n          {\n            \"name\": \"cifar10-outlier\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"cifar10.outputs\",\n            \"cifar10-outlier.outputs.is_outlier\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "bfe942d7-5180-4df2-9d17-bfb5340362e5", "page": "examples/cifar10", "section": "cifar10-image-classification-production-deployment", "text": "     \"cifar10-outlier.outputs.is_outlier\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:40:09.047429817Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\ninfer(\"cifar10-production.pipeline\",20, \"normal\")\n\n\n![png](infer_files/infer_14_0.png)\n\n\n\n![png](infer_files/infer_14_1.png)\n\n\n\n![png](infer_files/infer_14_2.png)\n\n\n\n![png](infer_files/infer_14_3.png)\n\n\n\n![png](infer_files/infer_14_4.png)\n\n\n\n![png](infer_files/infer_14_5.png)\n\n\n\n![png](infer_files/infer_14_6.png)\n\n\n\n![png](infer_files/infer_14_7.png)\n\n\n\n![png](infer_files/infer_14_8.png)\n\n\n\n![png](infer_files/infer_14_9.png)\n\n\n\n![png](infer_files/infer_14_10.png)\n\n\n\n![png](infer_files/infer_14_11.png)\n\n\n\n![png](infer_files/infer_14_12.png)\n\n\n\n![png](infer_files/infer_14_13.png)\n\n\n\n![png](infer_files/infer_14_14.png)\n\n\n\n![png](infer_files/infer_14_15.png)\n\n\n\n![png](infer_files/infer_14_16.png)\n\n\n\n![png](infer_files/infer_14_17.png)\n\n\n\n![png](infer_files/infer_14_18.png)\n\n\n\n![png](infer_files/infer_14_19.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [1.45001495e-08, 1.2525752e-09, 1.6298458e-07, 0.11529388, 1.7431412e-07, 6.1856604e-06, 0.8846994, 6.0739285e-09, 7.437921e-08, 4.7317337e-09, 1.26449e-06, 4.8814868e-09, 1.5153439e-09, 8.490656e-09, 5.5131194e-10, 1.1617216e-09, 5.7729294e-10, 2.8839776e-07, 0.0006149016, 0.99938357, 0.888746, 2.5331951e-06, 0.00012967695, 0.10531583, 2.4284174e-05, 6.3332986e-06, 0.0016261435, 1.13079e-05, 0.0013286703, 0.0028091935, 2.0993439e-06, 3.680449e-08, 0.0013269952, 2.1766558e-05, 0.99841356, 0.00015300694, 6.9472035e-06, 1.3277059e-05, 6.1860555e-05, 3.4072806e-07, 1.1205097e-05, 0.99997175, 1.9948227e-07, 6.9880834e-08, 3.3387135e-08, 5.2603138e-08, 3.0352305e-07, 4.3738982e-08, 5.3243946e-07, 1.5870584e-05, 0.0006525102, 0.013322109, 1.480307e-06, 0.9766325, 4.9847167e-05, 0.00058075984, 0.008405659, 5.2234273e-06, 0.00023390084, 0.000116047224, 1.6682397e-06, 5.7737526e-10, 0.9975605, 6.45564e-05, 0.002371972, 1.0392675e-07, 9.747962e-08, 1.4484569e-07, 8.762438e-07, 2.4758325e-08, 5.028761e-09, 6.856381e-11, 5.9932094e-12, 4.921233e-10, 1.471166e-07, 2.7940719e-06, 3.4563383e-09, 0.99999714, 5.9420524e-10, 9.445026e-11, 4.1854888e-05, 5.041549e-08, 8.0302314e-08, 1.2119854e-07, 6.781646e-09, 1.2616152e-08, 1.1878505e-08, 1.628573e-09, 0.9999578, 3.281738e-08, 0.08930307, 1.4065135e-07, 4.1117343e-07, 0.90898305, 8.933351e-07, 0.0015637449, 0.00013868928, 9.092981e-06, 4.8759745e-07, 4.3976044e-07, 0.00016094849, 3.5653954e-07, 0.0760521, 0.8927447, 0.0011777573, 0.00265573, 0.027189083, 4.1892267e-06, 1.329405e-05, 1.8564688e-06, 1.3373891e-06, 1.0251247e-07, 8.651912e-09, 4.458202e-06, 1.4646349e-05, 1.260957e-06, 1.046087e-08, 0.9998946, 8.332438e-05, 3.900894e-07, 6.53852e-05, 3.012202e-08, 1.0247197e-07, 1.8824371e-06, 0.0004958526, 3.533475e-05, 2.739997e-07, 0.99939275, 4.840305e-06, 3.5346695e-06, 0.0005518078, 3.1597017e-07, 0.99902296, 0.00031509742, 8.07886e-07, 1.6366084e-06, 2.795575e-06, 6.112367e-06, 9.817249e-05, 2.602709e-07, 0.0004561966, 5.360607e-06, 2.8656412e-05, 0.000116040654, 6.881144e-05, 8.844774e-06, 4.4655946e-05,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "62d2650d-de41-4f7c-b700-e68be5fcefe7", "page": "examples/cifar10", "section": "cifar10-image-classification-production-deployment", "text": "1.2119854e-07, 6.781646e-09, 1.2616152e-08, 1.1878505e-08, 1.628573e-09, 0.9999578, 3.281738e-08, 0.08930307, 1.4065135e-07, 4.1117343e-07, 0.90898305, 8.933351e-07, 0.0015637449, 0.00013868928, 9.092981e-06, 4.8759745e-07, 4.3976044e-07, 0.00016094849, 3.5653954e-07, 0.0760521, 0.8927447, 0.0011777573, 0.00265573, 0.027189083, 4.1892267e-06, 1.329405e-05, 1.8564688e-06, 1.3373891e-06, 1.0251247e-07, 8.651912e-09, 4.458202e-06, 1.4646349e-05, 1.260957e-06, 1.046087e-08, 0.9998946, 8.332438e-05, 3.900894e-07, 6.53852e-05, 3.012202e-08, 1.0247197e-07, 1.8824371e-06, 0.0004958526, 3.533475e-05, 2.739997e-07, 0.99939275, 4.840305e-06, 3.5346695e-06, 0.0005518078, 3.1597017e-07, 0.99902296, 0.00031509742, 8.07886e-07, 1.6366084e-06, 2.795575e-06, 6.112367e-06, 9.817249e-05, 2.602709e-07, 0.0004561966, 5.360607e-06, 2.8656412e-05, 0.000116040654, 6.881144e-05, 8.844774e-06, 4.4655946e-05, 3.5564542e-05, 0.006564381, 0.9926715, 0.007300911, 1.766928e-06, 3.0520596e-07, 0.026906287, 1.3769699e-06, 0.00027539674, 5.583593e-06, 3.792553e-06, 0.0003876767, 0.9651169, 0.18114138, 2.8360228e-05, 0.00019927241, 0.007685872, 0.00014663498, 3.9361137e-05, 5.941682e-05, 7.36174e-05, 0.79936546, 0.01126067, 2.3992783e-11, 7.6336457e-16, 1.4644799e-15, 1, 2.4652159e-14, 1.1786078e-10, 1.9402116e-13, 4.2408636e-15, 1.209294e-15, 2.9042784e-15, 1.5366902e-08, 1.2476195e-09, 1.3560152e-07, 0.999997, 4.3113017e-11, 2.8163534e-08, 2.4494727e-06, 1.3122828e-10, 3.8081083e-07, 2.1628158e-11, 0.0004926238, 6.9424555e-06, 2.827196e-05, 0.92534137, 9.500486e-06, 0.00036133997, 0.072713904, 1.2831057e-07, 0.0010457055, 2.8514464e-07], 'name': 'fc10', 'shape': [20, 10], 'datatype': 'FP32'}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect cifar10-production.cifar10-drift.outputs.is_drift\n\n\nseldon.default.model.cifar10-drift.outputs\tcifeij8fh5ss738i5bp0\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"0\"]}}\n\n\n\ninfer(\"cifar10-production.pipeline\",20, \"drift\")\n\n\n![png](infer_files/infer_16_0.png)\n\n\n\n![png](infer_files/infer_16_1.png)\n\n\n\n![png](infer_files/infer_16_2.png)\n\n\n\n![png](infer_files/infer_16_3.png)\n\n\n\n![png](infer_files/infer_16_4.png)\n\n\n\n![png](infer_files/infer_16_5.png)\n\n\n\n![png](infer_files/infer_16_6.png)\n\n\n\n![png](infer_files/infer_16_7.png)\n\n\n\n![png](infer_files/infer_16_8.png)\n\n\n\n![png](infer_files/infer_16_9.png)\n\n\n\n![png](infer_files/infer_16_10.png)\n\n\n\n![png](infer_files/infer_16_11.png)\n\n\n\n![png](infer_files/infer_16_12.png)\n\n\n\n![png](infer_files/infer_16_13.png)\n\n\n\n![png](infer_files/infer_16_14.png)\n\n\n\n![png](infer_files/infer_16_15.png)\n\n\n\n![png](infer_files/infer_16_16.png)\n\n\n\n![png](infer_files/infer_16_17.png)\n\n\n\n![png](infer_files/infer_16_18.png)\n\n\n\n![png](infer_files/infer_16_19.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [8.080701e-09, 2.3025173e-12, 2.2681688e-09, 1, 4.1828953e-11, 4.48467e-09, 3.216822e-08, 2.8404365e-13, 5.217064e-09, 3.3497323e-13, 0.96965235, 4.7030144e-06, 1.6964266e-07, 1.7355454e-05, 2.6667e-06, 1.9505828e-06, 1.1363079e-07, 3.3352034e-08, 0.030320557, 1.7086056e-07, 0.03725602, 6.8623276e-06, 7.5557014e-05, 0.00018132397, 2.2838503e-05, 0.000110639296, 2.3732607e-06, 2.1210687e-06, 0.9623351, 7.131072e-06, 0.999079, 4.207448e-09, 1.5788535e-08, 2.723756e-08, 2.6555508e-11, 2.1526697e-10, 2.7599315e-10, 2.0737433e-10, 0.0009210062, 3.0885383e-09, 6.665241e-07, 1.7765576e-09, 1.4911559e-07, 0.9765331, 1.9476123e-07, 2.8244015e-06, 0.023463126, 5.8030287e-09, 3.243206e-09, 1.12179785e-08, 4.4123663e-06, 4.7628927e-09, 1.1727273e-08, 0.9761534, 1.1409252e-08, 8.922882e-05, 0.023752932, 3.1563903e-08, 2.7916305e-09, 8.7746266e-10, 1.0166265e-05, 0.999703, 4.5408615e-05, 0.00022673907, 1.7365853e-07, 1.0147362e-06, 6.253448e-06, 2.9711526e-07, 7.811687e-07, 6.183683e-06, 0.86618125, 5.47548e-07, 0.00038408802, 0.013155022, 3.6916779e-06, 0.0006137024, 0.11965008, 3.6425424e-06, 6.7638084e-06, 1.2372367e-06, 1.9545263e-05, 1.1281859e-13, 1.6811868e-14, 0.9999777, 1.9805435e-11, 2.7563674e-06, 2.9651657e-09, 1.1363432e-12,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "a7308088-6525-47e9-b9cd-07fe2fbe76f9", "page": "examples/cifar10", "section": "cifar10-image-classification-production-deployment", "text": "2.2838503e-05, 0.000110639296, 2.3732607e-06, 2.1210687e-06, 0.9623351, 7.131072e-06, 0.999079, 4.207448e-09, 1.5788535e-08, 2.723756e-08, 2.6555508e-11, 2.1526697e-10, 2.7599315e-10, 2.0737433e-10, 0.0009210062, 3.0885383e-09, 6.665241e-07, 1.7765576e-09, 1.4911559e-07, 0.9765331, 1.9476123e-07, 2.8244015e-06, 0.023463126, 5.8030287e-09, 3.243206e-09, 1.12179785e-08, 4.4123663e-06, 4.7628927e-09, 1.1727273e-08, 0.9761534, 1.1409252e-08, 8.922882e-05, 0.023752932, 3.1563903e-08, 2.7916305e-09, 8.7746266e-10, 1.0166265e-05, 0.999703, 4.5408615e-05, 0.00022673907, 1.7365853e-07, 1.0147362e-06, 6.253448e-06, 2.9711526e-07, 7.811687e-07, 6.183683e-06, 0.86618125, 5.47548e-07, 0.00038408802, 0.013155022, 3.6916779e-06, 0.0006137024, 0.11965008, 3.6425424e-06, 6.7638084e-06, 1.2372367e-06, 1.9545263e-05, 1.1281859e-13, 1.6811868e-14, 0.9999777, 1.9805435e-11, 2.7563674e-06, 2.9651657e-09, 1.1363432e-12, 2.9902746e-13, 1.220973e-12, 2.9895918e-05, 3.4964305e-07, 1.1331837e-08, 1.7012125e-06, 3.6088227e-07, 3.035954e-08, 2.2102333e-06, 1.7414077e-08, 0.9999455, 1.9921794e-05, 0.9999999, 5.3446598e-11, 6.3188843e-10, 1.0956511e-07, 1.1538642e-10, 8.113561e-10, 4.7179572e-08, 1.4544753e-11, 5.490219e-08, 1.3347151e-10, 1.5363307e-07, 6.604881e-09, 2.424105e-10, 9.963063e-09, 3.9349533e-09, 1.5709017e-09, 7.705774e-10, 4.8085802e-08, 1.8885139e-05, 0.9999809, 7.147243e-08, 3.143131e-13, 2.1447092e-13, 0.00042652222, 6.945973e-12, 0.9995734, 6.174434e-09, 4.1128205e-11, 3.4031404e-13, 8.573159e-15, 1.2226405e-09, 2.3768018e-10, 2.822187e-07, 8.016278e-08, 4.0692296e-08, 6.8023346e-06, 2.3926754e-07, 0.9999925, 6.652648e-09, 7.743497e-09, 7.6360675e-06, 5.9386625e-09, 1.5675019e-09, 2.136716e-07, 1.3074002e-06, 3.700079e-10, 1.0984521e-09, 6.2138824e-08, 0.9609078, 0.03908287, 0.0008332255, 7.696685e-08, 2.4428939e-09, 7.186676e-05, 1.4520063e-09, 1.4521317e-08, 1.09093e-06, 1.2531165e-10, 0.9990938, 5.798501e-09, 5.785368e-05, 3.82365e-09, 7.404351e-08, 0.008338481, 8.048078e-10, 0.99157715, 1.1663455e-05, 1.4583546e-05, 8.3543476e-08, 3.274394e-08, 2.4682688e-05, 1.3951502e-09, 1.0260489e-08, 0.9998845, 1.9418138e-08, 8.667954e-07, 2.1851054e-07, 8.917964e-05, 4.4437223e-07, 1.1292918e-07, 4.5302792e-07, 5.631744e-08, 2.9086214e-08, 3.1013877e-07, 7.695681e-09, 2.1452344e-09, 1.1493902e-08, 6.1980093e-10, 0.99999917, 1.1436694e-08, 2.42685e-05, 8.557389e-08, 0.024081504, 0.0073837163, 4.8152968e-05, 5.128531e-07, 0.9684405, 9.630179e-08, 2.1060101e-05, 1.901065e-07], 'name': 'fc10', 'shape': [20, 10], 'datatype': 'FP32'}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect cifar10-production.cifar10-drift.outputs.is_drift\n\n\nseldon.default.model.cifar10-drift.outputs\tcifeimgfh5ss738i5bpg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\ninfer(\"cifar10-production.pipeline\",1, \"outlier\")\n\n\n![png](infer_files/infer_18_0.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [6.3606867e-06, 0.0006106364, 0.0054279356, 0.6536454, 1.4738829e-05, 2.6104701e-06, 0.3397848, 1.3538776e-05, 0.0004458526, 4.807229e-05], 'name': 'fc10', 'shape': [1, 10], 'datatype': 'FP32'}, {'data': [1], 'name': 'is_outlier', 'shape': [1, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\ninfer(\"cifar10-production.pipeline\",1,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "a6a99ffa-2d7b-455e-a17a-aaa1cb2b0ff2", "page": "examples/cifar10", "section": "cifar10-image-classification-production-deployment", "text": "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect cifar10-production.cifar10-drift.outputs.is_drift\n\n\nseldon.default.model.cifar10-drift.outputs\tcifeimgfh5ss738i5bpg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\ninfer(\"cifar10-production.pipeline\",1, \"outlier\")\n\n\n![png](infer_files/infer_18_0.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [6.3606867e-06, 0.0006106364, 0.0054279356, 0.6536454, 1.4738829e-05, 2.6104701e-06, 0.3397848, 1.3538776e-05, 0.0004458526, 4.807229e-05], 'name': 'fc10', 'shape': [1, 10], 'datatype': 'FP32'}, {'data': [1], 'name': 'is_outlier', 'shape': [1, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\ninfer(\"cifar10-production.pipeline\",1, \"ok\")\n\n\n![png](infer_files/infer_19_0.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [1.45001495e-08, 1.2525752e-09, 1.6298458e-07, 0.11529388, 1.7431412e-07, 6.1856604e-06, 0.8846994, 6.0739285e-09, 7.43792e-08, 4.7317337e-09], 'name': 'fc10', 'shape': [1, 10], 'datatype': 'FP32'}, {'data': [0], 'name': 'is_outlier', 'shape': [1, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nUse the seldon CLI to look at the outputs from the CIFAR10 model. It will decode the Triton binary outputs for us.\nseldon pipeline inspect cifar10-production.cifar10.outputs\n\n\nseldon.default.model.cifar10.outputs\tcifeiq8fh5ss738i5bqg\t{\"modelName\":\"cifar10_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"fc10\", \"datatype\":\"FP32\", \"shape\":[\"1\", \"10\"], \"contents\":{\"fp32Contents\":[1.45001495e-8, 1.2525752e-9, 1.6298458e-7, 0.11529388, 1.7431412e-7, 0.0000061856604, 0.8846994, 6.0739285e-9, 7.43792e-8, 4.7317337e-9]}}]}\n\n\n\nseldon pipeline unload cifar10-production\n\n\nseldon model unload cifar10\nseldon model unload cifar10-outlier\nseldon model unload cifar10-drift\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "23c6ee4d-e6dd-4251-8134-36664e45d531", "page": "examples/cifar10", "section": "model-training-optional-for-notebook", "text": "\nModel Training (optional for notebook)\u00b6\nTo run local training run the training notebook.\nimport requests\nimport json\nfrom typing import Dict, List\nimport numpy as np\nimport os\nimport tensorflow as tf\nfrom alibi_detect.utils.perturbation import apply_mask\nfrom alibi_detect.datasets import fetch_cifar10c\nimport matplotlib.pyplot as plt\ntf.keras.backend.clear_session()\n\n\n2023-06-30 15:39:28.732453: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n2023-06-30 15:39:28.732465: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n\n\n\ntrain, test = tf.keras.datasets.cifar10.load_data()\nX_train, y_train = train\nX_test, y_test = test\n\nX_train = X_train.astype('float32') / 255\nX_test = X_test.astype('float32') / 255\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nclasses = (\n    \"plane\",\n    \"car\",\n    \"bird\",\n    \"cat\",\n    \"deer\",\n    \"dog\",\n    \"frog\",\n    \"horse\",\n    \"ship\",\n    \"truck\",\n)\n\n\n\n(50000, 32, 32, 3) (50000, 1) (10000, 32, 32, 3) (10000, 1)\n\n\n\noutliers = []\nfor idx in range(0,X_train.shape[0]):\n    X_mask, mask = apply_mask(X_train[idx].reshape(1, 32, 32, 3),\n                                  mask_size=(14,14),\n                                  n_masks=1,\n                          ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "eb7819fd-04a4-4a00-9db0-8dd8795e4c48", "page": "examples/cifar10", "section": "model-training-optional-for-notebook", "text": "   mask_size=(14,14),\n                                  n_masks=1,\n                                  channels=[0,1,2],\n                                  mask_type='normal',\n                                  noise_distr=(0,1),\n                                  clip_rng=(0,1))\n    outliers.append(X_mask)\nX_outliers = np.vstack(outliers)\nX_outliers.shape\n\n\n(50000, 32, 32, 3)\n\n\n\ncorruption = ['brightness']\nX_corr, y_corr = fetch_cifar10c(corruption=corruption, severity=5, return_X_y=True)\nX_corr = X_corr.astype('float32') / 255\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\n\ndef infer(resourceName: str, batchSz: int, requestType: str):\n    if requestType == \"outlier\":\n        rows = X_outliers[0:0+batchSz]\n    elif requestType == \"drift\":\n        rows = X_corr[0:0+batchSz]\n    else:\n        rows = X_train[0:0+batchSz]\n    for", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "935c42e5-e198-4044-b3fa-7a9869da4d27", "page": "examples/cifar10", "section": "model-training-optional-for-notebook", "text": "/ 255\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\n\ndef infer(resourceName: str, batchSz: int, requestType: str):\n    if requestType == \"outlier\":\n        rows = X_outliers[0:0+batchSz]\n    elif requestType == \"drift\":\n        rows = X_corr[0:0+batchSz]\n    else:\n        rows = X_train[0:0+batchSz]\n    for i in range(batchSz):\n        show(rows[i])\n    reqJson[\"inputs\"][0][\"data\"] = rows.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [batchSz, 32, 32, 3]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":resourceName}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    print(response_raw)\n    print(response_raw.json())\n\n\ndef show(X):\n    plt.imshow(X.reshape(32, 32, 3))\n    plt.axis(\"off\")\n    plt.show()\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "2dca119d-f6e8-48dc-8ce8-ca1b8df05232", "page": "examples/cifar10", "section": "pipeline", "text": "\nPipeline\u00b6\ncat ../../models/cifar10.yaml\necho \"---\"\ncat ../../models/cifar10-outlier-detect.yaml\necho \"---\"\ncat ../../models/cifar10-drift-detect.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10\nspec:\n  storageUri: \"gs://seldon-models/triton/tf_cifar10\"\n  requirements:\n  - tensorflow\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/cifar10.yaml\nseldon model load -f ../../models/cifar10-outlier-detect.yaml\nseldon model load -f ../../models/cifar10-drift-detect.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status cifar10 -w ModelAvailable | jq .\nseldon model status cifar10-outlier -w ModelAvailable | jq .\nseldon model status cifar10-drift -w ModelAvailable | jq .\n\n\n{}\n{}\n{}\n\n\ncat ../../pipelines/cifar10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: cifar10-production\nspec:\n  steps:\n    - name: cifar10\n    - name: cifar10-outlier\n    - name: cifar10-drift\n      batch:\n        size: 20\n  output:\n    steps:\n    - cifar10\n    - cifar10-outlier.outputs.is_outlier\n\n\nseldon pipeline load -f ../../pipelines/cifar10.yaml\n\n\nseldon pipeline status cifar10-production -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"cifar10-production\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"cifar10-production\",\n        \"uid\": \"cifeii2ufmbc73e5insg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"cifar10\"\n          },\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "d5fe03d2-073b-4214-aa5b-75c1b1e14f83", "page": "examples/cifar10", "section": "pipeline", "text": "      \"uid\": \"cifeii2ufmbc73e5insg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"cifar10\"\n          },\n          {\n            \"name\": \"cifar10-drift\",\n            \"batch\": {\n              \"size\": 20\n            }\n          },\n          {\n            \"name\": \"cifar10-outlier\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"cifar10.outputs\",\n            \"cifar10-outlier.outputs.is_outlier\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "5d9ea71f-366e-408f-a375-81934fcddfc7", "page": "examples/cifar10", "section": "pipeline", "text": "[\n            \"cifar10.outputs\",\n            \"cifar10-outlier.outputs.is_outlier\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:40:09.047429817Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\ninfer(\"cifar10-production.pipeline\",20, \"normal\")\n\n\n![png](infer_files/infer_14_0.png)\n\n\n\n![png](infer_files/infer_14_1.png)\n\n\n\n![png](infer_files/infer_14_2.png)\n\n\n\n![png](infer_files/infer_14_3.png)\n\n\n\n![png](infer_files/infer_14_4.png)\n\n\n\n![png](infer_files/infer_14_5.png)\n\n\n\n![png](infer_files/infer_14_6.png)\n\n\n\n![png](infer_files/infer_14_7.png)\n\n\n\n![png](infer_files/infer_14_8.png)\n\n\n\n![png](infer_files/infer_14_9.png)\n\n\n\n![png](infer_files/infer_14_10.png)\n\n\n\n![png](infer_files/infer_14_11.png)\n\n\n\n![png](infer_files/infer_14_12.png)\n\n\n\n![png](infer_files/infer_14_13.png)\n\n\n\n![png](infer_files/infer_14_14.png)\n\n\n\n![png](infer_files/infer_14_15.png)\n\n\n\n![png](infer_files/infer_14_16.png)\n\n\n\n![png](infer_files/infer_14_17.png)\n\n\n\n![png](infer_files/infer_14_18.png)\n\n\n\n![png](infer_files/infer_14_19.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [1.45001495e-08, 1.2525752e-09, 1.6298458e-07, 0.11529388, 1.7431412e-07, 6.1856604e-06, 0.8846994, 6.0739285e-09, 7.437921e-08, 4.7317337e-09, 1.26449e-06, 4.8814868e-09, 1.5153439e-09, 8.490656e-09, 5.5131194e-10, 1.1617216e-09, 5.7729294e-10, 2.8839776e-07, 0.0006149016, 0.99938357, 0.888746, 2.5331951e-06, 0.00012967695, 0.10531583, 2.4284174e-05, 6.3332986e-06, 0.0016261435, 1.13079e-05, 0.0013286703, 0.0028091935, 2.0993439e-06, 3.680449e-08, 0.0013269952, 2.1766558e-05, 0.99841356, 0.00015300694, 6.9472035e-06, 1.3277059e-05, 6.1860555e-05, 3.4072806e-07, 1.1205097e-05, 0.99997175, 1.9948227e-07, 6.9880834e-08, 3.3387135e-08, 5.2603138e-08, 3.0352305e-07, 4.3738982e-08, 5.3243946e-07, 1.5870584e-05, 0.0006525102, 0.013322109, 1.480307e-06, 0.9766325, 4.9847167e-05, 0.00058075984, 0.008405659, 5.2234273e-06, 0.00023390084, 0.000116047224, 1.6682397e-06, 5.7737526e-10, 0.9975605, 6.45564e-05, 0.002371972, 1.0392675e-07, 9.747962e-08, 1.4484569e-07, 8.762438e-07, 2.4758325e-08, 5.028761e-09, 6.856381e-11, 5.9932094e-12, 4.921233e-10, 1.471166e-07, 2.7940719e-06, 3.4563383e-09, 0.99999714, 5.9420524e-10, 9.445026e-11, 4.1854888e-05, 5.041549e-08, 8.0302314e-08, 1.2119854e-07, 6.781646e-09, 1.2616152e-08, 1.1878505e-08, 1.628573e-09, 0.9999578, 3.281738e-08, 0.08930307, 1.4065135e-07, 4.1117343e-07, 0.90898305, 8.933351e-07, 0.0015637449, 0.00013868928, 9.092981e-06, 4.8759745e-07, 4.3976044e-07, 0.00016094849, 3.5653954e-07, 0.0760521, 0.8927447, 0.0011777573, 0.00265573, 0.027189083, 4.1892267e-06, 1.329405e-05, 1.8564688e-06, 1.3373891e-06, 1.0251247e-07, 8.651912e-09, 4.458202e-06, 1.4646349e-05, 1.260957e-06, 1.046087e-08, 0.9998946, 8.332438e-05, 3.900894e-07, 6.53852e-05, 3.012202e-08, 1.0247197e-07, 1.8824371e-06, 0.0004958526, 3.533475e-05, 2.739997e-07, 0.99939275,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "c1347d55-5ac7-4c95-b296-5f83cf3af622", "page": "examples/cifar10", "section": "pipeline", "text": "0.002371972, 1.0392675e-07, 9.747962e-08, 1.4484569e-07, 8.762438e-07, 2.4758325e-08, 5.028761e-09, 6.856381e-11, 5.9932094e-12, 4.921233e-10, 1.471166e-07, 2.7940719e-06, 3.4563383e-09, 0.99999714, 5.9420524e-10, 9.445026e-11, 4.1854888e-05, 5.041549e-08, 8.0302314e-08, 1.2119854e-07, 6.781646e-09, 1.2616152e-08, 1.1878505e-08, 1.628573e-09, 0.9999578, 3.281738e-08, 0.08930307, 1.4065135e-07, 4.1117343e-07, 0.90898305, 8.933351e-07, 0.0015637449, 0.00013868928, 9.092981e-06, 4.8759745e-07, 4.3976044e-07, 0.00016094849, 3.5653954e-07, 0.0760521, 0.8927447, 0.0011777573, 0.00265573, 0.027189083, 4.1892267e-06, 1.329405e-05, 1.8564688e-06, 1.3373891e-06, 1.0251247e-07, 8.651912e-09, 4.458202e-06, 1.4646349e-05, 1.260957e-06, 1.046087e-08, 0.9998946, 8.332438e-05, 3.900894e-07, 6.53852e-05, 3.012202e-08, 1.0247197e-07, 1.8824371e-06, 0.0004958526, 3.533475e-05, 2.739997e-07, 0.99939275, 4.840305e-06, 3.5346695e-06, 0.0005518078, 3.1597017e-07, 0.99902296, 0.00031509742, 8.07886e-07, 1.6366084e-06, 2.795575e-06, 6.112367e-06, 9.817249e-05, 2.602709e-07, 0.0004561966, 5.360607e-06, 2.8656412e-05, 0.000116040654, 6.881144e-05, 8.844774e-06, 4.4655946e-05, 3.5564542e-05, 0.006564381, 0.9926715, 0.007300911, 1.766928e-06, 3.0520596e-07, 0.026906287, 1.3769699e-06, 0.00027539674, 5.583593e-06, 3.792553e-06, 0.0003876767, 0.9651169, 0.18114138, 2.8360228e-05, 0.00019927241, 0.007685872, 0.00014663498, 3.9361137e-05, 5.941682e-05, 7.36174e-05, 0.79936546, 0.01126067, 2.3992783e-11, 7.6336457e-16, 1.4644799e-15, 1, 2.4652159e-14, 1.1786078e-10, 1.9402116e-13, 4.2408636e-15, 1.209294e-15, 2.9042784e-15, 1.5366902e-08, 1.2476195e-09, 1.3560152e-07, 0.999997, 4.3113017e-11, 2.8163534e-08, 2.4494727e-06, 1.3122828e-10, 3.8081083e-07, 2.1628158e-11, 0.0004926238, 6.9424555e-06, 2.827196e-05, 0.92534137, 9.500486e-06, 0.00036133997, 0.072713904, 1.2831057e-07, 0.0010457055, 2.8514464e-07], 'name': 'fc10', 'shape': [20, 10], 'datatype': 'FP32'}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect cifar10-production.cifar10-drift.outputs.is_drift\n\n\nseldon.default.model.cifar10-drift.outputs\tcifeij8fh5ss738i5bp0\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"0\"]}}\n\n\n\ninfer(\"cifar10-production.pipeline\",20, \"drift\")\n\n\n![png](infer_files/infer_16_0.png)\n\n\n\n![png](infer_files/infer_16_1.png)\n\n\n\n![png](infer_files/infer_16_2.png)\n\n\n\n![png](infer_files/infer_16_3.png)\n\n\n\n![png](infer_files/infer_16_4.png)\n\n\n\n![png](infer_files/infer_16_5.png)\n\n\n\n![png](infer_files/infer_16_6.png)\n\n\n\n![png](infer_files/infer_16_7.png)\n\n\n\n![png](infer_files/infer_16_8.png)\n\n\n\n![png](infer_files/infer_16_9.png)\n\n\n\n![png](infer_files/infer_16_10.png)\n\n\n\n![png](infer_files/infer_16_11.png)\n\n\n\n![png](infer_files/infer_16_12.png)\n\n\n\n![png](infer_files/infer_16_13.png)\n\n\n\n![png](infer_files/infer_16_14.png)\n\n\n\n![png](infer_files/infer_16_15.png)\n\n\n\n![png](infer_files/infer_16_16.png)\n\n\n\n![png](infer_files/infer_16_17.png)\n\n\n\n![png](infer_files/infer_16_18.png)\n\n\n\n![png](infer_files/infer_16_19.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [8.080701e-09, 2.3025173e-12, 2.2681688e-09, 1, 4.1828953e-11, 4.48467e-09, 3.216822e-08, 2.8404365e-13, 5.217064e-09, 3.3497323e-13, 0.96965235, 4.7030144e-06, 1.6964266e-07, 1.7355454e-05, 2.6667e-06, 1.9505828e-06, 1.1363079e-07, 3.3352034e-08, 0.030320557, 1.7086056e-07, 0.03725602, 6.8623276e-06, 7.5557014e-05, 0.00018132397, 2.2838503e-05, 0.000110639296, 2.3732607e-06, 2.1210687e-06, 0.9623351, 7.131072e-06, 0.999079, 4.207448e-09, 1.5788535e-08, 2.723756e-08, 2.6555508e-11, 2.1526697e-10, 2.7599315e-10, 2.0737433e-10, 0.0009210062, 3.0885383e-09, 6.665241e-07, 1.7765576e-09, 1.4911559e-07, 0.9765331, 1.9476123e-07, 2.8244015e-06, 0.023463126, 5.8030287e-09, 3.243206e-09, 1.12179785e-08, 4.4123663e-06, 4.7628927e-09, 1.1727273e-08, 0.9761534, 1.1409252e-08, 8.922882e-05, 0.023752932, 3.1563903e-08, 2.7916305e-09, 8.7746266e-10, 1.0166265e-05, 0.999703, 4.5408615e-05, 0.00022673907, 1.7365853e-07, 1.0147362e-06, 6.253448e-06, 2.9711526e-07, 7.811687e-07,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "4db10544-13a7-465b-b571-790839f99ec7", "page": "examples/cifar10", "section": "pipeline", "text": "4.48467e-09, 3.216822e-08, 2.8404365e-13, 5.217064e-09, 3.3497323e-13, 0.96965235, 4.7030144e-06, 1.6964266e-07, 1.7355454e-05, 2.6667e-06, 1.9505828e-06, 1.1363079e-07, 3.3352034e-08, 0.030320557, 1.7086056e-07, 0.03725602, 6.8623276e-06, 7.5557014e-05, 0.00018132397, 2.2838503e-05, 0.000110639296, 2.3732607e-06, 2.1210687e-06, 0.9623351, 7.131072e-06, 0.999079, 4.207448e-09, 1.5788535e-08, 2.723756e-08, 2.6555508e-11, 2.1526697e-10, 2.7599315e-10, 2.0737433e-10, 0.0009210062, 3.0885383e-09, 6.665241e-07, 1.7765576e-09, 1.4911559e-07, 0.9765331, 1.9476123e-07, 2.8244015e-06, 0.023463126, 5.8030287e-09, 3.243206e-09, 1.12179785e-08, 4.4123663e-06, 4.7628927e-09, 1.1727273e-08, 0.9761534, 1.1409252e-08, 8.922882e-05, 0.023752932, 3.1563903e-08, 2.7916305e-09, 8.7746266e-10, 1.0166265e-05, 0.999703, 4.5408615e-05, 0.00022673907, 1.7365853e-07, 1.0147362e-06, 6.253448e-06, 2.9711526e-07, 7.811687e-07, 6.183683e-06, 0.86618125, 5.47548e-07, 0.00038408802, 0.013155022, 3.6916779e-06, 0.0006137024, 0.11965008, 3.6425424e-06, 6.7638084e-06, 1.2372367e-06, 1.9545263e-05, 1.1281859e-13, 1.6811868e-14, 0.9999777, 1.9805435e-11, 2.7563674e-06, 2.9651657e-09, 1.1363432e-12, 2.9902746e-13, 1.220973e-12, 2.9895918e-05, 3.4964305e-07, 1.1331837e-08, 1.7012125e-06, 3.6088227e-07, 3.035954e-08, 2.2102333e-06, 1.7414077e-08, 0.9999455, 1.9921794e-05, 0.9999999, 5.3446598e-11, 6.3188843e-10, 1.0956511e-07, 1.1538642e-10, 8.113561e-10, 4.7179572e-08, 1.4544753e-11, 5.490219e-08, 1.3347151e-10, 1.5363307e-07, 6.604881e-09, 2.424105e-10, 9.963063e-09, 3.9349533e-09, 1.5709017e-09, 7.705774e-10, 4.8085802e-08, 1.8885139e-05, 0.9999809, 7.147243e-08, 3.143131e-13, 2.1447092e-13, 0.00042652222, 6.945973e-12, 0.9995734, 6.174434e-09, 4.1128205e-11, 3.4031404e-13, 8.573159e-15, 1.2226405e-09, 2.3768018e-10, 2.822187e-07, 8.016278e-08, 4.0692296e-08, 6.8023346e-06, 2.3926754e-07, 0.9999925, 6.652648e-09, 7.743497e-09, 7.6360675e-06, 5.9386625e-09, 1.5675019e-09, 2.136716e-07, 1.3074002e-06, 3.700079e-10, 1.0984521e-09, 6.2138824e-08, 0.9609078, 0.03908287, 0.0008332255, 7.696685e-08, 2.4428939e-09, 7.186676e-05, 1.4520063e-09, 1.4521317e-08, 1.09093e-06, 1.2531165e-10, 0.9990938, 5.798501e-09, 5.785368e-05, 3.82365e-09, 7.404351e-08, 0.008338481, 8.048078e-10, 0.99157715, 1.1663455e-05, 1.4583546e-05, 8.3543476e-08, 3.274394e-08, 2.4682688e-05, 1.3951502e-09, 1.0260489e-08, 0.9998845, 1.9418138e-08, 8.667954e-07, 2.1851054e-07, 8.917964e-05, 4.4437223e-07, 1.1292918e-07, 4.5302792e-07, 5.631744e-08, 2.9086214e-08, 3.1013877e-07, 7.695681e-09, 2.1452344e-09, 1.1493902e-08, 6.1980093e-10, 0.99999917, 1.1436694e-08, 2.42685e-05, 8.557389e-08, 0.024081504, 0.0073837163, 4.8152968e-05, 5.128531e-07, 0.9684405, 9.630179e-08, 2.1060101e-05, 1.901065e-07], 'name': 'fc10', 'shape': [20, 10], 'datatype': 'FP32'}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect cifar10-production.cifar10-drift.outputs.is_drift\n\n\nseldon.default.model.cifar10-drift.outputs\tcifeimgfh5ss738i5bpg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\ninfer(\"cifar10-production.pipeline\",1, \"outlier\")\n\n\n![png](infer_files/infer_18_0.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [6.3606867e-06, 0.0006106364, 0.0054279356, 0.6536454, 1.4738829e-05, 2.6104701e-06, 0.3397848, 1.3538776e-05, 0.0004458526, 4.807229e-05],", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "d86130d3-a3b1-417d-b672-bbab299ba074", "page": "examples/cifar10", "section": "pipeline", "text": "9.630179e-08, 2.1060101e-05, 1.901065e-07], 'name': 'fc10', 'shape': [20, 10], 'datatype': 'FP32'}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect cifar10-production.cifar10-drift.outputs.is_drift\n\n\nseldon.default.model.cifar10-drift.outputs\tcifeimgfh5ss738i5bpg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\ninfer(\"cifar10-production.pipeline\",1, \"outlier\")\n\n\n![png](infer_files/infer_18_0.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [6.3606867e-06, 0.0006106364, 0.0054279356, 0.6536454, 1.4738829e-05, 2.6104701e-06, 0.3397848, 1.3538776e-05, 0.0004458526, 4.807229e-05], 'name': 'fc10', 'shape': [1, 10], 'datatype': 'FP32'}, {'data': [1], 'name': 'is_outlier', 'shape': [1, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\ninfer(\"cifar10-production.pipeline\",1, \"ok\")\n\n\n![png](infer_files/infer_19_0.png)\n\n\n\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [1.45001495e-08, 1.2525752e-09, 1.6298458e-07, 0.11529388, 1.7431412e-07, 6.1856604e-06, 0.8846994, 6.0739285e-09, 7.43792e-08, 4.7317337e-09], 'name': 'fc10', 'shape': [1, 10], 'datatype': 'FP32'}, {'data': [0], 'name': 'is_outlier', 'shape': [1, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nUse the seldon CLI to look at the outputs from the CIFAR10 model. It will decode the Triton binary outputs for us.\nseldon pipeline inspect cifar10-production.cifar10.outputs\n\n\nseldon.default.model.cifar10.outputs\tcifeiq8fh5ss738i5bqg\t{\"modelName\":\"cifar10_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"fc10\", \"datatype\":\"FP32\", \"shape\":[\"1\", \"10\"], \"contents\":{\"fp32Contents\":[1.45001495e-8, 1.2525752e-9, 1.6298458e-7, 0.11529388, 1.7431412e-7, 0.0000061856604, 0.8846994, 6.0739285e-9, 7.43792e-8, 4.7317337e-9]}}]}\n\n\n\nseldon pipeline unload cifar10-production\n\n\nseldon model unload cifar10\nseldon model unload cifar10-outlier\nseldon model unload cifar10-drift\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/cifar10.html", "key": "examples/cifar10"}}, {"key": "180c3b6f-288c-4d31-86b8-32ca565f1a7f", "page": "getting-started/kubernetes-installation/security/confluent-sasl", "section": "confluent-cloud-sasl-example", "text": "\nConfluent Cloud SASL Example\u00b6\n\nNew in Seldon Core 2.5.0\n\nSeldon Core v2 can integrate with Confluent Cloud managed Kafka.\nIn this example we use SASL security mechanism.\n\nCreate API Keys\u00b6\nIn your Confluent Cloud environment create new API keys.\nThe easiest way to obtain all required information is to head to Clients -> New client (choose e.g. Go) and generate new Kafka cluster API key from there.\nThis will generate for you:\n\nKey (we use it as username)\nSecret (we use it as password)\n\nDo not forget to also copy the bootstrap.servers from the example config.\nSee Confluent Cloud documentation in case of issues.\n\n\nCreate Kubernetes Secret\u00b6\nSeldon Core v2 expects password to be in form of K8s secret\nkubectl create secret generic confluent-kafka-sasl -n seldon-mesh --from-literal password=\"<Confluent Cloud API Secret>\"\n\n\n\n\nConfigure Seldon Core v2\u00b6\nConfigure Seldon Core v2 by setting following Helm values:\nkafka:\n  bootstrap: < Confluent Cloud Broker Endpoints >\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n  consumer:\n    messageMaxBytes: 8388608\n  producer:\n    messageMaxBytes: 8388608\n\nsecurity:\n  kafka:\n    protocol: SASL_SSL\n    sasl:\n      mechanism: \"PLAIN\"\n      client:\n        username: < username >\n        secret: confluent-kafka-sasl\n    ssl:\n      client:\n        secret:\n        brokerValidationSecret:\n\n\nNote you may need to tweak replicationFactor and numPartitions to your cluster configuration.\n\n\nTroubleshooting\u00b6\n\nFirst check Confluent Cloud documentation.\nSet the kafka config map debug setting to all.", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/confluent-sasl.html", "key": "getting-started/kubernetes-installation/security/confluent-sasl"}}, {"key": "3fac7302-6060-488d-a287-a37ec371a530", "page": "getting-started/kubernetes-installation/security/confluent-sasl", "section": "confluent-cloud-sasl-example", "text": " username: < username >\n        secret: confluent-kafka-sasl\n    ssl:\n      client:\n        secret:\n        brokerValidationSecret:\n\n\nNote you may need to tweak replicationFactor and numPartitions to your cluster configuration.\n\n\nTroubleshooting\u00b6\n\nFirst check Confluent Cloud documentation.\nSet the kafka config map debug setting to all. For Helm install you can set kafka.debug=all.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/confluent-sasl.html", "key": "getting-started/kubernetes-installation/security/confluent-sasl"}}, {"key": "45f1aded-f22f-4788-a301-46d61da21e43", "page": "getting-started/kubernetes-installation/security/confluent-sasl", "section": "create-api-keys", "text": "\nCreate API Keys\u00b6\nIn your Confluent Cloud environment create new API keys.\nThe easiest way to obtain all required information is to head to Clients -> New client (choose e.g. Go) and generate new Kafka cluster API key from there.\nThis will generate for you:\n\nKey (we use it as username)\nSecret (we use it as password)\n\nDo not forget to also copy the bootstrap.servers from the example config.\nSee Confluent Cloud documentation in case of issues.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/confluent-sasl.html", "key": "getting-started/kubernetes-installation/security/confluent-sasl"}}, {"key": "b525ed7a-0513-4a42-a4b6-9af59483f7b0", "page": "getting-started/kubernetes-installation/security/confluent-sasl", "section": "configure-seldon-core-v2", "text": "\nConfigure Seldon Core v2\u00b6\nConfigure Seldon Core v2 by setting following Helm values:\nkafka:\n  bootstrap: < Confluent Cloud Broker Endpoints >\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n  consumer:\n    messageMaxBytes: 8388608\n  producer:\n    messageMaxBytes: 8388608\n\nsecurity:\n  kafka:\n    protocol: SASL_SSL\n    sasl:\n      mechanism: \"PLAIN\"\n      client:\n        username: < username >\n        secret: confluent-kafka-sasl\n    ssl:\n      client:\n        secret:\n        brokerValidationSecret:\n\n\nNote you may need to tweak replicationFactor and numPartitions to your cluster configuration.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/confluent-sasl.html", "key": "getting-started/kubernetes-installation/security/confluent-sasl"}}, {"key": "ed5740be-858e-428b-bee9-eb9ea1a6e3d4", "page": "kubernetes/resources/model", "section": "model", "text": "\nModel\u00b6\nA Model is the core atomic building block. It specifies a machine learning artifact that will be loaded onto one of the running Servers. A model could be a standard machine learning inference component such as\n\na Tensorflow model, PyTorch model or SKLearn model.\nan inference transformation component such as a SKLearn pipeline or a piece of custom python logic.\na monitoring component such as an outlier detector or drift detector.\nAn alibi-explain model explainer\n\nAn example is shown below for a SKLearn model for iris classification:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.5.0/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nIts Kubernetes spec has two core requirements\n\nA storageUri specifying the location of the artifact. This can be any rclone URI specification.\nA requirements list which provides tags that need to be matched by the Server that can run this artifact type. By default when you install Seldon we provide a set of Servers that cover a range of artifact types.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/model/index.html", "key": "kubernetes/resources/model"}}, {"key": "4b873efb-e49a-4de4-bec9-ad635e78196f", "page": "examples/inference", "section": "inference-examples", "text": "\nInference Examples\u00b6\nRun these examples from the samples folder.\n\nInference Examples\u00b6\nWe will show:\n\nModel inference to a Tensorflow model\n\nREST and gRPC using seldon CLI, curl and grpcurl\n\n\nPipeline inference\n\nREST and gRPC using seldon CLI, curl and grpcurl\n\n\n\n%env INFER_ENDPOINT=0.0.0.0:9000\n\n\nenv: INFER_ENDPOINT=0.0.0.0:9000\n\n\n\n\nTensorflow Model\u00b6\ncat ./models/tfsimple1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\n\n\n{}\n\n\nWait for the model to be ready.\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer tfsimple1 --inference-host ${INFER_ENDPOINT} \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"tfsimple1_1\",\n\t\"model_version\": \"1\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model infer tfsimple1 --inference-mode grpc  --inference-host ${INFER_ENDPOINT} \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\ncurl http://${INFER_ENDPOINT}/v2/models/tfsimple1/infer -H \"Content-Type: application/json\" -H \"seldon-model: tfsimple1\" \\\n        -d '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"model_name\":\"tfsimple1_1\",\"model_version\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[1,16],\"data\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[1,16],\"data\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}]}\n\n\ngrpcurl -d '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimple1 \\\n    ${INFER_ENDPOINT} inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"tfsimple1_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/inference.html", "key": "examples/inference"}}, {"key": "011e4118-6481-47ea-a99b-b35f8977358a", "page": "examples/inference", "section": "inference-examples", "text": "     \"1\",\n        \"16\"\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    }\n  ],\n  \"rawOutputContents\": [\n    \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"\n  ]\n}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple\",\"uid\":\"cg5fm6c6dpcs73c4qhe0\",\"version\":1,\"steps\":[{\"name\":\"tfsimple1\"}],\"output\":{\"steps\":[\"tfsimple1.outputs\"]},\"kubernetesMeta\":{}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T09:40:41.317797761Z\",\"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple  --inference-host ${INFER_ENDPOINT} \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline infer tfsimple --inference-mode grpc  --inference-host ${INFER_ENDPOINT} \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\ncurl http://${INFER_ENDPOINT}/v2/models/tfsimple1/infer -H \"Content-Type: application/json\" -H \"seldon-model: tfsimple.pipeline\" \\\n        -d '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"model_name\":\"\",\"outputs\":[{\"data\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32],\"name\":\"OUTPUT0\",\"shape\":[1,16],\"datatype\":\"INT32\"},{\"data\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"name\":\"OUTPUT1\",\"shape\":[1,16],\"datatype\":\"INT32\"}]}\n\n\ngrpcurl -d '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimple.pipeline \\\n    ${INFER_ENDPOINT} inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/inference.html", "key": "examples/inference"}}, {"key": "8fb4e6a5-b09b-4609-b021-46eafe713231", "page": "examples/inference", "section": "inference-examples", "text": " -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimple.pipeline \\\n    ${INFER_ENDPOINT} inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    }\n  ],\n  \"rawOutputContents\": [\n    \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"\n  ]\n}\n\n\nseldon pipeline unload tfsimple\nseldon model unload tfsimple1\n\n\n{}\n{}\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/inference.html", "key": "examples/inference"}}, {"key": "884d79cc-f864-426e-985d-139af670b353", "page": "examples/inference", "section": "id1", "text": "\nInference Examples\u00b6\nWe will show:\n\nModel inference to a Tensorflow model\n\nREST and gRPC using seldon CLI, curl and grpcurl\n\n\nPipeline inference\n\nREST and gRPC using seldon CLI, curl and grpcurl\n\n\n\n%env INFER_ENDPOINT=0.0.0.0:9000\n\n\nenv: INFER_ENDPOINT=0.0.0.0:9000\n\n\n\n\nTensorflow Model\u00b6\ncat ./models/tfsimple1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\n\n\n{}\n\n\nWait for the model to be ready.\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer tfsimple1 --inference-host ${INFER_ENDPOINT} \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"tfsimple1_1\",\n\t\"model_version\": \"1\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model infer tfsimple1 --inference-mode grpc  --inference-host ${INFER_ENDPOINT} \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\ncurl http://${INFER_ENDPOINT}/v2/models/tfsimple1/infer -H \"Content-Type: application/json\" -H \"seldon-model: tfsimple1\" \\\n        -d '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"model_name\":\"tfsimple1_1\",\"model_version\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[1,16],\"data\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[1,16],\"data\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}]}\n\n\ngrpcurl -d '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimple1 \\\n    ${INFER_ENDPOINT} inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"tfsimple1_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/inference.html", "key": "examples/inference"}}, {"key": "3cec921a-2512-4188-85dd-fc4d983b546f", "page": "examples/inference", "section": "id1", "text": "      \"16\"\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    }\n  ],\n  \"rawOutputContents\": [\n    \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"\n  ]\n}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple\",\"uid\":\"cg5fm6c6dpcs73c4qhe0\",\"version\":1,\"steps\":[{\"name\":\"tfsimple1\"}],\"output\":{\"steps\":[\"tfsimple1.outputs\"]},\"kubernetesMeta\":{}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T09:40:41.317797761Z\",\"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple  --inference-host ${INFER_ENDPOINT} \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline infer tfsimple --inference-mode grpc  --inference-host ${INFER_ENDPOINT} \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\ncurl http://${INFER_ENDPOINT}/v2/models/tfsimple1/infer -H \"Content-Type: application/json\" -H \"seldon-model: tfsimple.pipeline\" \\\n        -d '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"model_name\":\"\",\"outputs\":[{\"data\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32],\"name\":\"OUTPUT0\",\"shape\":[1,16],\"datatype\":\"INT32\"},{\"data\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"name\":\"OUTPUT1\",\"shape\":[1,16],\"datatype\":\"INT32\"}]}\n\n\ngrpcurl -d '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimple.pipeline \\\n    ${INFER_ENDPOINT} inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    },\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/inference.html", "key": "examples/inference"}}, {"key": "35ef69fd-4934-4006-bff8-202c5dc605d7", "page": "examples/inference", "section": "id1", "text": "-rpc-header seldon-model:tfsimple.pipeline \\\n    ${INFER_ENDPOINT} inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    }\n  ],\n  \"rawOutputContents\": [\n    \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"\n  ]\n}\n\n\nseldon pipeline unload tfsimple\nseldon model unload tfsimple1\n\n\n{}\n{}\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/inference.html", "key": "examples/inference"}}, {"key": "b202b61c-7b6a-4cf6-b66e-ae10752f6708", "page": "examples/inference", "section": "tensorflow-model", "text": "\nTensorflow Model\u00b6\ncat ./models/tfsimple1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\n\n\n{}\n\n\nWait for the model to be ready.\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer tfsimple1 --inference-host ${INFER_ENDPOINT} \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"tfsimple1_1\",\n\t\"model_version\": \"1\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model infer tfsimple1 --inference-mode grpc  --inference-host ${INFER_ENDPOINT} \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\ncurl http://${INFER_ENDPOINT}/v2/models/tfsimple1/infer -H \"Content-Type: application/json\" -H \"seldon-model: tfsimple1\" \\\n        -d '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"model_name\":\"tfsimple1_1\",\"model_version\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[1,16],\"data\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[1,16],\"data\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}]}\n\n\ngrpcurl -d '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimple1 \\\n    ${INFER_ENDPOINT} inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"tfsimple1_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    }\n  ],\n  \"rawOutputContents\": [\n    \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"\n  ]\n}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/inference.html", "key": "examples/inference"}}, {"key": "54db73f8-6fbb-4077-b58c-4b3bd06cb0cc", "page": "examples/inference", "section": "tensorflow-model", "text": "\"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    }\n  ],\n  \"rawOutputContents\": [\n    \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"\n  ]\n}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple\",\"uid\":\"cg5fm6c6dpcs73c4qhe0\",\"version\":1,\"steps\":[{\"name\":\"tfsimple1\"}],\"output\":{\"steps\":[\"tfsimple1.outputs\"]},\"kubernetesMeta\":{}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T09:40:41.317797761Z\",\"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple  --inference-host ${INFER_ENDPOINT} \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline infer tfsimple --inference-mode grpc  --inference-host ${INFER_ENDPOINT} \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\ncurl http://${INFER_ENDPOINT}/v2/models/tfsimple1/infer -H \"Content-Type: application/json\" -H \"seldon-model: tfsimple.pipeline\" \\\n        -d '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\"model_name\":\"\",\"outputs\":[{\"data\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32],\"name\":\"OUTPUT0\",\"shape\":[1,16],\"datatype\":\"INT32\"},{\"data\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"name\":\"OUTPUT1\",\"shape\":[1,16],\"datatype\":\"INT32\"}]}\n\n\ngrpcurl -d '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimple.pipeline \\\n    ${INFER_ENDPOINT} inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/inference.html", "key": "examples/inference"}}, {"key": "cff02b42-7e2a-4c2d-b4d7-2298ff792e42", "page": "examples/inference", "section": "tensorflow-model", "text": "\"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ]\n    }\n  ],\n  \"rawOutputContents\": [\n    \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"\n  ]\n}\n\n\nseldon pipeline unload tfsimple\nseldon model unload tfsimple1\n\n\n{}\n{}\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/inference.html", "key": "examples/inference"}}, {"key": "e898ec03-d3a7-407b-a3b9-b7e25267afe7", "page": "kubernetes/metrics", "section": "metrics", "text": "\nMetrics\u00b6\nMetrics are exposed for scrapping by Prometheus.\n\nExample Installation\u00b6\nWe recommend to install kube-prometheus that provides an all-in-one package with the Prometheus operator.\n\nRBAC\u00b6\nYou will need to modify the default RBAC installed by kube-prometheus as described here.\nFrom the prometheus folder in the project run:\nkubectl apply -f rbac/cr.yaml\n\n\n\n\n\nMonitors\u00b6\nWe use a PodMonitor for scrapping agent metrics. The envoy and server monitors are there for completeness but not presently needed.\nkubectl apply -f monitors\n\n\nIncludes:\n\nAgent pod monitor. Monitors the metrics port of server inference pods.\nServer pod monitor. Monitors the server-metrics port of inference server pods.\nEnvoy service monitor. Monitors the Envoy gateway proxies.\nPipeline gateway pod monitor. Monitors the metrics port of pipeline gateway pods.\n\nPod monitors were chosen as ports for metrics are not exposed at service level as we do not have a top level service for server replicas but 1 headless service per replica. Future discussions could reference this.\n\n\nExample Grafana Dashboard\u00b6\nCheck metrics for more information.\n\n\nReference\u00b6\n\nPrometheus CRDs\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/metrics/index.html", "key": "kubernetes/metrics"}}, {"key": "0a6345b8-c17f-4666-8742-031c702fd639", "page": "kubernetes/metrics", "section": "monitors", "text": "\nMonitors\u00b6\nWe use a PodMonitor for scrapping agent metrics. The envoy and server monitors are there for completeness but not presently needed.\nkubectl apply -f monitors\n\n\nIncludes:\n\nAgent pod monitor. Monitors the metrics port of server inference pods.\nServer pod monitor. Monitors the server-metrics port of inference server pods.\nEnvoy service monitor. Monitors the Envoy gateway proxies.\nPipeline gateway pod monitor. Monitors the metrics port of pipeline gateway pods.\n\nPod monitors were chosen as ports for metrics are not exposed at service level as we do not have a top level service for server replicas but 1 headless service per replica. Future discussions could reference this.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/metrics/index.html", "key": "kubernetes/metrics"}}, {"key": "28a26598-7e1c-42bc-acf1-ffad3be71fb3", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "\nSeldon Config\u00b6\n\nNote\nThis section is for advanced usage where you want to define how seldon is installed in each namespace.\n\nThe SeldonConfig resource defines the core installation components installed by Seldon. If you wish to install Seldon, you can use the SeldonRuntime resource which allows easy overriding of some parts defined in this specification. In general, we advise core DevOps to use the default SeldonConfig or customize it for their usage. Individual installation of Seldon can then use the SeldonRuntime with a few overrides for special customisation needed in that namespace.\nThe specification contains core PodSpecs for each core component and a section for general configuration including the ConfigMaps that are created for the Agent (rclone defaults), Kafka and Tracing (open telemetry).\ntype SeldonConfigSpec struct {\n\tComponents []*ComponentDefn    `json:\"components,omitempty\"`\n\tConfig     SeldonConfiguration `json:\"config,omitempty\"`\n}\n\ntype SeldonConfiguration struct {\n\tTracingConfig TracingConfig      `json:\"tracingConfig,omitempty\"`\n\tKafkaConfig   KafkaConfig        `json:\"kafkaConfig,omitempty\"`\n\tAgentConfig   AgentConfiguration `json:\"agentConfig,omitempty\"`\n\tServiceConfig ServiceConfig      `json:\"serviceConfig,omitempty\"`\n}\n\ntype ServiceConfig struct {\n\tGrpcServicePrefix string         `json:\"grpcServicePrefix,omitempty\"`\n\tServiceType       v1.ServiceType `json:\"serviceType,omitempty\"`\n}\n\ntype KafkaConfig struct {\n\tBootstrapServers      string                        `json:\"bootstrap.servers,omitempty\"`\n\tConsumerGroupIdPrefix string                        `json:\"consumerGroupIdPrefix,omitempty\"`\n\tDebug            ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "3be0c131-794c-44f2-9295-a10fbad68dcc", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "  string                        `json:\"bootstrap.servers,omitempty\"`\n\tConsumerGroupIdPrefix string                        `json:\"consumerGroupIdPrefix,omitempty\"`\n\tDebug                 string                        `json:\"debug,omitempty\"`\n\tConsumer              map[string]intstr.IntOrString `json:\"consumer,omitempty\"`\n\tProducer              map[string]intstr.IntOrString `json:\"producer,omitempty\"`\n\tStreams               map[string]intstr.IntOrString `json:\"streams,omitempty\"`\n\tTopicPrefix           string                        `json:\"topicPrefix,omitempty\"`\n}\n\ntype AgentConfiguration struct {\n\tRclone RcloneConfiguration `json:\"rclone,omitempty\" yaml:\"rclone,omitempty\"`\n}\n\ntype RcloneConfiguration struct {\n\tConfigSecrets []string `json:\"config_secrets,omitempty\" yaml:\"config_secrets,omitempty\"`\n\tConfig        []string `json:\"config,omitempty\" yaml:\"config,omitempty\"`\n}\n\ntype TracingConfig struct {\n\tDisable              bool   `json:\"disable,omitempty\"`\n\tOtelExporterEndpoint string `json:\"otelExporterEndpoint,omitempty\"`\n\tOtelExporterProtocol string `json:\"otelExporterProtocol,omitempty\"`\n\tRatio                string `json:\"ratio,omitempty\"`\n}\n\ntype ComponentDefn struct {\n\t// +kubebuilder:validation:Required\n\tName               ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "b6359ca0-0d84-452a-9c1c-927061a0ebf3", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": " []string `json:\"config,omitempty\" yaml:\"config,omitempty\"`\n}\n\ntype TracingConfig struct {\n\tDisable              bool   `json:\"disable,omitempty\"`\n\tOtelExporterEndpoint string `json:\"otelExporterEndpoint,omitempty\"`\n\tOtelExporterProtocol string `json:\"otelExporterProtocol,omitempty\"`\n\tRatio                string `json:\"ratio,omitempty\"`\n}\n\ntype ComponentDefn struct {\n\t// +kubebuilder:validation:Required\n\tName                 string                  `json:\"name\"`\n\tReplicas             *int32                  `json:\"replicas,omitempty\"`\n\tPodSpec              *v1.PodSpec             `json:\"podSpec,omitempty\"`\n\tVolumeClaimTemplates []PersistentVolumeClaim `json:\"volumeClaimTemplates,omitempty\"`\n}\n\n\nSome of these values can be overridden on a per namespace basis via the SeldonRuntime resource.\nThe default configuration is shown below.\napiVersion: mlops.seldon.io/v1alpha1\nkind: SeldonConfig\nmetadata:\n  name: default\nspec:\n  components:\n  - name: seldon-dataflow-engine\n    replicas: 1\n    podSpec:\n      containers:\n      - env:\n        - name: SELDON_UPSTREAM_HOST\n          value: seldon-scheduler\n        - name: SELDON_UPSTREAM_PORT\n          value: \"9008\"\n        - name: OTEL_JAVAAGENT_ENABLED\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "239cd945-4308-446a-8299-3e2e16f8c8aa", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "   - env:\n        - name: SELDON_UPSTREAM_HOST\n          value: seldon-scheduler\n        - name: SELDON_UPSTREAM_PORT\n          value: \"9008\"\n        - name: OTEL_JAVAAGENT_ENABLED\n          valueFrom:\n            configMapKeyRef:\n              key: OTEL_JAVAAGENT_ENABLED\n              name: seldon-tracing\n        - name: OTEL_EXPORTER_OTLP_ENDPOINT\n          valueFrom:\n            configMapKeyRef:\n              key: OTEL_EXPORTER_OTLP_ENDPOINT\n              name: seldon-tracing\n        - name: OTEL_EXPORTER_OTLP_PROTOCOL\n          valueFrom:\n            configMapKeyRef:\n              key: OTEL_EXPORTER_OTLP_PROTOCOL\n              name: seldon-tracing\n        - name: SELDON_POD_NAMESPACE\n          valueFrom:\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "11ca211a-71a8-49af-83ff-9d3e2dcf2362", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "          configMapKeyRef:\n              key: OTEL_EXPORTER_OTLP_PROTOCOL\n              name: seldon-tracing\n        - name: SELDON_POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        image: seldonio/seldon-dataflow-engine:latest\n        imagePullPolicy: Always\n        name: dataflow-engine\n        resources:\n          limits:\n            memory: 1G\n          requests:\n            cpu: 100m\n            memory: 1G\n      serviceAccountName: seldon-scheduler\n      terminationGracePeriodSeconds: 5\n  - name: seldon-envoy\n    replicas: 1\n    podSpec:\n      containers:\n      - image: seldonio/seldon-envoy:latest\n        imagePullPolicy: Always\n        name: envoy\n        ports:\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "6ce0ca1e-caa8-419a-a893-1dd9d7d3615c", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "  terminationGracePeriodSeconds: 5\n  - name: seldon-envoy\n    replicas: 1\n    podSpec:\n      containers:\n      - image: seldonio/seldon-envoy:latest\n        imagePullPolicy: Always\n        name: envoy\n        ports:\n        - containerPort: 9000\n          name: http\n        - containerPort: 9003\n          name: envoy-admin\n        resources:\n          limits:\n            memory: 128Mi\n          requests:\n            cpu: 100m\n            memory: 128Mi\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: envoy-admin\n          initialDelaySeconds: 10\n          periodSeconds: 5\n          failureThreshold: 3\n      terminationGracePeriodSeconds: 5\n  - name: hodometer\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "d443fcb4-d3da-4ad6-9075-0d459b10dbf6", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "   path: /ready\n            port: envoy-admin\n          initialDelaySeconds: 10\n          periodSeconds: 5\n          failureThreshold: 3\n      terminationGracePeriodSeconds: 5\n  - name: hodometer\n    replicas: 1\n    podSpec:\n      containers:\n      - env:\n        - name: PUBLISH_URL\n          value: http://hodometer.seldon.io\n        - name: SCHEDULER_HOST\n          value: seldon-scheduler\n        - name: SCHEDULER_PLAINTXT_PORT\n          value: \"9004\"\n        - name: SCHEDULER_TLS_PORT\n          value: \"9044\"\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        image: seldonio/seldon-hodometer:latest\n        imagePullPolicy: Always\n        name: hodometer\n        resources:\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "4e22782b-6f5b-4733-9e8b-5c0741877f77", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "       fieldRef:\n              fieldPath: metadata.namespace\n        image: seldonio/seldon-hodometer:latest\n        imagePullPolicy: Always\n        name: hodometer\n        resources:\n          limits:\n            memory: 32Mi\n          requests:\n            cpu: 1m\n            memory: 32Mi\n      serviceAccountName: hodometer\n      terminationGracePeriodSeconds: 5\n  - name: seldon-modelgateway\n    replicas: 1\n    podSpec:\n      containers:\n      - args:\n        - --scheduler-host=seldon-scheduler\n        - --scheduler-plaintxt-port=$(SELDON_SCHEDULER_PLAINTXT_PORT)\n        - --scheduler-tls-port=$(SELDON_SCHEDULER_TLS_PORT)\n        - --envoy-host=seldon-mesh\n        - --envoy-port=80\n        - --kafka-config-path=/mnt/kafka/kafka.json\n        - --tracing-config-path=/mnt/tracing/tracing.json\n        command:\n        - /bin/modelgateway\n        env:\n        - name: SELDON_SCHEDULER_PLAINTXT_PORT\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "14479176-7932-49c3-a298-a22e8b087b84", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "--envoy-host=seldon-mesh\n        - --envoy-port=80\n        - --kafka-config-path=/mnt/kafka/kafka.json\n        - --tracing-config-path=/mnt/tracing/tracing.json\n        command:\n        - /bin/modelgateway\n        env:\n        - name: SELDON_SCHEDULER_PLAINTXT_PORT\n          value: \"9004\"\n        - name: SELDON_SCHEDULER_TLS_PORT\n          value: \"9044\"\n        - name: MODELGATEWAY_MAX_NUM_CONSUMERS\n          value: \"100\"\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        image: seldonio/seldon-modelgateway:latest\n        imagePullPolicy: Always\n        name: modelgateway\n        resources:\n          limits:\n            memory: 1G\n          requests:\n            cpu: 100m\n            memory:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "43522c10-d631-40aa-9531-520c5b0c1a97", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "     resources:\n          limits:\n            memory: 1G\n          requests:\n            cpu: 100m\n            memory: 1G\n        volumeMounts:\n        - mountPath: /mnt/kafka\n          name: kafka-config-volume\n        - mountPath: /mnt/tracing\n          name: tracing-config-volume\n      serviceAccountName: seldon-scheduler\n      terminationGracePeriodSeconds: 5\n      volumes:\n      - configMap:\n          name: seldon-kafka\n        name: kafka-config-volume\n      - configMap:\n          name: seldon-tracing\n        name: tracing-config-volume\n  - name: seldon-pipelinegateway\n    replicas: 1\n    podSpec:\n      containers:\n      - args:\n        - --http-port=9010\n        - --grpc-port=9011\n        - --metrics-port=9006\n        - --scheduler-host=seldon-scheduler\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "50243316-2fc0-4016-91e5-f13141a1f56d", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "seldon-pipelinegateway\n    replicas: 1\n    podSpec:\n      containers:\n      - args:\n        - --http-port=9010\n        - --grpc-port=9011\n        - --metrics-port=9006\n        - --scheduler-host=seldon-scheduler\n        - --scheduler-plaintxt-port=$(SELDON_SCHEDULER_PLAINTXT_PORT)\n        - --scheduler-tls-port=$(SELDON_SCHEDULER_TLS_PORT)\n        - --envoy-host=seldon-mesh\n        - --envoy-port=80\n        - --kafka-config-path=/mnt/kafka/kafka.json\n        - --tracing-config-path=/mnt/tracing/tracing.json\n        command:\n        - /bin/pipelinegateway\n        env:\n        - name: SELDON_SCHEDULER_PLAINTXT_PORT\n          value: \"9004\"\n        - name: SELDON_SCHEDULER_TLS_PORT\n          value: \"9044\"\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        image: seldonio/seldon-pipelinegateway\n        imagePullPolicy: Always\n        name: pipelinegateway\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "6d644b36-e0bf-4de4-99c8-c0957d732b25", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "       valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        image: seldonio/seldon-pipelinegateway\n        imagePullPolicy: Always\n        name: pipelinegateway\n        ports:\n        - containerPort: 9010\n          name: http\n          protocol: TCP\n        - containerPort: 9011\n          name: grpc\n          protocol: TCP\n        - containerPort: 9006\n          name: metrics\n          protocol: TCP\n        resources:\n          limits:\n            memory: 1G\n          requests:\n            cpu: 100m\n            memory: 1G\n        volumeMounts:\n        - mountPath: /mnt/kafka\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "0223cf6c-bf59-465d-9942-906f042081fd", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "   memory: 1G\n          requests:\n            cpu: 100m\n            memory: 1G\n        volumeMounts:\n        - mountPath: /mnt/kafka\n          name: kafka-config-volume\n        - mountPath: /mnt/tracing\n          name: tracing-config-volume\n      serviceAccountName: seldon-scheduler\n      terminationGracePeriodSeconds: 5\n      volumes:\n      - configMap:\n          name: seldon-kafka\n        name: kafka-config-volume\n      - configMap:\n          name: seldon-tracing\n        name: tracing-config-volume\n  - name: seldon-scheduler\n    replicas: 1\n    podSpec:\n      containers:\n      - args:\n        - --pipeline-gateway-host=seldon-pipelinegateway\n        - --tracing-config-path=/mnt/tracing/tracing.json\n        - --db-path=/mnt/scheduler/db\n        - --allow-plaintxt=$(ALLOW_PLAINTXT)\n        - --kafka-config-path=/mnt/kafka/kafka.json\n        command:\n        - /bin/scheduler\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "b3fe4a68-8046-47df-8ffd-40c184c6a574", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "      - --pipeline-gateway-host=seldon-pipelinegateway\n        - --tracing-config-path=/mnt/tracing/tracing.json\n        - --db-path=/mnt/scheduler/db\n        - --allow-plaintxt=$(ALLOW_PLAINTXT)\n        - --kafka-config-path=/mnt/kafka/kafka.json\n        command:\n        - /bin/scheduler\n        env:\n        - name: ALLOW_PLAINTXT\n          value: \"true\"\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        image: seldonio/seldon-scheduler:latest\n        imagePullPolicy: Always\n        name: scheduler\n        ports:\n        - containerPort: 9002\n          name: xds\n        - containerPort: 9004\n          name: scheduler\n        - containerPort: 9044\n          name: scheduler-mtls\n        - containerPort: 9005\n          name: agent\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "598f7ae6-d3c8-4ce6-9efb-80cfc8a7b7a3", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "xds\n        - containerPort: 9004\n          name: scheduler\n        - containerPort: 9044\n          name: scheduler-mtls\n        - containerPort: 9005\n          name: agent\n        - containerPort: 9055\n          name: agent-mtls\n        - containerPort: 9008\n          name: dataflow\n        resources:\n          limits:\n            memory: 1G\n          requests:\n            cpu: 100m\n            memory: 1G\n        volumeMounts:\n        - mountPath: /mnt/kafka\n          name: kafka-config-volume\n        - mountPath: /mnt/tracing\n          name: tracing-config-volume\n        - mountPath: /mnt/scheduler\n          name: scheduler-state\n      serviceAccountName: seldon-scheduler\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "77f5529d-7fa4-4cde-a7f0-7e2987d44d12", "page": "kubernetes/resources/seldonconfig", "section": "seldon-config", "text": "        name: kafka-config-volume\n        - mountPath: /mnt/tracing\n          name: tracing-config-volume\n        - mountPath: /mnt/scheduler\n          name: scheduler-state\n      serviceAccountName: seldon-scheduler\n      terminationGracePeriodSeconds: 5\n      volumes:\n      - configMap:\n          name: seldon-kafka\n        name: kafka-config-volume\n      - configMap:\n          name: seldon-tracing\n        name: tracing-config-volume\n    volumeClaimTemplates:\n    - name: scheduler-state\n      spec:\n        accessModes:\n        - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonconfig/index.html", "key": "kubernetes/resources/seldonconfig"}}, {"key": "9cf21171-28a0-46db-9eaf-21c303d80780", "page": "cli/docs/seldon_pipeline_infer", "section": "seldon-pipeline-infer", "text": "\nseldon pipeline infer\u00b6\nrun inference on a pipeline\n\nSynopsis\u00b6\ncall a pipeline with a given input and get a prediction\nseldon pipeline infer <pipelineName> (data) [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        inference payload file\n      --header stringArray      add a header, e.g. key=value; use the flag multiple times to add more than one header\n  -h, --help                    help for infer\n      --inference-host string   seldon inference host (default \"0.0.0.0:9000\")\n      --inference-mode string   inference mode (rest or grpc) (default \"rest\")\n  -i, --iterations int          how many times to run inference (default 1)\n  -t, --seconds int             number of secs to run inference\n      --show-headers            show request and response headers\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -s, --sticky-session          use sticky session from last inference (only", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_infer.html", "key": "cli/docs/seldon_pipeline_infer"}}, {"key": "e4620c17-31d2-41cf-831e-25538d2f6b16", "page": "cli/docs/seldon_pipeline_infer", "section": "seldon-pipeline-infer", "text": "       show request and response headers\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -s, --sticky-session          use sticky session from last inference (only works with experiments)\n\n\n\n\nSEE ALSO\u00b6\n\nseldon pipeline\t - manage pipelines\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_infer.html", "key": "cli/docs/seldon_pipeline_infer"}}, {"key": "31145f16-0bcb-4fb4-858b-9131a80c1ea4", "page": "cli/docs/seldon_pipeline_infer", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        inference payload file\n      --header stringArray      add a header, e.g. key=value; use the flag multiple times to add more than one header\n  -h, --help                    help for infer\n      --inference-host string   seldon inference host (default \"0.0.0.0:9000\")\n      --inference-mode string   inference mode (rest or grpc) (default \"rest\")\n  -i, --iterations int          how many times to run inference (default 1)\n  -t, --seconds int             number of secs to run inference\n      --show-headers            show request and response headers\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -s, --sticky-session          use sticky session from last inference (only works with experiments)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_infer.html", "key": "cli/docs/seldon_pipeline_infer"}}, {"key": "f0671dfb-5561-4159-9e83-8c0da0034a9e", "page": "getting-started/kubernetes-installation/security/strimzi-mtls", "section": "strimzi-mtls-example", "text": "\nStrimzi mTLS Example\u00b6\n\nCluster Setup\u00b6\nIf you have installed Strimzi we have an example Helm chart to create a Kafka cluster for seldon and an associated user in kafka/strimzi folder. Ensure the tls is enabled with:\nbroker:\n  tls:\n    enabled: true\n    port: 9093\n    listenerType: internal\n    authentication:\n      type: tls\n\n\nThe Ansible setup-ecosystem playbook will also install Strimzi and include a mTLS endpoint. See here.\n\n\nmTLS Example\u00b6\nCreate a Kafka User seldon in the namespace seldon was installed. This assumes Strimzi Kafka cluster is installed in the same namespace or is running with cluster wide permissions. Our Ansible scripts to setup the ecosystem will also create this user if tls is active.\n---\napiVersion: kafka.strimzi.io/v1beta2\nkind: KafkaUser\nmetadata:\n  name: seldon\n  labels:\n    strimzi.io/cluster: seldon\nspec:\n  authentication:\n    type: tls\n\n\nIf you don\u2019t have this user you can install it with in your desired namespace (here seldon-mesh):\nkubectl create -f k8s/samples/strimzi-example-tls-user.yaml -n seldon-mesh\n\n\nInstall seldon with the Strimzi certificate secrets using a custom values file. This sets the secret created by Strimzi for the user created above (seldon) and targets the server certificate authority secret from the name of the cluster created on install of the Kafka cluster (seldon-cluster-ca-cert).\nConfigure Seldon Core v2 by setting following Helm values:\n---\nkafka:\n  bootstrap: seldon-kafka-bootstrap.seldon-mesh.svc.cluster.local:9093\n\nsecurity:\n  kafka:\n    protocol: SSL\n    ssl:\n      client:\n        secret: seldon\n        brokerValidationSecret: seldon-cluster-ca-cert\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/strimzi-mtls.html", "key": "getting-started/kubernetes-installation/security/strimzi-mtls"}}, {"key": "ba0deac1-9f3c-4f49-9cf1-6517f1c13651", "page": "getting-started/kubernetes-installation/security/strimzi-mtls", "section": "strimzi-mtls-example", "text": "from the name of the cluster created on install of the Kafka cluster (seldon-cluster-ca-cert).\nConfigure Seldon Core v2 by setting following Helm values:\n---\nkafka:\n  bootstrap: seldon-kafka-bootstrap.seldon-mesh.svc.cluster.local:9093\n\nsecurity:\n  kafka:\n    protocol: SSL\n    ssl:\n      client:\n        secret: seldon\n        brokerValidationSecret: seldon-cluster-ca-cert\n        keyPath: /tmp/certs/kafka/client/user.key\n        crtPath: /tmp/certs/kafka/client/user.crt\n        caPath: /tmp/certs/kafka/client/ca.crt\n        brokerCaPath: /tmp/certs/kafka/broker/ca.crt\n\n\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh -f k8s/samples/values-strimzi-kafka-mtls.yaml\n\n\nYou can now go ahead and install a SeldonRuntime in your desired install namespace (here seldon-mesh), e.g.\nhelm install seldon-v2-runtime ../k8s/helm-charts/seldon-core-v2-runtime  -n seldon-mesh\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/strimzi-mtls.html", "key": "getting-started/kubernetes-installation/security/strimzi-mtls"}}, {"key": "934312e2-af94-4c56-b610-384463637f48", "page": "getting-started/kubernetes-installation/security/strimzi-mtls", "section": "cluster-setup", "text": "\nCluster Setup\u00b6\nIf you have installed Strimzi we have an example Helm chart to create a Kafka cluster for seldon and an associated user in kafka/strimzi folder. Ensure the tls is enabled with:\nbroker:\n  tls:\n    enabled: true\n    port: 9093\n    listenerType: internal\n    authentication:\n      type: tls\n\n\nThe Ansible setup-ecosystem playbook will also install Strimzi and include a mTLS endpoint. See here.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/strimzi-mtls.html", "key": "getting-started/kubernetes-installation/security/strimzi-mtls"}}, {"key": "62e7f939-c8ac-485f-933d-2b009ae36996", "page": "getting-started/kubernetes-installation/security/strimzi-mtls", "section": "mtls-example", "text": "\nmTLS Example\u00b6\nCreate a Kafka User seldon in the namespace seldon was installed. This assumes Strimzi Kafka cluster is installed in the same namespace or is running with cluster wide permissions. Our Ansible scripts to setup the ecosystem will also create this user if tls is active.\n---\napiVersion: kafka.strimzi.io/v1beta2\nkind: KafkaUser\nmetadata:\n  name: seldon\n  labels:\n    strimzi.io/cluster: seldon\nspec:\n  authentication:\n    type: tls\n\n\nIf you don\u2019t have this user you can install it with in your desired namespace (here seldon-mesh):\nkubectl create -f k8s/samples/strimzi-example-tls-user.yaml -n seldon-mesh\n\n\nInstall seldon with the Strimzi certificate secrets using a custom values file. This sets the secret created by Strimzi for the user created above (seldon) and targets the server certificate authority secret from the name of the cluster created on install of the Kafka cluster (seldon-cluster-ca-cert).\nConfigure Seldon Core v2 by setting following Helm values:\n---\nkafka:\n  bootstrap: seldon-kafka-bootstrap.seldon-mesh.svc.cluster.local:9093\n\nsecurity:\n  kafka:\n    protocol: SSL\n    ssl:\n      client:\n        secret: seldon\n        brokerValidationSecret: seldon-cluster-ca-cert\n        keyPath: /tmp/certs/kafka/client/user.key\n        crtPath: /tmp/certs/kafka/client/user.crt\n        caPath: /tmp/certs/kafka/client/ca.crt\n        brokerCaPath: /tmp/certs/kafka/broker/ca.crt\n\n\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh -f k8s/samples/values-strimzi-kafka-mtls.yaml\n\n\nYou can now go ahead and install a SeldonRuntime in your desired install namespace (here seldon-mesh), e.g.\nhelm install seldon-v2-runtime ../k8s/helm-charts/seldon-core-v2-runtime  -n seldon-mesh\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/strimzi-mtls.html", "key": "getting-started/kubernetes-installation/security/strimzi-mtls"}}, {"key": "d3c40306-07c3-4f4c-ac76-a4d448a5a5db", "page": "cli/docs/seldon_model_load", "section": "seldon-model-load", "text": "\nseldon model load\u00b6\nload a model\n\nSynopsis\u00b6\nload a model\nseldon model load [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        model manifest file (YAML)\n  -h, --help                    help for load\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n\n\nSEE ALSO\u00b6\n\nseldon model\t - manage models\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_model_load.html", "key": "cli/docs/seldon_model_load"}}, {"key": "7c75c7cf-397f-4534-bc3f-48f80ca4ea14", "page": "cli/docs/seldon_model_load", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        model manifest file (YAML)\n  -h, --help                    help for load\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_model_load.html", "key": "cli/docs/seldon_model_load"}}, {"key": "0348efbd-da7e-4bf3-86de-8d9faf9d83ca", "page": "kubernetes/resources/experiment", "section": "experiment", "text": "\nExperiment\u00b6\nAn Experiment defines a traffic split between Models or Pipelines. This allows new versions of models and pipelines to be tested.\nAn experiment spec has three sections:\n\ncandidates (required) : a set of candidate models to split traffic.\ndefault (optional) : an existing candidate who endpoint should be modified to split traffic as defined by the candidates.\n\nEach candidate has a traffic weight. The percentage of traffic will be this weight divided by the sum of traffic weights.\n\n\nmirror (optional) : a single model to mirror traffic to the candidates. Responses from this model will not be returned to the caller.\n\nAn example experiment with a defaultModel is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nThis defines a split of 50% traffic between two models iris and iris2. In this case we want to expose this traffic split on the existing endpoint created for the iris model. This allows us to test new versions of models (in this case iris2) on an existing endpoint (in this case iris). The default key defines the model whose endpoint we want to change. The experiment will become active when both underplying models are in Ready status.\nAn experiment over two separate models which exposes a new API endpoint is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-iris\nspec:\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nTo call the endpoint add the header seldon-model: <experiment-name>.experiment", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/experiment/index.html", "key": "kubernetes/resources/experiment"}}, {"key": "6b7733cc-86db-4251-9799-f347e93a3741", "page": "kubernetes/resources/experiment", "section": "experiment", "text": "we want to change. The experiment will become active when both underplying models are in Ready status.\nAn experiment over two separate models which exposes a new API endpoint is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-iris\nspec:\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nTo call the endpoint add the header seldon-model: <experiment-name>.experiment in this case: seldon-model: experiment-iris.experiment. For example with curl:\ncurl http://${MESH_IP}/v2/models/experiment-iris/infer \\\n   -H \"Content-Type: application/json\" \\\n   -H \"seldon-model: experiment-iris.experiment\" \\\n   -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nFor examples see the local experiments notebook.\n\nPipeline Experiments\u00b6\nRunning an experiment between some pipelines is very similar. The difference is resourceType: pipeline needs to be defined and in this case the candidates or mirrors will refer to pipelines. An example is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 50\n  - name: pipeline-mul10\n    weight: 50\n\n\nFor an example see the local experiments notebook.\n\n\nMirror Experiments\u00b6\nA mirror can be added easily for model or pipeline experiments. An example model mirror experiment is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: sklearn-mirror\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 100\n  mirror:\n    name: iris2\n    percent: 100\n\n\nFor an example see the local experiments notebook.\nAn example pipeline mirror experiment is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10-mirror\nspec:\n  default: pipeline-add10\n  resourceType:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/experiment/index.html", "key": "kubernetes/resources/experiment"}}, {"key": "dbe5d96f-bb49-47e8-8147-8f4c5c59630a", "page": "kubernetes/resources/experiment", "section": "experiment", "text": "experiments. An example model mirror experiment is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: sklearn-mirror\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 100\n  mirror:\n    name: iris2\n    percent: 100\n\n\nFor an example see the local experiments notebook.\nAn example pipeline mirror experiment is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10-mirror\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 100\n  mirror:\n    name: pipeline-mul10\n    percent: 100\n\n\nFor an example see the local experiments notebook.\n\n\nSticky Sessions\u00b6\nTo allow cohorts to get consistent views in an experiment each inference request passes back a response header x-seldon-route which can be passed in future requests to an experiment to bypass the random traffic splits and get a prediction from the sequence of models and pipelines used in the initial request.\nNote: you must pass the normal seldon-model header along with the x-seldon-route header.\nThis is illustrated in the local experiments notebook.\nCaveats:\n\nNote the models used will be the same but not necessarily the same replica instances. This means at present this will not work for stateful models that need to go to the same model replica instance.\n\n\n\nService Meshes\u00b6\nAs an alternative you can choose to run experiments at the service mesh level if you use one of the popular service meshes that allow header based routing in traffic splits. For further discussion see here.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/experiment/index.html", "key": "kubernetes/resources/experiment"}}, {"key": "1d3e8480-219a-4c80-95bb-7be67ec6567f", "page": "kubernetes/resources/experiment", "section": "pipeline-experiments", "text": "\nPipeline Experiments\u00b6\nRunning an experiment between some pipelines is very similar. The difference is resourceType: pipeline needs to be defined and in this case the candidates or mirrors will refer to pipelines. An example is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 50\n  - name: pipeline-mul10\n    weight: 50\n\n\nFor an example see the local experiments notebook.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/experiment/index.html", "key": "kubernetes/resources/experiment"}}, {"key": "afaff629-a1b4-4038-bb47-dc5a31037c72", "page": "kubernetes/resources/experiment", "section": "mirror-experiments", "text": "\nMirror Experiments\u00b6\nA mirror can be added easily for model or pipeline experiments. An example model mirror experiment is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: sklearn-mirror\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 100\n  mirror:\n    name: iris2\n    percent: 100\n\n\nFor an example see the local experiments notebook.\nAn example pipeline mirror experiment is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10-mirror\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 100\n  mirror:\n    name: pipeline-mul10\n    percent: 100\n\n\nFor an example see the local experiments notebook.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/experiment/index.html", "key": "kubernetes/resources/experiment"}}, {"key": "45518270-867b-4c08-b3cd-917d28fe1ddd", "page": "kubernetes/resources/experiment", "section": "sticky-sessions", "text": "\nSticky Sessions\u00b6\nTo allow cohorts to get consistent views in an experiment each inference request passes back a response header x-seldon-route which can be passed in future requests to an experiment to bypass the random traffic splits and get a prediction from the sequence of models and pipelines used in the initial request.\nNote: you must pass the normal seldon-model header along with the x-seldon-route header.\nThis is illustrated in the local experiments notebook.\nCaveats:\n\nNote the models used will be the same but not necessarily the same replica instances. This means at present this will not work for stateful models that need to go to the same model replica instance.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/experiment/index.html", "key": "kubernetes/resources/experiment"}}, {"key": "bb2e46a3-1512-4b78-9b9b-5849b02ff4a5", "page": "getting-started/cli", "section": "seldon-cli", "text": "\nSeldon CLI\u00b6\nSeldon Core V2 can be managed via a CLI tool.\n\nDownload Linux Binary\u00b6\nDownload from a recent release from https://github.com/SeldonIO/seldon-core/releases.\nIt is dynamically linked and will require and *nix architecture and glibc 2.25+.\nmv seldon-linux-amd64 seldon\nchmod u+x seldon\n\n\nAdd to your PATH.\n\n\nLocal build (requires Go)\u00b6\ngit clone https://github.com/SeldonIO/seldon-core --branch=v2\ncd seldon-core/operator\nmake build-seldon\n\n\nAdd <project-root>/operator/bin to your PATH.\n\n\nLocal macOS ARM build (requires Go and librdkafka)\u00b6\n# install dependencies\nbrew install go librdkafka\n\n\ngit clone https://github.com/SeldonIO/seldon-core --branch=v2\ncd seldon-core/operator\nmake build-seldon-arm\n\n\nAdd <project-root>/operator/bin to your PATH.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/cli.html", "key": "getting-started/cli"}}, {"key": "0f159dbd-2d65-46e0-bc8d-f9b390d458a8", "page": "getting-started/kubernetes-installation/security/azure-event-hub-sasl", "section": "azure-event-hub-sasl-example", "text": "\nAzure Event Hub SASL Example\u00b6\n\nNew in Seldon Core 2.5.0\n\nSeldon Core v2 can integrate with Azure Event Hub via Kafka protocol.\n\nWarning\nYou will need at least Standard tier for your Event Hub Namespace as Basic tier does not support Kafka protocol.\n\n\nWarning\nSeldon Core v2 creates 2 Kafka topics for each pipeline and model plus one global topic for errors.\nThis means that total number of topics will be 2 x (#models + #pipelines) + 1 which will likely exceed the limit of Standard tier in Azure Event Hub.\nYou can find more information on quotas, like the number of partitions per Event Hub, here.\n\n\nPrerequisites\u00b6\nTo start you will need to have an Azure Event Hub Namespace.\nYou can create one following Azure quickstart docs.\nNote that you do not need to create an Event Hub (topics) as Core v2 will require all the topics it needs automatically.\n\n\nCreate API Keys\u00b6\nTo connect to Azure Event Hub provided Kafka API you need to obtain:\n\nKafka Endpoint\nConnection String\n\nYou can obtain both using Azure Portal as documented here.\n\nNote\nYou should get the Connection String for a namespace level as we will need to dynamically create new topics.\n\nThe Connection String should be in format of\nEndpoint=sb://<namespace>.servicebus.windows.net/;SharedAccessKeyName=XXXXXX;SharedAccessKey=XXXXXX\n\n\n\n\nCreate Kubernetes Secret\u00b6\nSeldon Core v2 expects password to be in form of K8s secret\nkubectl create secret generic azure-kafka-secret -n seldon-mesh --from-literal password=\"Endpoint=sb://<namespace>.servicebus.windows.net/;SharedAccessKeyName=XXXXXX;SharedAccessKey=XXXXXX\"\n\n\n\n\nConfigure Seldon Core v2\u00b6\nConfigure Seldon Core v2 by setting following Helm values:\nkafka:\n  bootstrap: <namespace>.servicebus.windows.net\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n\nsecurity:\n  kafka:\n    protocol: SASL_SSL\n    sasl:\n      mechanism: \"PLAIN\"\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/azure-event-hub-sasl.html", "key": "getting-started/kubernetes-installation/security/azure-event-hub-sasl"}}, {"key": "91473c94-1bf4-4ae2-84c0-54fd7c2b9dad", "page": "getting-started/kubernetes-installation/security/azure-event-hub-sasl", "section": "azure-event-hub-sasl-example", "text": "v2 expects password to be in form of K8s secret\nkubectl create secret generic azure-kafka-secret -n seldon-mesh --from-literal password=\"Endpoint=sb://<namespace>.servicebus.windows.net/;SharedAccessKeyName=XXXXXX;SharedAccessKey=XXXXXX\"\n\n\n\n\nConfigure Seldon Core v2\u00b6\nConfigure Seldon Core v2 by setting following Helm values:\nkafka:\n  bootstrap: <namespace>.servicebus.windows.net\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n\nsecurity:\n  kafka:\n    protocol: SASL_SSL\n    sasl:\n      mechanism: \"PLAIN\"\n      client:\n        username: $ConnectionString\n        secret: azure-kafka-secret\n    ssl:\n      client:\n        secret:\n        brokerValidationSecret:\n\n\nNote you may need to tweak replicationFactor and numPartitions to your cluster configuration. The username should read $ConnectionString and this is not a variable for you to replace.\n\n\nTroubleshooting\u00b6\n\nFirst check Azure Event Hub troubleshooting guide.\nSet the kafka config map debug setting to all. For Helm install you can set kafka.debug=all.\nVerify that you did not hit quotas for topics or partitions in your Event Hub namespace.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/azure-event-hub-sasl.html", "key": "getting-started/kubernetes-installation/security/azure-event-hub-sasl"}}, {"key": "9844f083-045e-4c99-b946-73428e925b82", "page": "getting-started/kubernetes-installation/security/azure-event-hub-sasl", "section": "configure-seldon-core-v2", "text": "\nConfigure Seldon Core v2\u00b6\nConfigure Seldon Core v2 by setting following Helm values:\nkafka:\n  bootstrap: <namespace>.servicebus.windows.net\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n\nsecurity:\n  kafka:\n    protocol: SASL_SSL\n    sasl:\n      mechanism: \"PLAIN\"\n      client:\n        username: $ConnectionString\n        secret: azure-kafka-secret\n    ssl:\n      client:\n        secret:\n        brokerValidationSecret:\n\n\nNote you may need to tweak replicationFactor and numPartitions to your cluster configuration. The username should read $ConnectionString and this is not a variable for you to replace.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/azure-event-hub-sasl.html", "key": "getting-started/kubernetes-installation/security/azure-event-hub-sasl"}}, {"key": "bf6e2b98-57e9-4261-ab91-d22510165bbc", "page": "pipelines", "section": "pipelines", "text": "\nPipelines\u00b6\nPipelines allow models to be connected into flows of data transformations. This allows more complex machine learning pipelines to be created with multiple models, feature transformations and monitoring components such as drift and outlier detectors.\n\nCreating Pipelines\u00b6\nThe simplest way to create Pipelines is by defining them with the Pipeline resource we provide for Kubernetes. This format is accepted by our Kubernetes implementation but also locally via our seldon CLI.\nInternally in both cases Pipelines are created via our Scheduler API. Advanced users could submit Pipelines directly using this gRPC service.\nAn example that chains two models together is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: chain\n  namespace: seldon-mesh\nspec:\n  steps:\n    - name: model1\n    - name: model2\n      inputs:\n      - model1\n  output:\n    steps:\n    - model2\n\n\n\nsteps allow you to specify the models you want to combine into a pipeline. Each step name will correspond to a model of the same name. These models will need to have been deployed and available for the Pipeline to function, however Pipelines can be deployed before or at the same time you deploy the underlying models.\nsteps.inputs allow you to specify the inputs to this step.\noutputs.steps allow you to specify the output of the Pipeline. A pipeline can have multiple paths include flows of data that do not reach the output, e.g. Drift detection steps. However, if you wish to call your Pipeline in a synchronous manner via REST/gRPC then an output must be", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "758985af-9a7d-4648-b125-bc07ca3c3f3c", "page": "pipelines", "section": "pipelines", "text": "same time you deploy the underlying models.\nsteps.inputs allow you to specify the inputs to this step.\noutputs.steps allow you to specify the output of the Pipeline. A pipeline can have multiple paths include flows of data that do not reach the output, e.g. Drift detection steps. However, if you wish to call your Pipeline in a synchronous manner via REST/gRPC then an output must be present so the Pipeline can be treated as a function.\n\n\n\nExpressing input data sources\u00b6\nModel step inputs are defined with a dot notation of the form:\n<stepName>|<pipelineName>.<inputs|outputs>.<tensorName>\n\n\nInputs with just a step name will be assumed to be step.outputs.\nThe default payloads for Pipelines is the V2 protocol which requires named tensors as inputs and outputs from a model. If you require just certain tensors from a model you can reference those in the inputs, e.g. mymodel.outputs.t1 will reference the tensor t1 from the model mymodel.\nFor the specification of the V2 protocol.\n\n\nChain\u00b6\nThe simplest Pipeline chains models together: the output of one model goes into the input of the next. This will work out of the box if the output tensor names from a model match the input tensor names for the one being chained to. If they do not then the tensorMap construct presently needs to be used to define the mapping explicitly, e.g. see below for a simple chained pipeline of two tfsimple example models:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      -", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "fcbc8a17-d48a-4e64-9b80-36d427ee85b7", "page": "pipelines", "section": "pipelines", "text": "chained to. If they do not then the tensorMap construct presently needs to be used to define the mapping explicitly, e.g. see below for a simple chained pipeline of two tfsimple example models:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n\n      subgraph input\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n\n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      TF1 --->|OUTPUT0: INPUT0| TF2(tfsimple2)\n      TF1 --->|OUTPUT1: INPUT1| TF2\n\n      subgraph output\n          OUTPUT0:::pipeIO\n          OUTPUT1:::pipeIO\n      end\n\n      TF2 --> OUTPUT0\n      TF2 --> OUTPUT1\n        \nA simple chain of two models.\u00b6\n\n\nIn the above we rename", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "614f102c-7aa6-4164-ada7-1737f6b26faa", "page": "pipelines", "section": "pipelines", "text": "   subgraph output\n          OUTPUT0:::pipeIO\n          OUTPUT1:::pipeIO\n      end\n\n      TF2 --> OUTPUT0\n      TF2 --> OUTPUT1\n        \nA simple chain of two models.\u00b6\n\n\nIn the above we rename tensor OUTPUT0 to INPUT0 and OUTPUT1 to INPUT1. This allows these models to be chained together. The shape and data-type of the tensors needs to match as well.\nThis example can be found in the pipeline-examples examples.\n\n\nJoin\u00b6\nJoining allows us to combine outputs from multiple steps as input to a new step.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: join\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: tfsimple3      \n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n      classDef hidden fill:#ffffff,stroke:#ffffff\n\n      subgraph input\n          INPUT0:::pipeIO\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "c6a0410e-3d2b-4fc2-af2e-9ea7282c0839", "page": "pipelines", "section": "pipelines", "text": "  steps:\n    - tfsimple3\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n      classDef hidden fill:#ffffff,stroke:#ffffff\n\n      subgraph input\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n\n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      INPUT0 --> TF2(tfsimple2)\n      INPUT1 --> TF2\n      TF1 -.-> |OUTPUT1| tf1( ):::hidden\n      TF1 --> |OUTPUT0: INPUT0| TF3(tfsimple3)\n      TF2 -.-> |OUTPUT0| tf2( ):::hidden\n      TF2 --> |OUTPUT1: INPUT1| TF3\n\n      subgraph output\n          OUTPUT0:::pipeIO\n          OUTPUT1:::pipeIO\n      end\n      TF3 --> OUTPUT0\n      TF3 --> OUTPUT1\n        \nJoining the outputs of two models into a third model. The dashed lines signify model outputs that are not captured in the output of the pipeline.\u00b6\n\n\nHere we pass the pipeline inputs to two models and then take one output tensor from each and pass to the final model. We use the same tensorMap technique to rename", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "c50136b2-44b4-43e3-9954-c206c73b5e41", "page": "pipelines", "section": "pipelines", "text": "OUTPUT1\n        \nJoining the outputs of two models into a third model. The dashed lines signify model outputs that are not captured in the output of the pipeline.\u00b6\n\n\nHere we pass the pipeline inputs to two models and then take one output tensor from each and pass to the final model. We use the same tensorMap technique to rename tensors as disucssed in the previous section.\nJoins can have a join type which can be specified with inputsJoinType and can take the values:\n\ninner : require all inputs to be available to join.\nouter : wait for joinWindowMs to join any inputs. Ignoring any inputs that have not sent any data at that point. This will mean this step of the pipeline is guaranteed to have a latency of at least joinWindowMs.\nany : Wait for any of the specified data sources.\n\nThis example can be found in the pipeline-examples examples.\n\n\nConditional Logic\u00b6\nPipelines can create conditional flows via various methods. We will discuss each in turn.\n\nModel routing via tensors\u00b6\nThe simplest way is to create a model that outputs different named tensors based on its decision. This way downstream steps can be dependant on different expected tensors. An example is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-conditional\nspec:\n  steps:\n  - name: conditional\n  - name: mul10\n    inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "c1310b6a-109c-4ba2-9dbd-8f69dc3dac29", "page": "pipelines", "section": "pipelines", "text": "different expected tensors. An example is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-conditional\nspec:\n  steps:\n  - name: conditional\n  - name: mul10\n    inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n      conditional.outputs.OUTPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n      classDef join fill:#CEE741;\n\n      subgraph input\n      INPUT0:::pipeIO\n          CHOICE:::pipeIO\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n\n      CHOICE --> conditional\n      INPUT0 --> conditional\n      INPUT1 --> conditional\n\n      conditional --> |OUTPUT0: INPUT| add10\n      conditional --> |OUTPUT1: INPUT| mul10\n\n      add10 --> |OUTPUT| any(any):::join\n      mul10 --> |OUTPUT| any\n\n      subgraph output\n          OUTPUT(OUTPUT):::pipeIO\n      end\n\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "594db728-11f1-42ed-874d-dafc6701b028", "page": "pipelines", "section": "pipelines", "text": "     conditional --> |OUTPUT0: INPUT| add10\n      conditional --> |OUTPUT1: INPUT| mul10\n\n      add10 --> |OUTPUT| any(any):::join\n      mul10 --> |OUTPUT| any\n\n      subgraph output\n          OUTPUT(OUTPUT):::pipeIO\n      end\n\n      any --> OUTPUT\n\n      linkStyle 3 stroke:blue,color:blue;\n      linkStyle 5 stroke:blue,color:blue;\n      linkStyle 4 stroke:red,color:red;\n      linkStyle 6 stroke:red,color:red;\n        \nPipeline with a conditional output model. The model conditional only outputs one of the two tensors, so only one path through the graph (red or blue) is taken by a single request\u00b6\n\n\nIn the above we have a step conditional that either outputs a tensor named OUTPUT0 or a tensor named OUTPUT1. The mul10 step depends on an output in OUTPUT0 while the add10 step depends on an output from OUTPUT1.\nNote, we also have a final Pipeline output step that does an any join on these two models essentially outputting fron the pipeline whichever data arrives from either model. This type of Pipeline can be used for Multi-Armed bandit solutions where you want to route traffic dynamically.\nThis example can be found in the pipeline-examples examples.\n\n\nErrors\u00b6\nIts also possible to abort pipelines when an error is produced to in effect create a condition. This is illustrated below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "fd7679cc-9dca-4dce-929b-478fbf91d7ce", "page": "pipelines", "section": "pipelines", "text": "these two models essentially outputting fron the pipeline whichever data arrives from either model. This type of Pipeline can be used for Multi-Armed bandit solutions where you want to route traffic dynamically.\nThis example can be found in the pipeline-examples examples.\n\n\nErrors\u00b6\nIts also possible to abort pipelines when an error is produced to in effect create a condition. This is illustrated below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: error\nspec:\n  steps:\n    - name: outlier-error\n  output:\n    steps:\n    - outlier-error\n\n\nThis Pipeline runs normally or throws an error based on whether the input tensors have certain values.\nThis example can be found in the pipeline-examples examples.\n\n\nTriggers\u00b6\nSometimes you want to run a step if an output is received from a previous step but not to send the data from that step to the model. This is illustrated below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: joincheck\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: check\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT\n    - name: tfsimple3      \n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n      triggers:\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "cdff1570-50ca-43c5-bad3-4c5e58948d2c", "page": "pipelines", "section": "pipelines", "text": "   - name: tfsimple3      \n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n      triggers:\n      - check.outputs.OUTPUT\n  output:\n    steps:\n    - tfsimple3\n\n\n\n\n              flowchart LR\n    classDef pipeIO fill:#F6E083\n    classDef hidden fill:#ffffff,stroke:#ffffff\n\n    subgraph input\n        INPUT0:::pipeIO\n        INPUT1:::pipeIO\n    end\n\n    INPUT0 --> TF1(tfsimple1)\n    INPUT1 --> TF1\n    INPUT0 --> TF2(tfsimple2)\n    INPUT1 --> TF2\n    TF1 -.-> |OUTPUT1| tf1( ):::hidden\n\n    TF1 --> |OUTPUT0: INPUT| check\n    TF1 --> |OUTPUT0: INPUT0| TF3(tfsimple3)\n    TF2 --> |OUTPUT1: INPUT1| TF3\n    TF2 -.-> |OUTPUT0| tf2( ):::hidden\n\n    check --o |OUTPUT| TF3\n    linkStyle 9 stroke:#CEE741,color:black;\n\n    subgraph output\n      OUTPUT0:::pipeIO\n      OUTPUT1:::pipeIO\n    end\n\n    TF3 --> OUTPUT0\n    TF3 --> OUTPUT1\n        \nA pipeline with a single trigger. The", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "af421e02-9ade-441a-861f-1ccbdbfcc1fd", "page": "pipelines", "section": "pipelines", "text": "-.-> |OUTPUT0| tf2( ):::hidden\n\n    check --o |OUTPUT| TF3\n    linkStyle 9 stroke:#CEE741,color:black;\n\n    subgraph output\n      OUTPUT0:::pipeIO\n      OUTPUT1:::pipeIO\n    end\n\n    TF3 --> OUTPUT0\n    TF3 --> OUTPUT1\n        \nA pipeline with a single trigger. The model tfsimple3 only runs if the model check returns a tensor named OUTPUT. The green edge signifies that this is a trigger and not an additional input to tfsimple3. The dashed lines signify model outputs that are not captured in the output of the pipeline.\u00b6\n\n\nIn this example the last step tfsimple3 runs only if there are outputs from tfsimple1 and tfsimple2 but also data from the check step. However, if the step tfsimple3 is run it only receives the join of data from tfsimple1 and tfsimple2.\nThis example can be found in the pipeline-examples examples.\n\n\nTrigger Joins\u00b6\nYou can also define multiple triggers which need to happen based on a particulr join type. For example:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: trigger-joins\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok1\n    - trigger-joins.inputs.ok2\n    triggersJoinType: any\n  - name: add10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok3\n  output:\n    steps:\n    - mul10\n    - add10\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "18f73a25-bc64-4e92-a410-392faa29193d", "page": "pipelines", "section": "pipelines", "text": "  - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok1\n    - trigger-joins.inputs.ok2\n    triggersJoinType: any\n  - name: add10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok3\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n      classDef pipeIOopt fill:#F6E083,stroke-dasharray: 5 5;\n      classDef trigger fill:#CEE741;\n      classDef hidden fill:#ffffff,stroke:#ffffff\n      classDef join fill:#CEE741;\n\n      subgraph input\n          ok1:::pipeIOopt\n          ok2:::pipeIOopt\n          INPUT:::pipeIO\n          ok3:::pipeIOopt\n      end\n\n      ok1 --o any\n      ok2 --o any\n      any((any)):::trigger --o mul10\n      linkStyle 0 stroke:#CEE741,color:green;\n      linkStyle 1 stroke:#CEE741,color:green;\n      linkStyle 2 stroke:#CEE741,color:green;\n\n      INPUT --> mul10\n      INPUT --> add10\n\n      ok3 --o add10\n      linkStyle 5 stroke:#CEE741,color:green;\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "7bbfbfcb-fca5-4741-98af-5c5fa4cf9b13", "page": "pipelines", "section": "pipelines", "text": "     any((any)):::trigger --o mul10\n      linkStyle 0 stroke:#CEE741,color:green;\n      linkStyle 1 stroke:#CEE741,color:green;\n      linkStyle 2 stroke:#CEE741,color:green;\n\n      INPUT --> mul10\n      INPUT --> add10\n\n      ok3 --o add10\n      linkStyle 5 stroke:#CEE741,color:green;\n\n      subgraph output\n        OUTPUT:::pipeIO\n      end\n\n      mul10 -->|OUTPUT| anyOut(any):::join\n      add10 --> |OUTPUT| anyOut\n      anyOut --> OUTPUT\n        \nA pipeline with multiple triggers and a trigger join of type any. The pipeline has four inputs, but three of these are optional (signified by the dashed borders).\u00b6\n\n\nHere the mul10 step is run if data is seen on the pipeline inputs in the ok1 or ok2 tensors based on the any join type. If data is seen on ok3 then the add10 step is run.\nIf we changed the triggersJoinType for mul10 to inner then both ok1 and ok2 would need to appear before mul10 is run.\n\n\nPipeline Inputs\u00b6\nPipelines by default can be accessed synchronously via http/grpc or asynchronously via the Kafka topic created for them. However, it\u2019s also possible to create a pipeline to take input from one or more other pipelines by specifying an input section. If for example we already have the tfsimple pipeline shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "fb39fd2e-cf60-461c-a323-05fd9eee33d3", "page": "pipelines", "section": "pipelines", "text": "ok1 and ok2 would need to appear before mul10 is run.\n\n\nPipeline Inputs\u00b6\nPipelines by default can be accessed synchronously via http/grpc or asynchronously via the Kafka topic created for them. However, it\u2019s also possible to create a pipeline to take input from one or more other pipelines by specifying an input section. If for example we already have the tfsimple pipeline shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nWe can create another pipeline which takes its input from this pipeline, as shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n\n      subgraph tfsimple.inputs\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n      \n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      \n      subgraph tfsimple.outputs\n          OUTPUT0:::pipeIO\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "2e41fc60-0e02-4561-86d1-2e3fa8ee5d06", "page": "pipelines", "section": "pipelines", "text": "  INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n      \n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      \n      subgraph tfsimple.outputs\n          OUTPUT0:::pipeIO\n          OUTPUT1:::pipeIO\n      end\n      \n      TF1 --> OUTPUT0\n      TF1 --> OUTPUT1\n\n      subgraph tfsimple-extended.inputs\n        INPUT10(INPUT0):::pipeIO\n        INPUT11(INPUT1):::pipeIO\n      end\n\n    OUTPUT0 --> INPUT10\n    OUTPUT1 --> INPUT11\n\n    INPUT10 --> TF2(tfsimple2)\n    INPUT11 --> TF2\n\n      subgraph tfsimple-extended.outputs\n          OUTPUT10(OUTPUT0):::pipeIO\n          OUTPUT11(OUTPUT1):::pipeIO\n      end\n      \n      TF2 --> OUTPUT10\n      TF2 --> OUTPUT11\n        \nA pipeline taking as input the output of another pipeline.\u00b6\n\n\nIn this way pipelines can be built to extend existing running pipelines to allow extensibility and sharing of data flows.\nThe spec follows the same spec for a step except that", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "20e4b6b2-882b-4d94-a0b3-f7963ee141c0", "page": "pipelines", "section": "pipelines", "text": " \n      TF2 --> OUTPUT10\n      TF2 --> OUTPUT11\n        \nA pipeline taking as input the output of another pipeline.\u00b6\n\n\nIn this way pipelines can be built to extend existing running pipelines to allow extensibility and sharing of data flows.\nThe spec follows the same spec for a step except that references to other pipelines are contained in the externalInputs section which takes the form of pipeline or pipeline.step references:\n\n<pipelineName>.(inputs|outputs).<tensorName>\n<pipelineName>.(step).<stepName>.<tensorName>\n\nTensor names are optional and only needed if you want to take just one tensor from an input or output.\nThere is also an externalTriggers section which allows triggers from other pipelines.\nFurther examples can be found in the pipeline-to-pipeline examples.\nPresent caveats:\n\nCircular dependencies are not presently detected.\nPipeline status is local to each pipeline.\n\n\n\n\nData Centric Implementation\u00b6\nInternally Pipelines are implemented using Kafka. Each input and output to a pipeline step has an associated Kafka topic. This has many advantages and allows auditing, replay and debugging easier as data is preserved from every step in your pipeline.\nTracing allows you to monitor the processing latency of your pipelines.\n\nAs each request to a pipelines moves through the steps its data will appear in input and output topics. This allows a full audit of every transformation to be carried out.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "c8285e28-b44e-44da-a480-62c4d81b6d14", "page": "pipelines", "section": "creating-pipelines", "text": "\nCreating Pipelines\u00b6\nThe simplest way to create Pipelines is by defining them with the Pipeline resource we provide for Kubernetes. This format is accepted by our Kubernetes implementation but also locally via our seldon CLI.\nInternally in both cases Pipelines are created via our Scheduler API. Advanced users could submit Pipelines directly using this gRPC service.\nAn example that chains two models together is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: chain\n  namespace: seldon-mesh\nspec:\n  steps:\n    - name: model1\n    - name: model2\n      inputs:\n      - model1\n  output:\n    steps:\n    - model2\n\n\n\nsteps allow you to specify the models you want to combine into a pipeline. Each step name will correspond to a model of the same name. These models will need to have been deployed and available for the Pipeline to function, however Pipelines can be deployed before or at the same time you deploy the underlying models.\nsteps.inputs allow you to specify the inputs to this step.\noutputs.steps allow you to specify the output of the Pipeline. A pipeline can have multiple paths include flows of data that do not reach the output, e.g. Drift detection steps. However, if you wish to call your Pipeline in a synchronous manner via REST/gRPC then an output must be present so the Pipeline can be treated as a function.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "2386ff4e-8daa-4105-b64e-2c408712b265", "page": "pipelines", "section": "expressing-input-data-sources", "text": "\nExpressing input data sources\u00b6\nModel step inputs are defined with a dot notation of the form:\n<stepName>|<pipelineName>.<inputs|outputs>.<tensorName>\n\n\nInputs with just a step name will be assumed to be step.outputs.\nThe default payloads for Pipelines is the V2 protocol which requires named tensors as inputs and outputs from a model. If you require just certain tensors from a model you can reference those in the inputs, e.g. mymodel.outputs.t1 will reference the tensor t1 from the model mymodel.\nFor the specification of the V2 protocol.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "0b06c2f0-cf42-4c71-bdd8-11cc5b5b69b6", "page": "pipelines", "section": "chain", "text": "\nChain\u00b6\nThe simplest Pipeline chains models together: the output of one model goes into the input of the next. This will work out of the box if the output tensor names from a model match the input tensor names for the one being chained to. If they do not then the tensorMap construct presently needs to be used to define the mapping explicitly, e.g. see below for a simple chained pipeline of two tfsimple example models:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n\n      subgraph input\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n\n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      TF1 --->|OUTPUT0: INPUT0| TF2(tfsimple2)\n      TF1 --->|OUTPUT1: INPUT1| TF2\n\n      subgraph output\n          OUTPUT0:::pipeIO\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "791eb3bd-3cc1-414a-bfa3-46dbfacab329", "page": "pipelines", "section": "chain", "text": "     end\n\n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      TF1 --->|OUTPUT0: INPUT0| TF2(tfsimple2)\n      TF1 --->|OUTPUT1: INPUT1| TF2\n\n      subgraph output\n          OUTPUT0:::pipeIO\n          OUTPUT1:::pipeIO\n      end\n\n      TF2 --> OUTPUT0\n      TF2 --> OUTPUT1\n        \nA simple chain of two models.\u00b6\n\n\nIn the above we rename tensor OUTPUT0 to INPUT0 and OUTPUT1 to INPUT1. This allows these models to be chained together. The shape and data-type of the tensors needs to match as well.\nThis example can be found in the pipeline-examples examples.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "eaccf2c4-1dac-49b9-8332-db20d58d628a", "page": "pipelines", "section": "join", "text": "\nJoin\u00b6\nJoining allows us to combine outputs from multiple steps as input to a new step.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: join\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: tfsimple3      \n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n      classDef hidden fill:#ffffff,stroke:#ffffff\n\n      subgraph input\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n\n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      INPUT0 --> TF2(tfsimple2)\n      INPUT1 --> TF2\n      TF1 -.-> |OUTPUT1| tf1( ):::hidden\n      TF1 --> |OUTPUT0: INPUT0| TF3(tfsimple3)\n      TF2 -.-> |OUTPUT0| tf2( ):::hidden\n      TF2 --> |OUTPUT1: INPUT1| TF3\n\n      subgraph output\n          OUTPUT0:::pipeIO\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "84e04d06-7ab4-4958-ab37-2d3a511d193c", "page": "pipelines", "section": "join", "text": "  INPUT1 --> TF2\n      TF1 -.-> |OUTPUT1| tf1( ):::hidden\n      TF1 --> |OUTPUT0: INPUT0| TF3(tfsimple3)\n      TF2 -.-> |OUTPUT0| tf2( ):::hidden\n      TF2 --> |OUTPUT1: INPUT1| TF3\n\n      subgraph output\n          OUTPUT0:::pipeIO\n          OUTPUT1:::pipeIO\n      end\n      TF3 --> OUTPUT0\n      TF3 --> OUTPUT1\n        \nJoining the outputs of two models into a third model. The dashed lines signify model outputs that are not captured in the output of the pipeline.\u00b6\n\n\nHere we pass the pipeline inputs to two models and then take one output tensor from each and pass to the final model. We use the same tensorMap technique to rename tensors as disucssed in the previous section.\nJoins can have a join type which can be specified with inputsJoinType and can take the values:\n\ninner : require all inputs to be available to join.\nouter : wait for joinWindowMs to join any inputs. Ignoring any inputs that have not sent any data at that point. This will mean this step of the pipeline is guaranteed to have a latency of at least joinWindowMs.\nany : Wait for any of the specified data sources.\n\nThis example can be found in the pipeline-examples examples.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "7b03c78f-d82f-416d-8b41-52ac392d1672", "page": "pipelines", "section": "conditional-logic", "text": "\nConditional Logic\u00b6\nPipelines can create conditional flows via various methods. We will discuss each in turn.\n\nModel routing via tensors\u00b6\nThe simplest way is to create a model that outputs different named tensors based on its decision. This way downstream steps can be dependant on different expected tensors. An example is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-conditional\nspec:\n  steps:\n  - name: conditional\n  - name: mul10\n    inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n      conditional.outputs.OUTPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n      classDef join fill:#CEE741;\n\n      subgraph input\n      INPUT0:::pipeIO\n          CHOICE:::pipeIO\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n\n      CHOICE --> conditional\n      INPUT0 --> conditional\n      INPUT1 --> conditional\n\n      conditional --> |OUTPUT0: INPUT| add10\n      conditional --> |OUTPUT1: INPUT| mul10\n\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "20cd6a0c-ccfc-4499-8af9-23a7a16348b0", "page": "pipelines", "section": "conditional-logic", "text": " INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n\n      CHOICE --> conditional\n      INPUT0 --> conditional\n      INPUT1 --> conditional\n\n      conditional --> |OUTPUT0: INPUT| add10\n      conditional --> |OUTPUT1: INPUT| mul10\n\n      add10 --> |OUTPUT| any(any):::join\n      mul10 --> |OUTPUT| any\n\n      subgraph output\n          OUTPUT(OUTPUT):::pipeIO\n      end\n\n      any --> OUTPUT\n\n      linkStyle 3 stroke:blue,color:blue;\n      linkStyle 5 stroke:blue,color:blue;\n      linkStyle 4 stroke:red,color:red;\n      linkStyle 6 stroke:red,color:red;\n        \nPipeline with a conditional output model. The model conditional only outputs one of the two tensors, so only one path through the graph (red or blue) is taken by a single request\u00b6\n\n\nIn the above we have a step conditional that either outputs a tensor named OUTPUT0 or a tensor named OUTPUT1. The mul10 step depends on an output in OUTPUT0 while the add10 step depends on an output from OUTPUT1.\nNote, we also have a final Pipeline output step that does an any join on these two models essentially outputting fron the pipeline whichever data arrives from either model. This type of Pipeline can be used for", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "87d1cdee-1af8-42cc-82d4-3b7d88400072", "page": "pipelines", "section": "conditional-logic", "text": "a tensor named OUTPUT0 or a tensor named OUTPUT1. The mul10 step depends on an output in OUTPUT0 while the add10 step depends on an output from OUTPUT1.\nNote, we also have a final Pipeline output step that does an any join on these two models essentially outputting fron the pipeline whichever data arrives from either model. This type of Pipeline can be used for Multi-Armed bandit solutions where you want to route traffic dynamically.\nThis example can be found in the pipeline-examples examples.\n\n\nErrors\u00b6\nIts also possible to abort pipelines when an error is produced to in effect create a condition. This is illustrated below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: error\nspec:\n  steps:\n    - name: outlier-error\n  output:\n    steps:\n    - outlier-error\n\n\nThis Pipeline runs normally or throws an error based on whether the input tensors have certain values.\nThis example can be found in the pipeline-examples examples.\n\n\nTriggers\u00b6\nSometimes you want to run a step if an output is received from a previous step but not to send the data from that step to the model. This is illustrated below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: joincheck\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: check\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT\n    - name: tfsimple3      \n      inputs:\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "fb7fdcfa-7728-430d-9240-fe69e55fa1a7", "page": "pipelines", "section": "conditional-logic", "text": "name: tfsimple1\n    - name: tfsimple2\n    - name: check\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT\n    - name: tfsimple3      \n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n      triggers:\n      - check.outputs.OUTPUT\n  output:\n    steps:\n    - tfsimple3\n\n\n\n\n              flowchart LR\n    classDef pipeIO fill:#F6E083\n    classDef hidden fill:#ffffff,stroke:#ffffff\n\n    subgraph input\n        INPUT0:::pipeIO\n        INPUT1:::pipeIO\n    end\n\n    INPUT0 --> TF1(tfsimple1)\n    INPUT1 --> TF1\n    INPUT0 --> TF2(tfsimple2)\n    INPUT1 --> TF2\n    TF1 -.-> |OUTPUT1| tf1( ):::hidden\n\n    TF1 --> |OUTPUT0: INPUT| check\n    TF1 --> |OUTPUT0: INPUT0| TF3(tfsimple3)\n    TF2 --> |OUTPUT1: INPUT1| TF3\n    TF2 -.-> |OUTPUT0| tf2( ):::hidden\n\n    check --o |OUTPUT| TF3\n    linkStyle 9 stroke:#CEE741,color:black;\n\n    subgraph output\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "0c3d79cb-e0b2-4263-9816-ed1fd9098f57", "page": "pipelines", "section": "conditional-logic", "text": "   INPUT1 --> TF2\n    TF1 -.-> |OUTPUT1| tf1( ):::hidden\n\n    TF1 --> |OUTPUT0: INPUT| check\n    TF1 --> |OUTPUT0: INPUT0| TF3(tfsimple3)\n    TF2 --> |OUTPUT1: INPUT1| TF3\n    TF2 -.-> |OUTPUT0| tf2( ):::hidden\n\n    check --o |OUTPUT| TF3\n    linkStyle 9 stroke:#CEE741,color:black;\n\n    subgraph output\n      OUTPUT0:::pipeIO\n      OUTPUT1:::pipeIO\n    end\n\n    TF3 --> OUTPUT0\n    TF3 --> OUTPUT1\n        \nA pipeline with a single trigger. The model tfsimple3 only runs if the model check returns a tensor named OUTPUT. The green edge signifies that this is a trigger and not an additional input to tfsimple3. The dashed lines signify model outputs that are not captured in the output of the pipeline.\u00b6\n\n\nIn this example the last step tfsimple3 runs only if there are outputs from tfsimple1 and tfsimple2 but also data from the check step. However, if the step tfsimple3 is run it only receives the join of data from tfsimple1 and tfsimple2.\nThis example can be found in the pipeline-examples examples.\n\n\nTrigger Joins\u00b6\nYou can also define multiple triggers which need to happen based on a particulr join type. For example:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: trigger-joins\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok1\n    - trigger-joins.inputs.ok2\n    triggersJoinType:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "98c77c93-9c96-4bb0-a620-9d077030f7cd", "page": "pipelines", "section": "conditional-logic", "text": "example can be found in the pipeline-examples examples.\n\n\nTrigger Joins\u00b6\nYou can also define multiple triggers which need to happen based on a particulr join type. For example:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: trigger-joins\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok1\n    - trigger-joins.inputs.ok2\n    triggersJoinType: any\n  - name: add10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok3\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n      classDef pipeIOopt fill:#F6E083,stroke-dasharray: 5 5;\n      classDef trigger fill:#CEE741;\n      classDef hidden fill:#ffffff,stroke:#ffffff\n      classDef join fill:#CEE741;\n\n      subgraph input\n          ok1:::pipeIOopt\n          ok2:::pipeIOopt\n          INPUT:::pipeIO\n          ok3:::pipeIOopt\n      end\n\n      ok1 --o any\n      ok2 --o any\n      any((any)):::trigger --o mul10\n      linkStyle 0 stroke:#CEE741,color:green;\n      linkStyle", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "3f4c15de-d9ae-4cf2-adcc-d35e67d11ac1", "page": "pipelines", "section": "conditional-logic", "text": "         INPUT:::pipeIO\n          ok3:::pipeIOopt\n      end\n\n      ok1 --o any\n      ok2 --o any\n      any((any)):::trigger --o mul10\n      linkStyle 0 stroke:#CEE741,color:green;\n      linkStyle 1 stroke:#CEE741,color:green;\n      linkStyle 2 stroke:#CEE741,color:green;\n\n      INPUT --> mul10\n      INPUT --> add10\n\n      ok3 --o add10\n      linkStyle 5 stroke:#CEE741,color:green;\n\n      subgraph output\n        OUTPUT:::pipeIO\n      end\n\n      mul10 -->|OUTPUT| anyOut(any):::join\n      add10 --> |OUTPUT| anyOut\n      anyOut --> OUTPUT\n        \nA pipeline with multiple triggers and a trigger join of type any. The pipeline has four inputs, but three of these are optional (signified by the dashed borders).\u00b6\n\n\nHere the mul10 step is run if data is seen on the pipeline inputs in the ok1 or ok2 tensors based on the any join type. If data is seen on ok3 then the add10 step is run.\nIf we changed the triggersJoinType for mul10 to inner then both ok1 and ok2 would need to appear before mul10 is run.\n\n\nPipeline Inputs\u00b6\nPipelines by default can be accessed synchronously via http/grpc or asynchronously", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "6c16b3e5-64d6-4483-8241-545af72e0684", "page": "pipelines", "section": "conditional-logic", "text": "if data is seen on the pipeline inputs in the ok1 or ok2 tensors based on the any join type. If data is seen on ok3 then the add10 step is run.\nIf we changed the triggersJoinType for mul10 to inner then both ok1 and ok2 would need to appear before mul10 is run.\n\n\nPipeline Inputs\u00b6\nPipelines by default can be accessed synchronously via http/grpc or asynchronously via the Kafka topic created for them. However, it\u2019s also possible to create a pipeline to take input from one or more other pipelines by specifying an input section. If for example we already have the tfsimple pipeline shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nWe can create another pipeline which takes its input from this pipeline, as shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n\n      subgraph tfsimple.inputs\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "0ad1883e-05b6-4806-a1f7-29d322fce31f", "page": "pipelines", "section": "conditional-logic", "text": "   - tfsimple2\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n\n      subgraph tfsimple.inputs\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n      \n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      \n      subgraph tfsimple.outputs\n          OUTPUT0:::pipeIO\n          OUTPUT1:::pipeIO\n      end\n      \n      TF1 --> OUTPUT0\n      TF1 --> OUTPUT1\n\n      subgraph tfsimple-extended.inputs\n        INPUT10(INPUT0):::pipeIO\n        INPUT11(INPUT1):::pipeIO\n      end\n\n    OUTPUT0 --> INPUT10\n    OUTPUT1 --> INPUT11\n\n    INPUT10 --> TF2(tfsimple2)\n    INPUT11 --> TF2\n\n      subgraph tfsimple-extended.outputs\n          OUTPUT10(OUTPUT0):::pipeIO\n          OUTPUT11(OUTPUT1):::pipeIO\n      end\n      \n      TF2 --> OUTPUT10\n      TF2 --> OUTPUT11\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "048fe01a-ccda-424e-b41f-e64fc8da5e0e", "page": "pipelines", "section": "conditional-logic", "text": "  INPUT11 --> TF2\n\n      subgraph tfsimple-extended.outputs\n          OUTPUT10(OUTPUT0):::pipeIO\n          OUTPUT11(OUTPUT1):::pipeIO\n      end\n      \n      TF2 --> OUTPUT10\n      TF2 --> OUTPUT11\n        \nA pipeline taking as input the output of another pipeline.\u00b6\n\n\nIn this way pipelines can be built to extend existing running pipelines to allow extensibility and sharing of data flows.\nThe spec follows the same spec for a step except that references to other pipelines are contained in the externalInputs section which takes the form of pipeline or pipeline.step references:\n\n<pipelineName>.(inputs|outputs).<tensorName>\n<pipelineName>.(step).<stepName>.<tensorName>\n\nTensor names are optional and only needed if you want to take just one tensor from an input or output.\nThere is also an externalTriggers section which allows triggers from other pipelines.\nFurther examples can be found in the pipeline-to-pipeline examples.\nPresent caveats:\n\nCircular dependencies are not presently detected.\nPipeline status is local to each pipeline.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "b7b7b795-6734-42be-829f-3b433c935f05", "page": "pipelines", "section": "model-routing-via-tensors", "text": "\nModel routing via tensors\u00b6\nThe simplest way is to create a model that outputs different named tensors based on its decision. This way downstream steps can be dependant on different expected tensors. An example is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-conditional\nspec:\n  steps:\n  - name: conditional\n  - name: mul10\n    inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n      conditional.outputs.OUTPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n      classDef join fill:#CEE741;\n\n      subgraph input\n      INPUT0:::pipeIO\n          CHOICE:::pipeIO\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n\n      CHOICE --> conditional\n      INPUT0 --> conditional\n      INPUT1 --> conditional\n\n      conditional --> |OUTPUT0: INPUT| add10\n      conditional --> |OUTPUT1: INPUT| mul10\n\n      add10 --> |OUTPUT| any(any):::join\n      mul10 -->", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "2955b5dc-5f56-41ac-a28a-3bb1c80cc24c", "page": "pipelines", "section": "model-routing-via-tensors", "text": "   end\n\n      CHOICE --> conditional\n      INPUT0 --> conditional\n      INPUT1 --> conditional\n\n      conditional --> |OUTPUT0: INPUT| add10\n      conditional --> |OUTPUT1: INPUT| mul10\n\n      add10 --> |OUTPUT| any(any):::join\n      mul10 --> |OUTPUT| any\n\n      subgraph output\n          OUTPUT(OUTPUT):::pipeIO\n      end\n\n      any --> OUTPUT\n\n      linkStyle 3 stroke:blue,color:blue;\n      linkStyle 5 stroke:blue,color:blue;\n      linkStyle 4 stroke:red,color:red;\n      linkStyle 6 stroke:red,color:red;\n        \nPipeline with a conditional output model. The model conditional only outputs one of the two tensors, so only one path through the graph (red or blue) is taken by a single request\u00b6\n\n\nIn the above we have a step conditional that either outputs a tensor named OUTPUT0 or a tensor named OUTPUT1. The mul10 step depends on an output in OUTPUT0 while the add10 step depends on an output from OUTPUT1.\nNote, we also have a final Pipeline output step that does an any join on these two models essentially outputting fron the pipeline whichever data arrives from either model. This type of Pipeline can be used for Multi-Armed bandit solutions where you want to route traffic dynamically.\nThis example can be found", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "2159ed94-5928-403f-8138-e1d9413560f3", "page": "pipelines", "section": "model-routing-via-tensors", "text": "an output in OUTPUT0 while the add10 step depends on an output from OUTPUT1.\nNote, we also have a final Pipeline output step that does an any join on these two models essentially outputting fron the pipeline whichever data arrives from either model. This type of Pipeline can be used for Multi-Armed bandit solutions where you want to route traffic dynamically.\nThis example can be found in the pipeline-examples examples.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "561af929-2082-4a2f-b3f9-4b0b14b49c24", "page": "pipelines", "section": "errors", "text": "\nErrors\u00b6\nIts also possible to abort pipelines when an error is produced to in effect create a condition. This is illustrated below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: error\nspec:\n  steps:\n    - name: outlier-error\n  output:\n    steps:\n    - outlier-error\n\n\nThis Pipeline runs normally or throws an error based on whether the input tensors have certain values.\nThis example can be found in the pipeline-examples examples.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "a47c65ec-4d73-4ccd-bc05-59710cf7009c", "page": "pipelines", "section": "triggers", "text": "\nTriggers\u00b6\nSometimes you want to run a step if an output is received from a previous step but not to send the data from that step to the model. This is illustrated below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: joincheck\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: check\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT\n    - name: tfsimple3      \n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n      triggers:\n      - check.outputs.OUTPUT\n  output:\n    steps:\n    - tfsimple3\n\n\n\n\n              flowchart LR\n    classDef pipeIO fill:#F6E083\n    classDef hidden fill:#ffffff,stroke:#ffffff\n\n    subgraph input\n        INPUT0:::pipeIO\n        INPUT1:::pipeIO\n    end\n\n    INPUT0 --> TF1(tfsimple1)\n    INPUT1 --> TF1\n    INPUT0 --> TF2(tfsimple2)\n    INPUT1 --> TF2\n    TF1 -.-> |OUTPUT1| tf1( ):::hidden\n\n    TF1 --> |OUTPUT0: INPUT|", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "31fe7b7b-50e0-4150-a187-097e92b101fe", "page": "pipelines", "section": "triggers", "text": "   subgraph input\n        INPUT0:::pipeIO\n        INPUT1:::pipeIO\n    end\n\n    INPUT0 --> TF1(tfsimple1)\n    INPUT1 --> TF1\n    INPUT0 --> TF2(tfsimple2)\n    INPUT1 --> TF2\n    TF1 -.-> |OUTPUT1| tf1( ):::hidden\n\n    TF1 --> |OUTPUT0: INPUT| check\n    TF1 --> |OUTPUT0: INPUT0| TF3(tfsimple3)\n    TF2 --> |OUTPUT1: INPUT1| TF3\n    TF2 -.-> |OUTPUT0| tf2( ):::hidden\n\n    check --o |OUTPUT| TF3\n    linkStyle 9 stroke:#CEE741,color:black;\n\n    subgraph output\n      OUTPUT0:::pipeIO\n      OUTPUT1:::pipeIO\n    end\n\n    TF3 --> OUTPUT0\n    TF3 --> OUTPUT1\n        \nA pipeline with a single trigger. The model tfsimple3 only runs if the model check returns a tensor named OUTPUT. The green edge signifies that this is a trigger and not an additional input to tfsimple3. The dashed lines signify model outputs that are not captured in the output of the pipeline.\u00b6\n\n\nIn this example the last step tfsimple3 runs only if there are outputs from tfsimple1 and tfsimple2 but also data from the check step. However, if the step tfsimple3 is run it only receives the join of data from tfsimple1 and tfsimple2.\nThis example can be found in the pipeline-examples examples.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "04a0ae1b-852c-4548-9562-ccc1cf9dd718", "page": "pipelines", "section": "trigger-joins", "text": "\nTrigger Joins\u00b6\nYou can also define multiple triggers which need to happen based on a particulr join type. For example:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: trigger-joins\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok1\n    - trigger-joins.inputs.ok2\n    triggersJoinType: any\n  - name: add10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok3\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n      classDef pipeIOopt fill:#F6E083,stroke-dasharray: 5 5;\n      classDef trigger fill:#CEE741;\n      classDef hidden fill:#ffffff,stroke:#ffffff\n      classDef join fill:#CEE741;\n\n      subgraph input\n          ok1:::pipeIOopt\n          ok2:::pipeIOopt\n          INPUT:::pipeIO\n          ok3:::pipeIOopt\n      end\n\n      ok1 --o any\n      ok2 --o any\n      any((any)):::trigger --o mul10\n      linkStyle 0 stroke:#CEE741,color:green;\n      linkStyle 1 stroke:#CEE741,color:green;\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "15c3cf2e-0112-4e42-8caf-e4743045aed8", "page": "pipelines", "section": "trigger-joins", "text": "  INPUT:::pipeIO\n          ok3:::pipeIOopt\n      end\n\n      ok1 --o any\n      ok2 --o any\n      any((any)):::trigger --o mul10\n      linkStyle 0 stroke:#CEE741,color:green;\n      linkStyle 1 stroke:#CEE741,color:green;\n      linkStyle 2 stroke:#CEE741,color:green;\n\n      INPUT --> mul10\n      INPUT --> add10\n\n      ok3 --o add10\n      linkStyle 5 stroke:#CEE741,color:green;\n\n      subgraph output\n        OUTPUT:::pipeIO\n      end\n\n      mul10 -->|OUTPUT| anyOut(any):::join\n      add10 --> |OUTPUT| anyOut\n      anyOut --> OUTPUT\n        \nA pipeline with multiple triggers and a trigger join of type any. The pipeline has four inputs, but three of these are optional (signified by the dashed borders).\u00b6\n\n\nHere the mul10 step is run if data is seen on the pipeline inputs in the ok1 or ok2 tensors based on the any join type. If data is seen on ok3 then the add10 step is run.\nIf we changed the triggersJoinType for mul10 to inner then both ok1 and ok2 would need to appear before mul10 is run.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "e13bd466-5c4d-4681-a79d-42d75b0c27b8", "page": "pipelines", "section": "pipeline-inputs", "text": "\nPipeline Inputs\u00b6\nPipelines by default can be accessed synchronously via http/grpc or asynchronously via the Kafka topic created for them. However, it\u2019s also possible to create a pipeline to take input from one or more other pipelines by specifying an input section. If for example we already have the tfsimple pipeline shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nWe can create another pipeline which takes its input from this pipeline, as shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\n\n\n              flowchart LR\n      classDef pipeIO fill:#F6E083\n\n      subgraph tfsimple.inputs\n          INPUT0:::pipeIO\n          INPUT1:::pipeIO\n      end\n      \n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      \n      subgraph tfsimple.outputs\n          OUTPUT0:::pipeIO\n          OUTPUT1:::pipeIO\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "dbfbf3cd-79cd-4e01-8e11-830102bd4302", "page": "pipelines", "section": "pipeline-inputs", "text": "  INPUT1:::pipeIO\n      end\n      \n      INPUT0 --> TF1(tfsimple1)\n      INPUT1 --> TF1\n      \n      subgraph tfsimple.outputs\n          OUTPUT0:::pipeIO\n          OUTPUT1:::pipeIO\n      end\n      \n      TF1 --> OUTPUT0\n      TF1 --> OUTPUT1\n\n      subgraph tfsimple-extended.inputs\n        INPUT10(INPUT0):::pipeIO\n        INPUT11(INPUT1):::pipeIO\n      end\n\n    OUTPUT0 --> INPUT10\n    OUTPUT1 --> INPUT11\n\n    INPUT10 --> TF2(tfsimple2)\n    INPUT11 --> TF2\n\n      subgraph tfsimple-extended.outputs\n          OUTPUT10(OUTPUT0):::pipeIO\n          OUTPUT11(OUTPUT1):::pipeIO\n      end\n      \n      TF2 --> OUTPUT10\n      TF2 --> OUTPUT11\n        \nA pipeline taking as input the output of another pipeline.\u00b6\n\n\nIn this way pipelines can be built to extend existing running pipelines to allow extensibility and sharing of data flows.\nThe spec follows the same spec for a step except that references to other pipelines are contained in the externalInputs section", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "b8184475-cfb7-4c12-94ce-c0fa98e3f3da", "page": "pipelines", "section": "pipeline-inputs", "text": "     TF2 --> OUTPUT11\n        \nA pipeline taking as input the output of another pipeline.\u00b6\n\n\nIn this way pipelines can be built to extend existing running pipelines to allow extensibility and sharing of data flows.\nThe spec follows the same spec for a step except that references to other pipelines are contained in the externalInputs section which takes the form of pipeline or pipeline.step references:\n\n<pipelineName>.(inputs|outputs).<tensorName>\n<pipelineName>.(step).<stepName>.<tensorName>\n\nTensor names are optional and only needed if you want to take just one tensor from an input or output.\nThere is also an externalTriggers section which allows triggers from other pipelines.\nFurther examples can be found in the pipeline-to-pipeline examples.\nPresent caveats:\n\nCircular dependencies are not presently detected.\nPipeline status is local to each pipeline.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "abd89130-5d13-4b88-a43b-84bb45c8c61f", "page": "pipelines", "section": "data-centric-implementation", "text": "\nData Centric Implementation\u00b6\nInternally Pipelines are implemented using Kafka. Each input and output to a pipeline step has an associated Kafka topic. This has many advantages and allows auditing, replay and debugging easier as data is preserved from every step in your pipeline.\nTracing allows you to monitor the processing latency of your pipelines.\n\nAs each request to a pipelines moves through the steps its data will appear in input and output topics. This allows a full audit of every transformation to be carried out.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/pipelines/index.html", "key": "pipelines"}}, {"key": "f2765e8f-ca9c-4ddc-b04f-9b23dba36418", "page": "kubernetes/service-meshes/traefik", "section": "traefik", "text": "\nTraefik\u00b6\nTraefik provides a service mesh and ingress solution.\nWe will run through some examples as shown in the notebook service-meshes/traefik/traefik.ipynb\n\nSingle Model\u00b6\n\nA Seldon Iris Model\nTraefik Service\nTraefik IngressRoute\nTraefik Middleware for adding a header\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapps\n  namespace: seldon-mesh\nspec:\n  ports:\n  - name: web\n    port: 80\n    protocol: TCP\n  selector:\n    app: traefik-ingress-lb\n  type: LoadBalancer\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  entryPoints:\n  - web\n  routes:\n  - kind: Rule\n    match: PathPrefix(`/`)\n    middlewares:\n    - name: iris-header\n    services:\n    - name: seldon-mesh\n      port: 80\n      scheme: h2c\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: iris-header\n  namespace: seldon-mesh\nspec:\n  headers:\n    customRequestHeaders:\n      seldon-model: iris\n\n\n\n\nTraffic Split\u00b6\n\nWarning\nTraffic splitting does not presently work due to this issue. We recommend you use a Seldon Experiment instead.\n\n\n\nTraefik Examples\u00b6\nAssumes\n\nYou have installed Traefik as per their docs into namespace traefik-v2\n\nTested with traefik-10.19.4\nINGRESS_IP=!kubectl get svc traefik -n traefik-v2 -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nINGRESS_IP=INGRESS_IP[0]\nimport os\nos.environ['INGRESS_IP'] = INGRESS_IP\nINGRESS_IP\n\n\n'172.21.255.1'\n\n\n\nTraefik Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapps\n  namespace: seldon-mesh\nspec:\n  ports:\n  - name: web\n    port: 80\n    protocol: TCP\n  selector:\n    app: traefik-ingress-lb\n  type: LoadBalancer\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: traefik.containo.us/v1alpha1\nkind:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/traefik/index.html", "key": "kubernetes/service-meshes/traefik"}}, {"key": "8d8fcbc4-15a1-4e5f-8bb3-bd2732ed1a23", "page": "kubernetes/service-meshes/traefik", "section": "traefik", "text": "traefik -n traefik-v2 -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nINGRESS_IP=INGRESS_IP[0]\nimport os\nos.environ['INGRESS_IP'] = INGRESS_IP\nINGRESS_IP\n\n\n'172.21.255.1'\n\n\n\nTraefik Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapps\n  namespace: seldon-mesh\nspec:\n  ports:\n  - name: web\n    port: 80\n    protocol: TCP\n  selector:\n    app: traefik-ingress-lb\n  type: LoadBalancer\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  entryPoints:\n  - web\n  routes:\n  - kind: Rule\n    match: PathPrefix(`/`)\n    middlewares:\n    - name: iris-header\n    services:\n    - name: seldon-mesh\n      port: 80\n      scheme: h2c\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: iris-header\n  namespace: seldon-mesh\nspec:\n  headers:\n    customRequestHeaders:\n      seldon-model: iris\n\n\n!kustomize build config/single-model | kubectl apply -f -\n\n\nservice/myapps created\nmodel.mlops.seldon.io/iris created\ningressroute.traefik.containo.us/iris created\nmiddleware.traefik.containo.us/iris-header created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 196\n< Content-Type: application/json\n< Date: Sat, 16 Apr 2022 15:53:27 GMT\n< Seldon-Route: iris_1\n< Server: envoy\n< X-Envoy-Upstream-Service-Time: 895\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"0dccf477-78fa-4a11-92ff-4d7e4f1cdda8\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/traefik/index.html", "key": "kubernetes/service-meshes/traefik"}}, {"key": "9a9f9825-4827-440d-a527-39438568407e", "page": "kubernetes/service-meshes/traefik", "section": "traefik", "text": "Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 196\n< Content-Type: application/json\n< Date: Sat, 16 Apr 2022 15:53:27 GMT\n< Seldon-Route: iris_1\n< Server: envoy\n< X-Envoy-Upstream-Service-Time: 895\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"0dccf477-78fa-4a11-92ff-4d7e4f1cdda8\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nservice \"myapps\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\ningressroute.traefik.containo.us \"iris\" deleted\nmiddleware.traefik.containo.us \"iris-header\" deleted\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/traefik/index.html", "key": "kubernetes/service-meshes/traefik"}}, {"key": "8d846390-2b43-47cf-af1f-036b4d337071", "page": "kubernetes/service-meshes/traefik", "section": "single-model", "text": "\nSingle Model\u00b6\n\nA Seldon Iris Model\nTraefik Service\nTraefik IngressRoute\nTraefik Middleware for adding a header\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapps\n  namespace: seldon-mesh\nspec:\n  ports:\n  - name: web\n    port: 80\n    protocol: TCP\n  selector:\n    app: traefik-ingress-lb\n  type: LoadBalancer\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  entryPoints:\n  - web\n  routes:\n  - kind: Rule\n    match: PathPrefix(`/`)\n    middlewares:\n    - name: iris-header\n    services:\n    - name: seldon-mesh\n      port: 80\n      scheme: h2c\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: iris-header\n  namespace: seldon-mesh\nspec:\n  headers:\n    customRequestHeaders:\n      seldon-model: iris\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/traefik/index.html", "key": "kubernetes/service-meshes/traefik"}}, {"key": "b9ac6ddf-b97f-4cff-ad42-b438075b1f80", "page": "kubernetes/service-meshes/traefik", "section": "traefik-examples", "text": "\nTraefik Examples\u00b6\nAssumes\n\nYou have installed Traefik as per their docs into namespace traefik-v2\n\nTested with traefik-10.19.4\nINGRESS_IP=!kubectl get svc traefik -n traefik-v2 -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nINGRESS_IP=INGRESS_IP[0]\nimport os\nos.environ['INGRESS_IP'] = INGRESS_IP\nINGRESS_IP\n\n\n'172.21.255.1'\n\n\n\nTraefik Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapps\n  namespace: seldon-mesh\nspec:\n  ports:\n  - name: web\n    port: 80\n    protocol: TCP\n  selector:\n    app: traefik-ingress-lb\n  type: LoadBalancer\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  entryPoints:\n  - web\n  routes:\n  - kind: Rule\n    match: PathPrefix(`/`)\n    middlewares:\n    - name: iris-header\n    services:\n    - name: seldon-mesh\n      port: 80\n      scheme: h2c\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: iris-header\n  namespace: seldon-mesh\nspec:\n  headers:\n    customRequestHeaders:\n      seldon-model: iris\n\n\n!kustomize build config/single-model | kubectl apply -f -\n\n\nservice/myapps created\nmodel.mlops.seldon.io/iris created\ningressroute.traefik.containo.us/iris created\nmiddleware.traefik.containo.us/iris-header created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 196\n< Content-Type: application/json\n< Date: Sat, 16 Apr 2022 15:53:27 GMT\n< Seldon-Route: iris_1\n<", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/traefik/index.html", "key": "kubernetes/service-meshes/traefik"}}, {"key": "f1cc41a0-2bd0-489b-8b93-60d9860215dc", "page": "kubernetes/service-meshes/traefik", "section": "traefik-examples", "text": "-d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 196\n< Content-Type: application/json\n< Date: Sat, 16 Apr 2022 15:53:27 GMT\n< Seldon-Route: iris_1\n< Server: envoy\n< X-Envoy-Upstream-Service-Time: 895\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"0dccf477-78fa-4a11-92ff-4d7e4f1cdda8\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nservice \"myapps\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\ningressroute.traefik.containo.us \"iris\" deleted\nmiddleware.traefik.containo.us \"iris-header\" deleted\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/traefik/index.html", "key": "kubernetes/service-meshes/traefik"}}, {"key": "a04223d4-a186-45b2-862c-ba20d10fb1e2", "page": "kubernetes/service-meshes/traefik", "section": "traefik-single-model-example", "text": "\nTraefik Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapps\n  namespace: seldon-mesh\nspec:\n  ports:\n  - name: web\n    port: 80\n    protocol: TCP\n  selector:\n    app: traefik-ingress-lb\n  type: LoadBalancer\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  entryPoints:\n  - web\n  routes:\n  - kind: Rule\n    match: PathPrefix(`/`)\n    middlewares:\n    - name: iris-header\n    services:\n    - name: seldon-mesh\n      port: 80\n      scheme: h2c\n---\napiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: iris-header\n  namespace: seldon-mesh\nspec:\n  headers:\n    customRequestHeaders:\n      seldon-model: iris\n\n\n!kustomize build config/single-model | kubectl apply -f -\n\n\nservice/myapps created\nmodel.mlops.seldon.io/iris created\ningressroute.traefik.containo.us/iris created\nmiddleware.traefik.containo.us/iris-header created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 196\n< Content-Type: application/json\n< Date: Sat, 16 Apr 2022 15:53:27 GMT\n< Seldon-Route: iris_1\n< Server: envoy\n< X-Envoy-Upstream-Service-Time: 895\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"0dccf477-78fa-4a11-92ff-4d7e4f1cdda8\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/traefik/index.html", "key": "kubernetes/service-meshes/traefik"}}, {"key": "0cf240b3-3132-4ad3-9260-c7b189ef03e6", "page": "kubernetes/service-meshes/traefik", "section": "traefik-single-model-example", "text": "80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< Content-Length: 196\n< Content-Type: application/json\n< Date: Sat, 16 Apr 2022 15:53:27 GMT\n< Seldon-Route: iris_1\n< Server: envoy\n< X-Envoy-Upstream-Service-Time: 895\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"0dccf477-78fa-4a11-92ff-4d7e4f1cdda8\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nservice \"myapps\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\ningressroute.traefik.containo.us \"iris\" deleted\nmiddleware.traefik.containo.us \"iris-header\" deleted\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/traefik/index.html", "key": "kubernetes/service-meshes/traefik"}}, {"key": "bce3bd7b-6fc9-4730-a749-3c248b29cbb9", "page": "getting-started/docker-installation", "section": "docker-installation", "text": "\nDocker Installation\u00b6\n\nPreparation\u00b6\n\ngit clone https://github.com/SeldonIO/seldon-core --branch=v2\nBuild Seldon CLI\nInstall Docker Compose (or directly from GitHub release if not using Docker Desktop).\nInstall make. This will depend on your version of Linux, for example on Ubuntu run sudo apt-get install build-essential.\n\n\n\nDeploy\u00b6\nFrom the project root run:\nmake deploy-local\n\n\nThis will run with latest images for the components.\nNote: Triton and MLServer are large images at present (11G and 9G respectively) so will take time to download on first usage.\n\nRun a particular version\u00b6\nTo run a particular release set the environment variable CUSTOM_IMAGE_TAG to the desired version before running the command, e.g.:\nexport CUSTOM_IMAGE_TAG=0.2.0\nmake deploy-local\n\n\n\n\nGPU support\u00b6\nTo enable GPU on servers:\n\nMake sure that nvidia-container-runtime is installed, follow link\nEnable GPU: export GPU_ENABLED=1\n\n\n\nLocal Models\u00b6\nTo deploy with a local folder available for loading models set the environment variable LOCAL_MODEL_FOLDER to the folder, e.g.:\nexport LOCAL_MODEL_FOLDER=/home/seldon/models\nmake deploy-local\n\n\nThis folder will be mounted at /mnt/models. You can then specify models as shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/mnt/models/iris\"\n  requirements:\n  - sklearn\n\n\nIf you have set the local model folder as above then this would be looking at /home/seldon/models/iris.\n\n\n\nTracing\u00b6\nThe default local install will provide Jaeger tracing at http://0.0.0.0:16686/search.\n\n\nMetrics\u00b6\nThe default local install will expose Grafana at http://localhost:3000.\n\n\nUndeploy\u00b6\nFrom the project root run:\nmake undeploy-local\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/docker-installation/index.html", "key": "getting-started/docker-installation"}}, {"key": "2fadda51-3101-4965-8bce-b91595068250", "page": "getting-started/docker-installation", "section": "deploy", "text": "\nDeploy\u00b6\nFrom the project root run:\nmake deploy-local\n\n\nThis will run with latest images for the components.\nNote: Triton and MLServer are large images at present (11G and 9G respectively) so will take time to download on first usage.\n\nRun a particular version\u00b6\nTo run a particular release set the environment variable CUSTOM_IMAGE_TAG to the desired version before running the command, e.g.:\nexport CUSTOM_IMAGE_TAG=0.2.0\nmake deploy-local\n\n\n\n\nGPU support\u00b6\nTo enable GPU on servers:\n\nMake sure that nvidia-container-runtime is installed, follow link\nEnable GPU: export GPU_ENABLED=1\n\n\n\nLocal Models\u00b6\nTo deploy with a local folder available for loading models set the environment variable LOCAL_MODEL_FOLDER to the folder, e.g.:\nexport LOCAL_MODEL_FOLDER=/home/seldon/models\nmake deploy-local\n\n\nThis folder will be mounted at /mnt/models. You can then specify models as shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/mnt/models/iris\"\n  requirements:\n  - sklearn\n\n\nIf you have set the local model folder as above then this would be looking at /home/seldon/models/iris.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/docker-installation/index.html", "key": "getting-started/docker-installation"}}, {"key": "9648f7ce-3932-45d3-9ac7-ec53ca5f393d", "page": "getting-started/docker-installation", "section": "local-models", "text": "\nLocal Models\u00b6\nTo deploy with a local folder available for loading models set the environment variable LOCAL_MODEL_FOLDER to the folder, e.g.:\nexport LOCAL_MODEL_FOLDER=/home/seldon/models\nmake deploy-local\n\n\nThis folder will be mounted at /mnt/models. You can then specify models as shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/mnt/models/iris\"\n  requirements:\n  - sklearn\n\n\nIf you have set the local model folder as above then this would be looking at /home/seldon/models/iris.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/docker-installation/index.html", "key": "getting-started/docker-installation"}}, {"key": "dca6a2e0-2a17-4041-93e2-55fcd0627849", "page": "getting-started/kubernetes-installation/helm", "section": "helm-installation", "text": "\nHelm Installation\u00b6\nWe provide several Helm charts.\n\nseldon-core-v2-crds : cluster wide install of custom resources.\nseldon-core-v2-setup : installation of the manager to manage resources in the namespace or clusterwide. This also installs default SeldonConfig and ServerConfig resources which allow Runtimes and Servers to be installed easily on demand.\nseldon-core-v2-runtime : this installs a SeldonRuntime custom resource which creates the core components in a namespace.\nseldon-core-v2-servers : this installs Server custom resources which provide example core servers to load models.\nseldon-core-v2-certs : a default set of certificates for TLS.\n\nThe Helm charts can be found within the k8s/helm-charts folder and they are published here\nAssuming you have installed any ecosystem components: Jaeger, Prometheus, Kafka as discussed here you can follow the\nfollowing steps.\nNote that for Kafka follow the steps discussed here\n\nAdd Seldon Core v2 Charts\u00b6\nhelm repo add seldon-charts https://seldonio.github.io/helm-charts\nhelm repo update seldon-charts\n\n\n\n\nInstall the CRDs\u00b6\nhelm install seldon-core-v2-crds  seldon-charts/seldon-core-v2-crds\n\n\n\n\nInstall the Seldon Core V2 Components\u00b6\nYou can install into any namespace. For illustration we will use seldon-mesh. This will install the core manager which will handle the key resources  used by Seldon including the SeldonRuntime and Server resources.\nkubectl create namespace seldon-mesh\n\n\nhelm install seldon-core-v2  seldon-charts/seldon-core-v2-setup --namespace seldon-mesh\n\n\nThis will install the operator namespaced so it will only control resources in the provided namespace. To allow cluster wide usage add the --set controller.clusterwide=true, e.g.\nhelm install seldon-core-v2  seldon-charts/seldon-core-v2-setup --namespace seldon-mesh --set controller.clusterwide=true\n\n\nCluster wide operations will require ClusterRoles to be created so when deploying be aware your user will require the required permissions. With cluster wide operations you can create SeldonRuntimes in any namespace.\n\n\nInstall the default Seldon Core V2 Runtime\u00b6\nhelm install", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/helm.html", "key": "getting-started/kubernetes-installation/helm"}}, {"key": "bb46148f-1078-4bbf-8379-0eef4fe51d91", "page": "getting-started/kubernetes-installation/helm", "section": "helm-installation", "text": "will only control resources in the provided namespace. To allow cluster wide usage add the --set controller.clusterwide=true, e.g.\nhelm install seldon-core-v2  seldon-charts/seldon-core-v2-setup --namespace seldon-mesh --set controller.clusterwide=true\n\n\nCluster wide operations will require ClusterRoles to be created so when deploying be aware your user will require the required permissions. With cluster wide operations you can create SeldonRuntimes in any namespace.\n\n\nInstall the default Seldon Core V2 Runtime\u00b6\nhelm install seldon-v2-runtime seldon-charts/seldon-core-v2-runtime --namespace seldon-mesh\n\n\nThis will install the core components in your desired namespace.\n\n\nInstall example servers\u00b6\nTo install some MLServer and Triton servers you can either create Server resources yourself or for initial testing you can use our example Helm chart seldon-core-v2-servers:\nhelm install seldon-v2-servers seldon-charts/seldon-core-v2-servers --namespace seldon-mesh\n\n\nBy default this will install 1 MLServer and 1 Triton in the desired namespace. This namespace should be the same namespace you installed a Seldon Core Runtime.\n\n\nUninstall\u00b6\nRemove any models, pipelines that are running.\nRemove the runtime:\nhelm uninstall seldon-core-v2-runtime  --namespace seldon-mesh\n\n\nRemove the core components:\nhelm uninstall seldon-core-v2  --namespace seldon-mesh\n\n\nRemove the CRDs\nhelm uninstall seldon-core-v2-crds\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/helm.html", "key": "getting-started/kubernetes-installation/helm"}}, {"key": "3f0c98d6-2ddb-4421-859c-a32172a490b9", "page": "getting-started/kubernetes-installation/helm", "section": "install-the-seldon-core-v2-components", "text": "\nInstall the Seldon Core V2 Components\u00b6\nYou can install into any namespace. For illustration we will use seldon-mesh. This will install the core manager which will handle the key resources  used by Seldon including the SeldonRuntime and Server resources.\nkubectl create namespace seldon-mesh\n\n\nhelm install seldon-core-v2  seldon-charts/seldon-core-v2-setup --namespace seldon-mesh\n\n\nThis will install the operator namespaced so it will only control resources in the provided namespace. To allow cluster wide usage add the --set controller.clusterwide=true, e.g.\nhelm install seldon-core-v2  seldon-charts/seldon-core-v2-setup --namespace seldon-mesh --set controller.clusterwide=true\n\n\nCluster wide operations will require ClusterRoles to be created so when deploying be aware your user will require the required permissions. With cluster wide operations you can create SeldonRuntimes in any namespace.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/helm.html", "key": "getting-started/kubernetes-installation/helm"}}, {"key": "ca86348c-8c8e-4467-85cc-b8130d3ee8d9", "page": "getting-started/kubernetes-installation/ansible", "section": "ansible-installation", "text": "\nAnsible Installation\u00b6\n\nWarning\nThe Ansible installation of a Seldon Core and associated ecosystem is meant for dev/testing purposes.\nFor production use cases follow Helm installation.\n\n\nInstalling Ansible\u00b6\nProvided Ansible playbooks and roles depends on kubernetes.core Ansible Collection for performing kubectl and helm operations.\nCheck Ansible [documentation] for further information.\nTo install Ansible and required collections\npip install ansible openshift kubernetes docker\nansible-galaxy collection install kubernetes.core\n\n\nWe have tested provided instructions on Python 3.8 - 3.11 with following version of Python libraries\n\n\nPython\nAnsible\nDocker\nKubernetes\n\n\n\n3.8\n6.7.0\n6.0.1\n26.1.0\n\n3.9\n7.2.0\n6.0.1\n26.1.0\n\n3.10\n7.2.0\n6.0.1\n26.1.0\n\n3.11\n7.2.0\n6.0.1\n26.1.0\n\n\n\nand kubernetes.core collection in version 2.4.0.\nOnce installed you can use the following Playbooks that you will find in Ansible folder of Seldon Core V2 repository.\nYou also need to have installed kubectl CLI.\n\n\nInstalling Seldon Core v2 using Ansible\u00b6\n\nOne-liner local kind install (from scratch)\u00b6\nIf you simply want to install into a fresh local kind\nk8s cluster, the seldon-all playbook allows you to do so with a single command:\nansible-playbook playbooks/seldon-all.yaml\n\n\nThis will create a Kind cluster and install ecosystem dependencies (kafka,\nprometheus, opentelemetry, jager) as well as all the seldon-specific components.\nThe seldon components are installed using helm-charts from the current git\ncheckout (../k8s/helm-charts/).\nInternally this runs, in order, the following playbooks (described in more detail\nin the sections below):\n\nkind-cluster.yaml\nsetup-ecosystem.yaml\nsetup-seldon.yaml\n\nYou may pass any of the additonal variables which are configurable for those playbooks\nto seldon-all. See the Customizing Ansible Instalation section for details.\nFor example:\nansible-playbook playbooks/seldon-all.yaml -e seldon_mesh_namespace=my-seldon-mesh -e install_prometheus=no -e @playbooks/vars/set-custom-images.yaml\n\n\nRunning the playbooks individually, as described in the sections below, will give you\nmore control over what gets run and when (for example, if you want to install into an\nexisting k8s cluster).\n\n\nCreate Kind Cluster\u00b6\nIt is recommended to first install Seldon Core v2 inside Kind cluster.\nThis allow to test", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "9c27a539-84e7-41ba-ae81-5bcf9959f6f4", "page": "getting-started/kubernetes-installation/ansible", "section": "ansible-installation", "text": "playbooks\nto seldon-all. See the Customizing Ansible Instalation section for details.\nFor example:\nansible-playbook playbooks/seldon-all.yaml -e seldon_mesh_namespace=my-seldon-mesh -e install_prometheus=no -e @playbooks/vars/set-custom-images.yaml\n\n\nRunning the playbooks individually, as described in the sections below, will give you\nmore control over what gets run and when (for example, if you want to install into an\nexisting k8s cluster).\n\n\nCreate Kind Cluster\u00b6\nIt is recommended to first install Seldon Core v2 inside Kind cluster.\nThis allow to test and trial the installation in isolated environment that is easy to remove.\nansible-playbook playbooks/kind-cluster.yaml\n\n\n\n\nSetup Ecosystem\u00b6\nSeldon runs by default in seldon-mesh namespace and a Jaeger pod and  and OpenTelemetry collector are installed in the chosen namespace. Run the following:\nansible-playbook playbooks/setup-ecosystem.yaml\n\n\nThe most common change will be to install in another namespace with:\nansible-playbook playbooks/setup-ecosystem.yaml -e seldon_mesh_namespace=<mynamespace>\n\n\n\n\nInstall Seldon Core v2\u00b6\nRun the following from the ansible/ folder:\nansible-playbook playbooks/setup-seldon.yaml\n\n\nIf you have changed the namespace you wish to use you will need to run with:\nansible-playbook playbooks/setup-seldon.yaml -e seldon_mesh_namespace=<mynamespace>\n\n\n\n\n\nCustomizing Ansible Installation\u00b6\n\nEcosystem configuration options\u00b6\nThe ecosystem setup can be parametrized by providing extra Ansible variables, e.g. using -e flag to ansible-playbook command.\nFor example run the following from the ansible/ folder:\nansible-playbook playbooks/setup-ecosystem.yaml -e full_install=no -e install_kafka=yes\n\n\nwill only install Kafka when setting up the ecosystem.\n\n\n\ntype\ndefault\ncomment\n\n\n\nseldon_mesh_namespace\nstring\nseldon-mesh\nnamespace to install Seldon Core v2\n\nseldon_kafka_namespace\nstring\nseldon-mesh\nnamespace to install Kafka Cluster for Core v2\n\nfull_install\nbool\nyes\nenables full ecosystem installation\n\ninstall_kafka\nbool\n{{ full_install }}\ninstalls Strimzi Kafka Operator\n\ninstall_prometheus\nbool\n{{ full_install }}\ninstalls Prometheus Operator\n\ninstall_certmanager\nbool\n{{ full_install }}\ninstalls Cert Manager\n\ninstall_jaeger\nbool\n{{ full_install }}\ninstalls Jaeger\n\ninstall_opentelemetry\nbool\n{{ full_install }}\ninstalls OpenTelemetry\n\nconfigure_kafka\nbool\n{{ install_kafka }}\nconfigures Kafka Cluster for Core v2\n\nconfigure_prometheus\nbool\n{{ install_prometheus }}\nconfigure Prometheus using Core v2 specific resources\n\nconfigure_jaeger\nbool\n{{ install_jaeger }}\nconfigure Jaeger using Core v2 specific resources\n\nconfigure_opentelemetry\nbool\n{{ install_opentelemetry }}\nconfigure OpenTelemetry using Core v2 specific resources\n\n\n\n\n\nSeldon Core v2 configuration options\u00b6\n\n\n\ntype\ndefault\ncomment\n\n\n\nseldon_kafka_namespace\nstring\nseldon-mesh\nnamespace", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "589ac56e-797f-4c40-8ef6-d3869d5defb6", "page": "getting-started/kubernetes-installation/ansible", "section": "ansible-installation", "text": "to install Kafka Cluster for Core v2\n\nfull_install\nbool\nyes\nenables full ecosystem installation\n\ninstall_kafka\nbool\n{{ full_install }}\ninstalls Strimzi Kafka Operator\n\ninstall_prometheus\nbool\n{{ full_install }}\ninstalls Prometheus Operator\n\ninstall_certmanager\nbool\n{{ full_install }}\ninstalls Cert Manager\n\ninstall_jaeger\nbool\n{{ full_install }}\ninstalls Jaeger\n\ninstall_opentelemetry\nbool\n{{ full_install }}\ninstalls OpenTelemetry\n\nconfigure_kafka\nbool\n{{ install_kafka }}\nconfigures Kafka Cluster for Core v2\n\nconfigure_prometheus\nbool\n{{ install_prometheus }}\nconfigure Prometheus using Core v2 specific resources\n\nconfigure_jaeger\nbool\n{{ install_jaeger }}\nconfigure Jaeger using Core v2 specific resources\n\nconfigure_opentelemetry\nbool\n{{ install_opentelemetry }}\nconfigure OpenTelemetry using Core v2 specific resources\n\n\n\n\n\nSeldon Core v2 configuration options\u00b6\n\n\n\ntype\ndefault\ncomment\n\n\n\nseldon_kafka_namespace\nstring\nseldon-mesh\nnamespace to install Kafka\n\nseldon_mesh_namespace\nstring\nseldon-mesh\nnamespace to install Seldon\n\nseldon_crds_namespace\nstring\ndefault\nnamespace to install Seldon CRDs\n\nfull_install\nbool\nyes\nenables full ecosystem installation\n\ninstall_crds\nbool\n{{ full_install }}\ninstalls Seldon CRDs\n\ninstall_components\nbool\n{{ full_install }}\ninstall Seldon components\n\ninstall_servers\nbool\n{{ full_install }}\ninstall Seldon servers\n\n\n\n\nCustom Seldon images and private registries\u00b6\nBy default, the container images used in the install are the ones defined by the helm\ncharts (referring to images publicly available on dockerhub).\nIf you need to customize the images (i.e pull from private registry, pull given\ntag), create a custom images config file following the example in\nplaybooks/vars/set-custom-images.yaml and run with:\nansible-playbook playbooks/setup-seldon.yaml -e @<path-to-custom-images-config.yaml>\n\n\n\nPrivate registries\u00b6\nWhen using private registries, access needs to be authenticated (typically, via a\nservice account key), and the k8s cluster will need to have access to a secret holding\nthis key to be able to pull images.\nThe setup-seldon.yaml playbook will create the required k8s secrets inside the\ncluster if it is provided with an auth file in dockerconfigjson format. You provide\nthe path to this file by cusomizing the custom_image_pull_secrets.dockerconfigjson\nvariable and define the secret name via custom_image_pull_secrets.name in the custom\nimages config file (the one passed to the playbook via -e @file).\nBy default, docker creates the dockerconfigjson auth file in ~/.docker/config.json\nafter passing the service-account key to docker login.\nThe docker login command would look like this (key in", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "ad63a0c4-8ba8-4641-9423-3e8385a2afcd", "page": "getting-started/kubernetes-installation/ansible", "section": "ansible-installation", "text": "provided with an auth file in dockerconfigjson format. You provide\nthe path to this file by cusomizing the custom_image_pull_secrets.dockerconfigjson\nvariable and define the secret name via custom_image_pull_secrets.name in the custom\nimages config file (the one passed to the playbook via -e @file).\nBy default, docker creates the dockerconfigjson auth file in ~/.docker/config.json\nafter passing the service-account key to docker login.\nThe docker login command would look like this (key in json format):\ncat registry-sa-key.json | docker login -u _json_key --password-stdin <registry-url>\n\n\nor, for keys in base64 format:\ncat registry-sa-key | docker login -u _json_key_base64 --password-stdin <registry-url>\n\n\n\n\nSaving helm-chart customisations\u00b6\nBecause the additional custom images config file (starting from the\nplaybooks/vars/set-custom-images.yaml example) overrides values in the helm-charts\navailable in the repo, there\u2019s also a playbook option of saving those overrides as a\nseparate values file, which could be used if deploying manually via helm.\nThis is controlled via two variables:\n\n\n\ntype\ndefault\ncomment\n\n\n\nsave_helm_components_overrides\nbool\nfalse\nenable saving helm values overrides\n\nsave_helm_components_overrides_file\nstring\n~/seldon_helm_comp_values.yaml\npath/filename for saving overrides\n\n\n\nYou can either pass those within the custom images config file or directly when running the\nplaybook. For example, for just saving the helm-chart overrides (without installing seldon\ncomponents), you would run:\nansible-playbook playbooks/setup-seldon.yaml -e full_install=no -e save_helm_components_overrides=yes -e @<path-to-custom-images-config.yaml>\n\n\nPlease note that when deploying outside ansible via helm using this saved overrides file,\nand using private registries, you will have to manually create the service-account key\nsecret with the same name as the one defined in your custom image config file under\ncustom_image_pull_secrets.name.\n\n\n\n\n\nUninstall\u00b6\nTo fully remove the Ansible installation delete the created Kind cluster\nkind delete cluster --name seldon\n\n\nThis will stop and delete the Kind cluster freeing all of the resources taken by the dev/trial installation.\nYou may want to also remove cache resources used", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "c9f198ef-eb74-4cba-86ca-03ba8749b4fe", "page": "getting-started/kubernetes-installation/ansible", "section": "ansible-installation", "text": "registries, you will have to manually create the service-account key\nsecret with the same name as the one defined in your custom image config file under\ncustom_image_pull_secrets.name.\n\n\n\n\n\nUninstall\u00b6\nTo fully remove the Ansible installation delete the created Kind cluster\nkind delete cluster --name seldon\n\n\nThis will stop and delete the Kind cluster freeing all of the resources taken by the dev/trial installation.\nYou may want to also remove cache resources used for the installation with\nrm -rf ~/.cache/seldon/\n\n\n\nNote\nIf you used Ansible to install Seldon Core v2 and its ecosystem into K8s cluster other than Kind you need to manually remove all the components.\nNotes on how to remove Seldon Core v2 Helm installation itself you can find here.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "623b6c91-24cc-4db1-ba8d-5ac2f159dc4e", "page": "getting-started/kubernetes-installation/ansible", "section": "installing-ansible", "text": "\nInstalling Ansible\u00b6\nProvided Ansible playbooks and roles depends on kubernetes.core Ansible Collection for performing kubectl and helm operations.\nCheck Ansible [documentation] for further information.\nTo install Ansible and required collections\npip install ansible openshift kubernetes docker\nansible-galaxy collection install kubernetes.core\n\n\nWe have tested provided instructions on Python 3.8 - 3.11 with following version of Python libraries\n\n\nPython\nAnsible\nDocker\nKubernetes\n\n\n\n3.8\n6.7.0\n6.0.1\n26.1.0\n\n3.9\n7.2.0\n6.0.1\n26.1.0\n\n3.10\n7.2.0\n6.0.1\n26.1.0\n\n3.11\n7.2.0\n6.0.1\n26.1.0\n\n\n\nand kubernetes.core collection in version 2.4.0.\nOnce installed you can use the following Playbooks that you will find in Ansible folder of Seldon Core V2 repository.\nYou also need to have installed kubectl CLI.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "d8e2d178-87aa-4424-ad03-1eb7a67a1f63", "page": "getting-started/kubernetes-installation/ansible", "section": "installing-seldon-core-v2-using-ansible", "text": "\nInstalling Seldon Core v2 using Ansible\u00b6\n\nOne-liner local kind install (from scratch)\u00b6\nIf you simply want to install into a fresh local kind\nk8s cluster, the seldon-all playbook allows you to do so with a single command:\nansible-playbook playbooks/seldon-all.yaml\n\n\nThis will create a Kind cluster and install ecosystem dependencies (kafka,\nprometheus, opentelemetry, jager) as well as all the seldon-specific components.\nThe seldon components are installed using helm-charts from the current git\ncheckout (../k8s/helm-charts/).\nInternally this runs, in order, the following playbooks (described in more detail\nin the sections below):\n\nkind-cluster.yaml\nsetup-ecosystem.yaml\nsetup-seldon.yaml\n\nYou may pass any of the additonal variables which are configurable for those playbooks\nto seldon-all. See the Customizing Ansible Instalation section for details.\nFor example:\nansible-playbook playbooks/seldon-all.yaml -e seldon_mesh_namespace=my-seldon-mesh -e install_prometheus=no -e @playbooks/vars/set-custom-images.yaml\n\n\nRunning the playbooks individually, as described in the sections below, will give you\nmore control over what gets run and when (for example, if you want to install into an\nexisting k8s cluster).\n\n\nCreate Kind Cluster\u00b6\nIt is recommended to first install Seldon Core v2 inside Kind cluster.\nThis allow to test and trial the installation in isolated environment that is easy to remove.\nansible-playbook playbooks/kind-cluster.yaml\n\n\n\n\nSetup Ecosystem\u00b6\nSeldon runs by default in seldon-mesh namespace and a Jaeger pod and  and OpenTelemetry collector are installed in the chosen namespace. Run the following:\nansible-playbook playbooks/setup-ecosystem.yaml\n\n\nThe most common change will be to install in another namespace with:\nansible-playbook playbooks/setup-ecosystem.yaml -e seldon_mesh_namespace=<mynamespace>\n\n\n\n\nInstall Seldon Core v2\u00b6\nRun the following from the ansible/ folder:\nansible-playbook playbooks/setup-seldon.yaml\n\n\nIf you have changed the namespace you wish to use you will need to run with:\nansible-playbook playbooks/setup-seldon.yaml -e seldon_mesh_namespace=<mynamespace>\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "b9c53b46-fa96-429d-a503-a4c436c943b6", "page": "getting-started/kubernetes-installation/ansible", "section": "one-liner-local-kind-install-from-scratch", "text": "\nOne-liner local kind install (from scratch)\u00b6\nIf you simply want to install into a fresh local kind\nk8s cluster, the seldon-all playbook allows you to do so with a single command:\nansible-playbook playbooks/seldon-all.yaml\n\n\nThis will create a Kind cluster and install ecosystem dependencies (kafka,\nprometheus, opentelemetry, jager) as well as all the seldon-specific components.\nThe seldon components are installed using helm-charts from the current git\ncheckout (../k8s/helm-charts/).\nInternally this runs, in order, the following playbooks (described in more detail\nin the sections below):\n\nkind-cluster.yaml\nsetup-ecosystem.yaml\nsetup-seldon.yaml\n\nYou may pass any of the additonal variables which are configurable for those playbooks\nto seldon-all. See the Customizing Ansible Instalation section for details.\nFor example:\nansible-playbook playbooks/seldon-all.yaml -e seldon_mesh_namespace=my-seldon-mesh -e install_prometheus=no -e @playbooks/vars/set-custom-images.yaml\n\n\nRunning the playbooks individually, as described in the sections below, will give you\nmore control over what gets run and when (for example, if you want to install into an\nexisting k8s cluster).\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "7569a6cc-c13f-4d7a-b796-7bd49631a461", "page": "getting-started/kubernetes-installation/ansible", "section": "customizing-ansible-installation", "text": "\nCustomizing Ansible Installation\u00b6\n\nEcosystem configuration options\u00b6\nThe ecosystem setup can be parametrized by providing extra Ansible variables, e.g. using -e flag to ansible-playbook command.\nFor example run the following from the ansible/ folder:\nansible-playbook playbooks/setup-ecosystem.yaml -e full_install=no -e install_kafka=yes\n\n\nwill only install Kafka when setting up the ecosystem.\n\n\n\ntype\ndefault\ncomment\n\n\n\nseldon_mesh_namespace\nstring\nseldon-mesh\nnamespace to install Seldon Core v2\n\nseldon_kafka_namespace\nstring\nseldon-mesh\nnamespace to install Kafka Cluster for Core v2\n\nfull_install\nbool\nyes\nenables full ecosystem installation\n\ninstall_kafka\nbool\n{{ full_install }}\ninstalls Strimzi Kafka Operator\n\ninstall_prometheus\nbool\n{{ full_install }}\ninstalls Prometheus Operator\n\ninstall_certmanager\nbool\n{{ full_install }}\ninstalls Cert Manager\n\ninstall_jaeger\nbool\n{{ full_install }}\ninstalls Jaeger\n\ninstall_opentelemetry\nbool\n{{ full_install }}\ninstalls OpenTelemetry\n\nconfigure_kafka\nbool\n{{ install_kafka }}\nconfigures Kafka Cluster for Core v2\n\nconfigure_prometheus\nbool\n{{ install_prometheus }}\nconfigure Prometheus using Core v2 specific resources\n\nconfigure_jaeger\nbool\n{{ install_jaeger }}\nconfigure Jaeger using Core v2 specific resources\n\nconfigure_opentelemetry\nbool\n{{ install_opentelemetry }}\nconfigure OpenTelemetry using Core v2 specific resources\n\n\n\n\n\nSeldon Core v2 configuration options\u00b6\n\n\n\ntype\ndefault\ncomment\n\n\n\nseldon_kafka_namespace\nstring\nseldon-mesh\nnamespace to install Kafka\n\nseldon_mesh_namespace\nstring\nseldon-mesh\nnamespace to install Seldon\n\nseldon_crds_namespace\nstring\ndefault\nnamespace to install Seldon CRDs\n\nfull_install\nbool\nyes\nenables full ecosystem installation\n\ninstall_crds\nbool\n{{ full_install }}\ninstalls Seldon CRDs\n\ninstall_components\nbool\n{{ full_install }}\ninstall Seldon components\n\ninstall_servers\nbool\n{{ full_install }}\ninstall Seldon servers\n\n\n\n\nCustom Seldon images and private registries\u00b6\nBy default, the container images used in the install are the ones defined by the helm\ncharts (referring to images publicly available on dockerhub).\nIf you need to customize the images (i.e pull from private registry, pull given\ntag), create a custom images config file following the example in\nplaybooks/vars/set-custom-images.yaml and run with:\nansible-playbook playbooks/setup-seldon.yaml -e @<path-to-custom-images-config.yaml>\n\n\n\nPrivate registries\u00b6\nWhen using private registries, access needs to be authenticated (typically, via a\nservice account key), and the k8s cluster will need to have access to a secret holding\nthis key to be able to pull images.\nThe setup-seldon.yaml playbook will create the required k8s secrets inside the\ncluster if it is provided with an auth file in dockerconfigjson format. You provide\nthe path to this file by cusomizing", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "d9fed8e3-0264-4bf0-b34b-aae230fc4014", "page": "getting-started/kubernetes-installation/ansible", "section": "customizing-ansible-installation", "text": "@<path-to-custom-images-config.yaml>\n\n\n\nPrivate registries\u00b6\nWhen using private registries, access needs to be authenticated (typically, via a\nservice account key), and the k8s cluster will need to have access to a secret holding\nthis key to be able to pull images.\nThe setup-seldon.yaml playbook will create the required k8s secrets inside the\ncluster if it is provided with an auth file in dockerconfigjson format. You provide\nthe path to this file by cusomizing the custom_image_pull_secrets.dockerconfigjson\nvariable and define the secret name via custom_image_pull_secrets.name in the custom\nimages config file (the one passed to the playbook via -e @file).\nBy default, docker creates the dockerconfigjson auth file in ~/.docker/config.json\nafter passing the service-account key to docker login.\nThe docker login command would look like this (key in json format):\ncat registry-sa-key.json | docker login -u _json_key --password-stdin <registry-url>\n\n\nor, for keys in base64 format:\ncat registry-sa-key | docker login -u _json_key_base64 --password-stdin <registry-url>\n\n\n\n\nSaving helm-chart customisations\u00b6\nBecause the additional custom images config file (starting from the\nplaybooks/vars/set-custom-images.yaml example) overrides values in the helm-charts\navailable in the repo, there\u2019s also a playbook option of saving those overrides as a\nseparate values file, which could be used if deploying manually via helm.\nThis is controlled via two variables:\n\n\n\ntype\ndefault\ncomment\n\n\n\nsave_helm_components_overrides\nbool\nfalse\nenable saving helm values overrides\n\nsave_helm_components_overrides_file\nstring\n~/seldon_helm_comp_values.yaml\npath/filename for saving overrides\n\n\n\nYou can either pass those within the custom images config file or directly when running the\nplaybook. For example, for just saving the helm-chart overrides (without installing seldon\ncomponents), you would run:\nansible-playbook playbooks/setup-seldon.yaml -e full_install=no -e save_helm_components_overrides=yes -e @<path-to-custom-images-config.yaml>\n\n\nPlease note that when deploying outside ansible via helm using this saved overrides file,\nand using private registries, you will have to manually create the service-account key\nsecret with the same name as the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "3e17213f-ad12-425c-9df0-0082577e962e", "page": "getting-started/kubernetes-installation/ansible", "section": "customizing-ansible-installation", "text": "those within the custom images config file or directly when running the\nplaybook. For example, for just saving the helm-chart overrides (without installing seldon\ncomponents), you would run:\nansible-playbook playbooks/setup-seldon.yaml -e full_install=no -e save_helm_components_overrides=yes -e @<path-to-custom-images-config.yaml>\n\n\nPlease note that when deploying outside ansible via helm using this saved overrides file,\nand using private registries, you will have to manually create the service-account key\nsecret with the same name as the one defined in your custom image config file under\ncustom_image_pull_secrets.name.\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "7c43f0bf-7fca-4882-9b3e-1f4fd42b4320", "page": "getting-started/kubernetes-installation/ansible", "section": "ecosystem-configuration-options", "text": "\nEcosystem configuration options\u00b6\nThe ecosystem setup can be parametrized by providing extra Ansible variables, e.g. using -e flag to ansible-playbook command.\nFor example run the following from the ansible/ folder:\nansible-playbook playbooks/setup-ecosystem.yaml -e full_install=no -e install_kafka=yes\n\n\nwill only install Kafka when setting up the ecosystem.\n\n\n\ntype\ndefault\ncomment\n\n\n\nseldon_mesh_namespace\nstring\nseldon-mesh\nnamespace to install Seldon Core v2\n\nseldon_kafka_namespace\nstring\nseldon-mesh\nnamespace to install Kafka Cluster for Core v2\n\nfull_install\nbool\nyes\nenables full ecosystem installation\n\ninstall_kafka\nbool\n{{ full_install }}\ninstalls Strimzi Kafka Operator\n\ninstall_prometheus\nbool\n{{ full_install }}\ninstalls Prometheus Operator\n\ninstall_certmanager\nbool\n{{ full_install }}\ninstalls Cert Manager\n\ninstall_jaeger\nbool\n{{ full_install }}\ninstalls Jaeger\n\ninstall_opentelemetry\nbool\n{{ full_install }}\ninstalls OpenTelemetry\n\nconfigure_kafka\nbool\n{{ install_kafka }}\nconfigures Kafka Cluster for Core v2\n\nconfigure_prometheus\nbool\n{{ install_prometheus }}\nconfigure Prometheus using Core v2 specific resources\n\nconfigure_jaeger\nbool\n{{ install_jaeger }}\nconfigure Jaeger using Core v2 specific resources\n\nconfigure_opentelemetry\nbool\n{{ install_opentelemetry }}\nconfigure OpenTelemetry using Core v2 specific resources\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "121673cd-38fa-4095-b465-66c5e8ba6d64", "page": "getting-started/kubernetes-installation/ansible", "section": "seldon-core-v2-configuration-options", "text": "\nSeldon Core v2 configuration options\u00b6\n\n\n\ntype\ndefault\ncomment\n\n\n\nseldon_kafka_namespace\nstring\nseldon-mesh\nnamespace to install Kafka\n\nseldon_mesh_namespace\nstring\nseldon-mesh\nnamespace to install Seldon\n\nseldon_crds_namespace\nstring\ndefault\nnamespace to install Seldon CRDs\n\nfull_install\nbool\nyes\nenables full ecosystem installation\n\ninstall_crds\nbool\n{{ full_install }}\ninstalls Seldon CRDs\n\ninstall_components\nbool\n{{ full_install }}\ninstall Seldon components\n\ninstall_servers\nbool\n{{ full_install }}\ninstall Seldon servers\n\n\n\n\nCustom Seldon images and private registries\u00b6\nBy default, the container images used in the install are the ones defined by the helm\ncharts (referring to images publicly available on dockerhub).\nIf you need to customize the images (i.e pull from private registry, pull given\ntag), create a custom images config file following the example in\nplaybooks/vars/set-custom-images.yaml and run with:\nansible-playbook playbooks/setup-seldon.yaml -e @<path-to-custom-images-config.yaml>\n\n\n\nPrivate registries\u00b6\nWhen using private registries, access needs to be authenticated (typically, via a\nservice account key), and the k8s cluster will need to have access to a secret holding\nthis key to be able to pull images.\nThe setup-seldon.yaml playbook will create the required k8s secrets inside the\ncluster if it is provided with an auth file in dockerconfigjson format. You provide\nthe path to this file by cusomizing the custom_image_pull_secrets.dockerconfigjson\nvariable and define the secret name via custom_image_pull_secrets.name in the custom\nimages config file (the one passed to the playbook via -e @file).\nBy default, docker creates the dockerconfigjson auth file in ~/.docker/config.json\nafter passing the service-account key to docker login.\nThe docker login command would look like this (key in json format):\ncat registry-sa-key.json | docker login -u _json_key --password-stdin <registry-url>\n\n\nor, for keys in base64 format:\ncat registry-sa-key | docker login -u _json_key_base64 --password-stdin <registry-url>\n\n\n\n\nSaving helm-chart customisations\u00b6\nBecause the additional custom images config file (starting from the\nplaybooks/vars/set-custom-images.yaml example) overrides values in the helm-charts\navailable in the repo, there\u2019s also a playbook option of saving those overrides as a\nseparate values file, which could be", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "c736e50d-6366-4137-b0ea-47e775d05a87", "page": "getting-started/kubernetes-installation/ansible", "section": "seldon-core-v2-configuration-options", "text": "look like this (key in json format):\ncat registry-sa-key.json | docker login -u _json_key --password-stdin <registry-url>\n\n\nor, for keys in base64 format:\ncat registry-sa-key | docker login -u _json_key_base64 --password-stdin <registry-url>\n\n\n\n\nSaving helm-chart customisations\u00b6\nBecause the additional custom images config file (starting from the\nplaybooks/vars/set-custom-images.yaml example) overrides values in the helm-charts\navailable in the repo, there\u2019s also a playbook option of saving those overrides as a\nseparate values file, which could be used if deploying manually via helm.\nThis is controlled via two variables:\n\n\n\ntype\ndefault\ncomment\n\n\n\nsave_helm_components_overrides\nbool\nfalse\nenable saving helm values overrides\n\nsave_helm_components_overrides_file\nstring\n~/seldon_helm_comp_values.yaml\npath/filename for saving overrides\n\n\n\nYou can either pass those within the custom images config file or directly when running the\nplaybook. For example, for just saving the helm-chart overrides (without installing seldon\ncomponents), you would run:\nansible-playbook playbooks/setup-seldon.yaml -e full_install=no -e save_helm_components_overrides=yes -e @<path-to-custom-images-config.yaml>\n\n\nPlease note that when deploying outside ansible via helm using this saved overrides file,\nand using private registries, you will have to manually create the service-account key\nsecret with the same name as the one defined in your custom image config file under\ncustom_image_pull_secrets.name.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "b1a5afb1-89fe-42a4-a71e-04c1a6535f52", "page": "getting-started/kubernetes-installation/ansible", "section": "custom-seldon-images-and-private-registries", "text": "\nCustom Seldon images and private registries\u00b6\nBy default, the container images used in the install are the ones defined by the helm\ncharts (referring to images publicly available on dockerhub).\nIf you need to customize the images (i.e pull from private registry, pull given\ntag), create a custom images config file following the example in\nplaybooks/vars/set-custom-images.yaml and run with:\nansible-playbook playbooks/setup-seldon.yaml -e @<path-to-custom-images-config.yaml>\n\n\n\nPrivate registries\u00b6\nWhen using private registries, access needs to be authenticated (typically, via a\nservice account key), and the k8s cluster will need to have access to a secret holding\nthis key to be able to pull images.\nThe setup-seldon.yaml playbook will create the required k8s secrets inside the\ncluster if it is provided with an auth file in dockerconfigjson format. You provide\nthe path to this file by cusomizing the custom_image_pull_secrets.dockerconfigjson\nvariable and define the secret name via custom_image_pull_secrets.name in the custom\nimages config file (the one passed to the playbook via -e @file).\nBy default, docker creates the dockerconfigjson auth file in ~/.docker/config.json\nafter passing the service-account key to docker login.\nThe docker login command would look like this (key in json format):\ncat registry-sa-key.json | docker login -u _json_key --password-stdin <registry-url>\n\n\nor, for keys in base64 format:\ncat registry-sa-key | docker login -u _json_key_base64 --password-stdin <registry-url>\n\n\n\n\nSaving helm-chart customisations\u00b6\nBecause the additional custom images config file (starting from the\nplaybooks/vars/set-custom-images.yaml example) overrides values in the helm-charts\navailable in the repo, there\u2019s also a playbook option of saving those overrides as a\nseparate values file, which could be used if deploying manually via helm.\nThis is controlled via two variables:\n\n\n\ntype\ndefault\ncomment\n\n\n\nsave_helm_components_overrides\nbool\nfalse\nenable saving helm values overrides\n\nsave_helm_components_overrides_file\nstring\n~/seldon_helm_comp_values.yaml\npath/filename for saving overrides\n\n\n\nYou can either pass those within the custom images config file or", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "fd55d4c3-e467-45e5-9308-34c1db0d1c05", "page": "getting-started/kubernetes-installation/ansible", "section": "custom-seldon-images-and-private-registries", "text": "customisations\u00b6\nBecause the additional custom images config file (starting from the\nplaybooks/vars/set-custom-images.yaml example) overrides values in the helm-charts\navailable in the repo, there\u2019s also a playbook option of saving those overrides as a\nseparate values file, which could be used if deploying manually via helm.\nThis is controlled via two variables:\n\n\n\ntype\ndefault\ncomment\n\n\n\nsave_helm_components_overrides\nbool\nfalse\nenable saving helm values overrides\n\nsave_helm_components_overrides_file\nstring\n~/seldon_helm_comp_values.yaml\npath/filename for saving overrides\n\n\n\nYou can either pass those within the custom images config file or directly when running the\nplaybook. For example, for just saving the helm-chart overrides (without installing seldon\ncomponents), you would run:\nansible-playbook playbooks/setup-seldon.yaml -e full_install=no -e save_helm_components_overrides=yes -e @<path-to-custom-images-config.yaml>\n\n\nPlease note that when deploying outside ansible via helm using this saved overrides file,\nand using private registries, you will have to manually create the service-account key\nsecret with the same name as the one defined in your custom image config file under\ncustom_image_pull_secrets.name.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "32b7e0bb-91f3-4478-a802-a9374c9cd278", "page": "getting-started/kubernetes-installation/ansible", "section": "private-registries", "text": "\nPrivate registries\u00b6\nWhen using private registries, access needs to be authenticated (typically, via a\nservice account key), and the k8s cluster will need to have access to a secret holding\nthis key to be able to pull images.\nThe setup-seldon.yaml playbook will create the required k8s secrets inside the\ncluster if it is provided with an auth file in dockerconfigjson format. You provide\nthe path to this file by cusomizing the custom_image_pull_secrets.dockerconfigjson\nvariable and define the secret name via custom_image_pull_secrets.name in the custom\nimages config file (the one passed to the playbook via -e @file).\nBy default, docker creates the dockerconfigjson auth file in ~/.docker/config.json\nafter passing the service-account key to docker login.\nThe docker login command would look like this (key in json format):\ncat registry-sa-key.json | docker login -u _json_key --password-stdin <registry-url>\n\n\nor, for keys in base64 format:\ncat registry-sa-key | docker login -u _json_key_base64 --password-stdin <registry-url>\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "72feb41d-3adb-4c68-b959-db5827e2fdc0", "page": "getting-started/kubernetes-installation/ansible", "section": "saving-helm-chart-customisations", "text": "\nSaving helm-chart customisations\u00b6\nBecause the additional custom images config file (starting from the\nplaybooks/vars/set-custom-images.yaml example) overrides values in the helm-charts\navailable in the repo, there\u2019s also a playbook option of saving those overrides as a\nseparate values file, which could be used if deploying manually via helm.\nThis is controlled via two variables:\n\n\n\ntype\ndefault\ncomment\n\n\n\nsave_helm_components_overrides\nbool\nfalse\nenable saving helm values overrides\n\nsave_helm_components_overrides_file\nstring\n~/seldon_helm_comp_values.yaml\npath/filename for saving overrides\n\n\n\nYou can either pass those within the custom images config file or directly when running the\nplaybook. For example, for just saving the helm-chart overrides (without installing seldon\ncomponents), you would run:\nansible-playbook playbooks/setup-seldon.yaml -e full_install=no -e save_helm_components_overrides=yes -e @<path-to-custom-images-config.yaml>\n\n\nPlease note that when deploying outside ansible via helm using this saved overrides file,\nand using private registries, you will have to manually create the service-account key\nsecret with the same name as the one defined in your custom image config file under\ncustom_image_pull_secrets.name.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "090c27a5-d04c-48bf-ac3f-fa37193d8446", "page": "getting-started/kubernetes-installation/ansible", "section": "uninstall", "text": "\nUninstall\u00b6\nTo fully remove the Ansible installation delete the created Kind cluster\nkind delete cluster --name seldon\n\n\nThis will stop and delete the Kind cluster freeing all of the resources taken by the dev/trial installation.\nYou may want to also remove cache resources used for the installation with\nrm -rf ~/.cache/seldon/\n\n\n\nNote\nIf you used Ansible to install Seldon Core v2 and its ecosystem into K8s cluster other than Kind you need to manually remove all the components.\nNotes on how to remove Seldon Core v2 Helm installation itself you can find here.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/ansible.html", "key": "getting-started/kubernetes-installation/ansible"}}, {"key": "94720958-20b5-4050-bb49-fc7fcf660d19", "page": "cli/docs/seldon_pipeline_status", "section": "seldon-pipeline-status", "text": "\nseldon pipeline status\u00b6\nstatus of a pipeline\n\nSynopsis\u00b6\nstatus of a pipeline\nseldon pipeline status <pipelineName> [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for status\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -w, --wait string             pipeline wait condition\n\n\n\n\nSEE ALSO\u00b6\n\nseldon pipeline\t - manage pipelines\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_status.html", "key": "cli/docs/seldon_pipeline_status"}}, {"key": "8c185061-1638-4944-8527-a54645f88732", "page": "cli/docs/seldon_pipeline_status", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for status\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -w, --wait string             pipeline wait condition\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_status.html", "key": "cli/docs/seldon_pipeline_status"}}, {"key": "ab6c7e43-2ae6-4ae9-95a4-0fa04c0310d4", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "\nPipeline Examples\u00b6\nRun these examples from the samples folder.\n\nSeldon V2 Pipeline Examples\u00b6\nThis notebook illustrates a series of Pipelines showing of different ways of combining flows of data and conditional logic. We assume you have Seldon Core V2 running locally.\n\nModels Used\u00b6\n\ngs://seldon-models/triton/simple an example Triton tensorflow model that takes 2 inputs INPUT0 and INPUT1 and adds them to produce OUTPUT0 and also subtracts INPUT1 from INPUT0 to produce OUTPUT1. See here for the original source code and license.\nOther models can be found at https://github.com/SeldonIO/triton-python-examples\n\n\n\nModel Chaining\u00b6\nChain the output of one model into the next. Also shows chaning the tensor names via tensorMap to conform to the expected input tensor names of the second model.\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nThe pipeline below chains the output of tfsimple1 into tfsimple2. As these models have compatible shape and data type this can be done. However, the output tensor names from tfsimple1 need to be renamed to match the input tensor names for tfsimple2. We do this with the tensorMap feature.\nThe output of the Pipeline is the output from tfsimple2.\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "650da22b-35e6-44f5-b4d4-f269ccca3395", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "However, the output tensor names from tfsimple1 need to be renamed to match the input tensor names for tfsimple2. We do this with the tensorMap feature.\nThe output of the Pipeline is the output from tfsimple2.\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\n\n\nseldon pipeline status tfsimples -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimples\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimples\",\n        \"uid\": \"ciep26qi8ufs73flaiqg\",\n        \"version\": 2,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n            \"name\": \"tfsimple2\",\n            \"inputs\": [\n              \"tfsimple1.outputs\"\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "76c92ea9-feaf-4215-b201-e7fbdcb54f4a", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "         },\n          {\n            \"name\": \"tfsimple2\",\n            \"inputs\": [\n              \"tfsimple1.outputs\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n              \"tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:11:40.101677847Z\",\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "36051ff2-52c9-460a-9865-0de0cbeac2ba", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "  },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:11:40.101677847Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "56857b55-1d1b-4cbd-adf6-c940fa91ea89", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "       22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT1\",\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "9b207c93-1da4-49d9-a153-a3abbb2906a3", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "       22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "dfffba00-cfa6-43e4-9eba-2d78df167626", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "8f4c53e8-7155-44c2-ab91-8d4ffb392cdd", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "\"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nWe use the Seldon CLI pipeline inspect feature to look at the data for all steps of the pipeline for the last data item passed through the pipeline (the default). This can be useful for debugging.\nseldon pipeline", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "ea5c6ed9-2ec6-4f8d-a179-0170a0cb7a0a", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "       32\n        ]\n      }\n    }\n  ]\n}\n\n\nWe use the Seldon CLI pipeline inspect feature to look at the data for all steps of the pipeline for the last data item passed through the pipeline (the default). This can be useful for debugging.\nseldon pipeline inspect tfsimples\n\n\nseldon.default.model.tfsimple1.inputs\tciep298fh5ss73dpdir0\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.model.tfsimple2.inputs\tciep298fh5ss73dpdir0\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimples.inputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimples\", \"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "9611da24-8658-4461-8420-30f1fe5c9984", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "\"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimples.inputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimples\", \"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimples.outputs\tciep298fh5ss73dpdir0\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nNext, we look get the output as json and use the jq tool to get just one value.\nseldon pipeline inspect tfsimples --format json | jq -M .topics[0].msgs[0].value\n\n\n{\n  \"inputs\": [\n    {\n      \"name\": \"INPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n         ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "ee8cdf77-bc34-4acc-92b7-34528d2797c4", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "    \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    },\n    {\n      \"name\": \"INPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "b1b30afb-e9e6-4fe5-aac0-644da1defb18", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "},\n    {\n      \"name\": \"INPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimples\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nModel Chaining from inputs\u00b6\nChain", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "cfaf2c9e-25e4-420c-b3ee-d7d0e403411f", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": " 13,\n          14,\n          15,\n          16\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimples\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nModel Chaining from inputs\u00b6\nChain the output of one model into the next. Shows using the input and outputs and combining.\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimples-input.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples-input\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1.inputs.INPUT0\n      - tfsimple1.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimples-input.yaml\n\n\nseldon pipeline status tfsimples-input -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimples-input\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimples-input\",\n        \"uid\": \"ciep2fii8ufs73flair0\",\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "c7f7ee8b-8936-4fd2-9158-f5a2337199d1", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": " tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimples-input.yaml\n\n\nseldon pipeline status tfsimples-input -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimples-input\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimples-input\",\n        \"uid\": \"ciep2fii8ufs73flair0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n            \"name\": \"tfsimple2\",\n            \"inputs\": [\n              \"tfsimple1.inputs.INPUT0\",\n              \"tfsimple1.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "9cd16724-2b3f-4d0b-8af3-e5809205a9ed", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "        \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:12:14.711416101Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples-input \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "1e4bb87c-4e5b-45ff-aedd-280760d4f0d4", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "'{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "e564602f-1648-45ff-a6ac-c12fc41c395b", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "     \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples-input --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "e7943c29-ed44-4787-aa67-cdbd44b1cd9d", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "     \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples-input --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "d842a6e4-29be-43ea-9bf7-2fbd0c8d0e7c", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "a4e0ddbd-5f59-4f05-8d9c-89e16207d090", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "         6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimples-input\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nModel Join\u00b6\nJoin two flows of data from two models as input to a third model. This shows how individual flows of data can be combined.\ncat ./models/tfsimple1.yaml\necho \"---\"\ncat ./models/tfsimple2.yaml\necho \"---\"\ncat ./models/tfsimple3.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple3\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\nseldon model load -f ./models/tfsimple3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\nseldon model status tfsimple3 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n{}\n\n\nIn the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "6e62e886-f119-4344-b954-e6760c29efae", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": " requirements:\n  - tensorflow\n  memory: 100Ki\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple3\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\nseldon model load -f ./models/tfsimple3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\nseldon model status tfsimple3 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n{}\n\n\nIn the pipeline below for the input to tfsimple3 we join 1 output tensor each from the two previous models tfsimple1 and tfsimple2. We need to use the tensorMap feature to rename each output tensor to one of the expected input tensors for the tfsimple3 model.\ncat ./pipelines/tfsimples-join.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: join\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: tfsimple3\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\nseldon pipeline load -f ./pipelines/tfsimples-join.yaml\n\n\nseldon pipeline status join -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"join\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"join\",\n        \"uid\": \"ciep2k2i8ufs73flairg\",\n        \"version\": 1,\n        \"steps\": [\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "4319c67c-3c2a-4412-8098-80897e4dcc04", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "./pipelines/tfsimples-join.yaml\n\n\nseldon pipeline status join -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"join\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"join\",\n        \"uid\": \"ciep2k2i8ufs73flairg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n            \"name\": \"tfsimple2\"\n          },\n          {\n            \"name\": \"tfsimple3\",\n            \"inputs\": [\n              \"tfsimple1.outputs.OUTPUT0\",\n              \"tfsimple2.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n              \"tfsimple2.outputs.OUTPUT1\": \"INPUT1\"\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "165bcb74-2f2c-45c9-b7ca-df83dd119cc1", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "\"tfsimple2.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n              \"tfsimple2.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple3.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:12:32.938603415Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nThe outputs are the sequence \u201c2,4,6\u2026\u201d which conforms to the logic of this model (addition and subtraction) when fed the output of the first two models.\nseldon pipeline infer join --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "e31a3bba-ac4a-41ba-9d62-64c2292ee1b0", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": " \"lastChangeTimestamp\": \"2023-06-29T14:12:32.938603415Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nThe outputs are the sequence \u201c2,4,6\u2026\u201d which conforms to the logic of this model (addition and subtraction) when fed the output of the first two models.\nseldon pipeline infer join --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "5a3fdb4c-4c39-4254-aa71-a5a17a34c978", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "      14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "b3780dfd-a0d6-43c7-ac81-7686a8cfc8b3", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "     4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload join\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\nseldon model unload tfsimple3\n\n\n\n\nConditional\u00b6\nShows conditional data flows - one of two models is run based on output tensors from first.\ncat ./models/conditional.yaml\necho \"---\"\ncat ./models/add10.yaml\necho \"---\"\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: conditional\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/conditional\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/conditional.yaml\nseldon model load -f ./models/add10.yaml\nseldon model", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "a47eb703-a8a6-4b18-b5a0-593d979ddbf3", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "from first.\ncat ./models/conditional.yaml\necho \"---\"\ncat ./models/add10.yaml\necho \"---\"\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: conditional\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/conditional\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/conditional.yaml\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status conditional -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\nseldon model status mul10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n{}\n\n\nHere we assume the conditional model can output two tensors OUTPUT0 and OUTPUT1 but only outputs the former if the CHOICE input tensor is set to 0 otherwise it outputs tensor OUTPUT1. By this means only one of the two downstream models will receive data and run. The output steps does an any join from both models and whichever data appears first will be sent as output to pipeline. As in this case only 1 of the two models add10 and mul10 runs we will receive their output.\ncat ./pipelines/conditional.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-conditional\nspec:\n  steps:\n  - name: conditional\n  - name: mul10\n    inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n      conditional.outputs.OUTPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    -", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "7a4adea7-a611-4b71-be3d-555b1c99cfa3", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "conditional\n  - name: mul10\n    inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n      conditional.outputs.OUTPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ./pipelines/conditional.yaml\n\n\nseldon pipeline status tfsimple-conditional -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-conditional\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-conditional\",\n        \"uid\": \"ciepga2i8ufs73flais0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"conditional.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"conditional.outputs.OUTPUT1\": \"INPUT\"\n            }\n          },\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "66777316-1435-45d4-b1f2-b051fb6a2705", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "     ],\n            \"tensorMap\": {\n              \"conditional.outputs.OUTPUT1\": \"INPUT\"\n            }\n          },\n          {\n            \"name\": \"conditional\"\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"conditional.outputs.OUTPUT0\"\n            ],\n            \"tensorMap\": {\n              \"conditional.outputs.OUTPUT0\": \"INPUT\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "05efd4bb-7dd1-4f11-bd44-40a6cbb580d0", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "        }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n          \"stepsJoin\": \"ANY\"\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:41:45.133142725Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nThe mul10 model will run as the CHOICE tensor is set to 0.\nseldon pipeline infer tfsimple-conditional --inference-mode grpc \\\n '{\"model_name\":\"conditional\",\"inputs\":[{\"name\":\"CHOICE\",\"contents\":{\"int_contents\":[0]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "5518c1e2-2d53-44e6-a7a9-ca1931586d61", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": ".\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nThe add10 model will run as the CHOICE tensor is not set to zero.\nseldon pipeline infer tfsimple-conditional --inference-mode grpc \\\n '{\"model_name\":\"conditional\",\"inputs\":[{\"name\":\"CHOICE\",\"contents\":{\"int_contents\":[1]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "db7ad703-435c-42c5-9534-ccf10ce609b6", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "       \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimple-conditional\n\n\nseldon model unload conditional\nseldon model unload add10\nseldon model unload mul10\n\n\n\n\nPipeline Input Tensors\u00b6\nAccess to indivudal tensors in pipeline inputs\ncat ./models/mul10.yaml\necho \"---\"\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/mul10.yaml\nseldon model load -f ./models/add10.yaml\n\n\n{}\n{}\n\n\nseldon model status mul10 -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nThis pipeline shows how we can access pipeline inputs INPUT0 and INPUT1 from different steps.\ncat ./pipelines/pipeline-inputs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-inputs\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - pipeline-inputs.inputs.INPUT0\n    tensorMap:\n      pipeline-inputs.inputs.INPUT0: INPUT\n  - name: add10\n    inputs:\n    - pipeline-inputs.inputs.INPUT1\n    tensorMap:\n      pipeline-inputs.inputs.INPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n\n\nseldon pipeline load -f ./pipelines/pipeline-inputs.yaml\n\n\nseldon pipeline status pipeline-inputs -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"pipeline-inputs\",\n  \"versions\": [\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "bf30fafc-438b-46c8-b5cc-8abc319d0ece", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "  pipeline-inputs.inputs.INPUT0: INPUT\n  - name: add10\n    inputs:\n    - pipeline-inputs.inputs.INPUT1\n    tensorMap:\n      pipeline-inputs.inputs.INPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n\n\nseldon pipeline load -f ./pipelines/pipeline-inputs.yaml\n\n\nseldon pipeline status pipeline-inputs -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"pipeline-inputs\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"pipeline-inputs\",\n        \"uid\": \"ciepgeqi8ufs73flaisg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"pipeline-inputs.inputs.INPUT1\"\n            ],\n            \"tensorMap\": {\n              \"pipeline-inputs.inputs.INPUT1\": \"INPUT\"\n            }\n          },\n          {\n            \"name\": \"mul10\",\n           ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "4d5131d3-208e-4bb1-9936-5d054ad4ae75", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "      \"pipeline-inputs.inputs.INPUT1\": \"INPUT\"\n            }\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"pipeline-inputs.inputs.INPUT0\"\n            ],\n            \"tensorMap\": {\n              \"pipeline-inputs.inputs.INPUT0\": \"INPUT\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "0107652a-b70b-4ba4-ac14-b4ec3f65b7b0", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": " \"add10.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:42:04.202598715Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer pipeline-inputs --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "e2d2fa8b-e14b-4f4c-9365-c797fefa07ac", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "         30,\n          40\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload pipeline-inputs\n\n\nseldon model unload mul10\nseldon model unload add10\n\n\n\n\nTrigger Joins\u00b6\nShows how joins can be used for triggers as well.\ncat ./models/mul10.yaml\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/mul10.yaml\nseldon model load -f ./models/add10.yaml\n\n\n{}\n{}\n\n\nseldon model status mul10 -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nHere we required tensors names ok1 or ok2 to exist on pipeline inputs to run the mul10 model but require tensor ok3 to exist on", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "3c74bc3d-f704-4469-acdb-3681cd74c685", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": " name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/mul10.yaml\nseldon model load -f ./models/add10.yaml\n\n\n{}\n{}\n\n\nseldon model status mul10 -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nHere we required tensors names ok1 or ok2 to exist on pipeline inputs to run the mul10 model but require tensor ok3 to exist on pipeline inputs to run the add10 model. The logic on mul10 is handled by a trigger join of any meaning either of these input data can exist to satisfy the trigger join.\ncat ./pipelines/trigger-joins.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: trigger-joins\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok1\n    - trigger-joins.inputs.ok2\n    triggersJoinType: any\n  - name: add10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok3\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ./pipelines/trigger-joins.yaml\n\n\nseldon pipeline status trigger-joins -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"trigger-joins\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"trigger-joins\",\n        \"uid\": \"ciepgkqi8ufs73flait0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "0ca89aa9-c0db-4e05-8644-8827465b5c55", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": " \"pipelineName\": \"trigger-joins\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"trigger-joins\",\n        \"uid\": \"ciepgkqi8ufs73flait0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"trigger-joins.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"trigger-joins.inputs.ok3\"\n            ]\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"trigger-joins.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"trigger-joins.inputs.ok1\",\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "b19df0bb-7964-453d-aec6-655145ee9f16", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "      \"inputs\": [\n              \"trigger-joins.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"trigger-joins.inputs.ok1\",\n              \"trigger-joins.inputs.ok2\"\n            ],\n            \"triggersJoin\": \"ANY\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n          \"stepsJoin\": \"ANY\"\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:42:27.595300698Z\",\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "8eeb324d-cab3-4179-abd5-1867943a667e", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "      \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:42:27.595300698Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer trigger-joins --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"ok1\",\"contents\":{\"fp32_contents\":[1]},\"datatype\":\"FP32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer trigger-joins --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"ok3\",\"contents\":{\"fp32_contents\":[1]},\"datatype\":\"FP32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "d51815af-3b27-48cd-a312-9f9f76a73027", "page": "examples/pipeline-examples", "section": "pipeline-examples", "text": "      ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer trigger-joins --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"ok3\",\"contents\":{\"fp32_contents\":[1]},\"datatype\":\"FP32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload trigger-joins\n\n\nseldon model unload mul10\nseldon model unload add10\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "5463aa33-c552-4d3b-b5ee-78a1eb2beefe", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "\nSeldon V2 Pipeline Examples\u00b6\nThis notebook illustrates a series of Pipelines showing of different ways of combining flows of data and conditional logic. We assume you have Seldon Core V2 running locally.\n\nModels Used\u00b6\n\ngs://seldon-models/triton/simple an example Triton tensorflow model that takes 2 inputs INPUT0 and INPUT1 and adds them to produce OUTPUT0 and also subtracts INPUT1 from INPUT0 to produce OUTPUT1. See here for the original source code and license.\nOther models can be found at https://github.com/SeldonIO/triton-python-examples\n\n\n\nModel Chaining\u00b6\nChain the output of one model into the next. Also shows chaning the tensor names via tensorMap to conform to the expected input tensor names of the second model.\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nThe pipeline below chains the output of tfsimple1 into tfsimple2. As these models have compatible shape and data type this can be done. However, the output tensor names from tfsimple1 need to be renamed to match the input tensor names for tfsimple2. We do this with the tensorMap feature.\nThe output of the Pipeline is the output from tfsimple2.\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "033d3f99-7dd6-4d1c-b619-d93f7cc81be7", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "need to be renamed to match the input tensor names for tfsimple2. We do this with the tensorMap feature.\nThe output of the Pipeline is the output from tfsimple2.\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\n\n\nseldon pipeline status tfsimples -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimples\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimples\",\n        \"uid\": \"ciep26qi8ufs73flaiqg\",\n        \"version\": 2,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n            \"name\": \"tfsimple2\",\n            \"inputs\": [\n              \"tfsimple1.outputs\"\n           ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "0f3e54d2-5040-4312-beac-daf2dd163720", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "  },\n          {\n            \"name\": \"tfsimple2\",\n            \"inputs\": [\n              \"tfsimple1.outputs\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n              \"tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:11:40.101677847Z\",\n        \"modelsReady\": true\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "6b029f0e-d29c-4dac-b5a3-a5a8a124ae9f", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "   \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:11:40.101677847Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "97768226-7916-40d4-89c0-db21f5bf06cf", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "1cba81e8-0e19-4953-8d1f-f529aa2f962f", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "123f7601-3b19-4690-bc6d-fa5117b328b5", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "   4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "6c373453-a9a3-4428-b5ff-bbc74292e666", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "  \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nWe use the Seldon CLI pipeline inspect feature to look at the data for all steps of the pipeline for the last data item passed through the pipeline (the default). This can be useful for debugging.\nseldon pipeline inspect tfsimples\n\n\nseldon.default.model.tfsimple1.inputs\tciep298fh5ss73dpdir0\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "9738a40f-d8f2-4786-9e32-d405bb6e101b", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "32\n        ]\n      }\n    }\n  ]\n}\n\n\nWe use the Seldon CLI pipeline inspect feature to look at the data for all steps of the pipeline for the last data item passed through the pipeline (the default). This can be useful for debugging.\nseldon pipeline inspect tfsimples\n\n\nseldon.default.model.tfsimple1.inputs\tciep298fh5ss73dpdir0\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.model.tfsimple2.inputs\tciep298fh5ss73dpdir0\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimples.inputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimples\", \"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "52a30aa9-22eb-43c3-8510-004aed52bf75", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimples.inputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimples\", \"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimples.outputs\tciep298fh5ss73dpdir0\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nNext, we look get the output as json and use the jq tool to get just one value.\nseldon pipeline inspect tfsimples --format json | jq -M .topics[0].msgs[0].value\n\n\n{\n  \"inputs\": [\n    {\n      \"name\": \"INPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "4f1123cc-5cf0-4ba2-9b77-baef172bfa0b", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "      \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    },\n    {\n      \"name\": \"INPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "05a9ef4f-69e5-487a-adbc-0dc52d5a8184", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "   \"name\": \"INPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimples\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nModel Chaining from inputs\u00b6\nChain the output of one model into the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "5b862bc1-4354-4c85-9611-fd0b57752cd1", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "    14,\n          15,\n          16\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimples\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nModel Chaining from inputs\u00b6\nChain the output of one model into the next. Shows using the input and outputs and combining.\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimples-input.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples-input\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1.inputs.INPUT0\n      - tfsimple1.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimples-input.yaml\n\n\nseldon pipeline status tfsimples-input -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimples-input\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimples-input\",\n        \"uid\": \"ciep2fii8ufs73flair0\",\n        \"version\": 1,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "62ccffd8-d238-4b0d-963d-eb6ea55f539e", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": " steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimples-input.yaml\n\n\nseldon pipeline status tfsimples-input -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimples-input\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimples-input\",\n        \"uid\": \"ciep2fii8ufs73flair0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n            \"name\": \"tfsimple2\",\n            \"inputs\": [\n              \"tfsimple1.inputs.INPUT0\",\n              \"tfsimple1.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "0e57824c-b065-4c39-84c5-4e7ca0eabe92", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": " \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:12:14.711416101Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples-input \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "f6c84403-e3d7-4603-aabc-bdb74b0a7d65", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "\"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "65eb015d-f7ce-44de-a470-9df04ca559b2", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "   },\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples-input --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "fdc2a956-dc81-4789-8a00-9c3b0f6da4a7", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "   }\n  ]\n}\n\n\nseldon pipeline infer tfsimples-input --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "539f5c7c-71ba-40cb-bac6-83827643ac13", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "   11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "3b2a9645-5f66-42b5-8fbe-a566780d3bc6", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "  6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimples-input\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nModel Join\u00b6\nJoin two flows of data from two models as input to a third model. This shows how individual flows of data can be combined.\ncat ./models/tfsimple1.yaml\necho \"---\"\ncat ./models/tfsimple2.yaml\necho \"---\"\ncat ./models/tfsimple3.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple3\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\nseldon model load -f ./models/tfsimple3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\nseldon model status tfsimple3 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n{}\n\n\nIn the pipeline below for the input to tfsimple3", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "1cea0161-e328-4c7c-9f26-8129aea4d241", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "100Ki\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple3\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\nseldon model load -f ./models/tfsimple3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\nseldon model status tfsimple3 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n{}\n\n\nIn the pipeline below for the input to tfsimple3 we join 1 output tensor each from the two previous models tfsimple1 and tfsimple2. We need to use the tensorMap feature to rename each output tensor to one of the expected input tensors for the tfsimple3 model.\ncat ./pipelines/tfsimples-join.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: join\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: tfsimple3\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\nseldon pipeline load -f ./pipelines/tfsimples-join.yaml\n\n\nseldon pipeline status join -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"join\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"join\",\n        \"uid\": \"ciep2k2i8ufs73flairg\",\n        \"version\": 1,\n        \"steps\": [\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "4e0ae788-db2a-49e0-9465-ca564fc56ee3", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "jq -M .\n\n\n{\n  \"pipelineName\": \"join\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"join\",\n        \"uid\": \"ciep2k2i8ufs73flairg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n            \"name\": \"tfsimple2\"\n          },\n          {\n            \"name\": \"tfsimple3\",\n            \"inputs\": [\n              \"tfsimple1.outputs.OUTPUT0\",\n              \"tfsimple2.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n              \"tfsimple2.outputs.OUTPUT1\": \"INPUT1\"\n            }\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "5bef7c51-c7d7-49f7-b2c6-e6656342bc12", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "     ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n              \"tfsimple2.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple3.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:12:32.938603415Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nThe outputs are the sequence \u201c2,4,6\u2026\u201d which conforms to the logic of this model (addition and subtraction) when fed the output of the first two models.\nseldon pipeline infer join --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "3155024a-2e12-4538-9883-dc4447dda867", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "   \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nThe outputs are the sequence \u201c2,4,6\u2026\u201d which conforms to the logic of this model (addition and subtraction) when fed the output of the first two models.\nseldon pipeline infer join --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "b0f8036d-6bf1-45c9-9f01-85fef51ce033", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "         16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "c9e222a5-8fc1-4061-a4fc-0974b78602f3", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "        6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload join\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\nseldon model unload tfsimple3\n\n\n\n\nConditional\u00b6\nShows conditional data flows - one of two models is run based on output tensors from first.\ncat ./models/conditional.yaml\necho \"---\"\ncat ./models/add10.yaml\necho \"---\"\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: conditional\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/conditional\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/conditional.yaml\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status conditional -w", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "63101bf8-b74f-458e-b472-04403852df77", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: conditional\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/conditional\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/conditional.yaml\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status conditional -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\nseldon model status mul10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n{}\n\n\nHere we assume the conditional model can output two tensors OUTPUT0 and OUTPUT1 but only outputs the former if the CHOICE input tensor is set to 0 otherwise it outputs tensor OUTPUT1. By this means only one of the two downstream models will receive data and run. The output steps does an any join from both models and whichever data appears first will be sent as output to pipeline. As in this case only 1 of the two models add10 and mul10 runs we will receive their output.\ncat ./pipelines/conditional.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-conditional\nspec:\n  steps:\n  - name: conditional\n  - name: mul10\n    inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n      conditional.outputs.OUTPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "04701455-57b5-4693-b9ac-09ce36d7fdb0", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": " inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n      conditional.outputs.OUTPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ./pipelines/conditional.yaml\n\n\nseldon pipeline status tfsimple-conditional -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-conditional\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-conditional\",\n        \"uid\": \"ciepga2i8ufs73flais0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"conditional.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"conditional.outputs.OUTPUT1\": \"INPUT\"\n            }\n          },\n          {\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "11a8f375-8f26-4a07-9e5b-f8a1f6aae9d7", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "          \"tensorMap\": {\n              \"conditional.outputs.OUTPUT1\": \"INPUT\"\n            }\n          },\n          {\n            \"name\": \"conditional\"\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"conditional.outputs.OUTPUT0\"\n            ],\n            \"tensorMap\": {\n              \"conditional.outputs.OUTPUT0\": \"INPUT\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "74b8223e-f0cd-493a-a378-18f89512a18a", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": " }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n          \"stepsJoin\": \"ANY\"\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:41:45.133142725Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nThe mul10 model will run as the CHOICE tensor is set to 0.\nseldon pipeline infer tfsimple-conditional --inference-mode grpc \\\n '{\"model_name\":\"conditional\",\"inputs\":[{\"name\":\"CHOICE\",\"contents\":{\"int_contents\":[0]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "f6de89b3-0970-4be7-8484-e927105545cd", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "{\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nThe add10 model will run as the CHOICE tensor is not set to zero.\nseldon pipeline infer tfsimple-conditional --inference-mode grpc \\\n '{\"model_name\":\"conditional\",\"inputs\":[{\"name\":\"CHOICE\",\"contents\":{\"int_contents\":[1]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "ee95a610-1bbb-484c-ace6-583f33ef622f", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "\"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimple-conditional\n\n\nseldon model unload conditional\nseldon model unload add10\nseldon model unload mul10\n\n\n\n\nPipeline Input Tensors\u00b6\nAccess to indivudal tensors in pipeline inputs\ncat ./models/mul10.yaml\necho \"---\"\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/mul10.yaml\nseldon model load -f ./models/add10.yaml\n\n\n{}\n{}\n\n\nseldon model status mul10 -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nThis pipeline shows how we can access pipeline inputs INPUT0 and INPUT1 from different steps.\ncat ./pipelines/pipeline-inputs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-inputs\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - pipeline-inputs.inputs.INPUT0\n    tensorMap:\n      pipeline-inputs.inputs.INPUT0: INPUT\n  - name: add10\n    inputs:\n    - pipeline-inputs.inputs.INPUT1\n    tensorMap:\n      pipeline-inputs.inputs.INPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n\n\nseldon pipeline load -f ./pipelines/pipeline-inputs.yaml\n\n\nseldon pipeline status pipeline-inputs -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"pipeline-inputs\",\n  \"versions\": [\n    {\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "68490d6c-834c-4b6b-a3db-45b58d5d2bc2", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "add10\n    inputs:\n    - pipeline-inputs.inputs.INPUT1\n    tensorMap:\n      pipeline-inputs.inputs.INPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n\n\nseldon pipeline load -f ./pipelines/pipeline-inputs.yaml\n\n\nseldon pipeline status pipeline-inputs -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"pipeline-inputs\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"pipeline-inputs\",\n        \"uid\": \"ciepgeqi8ufs73flaisg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"pipeline-inputs.inputs.INPUT1\"\n            ],\n            \"tensorMap\": {\n              \"pipeline-inputs.inputs.INPUT1\": \"INPUT\"\n            }\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "80d1bac8-7d5e-43fd-a08d-b273bc6ffc66", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "\"INPUT\"\n            }\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"pipeline-inputs.inputs.INPUT0\"\n            ],\n            \"tensorMap\": {\n              \"pipeline-inputs.inputs.INPUT0\": \"INPUT\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "01a0cbc2-1e8e-4b09-8426-ece61f23122f", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "    ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:42:04.202598715Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer pipeline-inputs --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "00a93d25-13c1-4c32-9606-84c2ada0de12", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "  30,\n          40\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload pipeline-inputs\n\n\nseldon model unload mul10\nseldon model unload add10\n\n\n\n\nTrigger Joins\u00b6\nShows how joins can be used for triggers as well.\ncat ./models/mul10.yaml\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/mul10.yaml\nseldon model load -f ./models/add10.yaml\n\n\n{}\n{}\n\n\nseldon model status mul10 -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nHere we required tensors names ok1 or ok2 to exist on pipeline inputs to run the mul10 model but require tensor ok3 to exist on pipeline inputs to run the add10 model.", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "c2382460-7c92-46ea-b6f8-9d4f4f3aac0a", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/mul10.yaml\nseldon model load -f ./models/add10.yaml\n\n\n{}\n{}\n\n\nseldon model status mul10 -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nHere we required tensors names ok1 or ok2 to exist on pipeline inputs to run the mul10 model but require tensor ok3 to exist on pipeline inputs to run the add10 model. The logic on mul10 is handled by a trigger join of any meaning either of these input data can exist to satisfy the trigger join.\ncat ./pipelines/trigger-joins.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: trigger-joins\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok1\n    - trigger-joins.inputs.ok2\n    triggersJoinType: any\n  - name: add10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok3\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ./pipelines/trigger-joins.yaml\n\n\nseldon pipeline status trigger-joins -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"trigger-joins\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"trigger-joins\",\n        \"uid\": \"ciepgkqi8ufs73flait0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "9fdcbc06-6ba7-4d7d-992f-d27d9656115b", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "  {\n      \"pipeline\": {\n        \"name\": \"trigger-joins\",\n        \"uid\": \"ciepgkqi8ufs73flait0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"trigger-joins.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"trigger-joins.inputs.ok3\"\n            ]\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"trigger-joins.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"trigger-joins.inputs.ok1\",\n          ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "e3ad071f-9bef-4f7b-965a-d5d41fa30396", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "[\n              \"trigger-joins.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"trigger-joins.inputs.ok1\",\n              \"trigger-joins.inputs.ok2\"\n            ],\n            \"triggersJoin\": \"ANY\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n          \"stepsJoin\": \"ANY\"\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:42:27.595300698Z\",\n        \"modelsReady\": true\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "46afbb66-8eef-4667-b1ff-2733b5a3d3f9", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "{}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:42:27.595300698Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer trigger-joins --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"ok1\",\"contents\":{\"fp32_contents\":[1]},\"datatype\":\"FP32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer trigger-joins --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"ok3\",\"contents\":{\"fp32_contents\":[1]},\"datatype\":\"FP32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "8125a6ed-ccbd-4e9b-b990-8bef39d11b50", "page": "examples/pipeline-examples", "section": "seldon-v2-pipeline-examples", "text": "     }\n    }\n  ]\n}\n\n\nseldon pipeline infer trigger-joins --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"ok3\",\"contents\":{\"fp32_contents\":[1]},\"datatype\":\"FP32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload trigger-joins\n\n\nseldon model unload mul10\nseldon model unload add10\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "51279b42-5e66-4466-8d1f-de210e1beacb", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "\nModel Chaining\u00b6\nChain the output of one model into the next. Also shows chaning the tensor names via tensorMap to conform to the expected input tensor names of the second model.\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nThe pipeline below chains the output of tfsimple1 into tfsimple2. As these models have compatible shape and data type this can be done. However, the output tensor names from tfsimple1 need to be renamed to match the input tensor names for tfsimple2. We do this with the tensorMap feature.\nThe output of the Pipeline is the output from tfsimple2.\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\n\n\nseldon pipeline status tfsimples -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimples\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimples\",\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "a2e69b07-34cd-4293-983f-5c2596884f19", "page": "examples/pipeline-examples", "section": "model-chaining", "text": " tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\n\n\nseldon pipeline status tfsimples -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimples\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimples\",\n        \"uid\": \"ciep26qi8ufs73flaiqg\",\n        \"version\": 2,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n            \"name\": \"tfsimple2\",\n            \"inputs\": [\n              \"tfsimple1.outputs\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n              \"tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "290745bc-8d68-46b4-8f0f-7536cf4313bf", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "   \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n              \"tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:11:40.101677847Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "fb120186-aa87-40a1-b608-5f905771a963", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "}\n  ]\n}\n\n\nseldon pipeline infer tfsimples \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "1527bb85-ac08-4593-a774-94e97071a024", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "   16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "b7325503-057e-4178-954a-d3da53ca9fc1", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "   16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "84d3fbc8-c412-43d1-b84d-70b669dd0081", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "748ce0f1-6329-4ead-b029-48f08a814ffc", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "         10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nWe use the Seldon CLI pipeline inspect feature to look at the data for all steps of the pipeline for the last data item passed through the pipeline (the default). This can be useful for debugging.\nseldon pipeline inspect tfsimples\n\n\nseldon.default.model.tfsimple1.inputs\tciep298fh5ss73dpdir0\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "6397f9f7-0fb1-47f7-a7ff-80073b3c92c2", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.model.tfsimple2.inputs\tciep298fh5ss73dpdir0\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimples.inputs\tciep298fh5ss73dpdir0\t{\"modelName\":\"tfsimples\", \"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimples.outputs\tciep298fh5ss73dpdir0\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nNext, we look get the output as json and use the jq tool to get just one value.\nseldon pipeline inspect tfsimples --format json | jq -M .topics[0].msgs[0].value\n\n\n{\n  \"inputs\": [\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "9af3a21a-4862-426f-8933-b4e35c5dfd59", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nNext, we look get the output as json and use the jq tool to get just one value.\nseldon pipeline inspect tfsimples --format json | jq -M .topics[0].msgs[0].value\n\n\n{\n  \"inputs\": [\n    {\n      \"name\": \"INPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n         ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "3834c892-a3ca-4bf8-b29f-c79c5e635626", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "    7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    },\n    {\n      \"name\": \"INPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "0149f0a1-0e99-477e-9f56-b502717a8933", "page": "examples/pipeline-examples", "section": "model-chaining", "text": "   2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimples\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "4a5ba6ee-78a3-41e8-af03-7da72ab1a5d9", "page": "examples/pipeline-examples", "section": "model-chaining-from-inputs", "text": "\nModel Chaining from inputs\u00b6\nChain the output of one model into the next. Shows using the input and outputs and combining.\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimples-input.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples-input\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1.inputs.INPUT0\n      - tfsimple1.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimples-input.yaml\n\n\nseldon pipeline status tfsimples-input -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimples-input\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimples-input\",\n        \"uid\": \"ciep2fii8ufs73flair0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "3a7b1bc2-68e7-4267-8b7f-7cdd95aecaee", "page": "examples/pipeline-examples", "section": "model-chaining-from-inputs", "text": "\"uid\": \"ciep2fii8ufs73flair0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n            \"name\": \"tfsimple2\",\n            \"inputs\": [\n              \"tfsimple1.inputs.INPUT0\",\n              \"tfsimple1.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "cf051b24-bb75-48fb-b6ec-61aaee261e7f", "page": "examples/pipeline-examples", "section": "model-chaining-from-inputs", "text": "  \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:12:14.711416101Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples-input \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "867cd116-7dd1-45a2-a999-c38b2d5945f5", "page": "examples/pipeline-examples", "section": "model-chaining-from-inputs", "text": " 5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "84e081df-cd91-431d-871d-748669fd5786", "page": "examples/pipeline-examples", "section": "model-chaining-from-inputs", "text": " 5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimples-input --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "01699eeb-cc70-4d23-9d07-9ed4a5e2e522", "page": "examples/pipeline-examples", "section": "model-chaining-from-inputs", "text": "  \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "7653972d-3a16-46f7-953e-6ba1906592be", "page": "examples/pipeline-examples", "section": "model-chaining-from-inputs", "text": "16\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "b4e37151-de72-4647-bb5a-1eec381f1773", "page": "examples/pipeline-examples", "section": "model-chaining-from-inputs", "text": "         12,\n          13,\n          14,\n          15,\n          16\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimples-input\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "42f22ea0-b24f-4987-9a9d-27f1075d313e", "page": "examples/pipeline-examples", "section": "model-join", "text": "\nModel Join\u00b6\nJoin two flows of data from two models as input to a third model. This shows how individual flows of data can be combined.\ncat ./models/tfsimple1.yaml\necho \"---\"\ncat ./models/tfsimple2.yaml\necho \"---\"\ncat ./models/tfsimple3.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple3\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\nseldon model load -f ./models/tfsimple3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\nseldon model status tfsimple3 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n{}\n\n\nIn the pipeline below for the input to tfsimple3 we join 1 output tensor each from the two previous models tfsimple1 and tfsimple2. We need to use the tensorMap feature to rename each output tensor to one of the expected input tensors for the tfsimple3 model.\ncat ./pipelines/tfsimples-join.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: join\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: tfsimple3\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\nseldon pipeline load -f ./pipelines/tfsimples-join.yaml\n\n\nseldon pipeline status join -w PipelineReady | jq -M .\n\n\n{\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "caac8bb4-951c-4db8-872b-262117eec2f7", "page": "examples/pipeline-examples", "section": "model-join", "text": " inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\nseldon pipeline load -f ./pipelines/tfsimples-join.yaml\n\n\nseldon pipeline status join -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"join\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"join\",\n        \"uid\": \"ciep2k2i8ufs73flairg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          },\n          {\n            \"name\": \"tfsimple2\"\n          },\n          {\n            \"name\": \"tfsimple3\",\n            \"inputs\": [\n              \"tfsimple1.outputs.OUTPUT0\",\n              \"tfsimple2.outputs.OUTPUT1\"\n         ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "d8a1dcd0-eff0-414a-a9b4-b36b360fcb5b", "page": "examples/pipeline-examples", "section": "model-join", "text": "{\n            \"name\": \"tfsimple3\",\n            \"inputs\": [\n              \"tfsimple1.outputs.OUTPUT0\",\n              \"tfsimple2.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n              \"tfsimple2.outputs.OUTPUT1\": \"INPUT1\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple3.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:12:32.938603415Z\",\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "3874cc46-23c3-41c0-a4ae-ad939d90ccbc", "page": "examples/pipeline-examples", "section": "model-join", "text": "     \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:12:32.938603415Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nThe outputs are the sequence \u201c2,4,6\u2026\u201d which conforms to the logic of this model (addition and subtraction) when fed the output of the first two models.\nseldon pipeline infer join --inference-mode grpc \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "f7c8e1b4-7c5e-402e-a0f2-437bda318e31", "page": "examples/pipeline-examples", "section": "model-join", "text": "2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "7fce2e8c-0471-4425-b226-5a2ea9be134c", "page": "examples/pipeline-examples", "section": "model-join", "text": "\"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload join\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\nseldon model unload tfsimple3\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "3651a603-2e00-414a-bc17-6142c573bc1c", "page": "examples/pipeline-examples", "section": "conditional", "text": "\nConditional\u00b6\nShows conditional data flows - one of two models is run based on output tensors from first.\ncat ./models/conditional.yaml\necho \"---\"\ncat ./models/add10.yaml\necho \"---\"\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: conditional\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/conditional\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/conditional.yaml\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status conditional -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\nseldon model status mul10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n{}\n\n\nHere we assume the conditional model can output two tensors OUTPUT0 and OUTPUT1 but only outputs the former if the CHOICE input tensor is set to 0 otherwise it outputs tensor OUTPUT1. By this means only one of the two downstream models will receive data and run. The output steps does an any join from both models and whichever data appears first will be sent as output to pipeline. As in this case only 1 of the two models add10 and mul10 runs we will receive their output.\ncat ./pipelines/conditional.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-conditional\nspec:\n  steps:\n  - name: conditional\n  - name: mul10\n    inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n      conditional.outputs.OUTPUT1: INPUT\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "8498e153-8317-4a6b-b623-d7bd4e5bc63e", "page": "examples/pipeline-examples", "section": "conditional", "text": "will receive their output.\ncat ./pipelines/conditional.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-conditional\nspec:\n  steps:\n  - name: conditional\n  - name: mul10\n    inputs:\n    - conditional.outputs.OUTPUT0\n    tensorMap:\n      conditional.outputs.OUTPUT0: INPUT\n  - name: add10\n    inputs:\n    - conditional.outputs.OUTPUT1\n    tensorMap:\n      conditional.outputs.OUTPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ./pipelines/conditional.yaml\n\n\nseldon pipeline status tfsimple-conditional -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-conditional\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-conditional\",\n        \"uid\": \"ciepga2i8ufs73flais0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"conditional.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"conditional.outputs.OUTPUT1\": \"INPUT\"\n            }\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "74892c07-ef91-45dc-b213-67b291a77bc5", "page": "examples/pipeline-examples", "section": "conditional", "text": "        \"conditional.outputs.OUTPUT1\"\n            ],\n            \"tensorMap\": {\n              \"conditional.outputs.OUTPUT1\": \"INPUT\"\n            }\n          },\n          {\n            \"name\": \"conditional\"\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"conditional.outputs.OUTPUT0\"\n            ],\n            \"tensorMap\": {\n              \"conditional.outputs.OUTPUT0\": \"INPUT\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "edd77d4f-6cae-429a-8886-46ca41f06315", "page": "examples/pipeline-examples", "section": "conditional", "text": "\"conditional.outputs.OUTPUT0\": \"INPUT\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n          \"stepsJoin\": \"ANY\"\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:41:45.133142725Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nThe mul10 model will run as the CHOICE tensor is set to 0.\nseldon pipeline infer tfsimple-conditional --inference-mode grpc \\\n '{\"model_name\":\"conditional\",\"inputs\":[{\"name\":\"CHOICE\",\"contents\":{\"int_contents\":[0]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "da610960-e17d-4434-bed1-1eae6f5c40e2", "page": "examples/pipeline-examples", "section": "conditional", "text": "tensor is set to 0.\nseldon pipeline infer tfsimple-conditional --inference-mode grpc \\\n '{\"model_name\":\"conditional\",\"inputs\":[{\"name\":\"CHOICE\",\"contents\":{\"int_contents\":[0]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nThe add10 model will run as the CHOICE tensor is not set to zero.\nseldon pipeline infer tfsimple-conditional --inference-mode grpc \\\n '{\"model_name\":\"conditional\",\"inputs\":[{\"name\":\"CHOICE\",\"contents\":{\"int_contents\":[1]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "a4c69aa7-653f-444a-bfab-00cad47e61e5", "page": "examples/pipeline-examples", "section": "conditional", "text": " \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload tfsimple-conditional\n\n\nseldon model unload conditional\nseldon model unload add10\nseldon model unload mul10\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "aa49103c-3812-4eb8-bde4-08f6d44ac892", "page": "examples/pipeline-examples", "section": "pipeline-input-tensors", "text": "\nPipeline Input Tensors\u00b6\nAccess to indivudal tensors in pipeline inputs\ncat ./models/mul10.yaml\necho \"---\"\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/mul10.yaml\nseldon model load -f ./models/add10.yaml\n\n\n{}\n{}\n\n\nseldon model status mul10 -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nThis pipeline shows how we can access pipeline inputs INPUT0 and INPUT1 from different steps.\ncat ./pipelines/pipeline-inputs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-inputs\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - pipeline-inputs.inputs.INPUT0\n    tensorMap:\n      pipeline-inputs.inputs.INPUT0: INPUT\n  - name: add10\n    inputs:\n    - pipeline-inputs.inputs.INPUT1\n    tensorMap:\n      pipeline-inputs.inputs.INPUT1: INPUT\n  output:\n    steps:\n    - mul10\n    - add10\n\n\nseldon pipeline load -f ./pipelines/pipeline-inputs.yaml\n\n\nseldon pipeline status pipeline-inputs -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"pipeline-inputs\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"pipeline-inputs\",\n        \"uid\": \"ciepgeqi8ufs73flaisg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n           ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "ecd6da74-9f8e-49b8-9324-45b4b52f87d6", "page": "examples/pipeline-examples", "section": "pipeline-input-tensors", "text": " \"name\": \"pipeline-inputs\",\n        \"uid\": \"ciepgeqi8ufs73flaisg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"pipeline-inputs.inputs.INPUT1\"\n            ],\n            \"tensorMap\": {\n              \"pipeline-inputs.inputs.INPUT1\": \"INPUT\"\n            }\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"pipeline-inputs.inputs.INPUT0\"\n            ],\n            \"tensorMap\": {\n              \"pipeline-inputs.inputs.INPUT0\": \"INPUT\"\n            }\n          }\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "d5ed158c-fe65-4864-bd7f-e5efd450366c", "page": "examples/pipeline-examples", "section": "pipeline-input-tensors", "text": "           ],\n            \"tensorMap\": {\n              \"pipeline-inputs.inputs.INPUT0\": \"INPUT\"\n            }\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:42:04.202598715Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer pipeline-inputs --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "2ec24837-09e7-48dd-824d-d1474c8461e8", "page": "examples/pipeline-examples", "section": "pipeline-input-tensors", "text": "      \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer pipeline-inputs --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]},{\"name\":\"INPUT1\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "a70bc043-3757-4a90-9fde-6e31375ab36f", "page": "examples/pipeline-examples", "section": "pipeline-input-tensors", "text": "  \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload pipeline-inputs\n\n\nseldon model unload mul10\nseldon model unload add10\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "f1c4ab35-b325-4ac6-8000-12ac4f8c7191", "page": "examples/pipeline-examples", "section": "trigger-joins", "text": "\nTrigger Joins\u00b6\nShows how joins can be used for triggers as well.\ncat ./models/mul10.yaml\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/mul10.yaml\nseldon model load -f ./models/add10.yaml\n\n\n{}\n{}\n\n\nseldon model status mul10 -w ModelAvailable | jq -M .\nseldon model status add10 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nHere we required tensors names ok1 or ok2 to exist on pipeline inputs to run the mul10 model but require tensor ok3 to exist on pipeline inputs to run the add10 model. The logic on mul10 is handled by a trigger join of any meaning either of these input data can exist to satisfy the trigger join.\ncat ./pipelines/trigger-joins.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: trigger-joins\nspec:\n  steps:\n  - name: mul10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok1\n    - trigger-joins.inputs.ok2\n    triggersJoinType: any\n  - name: add10\n    inputs:\n    - trigger-joins.inputs.INPUT\n    triggers:\n    - trigger-joins.inputs.ok3\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ./pipelines/trigger-joins.yaml\n\n\nseldon pipeline status trigger-joins -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"trigger-joins\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"trigger-joins\",\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "53c08e30-23f4-4714-8a02-d0c4233fc9d8", "page": "examples/pipeline-examples", "section": "trigger-joins", "text": "  steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ./pipelines/trigger-joins.yaml\n\n\nseldon pipeline status trigger-joins -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"trigger-joins\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"trigger-joins\",\n        \"uid\": \"ciepgkqi8ufs73flait0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"trigger-joins.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"trigger-joins.inputs.ok3\"\n            ]\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"trigger-joins.inputs.INPUT\"\n           ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "1f3112c8-ecf3-43e0-9c54-1636895e6204", "page": "examples/pipeline-examples", "section": "trigger-joins", "text": "  },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"trigger-joins.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"trigger-joins.inputs.ok1\",\n              \"trigger-joins.inputs.ok2\"\n            ],\n            \"triggersJoin\": \"ANY\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n          \"stepsJoin\": \"ANY\"\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "bcafc5cc-3815-4774-a152-d6873757fc58", "page": "examples/pipeline-examples", "section": "trigger-joins", "text": "\"add10.outputs\"\n          ],\n          \"stepsJoin\": \"ANY\"\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:42:27.595300698Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer trigger-joins --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"ok1\",\"contents\":{\"fp32_contents\":[1]},\"datatype\":\"FP32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer trigger-joins --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"ok3\",\"contents\":{\"fp32_contents\":[1]},\"datatype\":\"FP32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "eb782f13-7a00-44a3-ac1b-edfef15e8fc8", "page": "examples/pipeline-examples", "section": "trigger-joins", "text": "         20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer trigger-joins --inference-mode grpc \\\n    '{\"model_name\":\"pipeline\",\"inputs\":[{\"name\":\"ok3\",\"contents\":{\"fp32_contents\":[1]},\"datatype\":\"FP32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline unload trigger-joins\n\n\nseldon model unload mul10\nseldon model unload add10\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-examples.html", "key": "examples/pipeline-examples"}}, {"key": "bc08fb4c-ee70-4e78-833d-0b737cdb1e03", "page": "examples/tritonclient-examples", "section": "tritonclient-examples-with-seldon-core-v2", "text": "\nTritonclient Examples with Seldon Core V2\u00b6\nTo install tritonclient\npip install tritonclient[all]\n\n\n\nTritonclient Examples with Seldon Core V2\u00b6\n\nNote: for compatibility of Tritonclient check this issue https://github.com/SeldonIO/seldon-core-v2/issues/471\n\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.19.255.1'\n\n\n\n\n\nWith MLServer\u00b6\n\nNote: binary data support in HTTP is blocked by https://github.com/SeldonIO/MLServer/issues/324\n\n\nDeploy Model and Pipeline\u00b6\ncat models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\ncat pipelines/iris.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: iris-pipeline\nspec:\n  steps:\n    - name: iris\n  output:\n    steps:\n    - iris\n\n\nkubectl apply -f models/sklearn-iris-gs.yaml -n ${NAMESPACE}\nkubectl apply -f pipelines/iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\npipeline.mlops.seldon.io/iris-pipeline created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model iris -n ${NAMESPACE}\nkubectl wait --for condition=ready --timeout=300s pipelines iris-pipeline -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\npipeline.mlops.seldon.io/iris-pipeline condition met\n\n\n\n\n\nHTTP Transport Protocol\u00b6\nimport tritonclient.http as httpclient\nimport numpy as np\n\nhttp_triton_client = httpclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\nprint(\"model ready:\", http_triton_client.is_model_ready(\"iris\"))\nprint(\"model metadata:\", http_triton_client.get_model_metadata(\"iris\"))\n\n\nmodel ready: True\nmodel metadata: {'name': 'iris_1', 'versions': [], 'platform': '', 'inputs': [], 'outputs': [], 'parameters': {}}\n\n\n\n# Against model\n\nbinary_data = False\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"predict\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"iris\", inputs, outputs=outputs)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n# Against pipeline\n\nbinary_data = False\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"predict\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"iris-pipeline.pipeline\", inputs, outputs=outputs)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n\nGRPC Transport Protocol\u00b6\nimport tritonclient.grpc as grpcclient\nimport numpy as np\n\ngrpc_triton_client = grpcclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\n\nmodel_name = \"iris\"\nheaders = {\"seldon-model\": model_name}\n\nprint(\"model ready:\", grpc_triton_client.is_model_ready(model_name, headers=headers))\nprint(grpc_triton_client.get_model_metadata(model_name, headers=headers))\n\n\nmodel ready: True\nname: \"iris_1\"\n\n\n\n\nAgainst Model\u00b6\nmodel_name = \"iris\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"predict\", (1, 4), \"FP64\"),\n]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"predict\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n\nAgainst Pipeline\u00b6\nmodel_name", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "82bbc86f-7fc7-4c5f-aaa5-ccf9c45ac572", "page": "examples/tritonclient-examples", "section": "tritonclient-examples-with-seldon-core-v2", "text": "binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"predict\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"iris-pipeline.pipeline\", inputs, outputs=outputs)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n\nGRPC Transport Protocol\u00b6\nimport tritonclient.grpc as grpcclient\nimport numpy as np\n\ngrpc_triton_client = grpcclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\n\nmodel_name = \"iris\"\nheaders = {\"seldon-model\": model_name}\n\nprint(\"model ready:\", grpc_triton_client.is_model_ready(model_name, headers=headers))\nprint(grpc_triton_client.get_model_metadata(model_name, headers=headers))\n\n\nmodel ready: True\nname: \"iris_1\"\n\n\n\n\nAgainst Model\u00b6\nmodel_name = \"iris\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"predict\", (1, 4), \"FP64\"),\n]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"predict\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n\nAgainst Pipeline\u00b6\nmodel_name = \"iris-pipeline.pipeline\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"predict\", (1, 4), \"FP64\"),\n]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"predict\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n\n\n\nWith Tritonserver\u00b6\n\nNote: binary data support in HTTP is blocked by https://github.com/SeldonIO/seldon-core-v2/issues/475\n\n\nDeploy Model and Pipeline\u00b6\ncat models/tfsimple1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\ncat pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nkubectl apply -f models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl apply -f pipelines/tfsimple.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\npipeline.mlops.seldon.io/tfsimple created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model tfsimple1 -n ${NAMESPACE}\nkubectl wait --for condition=ready --timeout=300s pipelines tfsimple -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\npipeline.mlops.seldon.io/tfsimple condition met\n\n\n\n\n\nHTTP Transport Protocol\u00b6\nimport tritonclient.http as httpclient\nimport numpy as np\n\nhttp_triton_client = httpclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\nprint(\"model ready:\", http_triton_client.is_model_ready(\"iris\"))\nprint(\"model metadata:\", http_triton_client.get_model_metadata(\"iris\"))\n\n\nmodel ready: True\nmodel metadata: {'name': 'iris_1', 'versions': [], 'platform': '', 'inputs': [], 'outputs': [], 'parameters': {}}\n\n\n\n# Against model (no binary data)\n\nbinary_data = False\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple1\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "143d071c-d028-4e26-9bf1-f0b578e7f6f8", "page": "examples/tritonclient-examples", "section": "tritonclient-examples-with-seldon-core-v2", "text": "verbose=False,\n)\n\nprint(\"model ready:\", http_triton_client.is_model_ready(\"iris\"))\nprint(\"model metadata:\", http_triton_client.get_model_metadata(\"iris\"))\n\n\nmodel ready: True\nmodel metadata: {'name': 'iris_1', 'versions': [], 'platform': '', 'inputs': [], 'outputs': [], 'parameters': {}}\n\n\n\n# Against model (no binary data)\n\nbinary_data = False\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple1\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against model (with binary data)\n\nbinary_data = True\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple1\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against Pipeline (no binary data)\n\nbinary_data = False\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple.pipeline\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n## binary data does not work with http behind pipeline\n\n# import numpy as np\n\n# binary_data = True\n\n# inputs = [\n#     httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n#     httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n# ]\n# inputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n# inputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\n# outputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\n# result = http_triton_client.infer(\"tfsimple.pipeline\", inputs, outputs=outputs)\n#", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "a05ada71-1d78-4fbb-ac6b-a4a06cd07c1b", "page": "examples/tritonclient-examples", "section": "tritonclient-examples-with-seldon-core-v2", "text": "24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n## binary data does not work with http behind pipeline\n\n# import numpy as np\n\n# binary_data = True\n\n# inputs = [\n#     httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n#     httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n# ]\n# inputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n# inputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\n# outputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\n# result = http_triton_client.infer(\"tfsimple.pipeline\", inputs, outputs=outputs)\n# result.as_numpy(\"OUTPUT0\")\n\n\n\n\nGRPC Transport Protocol\u00b6\nimport tritonclient.grpc as grpcclient\nimport numpy as np\n\ngrpc_triton_client = grpcclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\n\nmodel_name = \"tfsimple1\"\nheaders = {\"seldon-model\": model_name}\n\nprint(\"model ready:\", grpc_triton_client.is_model_ready(model_name, headers=headers))\nprint(grpc_triton_client.get_model_metadata(model_name, headers=headers))\n\n\nmodel ready: True\nname: \"tfsimple1_1\"\nversions: \"1\"\nplatform: \"tensorflow_graphdef\"\ninputs {\n  name: \"INPUT0\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\ninputs {\n  name: \"INPUT1\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\noutputs {\n  name: \"OUTPUT0\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\noutputs {\n  name: \"OUTPUT1\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\n\n\n\n# Against Model\n\nmodel_name = \"tfsimple1\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    grpcclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"OUTPUT0\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against Pipeline\n\nmodel_name = \"tfsimple.pipeline\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    grpcclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"OUTPUT0\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "da5f3b90-fe63-4da2-8664-dfe2d87eb1f9", "page": "examples/tritonclient-examples", "section": "tritonclient-examples-with-seldon-core-v2", "text": "14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against Pipeline\n\nmodel_name = \"tfsimple.pipeline\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    grpcclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"OUTPUT0\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n\n\n\nCleanup\u00b6\nkubectl delete -f models/sklearn-iris-gs.yaml -n ${NAMESPACE}\nkubectl delete -f pipelines/iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"iris\" deleted\npipeline.mlops.seldon.io \"iris-pipeline\" deleted\n\n\n\nkubectl delete -f models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f pipelines/tfsimple.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\npipeline.mlops.seldon.io \"tfsimple\" deleted\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "011f431e-4d00-465b-a107-d5b703268c21", "page": "examples/tritonclient-examples", "section": "with-mlserver", "text": "\nWith MLServer\u00b6\n\nNote: binary data support in HTTP is blocked by https://github.com/SeldonIO/MLServer/issues/324\n\n\nDeploy Model and Pipeline\u00b6\ncat models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\ncat pipelines/iris.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: iris-pipeline\nspec:\n  steps:\n    - name: iris\n  output:\n    steps:\n    - iris\n\n\nkubectl apply -f models/sklearn-iris-gs.yaml -n ${NAMESPACE}\nkubectl apply -f pipelines/iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\npipeline.mlops.seldon.io/iris-pipeline created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model iris -n ${NAMESPACE}\nkubectl wait --for condition=ready --timeout=300s pipelines iris-pipeline -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\npipeline.mlops.seldon.io/iris-pipeline condition met\n\n\n\n\n\nHTTP Transport Protocol\u00b6\nimport tritonclient.http as httpclient\nimport numpy as np\n\nhttp_triton_client = httpclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\nprint(\"model ready:\", http_triton_client.is_model_ready(\"iris\"))\nprint(\"model metadata:\", http_triton_client.get_model_metadata(\"iris\"))\n\n\nmodel ready: True\nmodel metadata: {'name': 'iris_1', 'versions': [], 'platform': '', 'inputs': [], 'outputs': [], 'parameters': {}}\n\n\n\n# Against model\n\nbinary_data = False\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"predict\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"iris\", inputs, outputs=outputs)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n# Against pipeline\n\nbinary_data = False\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"predict\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"iris-pipeline.pipeline\", inputs, outputs=outputs)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n\nGRPC Transport Protocol\u00b6\nimport tritonclient.grpc as grpcclient\nimport numpy as np\n\ngrpc_triton_client = grpcclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\n\nmodel_name = \"iris\"\nheaders = {\"seldon-model\": model_name}\n\nprint(\"model ready:\", grpc_triton_client.is_model_ready(model_name, headers=headers))\nprint(grpc_triton_client.get_model_metadata(model_name, headers=headers))\n\n\nmodel ready: True\nname: \"iris_1\"\n\n\n\n\nAgainst Model\u00b6\nmodel_name = \"iris\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"predict\", (1, 4), \"FP64\"),\n]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"predict\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n\nAgainst Pipeline\u00b6\nmodel_name = \"iris-pipeline.pipeline\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"predict\", (1, 4), \"FP64\"),\n]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"predict\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "7e303461-5a36-40b3-994e-c62f5be226b9", "page": "examples/tritonclient-examples", "section": "deploy-model-and-pipeline", "text": "\nDeploy Model and Pipeline\u00b6\ncat models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\ncat pipelines/iris.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: iris-pipeline\nspec:\n  steps:\n    - name: iris\n  output:\n    steps:\n    - iris\n\n\nkubectl apply -f models/sklearn-iris-gs.yaml -n ${NAMESPACE}\nkubectl apply -f pipelines/iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\npipeline.mlops.seldon.io/iris-pipeline created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model iris -n ${NAMESPACE}\nkubectl wait --for condition=ready --timeout=300s pipelines iris-pipeline -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\npipeline.mlops.seldon.io/iris-pipeline condition met\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "b055902a-3642-416c-ba56-b91d5cd2d0be", "page": "examples/tritonclient-examples", "section": "http-transport-protocol", "text": "\nHTTP Transport Protocol\u00b6\nimport tritonclient.http as httpclient\nimport numpy as np\n\nhttp_triton_client = httpclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\nprint(\"model ready:\", http_triton_client.is_model_ready(\"iris\"))\nprint(\"model metadata:\", http_triton_client.get_model_metadata(\"iris\"))\n\n\nmodel ready: True\nmodel metadata: {'name': 'iris_1', 'versions': [], 'platform': '', 'inputs': [], 'outputs': [], 'parameters': {}}\n\n\n\n# Against model\n\nbinary_data = False\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"predict\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"iris\", inputs, outputs=outputs)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n# Against pipeline\n\nbinary_data = False\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"predict\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"iris-pipeline.pipeline\", inputs, outputs=outputs)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "ba780650-77db-4aae-975a-b1676316b827", "page": "examples/tritonclient-examples", "section": "grpc-transport-protocol", "text": "\nGRPC Transport Protocol\u00b6\nimport tritonclient.grpc as grpcclient\nimport numpy as np\n\ngrpc_triton_client = grpcclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\n\nmodel_name = \"iris\"\nheaders = {\"seldon-model\": model_name}\n\nprint(\"model ready:\", grpc_triton_client.is_model_ready(model_name, headers=headers))\nprint(grpc_triton_client.get_model_metadata(model_name, headers=headers))\n\n\nmodel ready: True\nname: \"iris_1\"\n\n\n\n\nAgainst Model\u00b6\nmodel_name = \"iris\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"predict\", (1, 4), \"FP64\"),\n]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"predict\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n\nAgainst Pipeline\u00b6\nmodel_name = \"iris-pipeline.pipeline\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"predict\", (1, 4), \"FP64\"),\n]\ninputs[0].set_data_from_numpy(np.array([[1, 2, 3, 4]]).astype(\"float64\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"predict\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"predict\")\n\n\narray([[2]])\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "7c4a9729-6d72-48a8-8c91-ae6c3ae4aed6", "page": "examples/tritonclient-examples", "section": "with-tritonserver", "text": "\nWith Tritonserver\u00b6\n\nNote: binary data support in HTTP is blocked by https://github.com/SeldonIO/seldon-core-v2/issues/475\n\n\nDeploy Model and Pipeline\u00b6\ncat models/tfsimple1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\ncat pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nkubectl apply -f models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl apply -f pipelines/tfsimple.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\npipeline.mlops.seldon.io/tfsimple created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model tfsimple1 -n ${NAMESPACE}\nkubectl wait --for condition=ready --timeout=300s pipelines tfsimple -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\npipeline.mlops.seldon.io/tfsimple condition met\n\n\n\n\n\nHTTP Transport Protocol\u00b6\nimport tritonclient.http as httpclient\nimport numpy as np\n\nhttp_triton_client = httpclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\nprint(\"model ready:\", http_triton_client.is_model_ready(\"iris\"))\nprint(\"model metadata:\", http_triton_client.get_model_metadata(\"iris\"))\n\n\nmodel ready: True\nmodel metadata: {'name': 'iris_1', 'versions': [], 'platform': '', 'inputs': [], 'outputs': [], 'parameters': {}}\n\n\n\n# Against model (no binary data)\n\nbinary_data = False\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple1\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against model (with binary data)\n\nbinary_data = True\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple1\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against Pipeline (no binary data)\n\nbinary_data = False\n\ninputs = [\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "3c9965af-6a8c-40ac-abe8-77f5ef73daca", "page": "examples/tritonclient-examples", "section": "with-tritonserver", "text": "True\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple1\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against Pipeline (no binary data)\n\nbinary_data = False\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple.pipeline\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n## binary data does not work with http behind pipeline\n\n# import numpy as np\n\n# binary_data = True\n\n# inputs = [\n#     httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n#     httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n# ]\n# inputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n# inputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\n# outputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\n# result = http_triton_client.infer(\"tfsimple.pipeline\", inputs, outputs=outputs)\n# result.as_numpy(\"OUTPUT0\")\n\n\n\n\nGRPC Transport Protocol\u00b6\nimport tritonclient.grpc as grpcclient\nimport numpy as np\n\ngrpc_triton_client = grpcclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\n\nmodel_name = \"tfsimple1\"\nheaders = {\"seldon-model\": model_name}\n\nprint(\"model ready:\", grpc_triton_client.is_model_ready(model_name, headers=headers))\nprint(grpc_triton_client.get_model_metadata(model_name, headers=headers))\n\n\nmodel ready: True\nname: \"tfsimple1_1\"\nversions: \"1\"\nplatform: \"tensorflow_graphdef\"\ninputs {\n  name: \"INPUT0\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\ninputs {\n  name: \"INPUT1\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\noutputs {\n  name: \"OUTPUT0\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\noutputs {\n  name: \"OUTPUT1\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\n\n\n\n# Against Model\n\nmodel_name", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "cb0507e5-7fce-44c3-be0c-3a0c2ddaf77f", "page": "examples/tritonclient-examples", "section": "with-tritonserver", "text": "model_name}\n\nprint(\"model ready:\", grpc_triton_client.is_model_ready(model_name, headers=headers))\nprint(grpc_triton_client.get_model_metadata(model_name, headers=headers))\n\n\nmodel ready: True\nname: \"tfsimple1_1\"\nversions: \"1\"\nplatform: \"tensorflow_graphdef\"\ninputs {\n  name: \"INPUT0\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\ninputs {\n  name: \"INPUT1\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\noutputs {\n  name: \"OUTPUT0\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\noutputs {\n  name: \"OUTPUT1\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\n\n\n\n# Against Model\n\nmodel_name = \"tfsimple1\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    grpcclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"OUTPUT0\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against Pipeline\n\nmodel_name = \"tfsimple.pipeline\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    grpcclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"OUTPUT0\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "dc92e9d3-84c6-4655-8f34-f4ad534a5904", "page": "examples/tritonclient-examples", "section": "id2", "text": "\nDeploy Model and Pipeline\u00b6\ncat models/tfsimple1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\ncat pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nkubectl apply -f models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl apply -f pipelines/tfsimple.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\npipeline.mlops.seldon.io/tfsimple created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model tfsimple1 -n ${NAMESPACE}\nkubectl wait --for condition=ready --timeout=300s pipelines tfsimple -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\npipeline.mlops.seldon.io/tfsimple condition met\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "0c686b19-e364-45a1-acd2-07e69f50bc16", "page": "examples/tritonclient-examples", "section": "id3", "text": "\nHTTP Transport Protocol\u00b6\nimport tritonclient.http as httpclient\nimport numpy as np\n\nhttp_triton_client = httpclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\nprint(\"model ready:\", http_triton_client.is_model_ready(\"iris\"))\nprint(\"model metadata:\", http_triton_client.get_model_metadata(\"iris\"))\n\n\nmodel ready: True\nmodel metadata: {'name': 'iris_1', 'versions': [], 'platform': '', 'inputs': [], 'outputs': [], 'parameters': {}}\n\n\n\n# Against model (no binary data)\n\nbinary_data = False\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple1\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against model (with binary data)\n\nbinary_data = True\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple1\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against Pipeline (no binary data)\n\nbinary_data = False\n\ninputs = [\n    httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\noutputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\nresult = http_triton_client.infer(\"tfsimple.pipeline\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n## binary data does not work with http behind pipeline\n\n# import numpy as np\n\n# binary_data = True\n\n# inputs = [\n#     httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n#     httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n#", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "d0fec447-f187-44ee-b7d3-a123f1b706cb", "page": "examples/tritonclient-examples", "section": "id3", "text": "= http_triton_client.infer(\"tfsimple.pipeline\", inputs, outputs=outputs)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n## binary data does not work with http behind pipeline\n\n# import numpy as np\n\n# binary_data = True\n\n# inputs = [\n#     httpclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n#     httpclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n# ]\n# inputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n# inputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"), binary_data=binary_data)\n\n# outputs = [httpclient.InferRequestedOutput(\"OUTPUT0\", binary_data=binary_data)]\n\n# result = http_triton_client.infer(\"tfsimple.pipeline\", inputs, outputs=outputs)\n# result.as_numpy(\"OUTPUT0\")\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "aad85e1a-e720-4cde-84b0-7ed3510dcf8e", "page": "examples/tritonclient-examples", "section": "id4", "text": "\nGRPC Transport Protocol\u00b6\nimport tritonclient.grpc as grpcclient\nimport numpy as np\n\ngrpc_triton_client = grpcclient.InferenceServerClient(\n    url=f\"{MESH_IP}:80\",\n    verbose=False,\n)\n\n\nmodel_name = \"tfsimple1\"\nheaders = {\"seldon-model\": model_name}\n\nprint(\"model ready:\", grpc_triton_client.is_model_ready(model_name, headers=headers))\nprint(grpc_triton_client.get_model_metadata(model_name, headers=headers))\n\n\nmodel ready: True\nname: \"tfsimple1_1\"\nversions: \"1\"\nplatform: \"tensorflow_graphdef\"\ninputs {\n  name: \"INPUT0\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\ninputs {\n  name: \"INPUT1\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\noutputs {\n  name: \"OUTPUT0\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\noutputs {\n  name: \"OUTPUT1\"\n  datatype: \"INT32\"\n  shape: -1\n  shape: 16\n}\n\n\n\n# Against Model\n\nmodel_name = \"tfsimple1\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    grpcclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"OUTPUT0\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n# Against Pipeline\n\nmodel_name = \"tfsimple.pipeline\"\nheaders = {\"seldon-model\": model_name}\n\ninputs = [\n    grpcclient.InferInput(\"INPUT0\", (1, 16), \"INT32\"),\n    grpcclient.InferInput(\"INPUT1\", (1, 16), \"INT32\"),\n]\ninputs[0].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\ninputs[1].set_data_from_numpy(np.arange(1, 17).reshape(-1, 16).astype(\"int32\"))\n\noutputs = [grpcclient.InferRequestedOutput(\"OUTPUT0\")]\n\nresult = grpc_triton_client.infer(model_name, inputs, outputs=outputs, headers=headers)\nresult.as_numpy(\"OUTPUT0\")\n\n\narray([[ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]],\n      dtype=int32)\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/tritonclient-examples.html", "key": "examples/tritonclient-examples"}}, {"key": "145bcee3-e835-47f3-a21d-115fd68b8483", "page": "kubernetes/resources", "section": "resources", "text": "\nResources\u00b6\nFor Kubernetes usage we provide a set of custom resources for interacting with Seldon.\n\nSeldonRuntime - for installing Seldon in a particular namespace.\nServers - for deploying sets of replicas of core inference servers (MLServer or Triton).\nModels - for deploying single machine learning models, custom transformation logic, drift detectors, outliers detectors and explainers.\nExperiments - for testing new versions of models.\nPipelines - for connecting together flows of data between models.\n\n\nAdvanced Customization\u00b6\nSeldonConfig and ServerConfig define the core installation configuration and machine learning inference server configuration for Seldon. Normally, you would not need to customize these but this may be required for your particular custom installation within your organisation.\n\nServerConfigs - for defining new types of inference server that can be reference by a Server resource.\nSeldonConfig - for defining how seldon is installed\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/index.html", "key": "kubernetes/resources"}}, {"key": "b8dc5d45-1403-4f1b-ad3b-27a5f0baeea5", "page": "cli/docs/seldon_experiment_stop", "section": "seldon-experiment-stop", "text": "\nseldon experiment stop\u00b6\nstop an experiment\n\nSynopsis\u00b6\nstop an experiment\nseldon experiment stop <experimentName> [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for stop\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n\n\nSEE ALSO\u00b6\n\nseldon experiment\t - manage experiments\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_experiment_stop.html", "key": "cli/docs/seldon_experiment_stop"}}, {"key": "0419f6d1-3037-41c7-9b11-69cad8a7a768", "page": "cli/docs/seldon_experiment_stop", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for stop\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_experiment_stop.html", "key": "cli/docs/seldon_experiment_stop"}}, {"key": "7324eb25-68b4-479c-a004-24e16fdf01eb", "page": "models/parameterized-models/pandasquery", "section": "pandas-query-model", "text": "\nPandas Query Model\u00b6\nThis model allows a Pandas  query to be run in the input to select rows. An example is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: choice-is-one\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/pandasquery\"\n  requirements:\n  - mlserver\n  - python\n  parameters:\n  - name: query\n    value: \"choice == 1\"\n\n\nThis invocation check filters for tensor A having value 1.\n\nThe model also returns a tensor called status which indicates the operation run and whether it was a success. If no rows satisfy the query then just a status tensor output will be returned.\nFurther details on Pandas query can be found here\n\nThis model can be useful for conditional Pipelines. For example, you could have two invocations of this model:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: choice-is-one\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/pandasquery\"\n  requirements:\n  - mlserver\n  - python\n  parameters:\n  - name: query\n    value: \"choice == 1\"\n\n\nand\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: choice-is-two\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/pandasquery\"\n  requirements:\n  - mlserver\n  - python\n  parameters:\n  - name: query\n    value: \"choice == 2\"\n\n\nBy including these in a Pipeline as follows we can define conditional routes:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: choice\nspec:\n  steps:\n  - name: choice-is-one\n  - name: mul10\n    inputs:\n    - choice.inputs.INPUT\n    triggers:\n    - choice-is-one.outputs.choice\n  - name: choice-is-two\n  - name: add10\n    inputs:\n    - choice.inputs.INPUT\n    triggers:\n    - choice-is-two.outputs.choice\n  output:\n    steps:\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/parameterized-models/pandasquery.html", "key": "models/parameterized-models/pandasquery"}}, {"key": "3d6aec23-024a-4fd3-aa83-43ce51f4e1e3", "page": "models/parameterized-models/pandasquery", "section": "pandas-query-model", "text": "name: choice\nspec:\n  steps:\n  - name: choice-is-one\n  - name: mul10\n    inputs:\n    - choice.inputs.INPUT\n    triggers:\n    - choice-is-one.outputs.choice\n  - name: choice-is-two\n  - name: add10\n    inputs:\n    - choice.inputs.INPUT\n    triggers:\n    - choice-is-two.outputs.choice\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nHere the mul10 model will be called if the choice-is-one model succeeds and the add10 model will be called if the choice-is-two model succeeds.\nThe full notebook can be found here\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/parameterized-models/pandasquery.html", "key": "models/parameterized-models/pandasquery"}}, {"key": "fab7adb1-1eb3-4f5b-b93b-ce8206d11109", "page": "about", "section": "about", "text": "\nAbout\u00b6\nSeldon V2 APIs provide a state of the art solution for machine learning inference which can be run locally on a laptop as well as on Kubernetes for production.\n\n\n\nFeatures\u00b6\n\nA single platform for inference of wide range of standard and custom artifacts.\nDeploy locally in Docker during development and testing of models.\nDeploy at scale on Kubernetes for production.\nDeploy single models to multi-step pipelines.\nSave infrastructure costs by deploying multiple models transparently in inference servers.\nOvercommit on resources to deploy more models than available memory.\nDynamically extended models with pipelines with a data-centric perspective backed by Kafka.\nExplain individual models and pipelines with state of the art explanation techniques.\nDeploy drift and outlier detectors alongside models.\nKubernetes Service mesh agnostic - use the service mesh of your choice.\n\n\n\nCore features and comparison to Seldon Core V1 APIs\u00b6\nOur V2 APIs separate out core tasks into separate resources allowing users to get started fast with deploying a Model and the progressing to more complex Pipelines, Explanations and Experiments.\n\n\n\nMulti-model serving\u00b6\nSeldon transparently will provision your model onto the correct inference server.\n\nBy packing multiple models onto a smaller set of servers users can save infrastructure costs and efficiently utilize their models.\n\nBy allowing over-commit users can provision model models that available memory resources by allowing Seldon to transparently unload models that are not in use.\n\n\n\nInference Servers\u00b6\nSeldon V2 supports any V2 protocol inference server. At present we include Seldon\u2019s MLServer and NVIDIA\u2019s Triton inference server automatically on install. These servers cover a wide range of artifacts including custom python models.\n\n\n\nService Mesh Agnostic\u00b6\nSeldon core v2 can be integrated with any Kubernetes service mesh. There", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/about/index.html", "key": "about"}}, {"key": "d9b7a7ef-ffb3-44c3-8345-e2634706a785", "page": "about", "section": "about", "text": "models that available memory resources by allowing Seldon to transparently unload models that are not in use.\n\n\n\nInference Servers\u00b6\nSeldon V2 supports any V2 protocol inference server. At present we include Seldon\u2019s MLServer and NVIDIA\u2019s Triton inference server automatically on install. These servers cover a wide range of artifacts including custom python models.\n\n\n\nService Mesh Agnostic\u00b6\nSeldon core v2 can be integrated with any Kubernetes service mesh. There are current examples with istio, Ambassador and Traefic.\n\n\n\nPublication\u00b6\nThese features are influenced by our position paper on the next generation of ML model serving frameworks:\nTitle: Desiderata for next generation of ML model serving\nWorkshop: Challenges in deploying and monitoring ML systems workshop - NeurIPS 2022\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/about/index.html", "key": "about"}}, {"key": "0ceab796-4cb0-4d23-9dfb-370b98d1ff38", "page": "about", "section": "features", "text": "\nFeatures\u00b6\n\nA single platform for inference of wide range of standard and custom artifacts.\nDeploy locally in Docker during development and testing of models.\nDeploy at scale on Kubernetes for production.\nDeploy single models to multi-step pipelines.\nSave infrastructure costs by deploying multiple models transparently in inference servers.\nOvercommit on resources to deploy more models than available memory.\nDynamically extended models with pipelines with a data-centric perspective backed by Kafka.\nExplain individual models and pipelines with state of the art explanation techniques.\nDeploy drift and outlier detectors alongside models.\nKubernetes Service mesh agnostic - use the service mesh of your choice.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/about/index.html", "key": "about"}}, {"key": "42a06720-3b7f-4367-bbd7-ba0a36d70d18", "page": "metrics/local-metrics-test", "section": "local-metrics", "text": "\nLocal Metrics\u00b6\nRun these examples from the samples folder.\n\nMetric Examples\u00b6\nThis notebook tests the exposed Prometheus metrics of model and pipeline servers.\nRequires: prometheus_client and requests libraries.\nSee docs for full set of metrics available.\nmlserver_metrics_host=\"0.0.0.0:9006\"\ntriton_metrics_host=\"0.0.0.0:9007\"\npipeline_metrics_host=\"0.0.0.0:9009\"\n\n\nfrom prometheus_client.parser import text_string_to_metric_families\nimport requests\n\ndef scrape_metrics(host):\n    data = requests.get(f\"http://{host}/metrics\").text\n    return {\n        family.name: family for family in text_string_to_metric_families(data)\n    }\n\ndef print_sample(family, label, value):\n    for sample in family.samples:\n        if sample.labels[label] == value:\n            print(sample)\n\ndef get_model_infer_count(host, model_name):\n    metrics = scrape_metrics(host)\n    family = metrics[\"seldon_model_infer\"]\n    print_sample(family, \"model\", model_name)\n\ndef get_pipeline_infer_count(host, pipeline_name):\n    metrics = scrape_metrics(host)\n    family = metrics[\"seldon_pipeline_infer\"]\n    print_sample(family, \"pipeline\", pipeline_name)\n\n\n\nMLServer Model\u00b6\nseldon model load -f ./models/sklearn-iris-gs.yaml\nseldon model status iris -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -i 100 \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::100]\n\n\n\nget_model_infer_count(mlserver_metrics_host,\"iris\")\n\n\nSample(name='seldon_model_infer_total', labels={'code': '200', 'method_type': 'rest', 'model': 'iris', 'model_internal': 'iris_1', 'server': 'mlserver', 'server_replica': '0'}, value=50.0, timestamp=None, exemplar=None)\nSample(name='seldon_model_infer_total', labels={'code': 'OK', 'method_type': 'grpc', 'model': 'iris', 'model_internal': 'iris_1', 'server': 'mlserver', 'server_replica': '0'}, value=100.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload iris\n\n\n{}\n\n\n\n\nTriton Model\u00b6\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nseldon model infer tfsimple1 -i 50\\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::50]\n\n\n\nseldon model infer tfsimple1 --inference-mode grpc -i 100 \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::100]\n\n\n\nget_model_infer_count(triton_metrics_host,\"tfsimple1\")\n\n\nSample(name='seldon_model_infer_total',", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/local-metrics-test.html", "key": "metrics/local-metrics-test"}}, {"key": "d715039f-344c-491f-ac22-33cb45299c91", "page": "metrics/local-metrics-test", "section": "local-metrics", "text": "'server': 'mlserver', 'server_replica': '0'}, value=50.0, timestamp=None, exemplar=None)\nSample(name='seldon_model_infer_total', labels={'code': 'OK', 'method_type': 'grpc', 'model': 'iris', 'model_internal': 'iris_1', 'server': 'mlserver', 'server_replica': '0'}, value=100.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload iris\n\n\n{}\n\n\n\n\nTriton Model\u00b6\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nseldon model infer tfsimple1 -i 50\\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::50]\n\n\n\nseldon model infer tfsimple1 --inference-mode grpc -i 100 \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::100]\n\n\n\nget_model_infer_count(triton_metrics_host,\"tfsimple1\")\n\n\nSample(name='seldon_model_infer_total', labels={'code': '200', 'method_type': 'rest', 'model': 'tfsimple1', 'model_internal': 'tfsimple1_1', 'server': 'triton', 'server_replica': '0'}, value=50.0, timestamp=None, exemplar=None)\nSample(name='seldon_model_infer_total', labels={'code': 'OK', 'method_type': 'grpc', 'model': 'tfsimple1', 'model_internal': 'tfsimple1_1', 'server': 'triton', 'server_replica': '0'}, value=100.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload tfsimple1\n\n\n{}\n\n\n\n\nPipeline\u00b6\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\nseldon pipeline load -f ./pipelines/tfsimples.yaml\nseldon pipeline status tfsimples -w PipelineReady\n\n\n{}\n{}\n{}\n{}\n{}\n{\"pipelineName\":\"tfsimples\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimples\", \"uid\":\"cdqji39qa12c739ab3o0\", \"version\":2, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":2, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2022-11-16T19:25:01.255955114Z\"}}]}\n\n\nseldon pipeline infer tfsimples -i 50 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::50 :tfsimple2_1::50 :tfsimples.pipeline::50]\n\n\n\nget_pipeline_infer_count(pipeline_metrics_host,\"tfsimples\")\n\n\nSample(name='seldon_pipeline_infer_total', labels={'code': '200', 'method_type': 'rest', 'pipeline': 'tfsimples', 'server': 'pipeline-gateway'}, value=50.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\nseldon pipeline unload tfsimples\n\n\n{}\n{}\n{}\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/local-metrics-test.html", "key": "metrics/local-metrics-test"}}, {"key": "a7100de7-7bb3-46f7-a57a-de3bc46ae443", "page": "metrics/local-metrics-test", "section": "metric-examples", "text": "\nMetric Examples\u00b6\nThis notebook tests the exposed Prometheus metrics of model and pipeline servers.\nRequires: prometheus_client and requests libraries.\nSee docs for full set of metrics available.\nmlserver_metrics_host=\"0.0.0.0:9006\"\ntriton_metrics_host=\"0.0.0.0:9007\"\npipeline_metrics_host=\"0.0.0.0:9009\"\n\n\nfrom prometheus_client.parser import text_string_to_metric_families\nimport requests\n\ndef scrape_metrics(host):\n    data = requests.get(f\"http://{host}/metrics\").text\n    return {\n        family.name: family for family in text_string_to_metric_families(data)\n    }\n\ndef print_sample(family, label, value):\n    for sample in family.samples:\n        if sample.labels[label] == value:\n            print(sample)\n\ndef get_model_infer_count(host, model_name):\n    metrics = scrape_metrics(host)\n    family = metrics[\"seldon_model_infer\"]\n    print_sample(family, \"model\", model_name)\n\ndef get_pipeline_infer_count(host, pipeline_name):\n    metrics = scrape_metrics(host)\n    family = metrics[\"seldon_pipeline_infer\"]\n    print_sample(family, \"pipeline\", pipeline_name)\n\n\n\nMLServer Model\u00b6\nseldon model load -f ./models/sklearn-iris-gs.yaml\nseldon model status iris -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -i 100 \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::100]\n\n\n\nget_model_infer_count(mlserver_metrics_host,\"iris\")\n\n\nSample(name='seldon_model_infer_total', labels={'code': '200', 'method_type': 'rest', 'model': 'iris', 'model_internal': 'iris_1', 'server': 'mlserver', 'server_replica': '0'}, value=50.0, timestamp=None, exemplar=None)\nSample(name='seldon_model_infer_total', labels={'code': 'OK', 'method_type': 'grpc', 'model': 'iris', 'model_internal': 'iris_1', 'server': 'mlserver', 'server_replica': '0'}, value=100.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload iris\n\n\n{}\n\n\n\n\nTriton Model\u00b6\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nseldon model infer tfsimple1 -i 50\\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::50]\n\n\n\nseldon model infer tfsimple1 --inference-mode grpc -i 100 \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::100]\n\n\n\nget_model_infer_count(triton_metrics_host,\"tfsimple1\")\n\n\nSample(name='seldon_model_infer_total', labels={'code': '200', 'method_type': 'rest', 'model': 'tfsimple1', 'model_internal':", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/local-metrics-test.html", "key": "metrics/local-metrics-test"}}, {"key": "32ad8538-a802-4f51-ba96-c61610c44a50", "page": "metrics/local-metrics-test", "section": "metric-examples", "text": "labels={'code': 'OK', 'method_type': 'grpc', 'model': 'iris', 'model_internal': 'iris_1', 'server': 'mlserver', 'server_replica': '0'}, value=100.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload iris\n\n\n{}\n\n\n\n\nTriton Model\u00b6\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nseldon model infer tfsimple1 -i 50\\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::50]\n\n\n\nseldon model infer tfsimple1 --inference-mode grpc -i 100 \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::100]\n\n\n\nget_model_infer_count(triton_metrics_host,\"tfsimple1\")\n\n\nSample(name='seldon_model_infer_total', labels={'code': '200', 'method_type': 'rest', 'model': 'tfsimple1', 'model_internal': 'tfsimple1_1', 'server': 'triton', 'server_replica': '0'}, value=50.0, timestamp=None, exemplar=None)\nSample(name='seldon_model_infer_total', labels={'code': 'OK', 'method_type': 'grpc', 'model': 'tfsimple1', 'model_internal': 'tfsimple1_1', 'server': 'triton', 'server_replica': '0'}, value=100.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload tfsimple1\n\n\n{}\n\n\n\n\nPipeline\u00b6\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\nseldon pipeline load -f ./pipelines/tfsimples.yaml\nseldon pipeline status tfsimples -w PipelineReady\n\n\n{}\n{}\n{}\n{}\n{}\n{\"pipelineName\":\"tfsimples\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimples\", \"uid\":\"cdqji39qa12c739ab3o0\", \"version\":2, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":2, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2022-11-16T19:25:01.255955114Z\"}}]}\n\n\nseldon pipeline infer tfsimples -i 50 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::50 :tfsimple2_1::50 :tfsimples.pipeline::50]\n\n\n\nget_pipeline_infer_count(pipeline_metrics_host,\"tfsimples\")\n\n\nSample(name='seldon_pipeline_infer_total', labels={'code': '200', 'method_type': 'rest', 'pipeline': 'tfsimples', 'server': 'pipeline-gateway'}, value=50.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\nseldon pipeline unload tfsimples\n\n\n{}\n{}\n{}\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/local-metrics-test.html", "key": "metrics/local-metrics-test"}}, {"key": "79967562-cc35-44ce-b2b2-429be07d305b", "page": "metrics/local-metrics-test", "section": "mlserver-model", "text": "\nMLServer Model\u00b6\nseldon model load -f ./models/sklearn-iris-gs.yaml\nseldon model status iris -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -i 100 \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::100]\n\n\n\nget_model_infer_count(mlserver_metrics_host,\"iris\")\n\n\nSample(name='seldon_model_infer_total', labels={'code': '200', 'method_type': 'rest', 'model': 'iris', 'model_internal': 'iris_1', 'server': 'mlserver', 'server_replica': '0'}, value=50.0, timestamp=None, exemplar=None)\nSample(name='seldon_model_infer_total', labels={'code': 'OK', 'method_type': 'grpc', 'model': 'iris', 'model_internal': 'iris_1', 'server': 'mlserver', 'server_replica': '0'}, value=100.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload iris\n\n\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/local-metrics-test.html", "key": "metrics/local-metrics-test"}}, {"key": "875fa0db-933a-4e4a-8fe4-2956d021ecdc", "page": "metrics/local-metrics-test", "section": "triton-model", "text": "\nTriton Model\u00b6\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\nseldon model infer tfsimple1 -i 50\\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::50]\n\n\n\nseldon model infer tfsimple1 --inference-mode grpc -i 100 \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::100]\n\n\n\nget_model_infer_count(triton_metrics_host,\"tfsimple1\")\n\n\nSample(name='seldon_model_infer_total', labels={'code': '200', 'method_type': 'rest', 'model': 'tfsimple1', 'model_internal': 'tfsimple1_1', 'server': 'triton', 'server_replica': '0'}, value=50.0, timestamp=None, exemplar=None)\nSample(name='seldon_model_infer_total', labels={'code': 'OK', 'method_type': 'grpc', 'model': 'tfsimple1', 'model_internal': 'tfsimple1_1', 'server': 'triton', 'server_replica': '0'}, value=100.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload tfsimple1\n\n\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/local-metrics-test.html", "key": "metrics/local-metrics-test"}}, {"key": "19f45b11-6931-4a86-8cb8-08777a203b08", "page": "metrics/local-metrics-test", "section": "pipeline", "text": "\nPipeline\u00b6\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\nseldon pipeline load -f ./pipelines/tfsimples.yaml\nseldon pipeline status tfsimples -w PipelineReady\n\n\n{}\n{}\n{}\n{}\n{}\n{\"pipelineName\":\"tfsimples\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimples\", \"uid\":\"cdqji39qa12c739ab3o0\", \"version\":2, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":2, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2022-11-16T19:25:01.255955114Z\"}}]}\n\n\nseldon pipeline infer tfsimples -i 50 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\nSuccess: map[:tfsimple1_1::50 :tfsimple2_1::50 :tfsimples.pipeline::50]\n\n\n\nget_pipeline_infer_count(pipeline_metrics_host,\"tfsimples\")\n\n\nSample(name='seldon_pipeline_infer_total', labels={'code': '200', 'method_type': 'rest', 'pipeline': 'tfsimples', 'server': 'pipeline-gateway'}, value=50.0, timestamp=None, exemplar=None)\n\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\nseldon pipeline unload tfsimples\n\n\n{}\n{}\n{}\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/local-metrics-test.html", "key": "metrics/local-metrics-test"}}, {"key": "bb306f0e-f89d-452a-b26f-6eb032b71f14", "page": "kubernetes/storage-secrets", "section": "storage-secrets", "text": "\nStorage Secrets\u00b6\nInference artifacts referenced by Models can be stored in any of the storage backends supported by Rclone.\nThis includes local filesystems, AWS S3, and Google Cloud Storage (GCS), among others.\nConfiguration is provided out-of-the-box for public GCS buckets, which enables the use of Seldon-provided models like in the below example:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.5.0/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nThis configuration is provided by the Kubernetes Secret seldon-rclone-gs-public.\nIt is made available to Servers as a preloaded secret.\nYou can define and use your own storage configurations in exactly the same way.\n\nConfiguration Format\u00b6\nTo define a new storage configuration, you need the following details:\n\nRemote name\nRemote type\nProvider parameters\n\nA remote is what Rclone calls a storage location.\nThe type defines what protocol Rclone should use to talk to this remote.\nA provider is a particular implementation for that storage type.\nSome storage types have multiple providers, such as s3 having AWS S3 itself, MinIO, Ceph, and so on.\nThe remote name is your choice.\nThe prefix you use for models in spec.storageUri must be the same as this remote name.\nThe remote type is one of the values supported by Rclone.\nFor example, for AWS S3 it is s3 and for Dropbox it is dropbox.\nThe provider parameters depend entirely on the remote type and the specific provider you are using.\nPlease check the Rclone documentation for the appropriate provider.\nNote that Rclone docs for storage types call the parameters properties and provide both config and env var formats\u2013you need to use the config format.\nFor example, the GCS parameter --gcs-client-id described here should be used as", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "ef3a85c3-0b7a-4f3d-82ee-5ac0fd1fd4c2", "page": "kubernetes/storage-secrets", "section": "storage-secrets", "text": "and for Dropbox it is dropbox.\nThe provider parameters depend entirely on the remote type and the specific provider you are using.\nPlease check the Rclone documentation for the appropriate provider.\nNote that Rclone docs for storage types call the parameters properties and provide both config and env var formats\u2013you need to use the config format.\nFor example, the GCS parameter --gcs-client-id described here should be used as client_id.\nFor reference, this format is described in the Rclone documentation.\nNote that we do not support the use of opts discussed in that section.\n\n\nKubernetes Secrets\u00b6\nKubernetes Secrets are used to store Rclone configurations, or storage secrets, for use by Servers.\nEach Secret should contain exactly one Rclone configuration.\nA Server can use storage secrets in one of two ways:\n\nIt can dynamically load a secret specified by a Model in its .spec.secretName\nIt can use global configurations made available via preloaded secrets\n\nThe name of a Secret is entirely your choice, as is the name of the data key in that Secret.\nAll that matters is that there is a single data key and that its value is in the format described above.\n\nNote\nIt is possible to use preloaded secrets for some Models and dynamically loaded secrets for others.\n\n\nPreloaded Secrets\u00b6\nRather than Models always having to specify which secret to use, a Server can load storage secrets ahead of time.\nThese can then be reused across many Models.\nWhen using a preloaded secret, the Model definition should leave .spec.secretName empty.\nThe protocol prefix in .spec.storageUri still needs to match the remote name specified by a storage secret.\nThe secrets to preload are named in a centralised", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "6197056c-70cf-483c-bab7-d1cf8b8350eb", "page": "kubernetes/storage-secrets", "section": "storage-secrets", "text": "for others.\n\n\nPreloaded Secrets\u00b6\nRather than Models always having to specify which secret to use, a Server can load storage secrets ahead of time.\nThese can then be reused across many Models.\nWhen using a preloaded secret, the Model definition should leave .spec.secretName empty.\nThe protocol prefix in .spec.storageUri still needs to match the remote name specified by a storage secret.\nThe secrets to preload are named in a centralised ConfigMap called seldon-agent.\nThis ConfigMap applies to all Servers managed by the same SeldonRuntime.\nBy default this ConfigMap only includes seldon-rclone-gs-public, but can be extended with your own secrets as shown below:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: seldon-agent\ndata:\n  agent.json: |-\n   {\n      \"rclone\" : {\n          \"config_secrets\": [\"seldon-rclone-gs-public\",\"minio-secret\"]\n      },\n   }\n\n\nThe easiest way to change this is to update your SeldonRuntime.\n\nIf your SeldonRuntime is configured using the seldon-core-v2-runtime Helm chart, the corresponding value is config.agentConfig.rclone.configSecrets.\nThis can be used as shown below:\nconfig:\n  agentConfig:\n    rclone:\n      configSecrets:\n        - my-s3\n        - custom-gcs\n        - minio-in-cluster\n\n\n\nOtherwise, if your SeldonRuntime is configured directly, you can add secrets by setting .spec.config.agentConfig.rclone.config_secrets.\nThis can be used as follows:\napiVersion: mlops.seldon.io/v1alpha1\nkind: SeldonRuntime\nmetadata:\n  name: seldon\nspec:\n  seldonConfig: default\n  config:\n    agentConfig:\n      rclone:\n        config_secrets:\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "d235f7ad-02c1-4a0d-96fe-e8db4387e9e3", "page": "kubernetes/storage-secrets", "section": "storage-secrets", "text": "custom-gcs\n        - minio-in-cluster\n\n\n\nOtherwise, if your SeldonRuntime is configured directly, you can add secrets by setting .spec.config.agentConfig.rclone.config_secrets.\nThis can be used as follows:\napiVersion: mlops.seldon.io/v1alpha1\nkind: SeldonRuntime\nmetadata:\n  name: seldon\nspec:\n  seldonConfig: default\n  config:\n    agentConfig:\n      rclone:\n        config_secrets:\n          - my-s3\n          - custom-gcs\n          - minio-in-cluster\n  ...\n\n\n\n\n\n\n\nExamples\u00b6\n\nS3 MinIOGoogle Cloud StorageAssuming you have installed MinIO in the minio-system namespace, a corresponding secret could be:\napiVersion: v1\nkind: Secret\nmetadata:\n  name: minio-secret\n  namespace: seldon-mesh\ntype: Opaque\nstringData:\n  s3: |\n    type: s3\n    name: s3\n    parameters:\n      provider: minio\n      env_auth: false\n      access_key_id: minioadmin\n      secret_access_key: minioadmin\n      endpoint: http://minio.minio-system:9000\n\n\nYou can then reference this in a Model with .spec.secretName:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"s3://models/iris\"\n  secretName: \"minio-secret\"\n  requirements:\n  - sklearn\n\n\nGCS can use service accounts for access.\nYou can generate the credentials for a service account using the gcloud CLI:\ngcloud iam service-accounts keys create \\\n  gcloud-application-credentials.json \\\n  --iam-account [SERVICE-ACCOUNT--NAME]@[PROJECT-ID].iam.gserviceaccount.com\n\n\nThe contents of gcloud-application-credentials.json can be put into a secret:\napiVersion: v1\nkind: Secret\nmetadata:\n  name: gcs-bucket\ntype: Opaque\nstringData:\n  gcs: |\n    type: gcs\n    name: gcs\n    parameters:\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "d609438d-8cf2-4133-b9c4-cddf0d4d5a8b", "page": "kubernetes/storage-secrets", "section": "storage-secrets", "text": "sklearn\n\n\nGCS can use service accounts for access.\nYou can generate the credentials for a service account using the gcloud CLI:\ngcloud iam service-accounts keys create \\\n  gcloud-application-credentials.json \\\n  --iam-account [SERVICE-ACCOUNT--NAME]@[PROJECT-ID].iam.gserviceaccount.com\n\n\nThe contents of gcloud-application-credentials.json can be put into a secret:\napiVersion: v1\nkind: Secret\nmetadata:\n  name: gcs-bucket\ntype: Opaque\nstringData:\n  gcs: |\n    type: gcs\n    name: gcs\n    parameters:\n      service_account_credentials: '<gcloud-application-credentials.json>'\n\n\nYou can then reference this in a Model with .spec.secretName:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mymodel\nspec:\n  storageUri: \"gcs://my-bucket/my-path/my-pytorch-model\"\n  secretName: \"gcs-bucket\"\n  requirements:\n  - pytorch\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "6bcfb519-9284-4b6b-89fc-a34a59de788a", "page": "kubernetes/storage-secrets", "section": "configuration-format", "text": "\nConfiguration Format\u00b6\nTo define a new storage configuration, you need the following details:\n\nRemote name\nRemote type\nProvider parameters\n\nA remote is what Rclone calls a storage location.\nThe type defines what protocol Rclone should use to talk to this remote.\nA provider is a particular implementation for that storage type.\nSome storage types have multiple providers, such as s3 having AWS S3 itself, MinIO, Ceph, and so on.\nThe remote name is your choice.\nThe prefix you use for models in spec.storageUri must be the same as this remote name.\nThe remote type is one of the values supported by Rclone.\nFor example, for AWS S3 it is s3 and for Dropbox it is dropbox.\nThe provider parameters depend entirely on the remote type and the specific provider you are using.\nPlease check the Rclone documentation for the appropriate provider.\nNote that Rclone docs for storage types call the parameters properties and provide both config and env var formats\u2013you need to use the config format.\nFor example, the GCS parameter --gcs-client-id described here should be used as client_id.\nFor reference, this format is described in the Rclone documentation.\nNote that we do not support the use of opts discussed in that section.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "81b3bb9b-f5ea-47da-94b3-13471706a7ff", "page": "kubernetes/storage-secrets", "section": "kubernetes-secrets", "text": "\nKubernetes Secrets\u00b6\nKubernetes Secrets are used to store Rclone configurations, or storage secrets, for use by Servers.\nEach Secret should contain exactly one Rclone configuration.\nA Server can use storage secrets in one of two ways:\n\nIt can dynamically load a secret specified by a Model in its .spec.secretName\nIt can use global configurations made available via preloaded secrets\n\nThe name of a Secret is entirely your choice, as is the name of the data key in that Secret.\nAll that matters is that there is a single data key and that its value is in the format described above.\n\nNote\nIt is possible to use preloaded secrets for some Models and dynamically loaded secrets for others.\n\n\nPreloaded Secrets\u00b6\nRather than Models always having to specify which secret to use, a Server can load storage secrets ahead of time.\nThese can then be reused across many Models.\nWhen using a preloaded secret, the Model definition should leave .spec.secretName empty.\nThe protocol prefix in .spec.storageUri still needs to match the remote name specified by a storage secret.\nThe secrets to preload are named in a centralised ConfigMap called seldon-agent.\nThis ConfigMap applies to all Servers managed by the same SeldonRuntime.\nBy default this ConfigMap only includes seldon-rclone-gs-public, but can be extended with your own secrets as shown below:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: seldon-agent\ndata:\n  agent.json: |-\n   {\n      \"rclone\" : {\n          \"config_secrets\": [\"seldon-rclone-gs-public\",\"minio-secret\"]\n      },\n   }\n\n\nThe easiest way to change this is to update your SeldonRuntime.\n\nIf your SeldonRuntime is configured using the seldon-core-v2-runtime", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "58faff4a-6fe6-4a49-a716-208109d50161", "page": "kubernetes/storage-secrets", "section": "kubernetes-secrets", "text": "extended with your own secrets as shown below:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: seldon-agent\ndata:\n  agent.json: |-\n   {\n      \"rclone\" : {\n          \"config_secrets\": [\"seldon-rclone-gs-public\",\"minio-secret\"]\n      },\n   }\n\n\nThe easiest way to change this is to update your SeldonRuntime.\n\nIf your SeldonRuntime is configured using the seldon-core-v2-runtime Helm chart, the corresponding value is config.agentConfig.rclone.configSecrets.\nThis can be used as shown below:\nconfig:\n  agentConfig:\n    rclone:\n      configSecrets:\n        - my-s3\n        - custom-gcs\n        - minio-in-cluster\n\n\n\nOtherwise, if your SeldonRuntime is configured directly, you can add secrets by setting .spec.config.agentConfig.rclone.config_secrets.\nThis can be used as follows:\napiVersion: mlops.seldon.io/v1alpha1\nkind: SeldonRuntime\nmetadata:\n  name: seldon\nspec:\n  seldonConfig: default\n  config:\n    agentConfig:\n      rclone:\n        config_secrets:\n          - my-s3\n          - custom-gcs\n          - minio-in-cluster\n  ...\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "9d144660-f68a-4f06-8999-c9b251550d15", "page": "kubernetes/storage-secrets", "section": "preloaded-secrets", "text": "\nPreloaded Secrets\u00b6\nRather than Models always having to specify which secret to use, a Server can load storage secrets ahead of time.\nThese can then be reused across many Models.\nWhen using a preloaded secret, the Model definition should leave .spec.secretName empty.\nThe protocol prefix in .spec.storageUri still needs to match the remote name specified by a storage secret.\nThe secrets to preload are named in a centralised ConfigMap called seldon-agent.\nThis ConfigMap applies to all Servers managed by the same SeldonRuntime.\nBy default this ConfigMap only includes seldon-rclone-gs-public, but can be extended with your own secrets as shown below:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: seldon-agent\ndata:\n  agent.json: |-\n   {\n      \"rclone\" : {\n          \"config_secrets\": [\"seldon-rclone-gs-public\",\"minio-secret\"]\n      },\n   }\n\n\nThe easiest way to change this is to update your SeldonRuntime.\n\nIf your SeldonRuntime is configured using the seldon-core-v2-runtime Helm chart, the corresponding value is config.agentConfig.rclone.configSecrets.\nThis can be used as shown below:\nconfig:\n  agentConfig:\n    rclone:\n      configSecrets:\n        - my-s3\n        - custom-gcs\n        - minio-in-cluster\n\n\n\nOtherwise, if your SeldonRuntime is configured directly, you can add secrets by setting .spec.config.agentConfig.rclone.config_secrets.\nThis can be used as follows:\napiVersion: mlops.seldon.io/v1alpha1\nkind: SeldonRuntime\nmetadata:\n  name: seldon\nspec:\n  seldonConfig: default\n  config:\n    agentConfig:\n      rclone:\n        config_secrets:\n         ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "c8e7642f-94af-466b-a140-bf7d55478d18", "page": "kubernetes/storage-secrets", "section": "preloaded-secrets", "text": "       - minio-in-cluster\n\n\n\nOtherwise, if your SeldonRuntime is configured directly, you can add secrets by setting .spec.config.agentConfig.rclone.config_secrets.\nThis can be used as follows:\napiVersion: mlops.seldon.io/v1alpha1\nkind: SeldonRuntime\nmetadata:\n  name: seldon\nspec:\n  seldonConfig: default\n  config:\n    agentConfig:\n      rclone:\n        config_secrets:\n          - my-s3\n          - custom-gcs\n          - minio-in-cluster\n  ...\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "712fe2f4-4c54-4fbc-8ce0-f7b8fc6abdb1", "page": "kubernetes/storage-secrets", "section": "examples", "text": "\nExamples\u00b6\n\nS3 MinIOGoogle Cloud StorageAssuming you have installed MinIO in the minio-system namespace, a corresponding secret could be:\napiVersion: v1\nkind: Secret\nmetadata:\n  name: minio-secret\n  namespace: seldon-mesh\ntype: Opaque\nstringData:\n  s3: |\n    type: s3\n    name: s3\n    parameters:\n      provider: minio\n      env_auth: false\n      access_key_id: minioadmin\n      secret_access_key: minioadmin\n      endpoint: http://minio.minio-system:9000\n\n\nYou can then reference this in a Model with .spec.secretName:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"s3://models/iris\"\n  secretName: \"minio-secret\"\n  requirements:\n  - sklearn\n\n\nGCS can use service accounts for access.\nYou can generate the credentials for a service account using the gcloud CLI:\ngcloud iam service-accounts keys create \\\n  gcloud-application-credentials.json \\\n  --iam-account [SERVICE-ACCOUNT--NAME]@[PROJECT-ID].iam.gserviceaccount.com\n\n\nThe contents of gcloud-application-credentials.json can be put into a secret:\napiVersion: v1\nkind: Secret\nmetadata:\n  name: gcs-bucket\ntype: Opaque\nstringData:\n  gcs: |\n    type: gcs\n    name: gcs\n    parameters:\n      service_account_credentials: '<gcloud-application-credentials.json>'\n\n\nYou can then reference this in a Model with .spec.secretName:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mymodel\nspec:\n  storageUri: \"gcs://my-bucket/my-path/my-pytorch-model\"\n  secretName: \"gcs-bucket\"\n  requirements:\n  - pytorch\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/storage-secrets/index.html", "key": "kubernetes/storage-secrets"}}, {"key": "b361c90c-b2a6-4155-af81-b566b73f02b5", "page": "getting-started", "section": "getting-started", "text": "\nGetting Started\u00b6\n\nNote\nSome dependencies may require that the (virtual) machines on which you deploy, support the SSE4.2 instruction set or x86-64-v2 microarchitecture. If lscpu | grep sse4_2 does not return anything on your machine, your CPU is not compatible, and you may need to update the (virtual) host\u2019s CPU.\n\nSeldon Core can be installed either with Docker Compose or with Kubernetes:\n\nInstall locally with Docker Compose\nInstall onto a Kubernetes cluster\n\nOnce installed:\n\nTry the existing examples.\nTrain and deploy your own model artifact.\n\n\nCore Concepts\u00b6\nThere are three core resources you will use:\n\nModels - for deploying single machine learning models, custom transformation logic, drift detectors and outliers detectors.\nPipelines - for connecting together flows of data transformations between Models with a synchronous path and multiple asynchronous paths.\nExperiments - for testing new versions of models\n\nBy default the standard installation will deploy MLServer and Triton inference servers which provide support for a wide range of machine learning model artifacts including Tensorflow models, PyTorch models, SKlearn models, XGBoost models, ONNX models, TensorRT models, custom python models and many more. For advanced use, the creation of new inference servers is manged by two resources:\n\nServers - for deploying sets of replicas of core inference servers (MLServer or Triton by default).\nServerConfigs - for defining server configurations including custom servers.\n\n\n\nAPI for Inference\u00b6\nOnce deployed models can be called using the Seldon V2 inference protocol. This protocol created by Seldon, NVIDIA and the KServe projects is supported by MLServer and Triton inference servers amingst others and allows REST and gRPC calls to your model.\nYour model is exposed via our internal Envoy gateway. If you", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/index.html", "key": "getting-started"}}, {"key": "535fcf3b-1caf-473d-87a9-0bfa79c49c4d", "page": "getting-started", "section": "getting-started", "text": "or Triton by default).\nServerConfigs - for defining server configurations including custom servers.\n\n\n\nAPI for Inference\u00b6\nOnce deployed models can be called using the Seldon V2 inference protocol. This protocol created by Seldon, NVIDIA and the KServe projects is supported by MLServer and Triton inference servers amingst others and allows REST and gRPC calls to your model.\nYour model is exposed via our internal Envoy gateway. If you wish to expose your models in Kubernetes outside the cluster you are free to use any Service Mesh or Ingress technology. Various examples are provided for service mesh integration.\n\n\nInference Metrics\u00b6\nMetrics are exposed for scraping by Prometheus. For Kubernetes we provide example instructions for using kube-prometheus.\n\n\nPipeline requirements\u00b6\nPipelines are built upon Kafka streaming technology.\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/index.html", "key": "getting-started"}}, {"key": "9fdfd366-5fe7-4722-84d0-0042a0a8ae7e", "page": "getting-started", "section": "core-concepts", "text": "\nCore Concepts\u00b6\nThere are three core resources you will use:\n\nModels - for deploying single machine learning models, custom transformation logic, drift detectors and outliers detectors.\nPipelines - for connecting together flows of data transformations between Models with a synchronous path and multiple asynchronous paths.\nExperiments - for testing new versions of models\n\nBy default the standard installation will deploy MLServer and Triton inference servers which provide support for a wide range of machine learning model artifacts including Tensorflow models, PyTorch models, SKlearn models, XGBoost models, ONNX models, TensorRT models, custom python models and many more. For advanced use, the creation of new inference servers is manged by two resources:\n\nServers - for deploying sets of replicas of core inference servers (MLServer or Triton by default).\nServerConfigs - for defining server configurations including custom servers.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/index.html", "key": "getting-started"}}, {"key": "c7266061-79cf-4833-8dff-137a7e5232f0", "page": "getting-started", "section": "api-for-inference", "text": "\nAPI for Inference\u00b6\nOnce deployed models can be called using the Seldon V2 inference protocol. This protocol created by Seldon, NVIDIA and the KServe projects is supported by MLServer and Triton inference servers amingst others and allows REST and gRPC calls to your model.\nYour model is exposed via our internal Envoy gateway. If you wish to expose your models in Kubernetes outside the cluster you are free to use any Service Mesh or Ingress technology. Various examples are provided for service mesh integration.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/index.html", "key": "getting-started"}}, {"key": "b071899b-412c-408b-a423-5e3922d7dc31", "page": "servers", "section": "servers", "text": "\nServers\u00b6\nBy default Seldon installs two server farms using MLServer and Triton with 1 replica each. Models are scheduled onto servers based on the server\u2019s resources and whether the capabilities of the server matches the requirements specified in the Model request. For example:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.5.0/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nThis model specifies the requirement sklearn\nThere is a default capabilities for each server as follows:\n\nMLServer\n        value: \"mlserver,alibi-detect,alibi-explain,huggingface,lightgbm,mlflow,python,sklearn,spark-mlib,xgboost\"\n\n\n\nTriton\n        value: \"triton,dali,fil,onnx,openvino,python,pytorch,tensorflow,tensorrt\"\n\n\n\n\n\nCustom Capabilities\u00b6\nServers can be defined with a capabilities field to indicate custom configurations (e.g. Python dependencies). For instance:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-134\nspec:\n  serverConfig: mlserver\n  capabilities:\n  - mlserver-1.3.4\n  podSpec:\n    containers:\n    - image: seldonio/mlserver:1.3.4\n      name: mlserver\n\n\nThese capabilities override the ones from the serverConfig: mlserver. A model that takes advantage of this is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - mlserver-1.3.4\n\n\nThis above model will be matched with the previous custom server mlserver-134.\nServers can also be set up with the extraCapabilities that add to existing capabilities from the referenced ServerConfig. For instance:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-extra\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - extra\n\n\nThis server, mlserver-extra, inherits a default set of capabilities via serverConfig: mlserver.\nThese defaults are discussed above.\nThe extraCapabilities are appended to these to create a single list of capabilities for this server.\nModels can then specify requirements to select a server that satisfies those requirements as", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/servers/index.html", "key": "servers"}}, {"key": "e5d9d908-cb79-4dbf-917c-965d7a7d85ef", "page": "servers", "section": "servers", "text": "existing capabilities from the referenced ServerConfig. For instance:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-extra\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - extra\n\n\nThis server, mlserver-extra, inherits a default set of capabilities via serverConfig: mlserver.\nThese defaults are discussed above.\nThe extraCapabilities are appended to these to create a single list of capabilities for this server.\nModels can then specify requirements to select a server that satisfies those requirements as follows.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: extra-model-requirements\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - extra\n\n\nThe capabilities field takes precedence over the extraCapabilities field.\nFor some examples see here.\n\n\nAutoscaling of Servers\u00b6\nWithin docker we don\u2019t support this but for Kubernetes see here\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/servers/index.html", "key": "servers"}}, {"key": "75f77322-9090-4331-827d-19ef82e7cbed", "page": "servers", "section": "custom-capabilities", "text": "\nCustom Capabilities\u00b6\nServers can be defined with a capabilities field to indicate custom configurations (e.g. Python dependencies). For instance:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-134\nspec:\n  serverConfig: mlserver\n  capabilities:\n  - mlserver-1.3.4\n  podSpec:\n    containers:\n    - image: seldonio/mlserver:1.3.4\n      name: mlserver\n\n\nThese capabilities override the ones from the serverConfig: mlserver. A model that takes advantage of this is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - mlserver-1.3.4\n\n\nThis above model will be matched with the previous custom server mlserver-134.\nServers can also be set up with the extraCapabilities that add to existing capabilities from the referenced ServerConfig. For instance:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-extra\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - extra\n\n\nThis server, mlserver-extra, inherits a default set of capabilities via serverConfig: mlserver.\nThese defaults are discussed above.\nThe extraCapabilities are appended to these to create a single list of capabilities for this server.\nModels can then specify requirements to select a server that satisfies those requirements as follows.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: extra-model-requirements\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - extra\n\n\nThe capabilities field takes precedence over the extraCapabilities field.\nFor some examples see here.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/servers/index.html", "key": "servers"}}, {"key": "cbddb064-21d2-44ac-9a1e-5691467b892f", "page": "getting-started/kubernetes-installation/security/aws-msk-mtls", "section": "aws-msk-mtls", "text": "\nAWS MSK mTLS\u00b6\nSeldon will run with AWS MSK.\nAt present we support mTLS authentication to MSK which can be run from a Kubernetes cluster inside or outside Amazon. If running outside your MSK cluster must have a public endpoint.\n\nConsiderations\u00b6\n\nPublic Access to MSK Cluster\u00b6\nIf you running your Kubernetes cluster outside AWS you will need to create a public accessible MSK cluster.\nYou will need to setup Kafka ACLs for your user where the username is the CommonName of the certificate of the client and allow full topic access. For example, to add a user with CN=myname to have full operations using the kafka-acls script with mTLS config setup as described in AWS MSK docs:\nkafka-acls.sh --bootstrap-server <mTLS endpoint>  --add --allow-principal User:CN=myname --operation All --topic '*' --command-config client.properties\n\n\nYou will also need to allow the connecting user to be able to perform admin tasks on the cluster so we can create topics on demand.\nkafka-acls.sh --bootstrap-server <nTLS endpoint>  --add --allow-principal User:CN=myname --operation All --cluster '*' --command-config client.properties\n\n\nYou will need to allow group access also.\nkafka-acls.sh --bootstrap-server <mTKS endpoint>  --add --allow-principal User:CN=myname --operation All --group '*' --command-config client.properties\n\n\n\n\n\nCreate TLS Kubernetes Secrets\u00b6\nCreate a secret for the client certificate you created. If you followed the AWS MSK mTLS guide you will need to export your private key from the JKS keystore. The certificate and chain will be provided in PEM format when you get the certificate signed. You can use these to create a secret with:\n\ntls.key : PEM formatted private key\ntls.crt : PEM formatted certificate\nca.crt : Certificate chain\n\nkubectl create secret generic aws-msk-client --from-file=./tls.key --from-file=./tls.crt", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-mtls.html", "key": "getting-started/kubernetes-installation/security/aws-msk-mtls"}}, {"key": "633c2dad-d4f9-406e-90bf-44e149723331", "page": "getting-started/kubernetes-installation/security/aws-msk-mtls", "section": "aws-msk-mtls", "text": "created. If you followed the AWS MSK mTLS guide you will need to export your private key from the JKS keystore. The certificate and chain will be provided in PEM format when you get the certificate signed. You can use these to create a secret with:\n\ntls.key : PEM formatted private key\ntls.crt : PEM formatted certificate\nca.crt : Certificate chain\n\nkubectl create secret generic aws-msk-client --from-file=./tls.key --from-file=./tls.crt --from-file=./ca.crt -n seldon-mesh\n\n\nCreate a secret for the broker certificate. If following the AWS MSK mTLS guide you will need to export the trusstore of Amazon into PEM format and save as ca.crt.\nTo extract certificates from truststore do:\nkeytool -importkeystore -srckeystore truststore.jks    -destkeystore truststore.p12    -srcstoretype jks    -deststoretype pkcs12\nopenssl pkcs12 -in truststore.p12  -nodes -out trust.pem\ncat trust.pem | sed  -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ca.crt\n\n\nAdd ca.crt to a secret.\nkubectl create secret generic aws-msk-broker-ca --from-file=./ca.crt -n seldon-mesh\n\n\n\nExample Helm install\u00b6\nWe provide a template you can extend in k8s/samples/values-aws-msk-kafka-mtls.yaml.tmpl:\nkafka:\n  bootstrap: <MSK Broker Endpoints>\n\nsecurity:\n  kafka:\n    protocol: SSL\n    ssl:\n      client:\n        secret: aws-msk-client\n        brokerValidationSecret: aws-msk-broker-ca\n\n\nCopy this and modify by adding your broker endpoints.\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh -f k8s/samples/values-aws-msk-kafka-mtls.yaml --set kafka.bootstrap=<your aws msk broker endpoints>\n\n\n\n\n\nTroubleshooting\u00b6\nFirst check AWS MSK troubleshooting.\n\nNo messages are being produced to the topics\u00b6\nSet the kafka config map debug setting to \u201call\u201d. For Helm install you can set kafka.debug=all.\nIf you see an error from the producer in the Pipeline gateway complaining", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-mtls.html", "key": "getting-started/kubernetes-installation/security/aws-msk-mtls"}}, {"key": "fd4a2382-e860-4a68-afb0-a24692e2821c", "page": "getting-started/kubernetes-installation/security/aws-msk-mtls", "section": "aws-msk-mtls", "text": "   brokerValidationSecret: aws-msk-broker-ca\n\n\nCopy this and modify by adding your broker endpoints.\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh -f k8s/samples/values-aws-msk-kafka-mtls.yaml --set kafka.bootstrap=<your aws msk broker endpoints>\n\n\n\n\n\nTroubleshooting\u00b6\nFirst check AWS MSK troubleshooting.\n\nNo messages are being produced to the topics\u00b6\nSet the kafka config map debug setting to \u201call\u201d. For Helm install you can set kafka.debug=all.\nIf you see an error from the producer in the Pipeline gateway complaining about not enough insync replicas then the replication factor Seldon is using is less than the cluster setting for min.insync.replicas which for a default AWS MSK cluster defaults to 2. Ensure this is equal to that of the cluster. This value can be set in the Helm chart with kafka.topics.replicationFactor.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-mtls.html", "key": "getting-started/kubernetes-installation/security/aws-msk-mtls"}}, {"key": "0f69a9ef-b61c-4a35-ba45-80943bd87bc4", "page": "getting-started/kubernetes-installation/security/aws-msk-mtls", "section": "considerations", "text": "\nConsiderations\u00b6\n\nPublic Access to MSK Cluster\u00b6\nIf you running your Kubernetes cluster outside AWS you will need to create a public accessible MSK cluster.\nYou will need to setup Kafka ACLs for your user where the username is the CommonName of the certificate of the client and allow full topic access. For example, to add a user with CN=myname to have full operations using the kafka-acls script with mTLS config setup as described in AWS MSK docs:\nkafka-acls.sh --bootstrap-server <mTLS endpoint>  --add --allow-principal User:CN=myname --operation All --topic '*' --command-config client.properties\n\n\nYou will also need to allow the connecting user to be able to perform admin tasks on the cluster so we can create topics on demand.\nkafka-acls.sh --bootstrap-server <nTLS endpoint>  --add --allow-principal User:CN=myname --operation All --cluster '*' --command-config client.properties\n\n\nYou will need to allow group access also.\nkafka-acls.sh --bootstrap-server <mTKS endpoint>  --add --allow-principal User:CN=myname --operation All --group '*' --command-config client.properties\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-mtls.html", "key": "getting-started/kubernetes-installation/security/aws-msk-mtls"}}, {"key": "c9a5b24c-7a35-47de-8018-52851dd586d1", "page": "getting-started/kubernetes-installation/security/aws-msk-mtls", "section": "public-access-to-msk-cluster", "text": "\nPublic Access to MSK Cluster\u00b6\nIf you running your Kubernetes cluster outside AWS you will need to create a public accessible MSK cluster.\nYou will need to setup Kafka ACLs for your user where the username is the CommonName of the certificate of the client and allow full topic access. For example, to add a user with CN=myname to have full operations using the kafka-acls script with mTLS config setup as described in AWS MSK docs:\nkafka-acls.sh --bootstrap-server <mTLS endpoint>  --add --allow-principal User:CN=myname --operation All --topic '*' --command-config client.properties\n\n\nYou will also need to allow the connecting user to be able to perform admin tasks on the cluster so we can create topics on demand.\nkafka-acls.sh --bootstrap-server <nTLS endpoint>  --add --allow-principal User:CN=myname --operation All --cluster '*' --command-config client.properties\n\n\nYou will need to allow group access also.\nkafka-acls.sh --bootstrap-server <mTKS endpoint>  --add --allow-principal User:CN=myname --operation All --group '*' --command-config client.properties\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-mtls.html", "key": "getting-started/kubernetes-installation/security/aws-msk-mtls"}}, {"key": "5fd2d665-d278-4b5d-9294-a04c369d5a6b", "page": "getting-started/kubernetes-installation/security/aws-msk-mtls", "section": "create-tls-kubernetes-secrets", "text": "\nCreate TLS Kubernetes Secrets\u00b6\nCreate a secret for the client certificate you created. If you followed the AWS MSK mTLS guide you will need to export your private key from the JKS keystore. The certificate and chain will be provided in PEM format when you get the certificate signed. You can use these to create a secret with:\n\ntls.key : PEM formatted private key\ntls.crt : PEM formatted certificate\nca.crt : Certificate chain\n\nkubectl create secret generic aws-msk-client --from-file=./tls.key --from-file=./tls.crt --from-file=./ca.crt -n seldon-mesh\n\n\nCreate a secret for the broker certificate. If following the AWS MSK mTLS guide you will need to export the trusstore of Amazon into PEM format and save as ca.crt.\nTo extract certificates from truststore do:\nkeytool -importkeystore -srckeystore truststore.jks    -destkeystore truststore.p12    -srcstoretype jks    -deststoretype pkcs12\nopenssl pkcs12 -in truststore.p12  -nodes -out trust.pem\ncat trust.pem | sed  -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ca.crt\n\n\nAdd ca.crt to a secret.\nkubectl create secret generic aws-msk-broker-ca --from-file=./ca.crt -n seldon-mesh\n\n\n\nExample Helm install\u00b6\nWe provide a template you can extend in k8s/samples/values-aws-msk-kafka-mtls.yaml.tmpl:\nkafka:\n  bootstrap: <MSK Broker Endpoints>\n\nsecurity:\n  kafka:\n    protocol: SSL\n    ssl:\n      client:\n        secret: aws-msk-client\n        brokerValidationSecret: aws-msk-broker-ca\n\n\nCopy this and modify by adding your broker endpoints.\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh -f k8s/samples/values-aws-msk-kafka-mtls.yaml --set kafka.bootstrap=<your aws msk broker endpoints>\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-mtls.html", "key": "getting-started/kubernetes-installation/security/aws-msk-mtls"}}, {"key": "266495e8-7098-48cc-8d45-2cdcfe057ec1", "page": "getting-started/kubernetes-installation/security/aws-msk-mtls", "section": "example-helm-install", "text": "\nExample Helm install\u00b6\nWe provide a template you can extend in k8s/samples/values-aws-msk-kafka-mtls.yaml.tmpl:\nkafka:\n  bootstrap: <MSK Broker Endpoints>\n\nsecurity:\n  kafka:\n    protocol: SSL\n    ssl:\n      client:\n        secret: aws-msk-client\n        brokerValidationSecret: aws-msk-broker-ca\n\n\nCopy this and modify by adding your broker endpoints.\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh -f k8s/samples/values-aws-msk-kafka-mtls.yaml --set kafka.bootstrap=<your aws msk broker endpoints>\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-mtls.html", "key": "getting-started/kubernetes-installation/security/aws-msk-mtls"}}, {"key": "f90bd57a-0c49-4898-903f-f3f74fb8e3df", "page": "getting-started/kubernetes-installation/security/aws-msk-mtls", "section": "troubleshooting", "text": "\nTroubleshooting\u00b6\nFirst check AWS MSK troubleshooting.\n\nNo messages are being produced to the topics\u00b6\nSet the kafka config map debug setting to \u201call\u201d. For Helm install you can set kafka.debug=all.\nIf you see an error from the producer in the Pipeline gateway complaining about not enough insync replicas then the replication factor Seldon is using is less than the cluster setting for min.insync.replicas which for a default AWS MSK cluster defaults to 2. Ensure this is equal to that of the cluster. This value can be set in the Helm chart with kafka.topics.replicationFactor.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-mtls.html", "key": "getting-started/kubernetes-installation/security/aws-msk-mtls"}}, {"key": "cf2436a7-e932-44f2-833c-f5c282484407", "page": "getting-started/kubernetes-installation/security/aws-msk-mtls", "section": "no-messages-are-being-produced-to-the-topics", "text": "\nNo messages are being produced to the topics\u00b6\nSet the kafka config map debug setting to \u201call\u201d. For Helm install you can set kafka.debug=all.\nIf you see an error from the producer in the Pipeline gateway complaining about not enough insync replicas then the replication factor Seldon is using is less than the cluster setting for min.insync.replicas which for a default AWS MSK cluster defaults to 2. Ensure this is equal to that of the cluster. This value can be set in the Helm chart with kafka.topics.replicationFactor.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-mtls.html", "key": "getting-started/kubernetes-installation/security/aws-msk-mtls"}}, {"key": "c6225ec9-2b62-4bde-a795-eb2bf912e5f0", "page": "development/release", "section": "id1", "text": "\nRelease Process\u00b6\nThis document summarizes the release process for Seldon Core v2.\nIt is aimed mainly at the maintainers.\n\n:warning: NOTE: This is a work in progress.\nThis is an early version of the release process, which is subject to change.\nPlease, always check this document before conducting a release, and verify if everything goes as expected.\n\n\nProcess Summary\u00b6\n\nCut branch for release, e.g. release-0.1\nRun \u201cDraft New Release\u201d workflow (e.g. choose release-0.1 branch and v0.1.0-rc1 version)\nRun \u201cBuild docker images\u201d workflow (e.g. choose release-0.1 branch and 0.1.0-rc1 tag)\nVerify correctness of created artifacts and images (not yet automated!)\nPublish release\nPublish tags for the Go modules\n\n\n\nProcess discussion\u00b6\nThe development process follows a standard GitHub workflow.\n\nThe main development is happening in the v2 branch.\nThis is where new features land through Pull Requests.\nWhen all features for a new release have been merged, for example v0.1.0, we cut a branch for that release, e.g. release-0.1.\nThe release-0.1 branch will be the base for the v0.1.0 release as well as the release candidates, i.e. v0.1.0-rcX, and successive patch releases, i.e. v0.1.X.\nWe use GitHub Actions to prepare the release, build images and run all necessary testing.\nIf the release draft needs to be updated before being published, the new commits should be merged into the release-0.1 branch and relevant workflows re-triggered as required.\n\n\nDraft New Release Action\u00b6\nThe Draft New Release workflow is the first one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version (here v0.1.0-rc1)\n\n\nThis workflow cannot run on the v2 branch.\nIt will validate the provided version", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "29d2294a-d58c-49f6-941f-de6db7c36a54", "page": "development/release", "section": "id1", "text": "be merged into the release-0.1 branch and relevant workflows re-triggered as required.\n\n\nDraft New Release Action\u00b6\nThe Draft New Release workflow is the first one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version (here v0.1.0-rc1)\n\n\nThis workflow cannot run on the v2 branch.\nIt will validate the provided version against a SemVer regex.\nIt will create a few commits with:\n\nUpdated Helm charts\nUpdated Kubernetes YAML manifests\nAn updated changelog\n\n\nOnce the workflow finishes, you will find a new release draft waiting to be published.\n\n\n:warning: NOTE: Before publishing the release, run the images build workflow and necessary tests (not yet automated)!\n\n\n\nBuild docker images Action\u00b6\nThe Build docker images workflow is the second one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version, e.g. 0.1.0-rc1\n\nNote the lack of the v prefix here\n\n\n\n\nThis workflow will then run unit tests and build a series of Docker images that will be automatically pushed to DockerHub.\n\n\nAdd Go module tags\u00b6\nGo module versions are mapped to VCS versions via semantic version tags.\nThis process is described in the Go documentation.\nAs we have multiple Go modules in subdirectories of the repository, we need to use corresponding prefixes for our git tags.\nFrom the above link on mapping versions to commits:\n\nIf a module is defined in a subdirectory within the repository, that is, the module subdirectory portion of the module path is not empty, then each tag name must be", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "0280f8a5-0e8d-4672-8233-1d6a5ec078ed", "page": "development/release", "section": "id1", "text": "process is described in the Go documentation.\nAs we have multiple Go modules in subdirectories of the repository, we need to use corresponding prefixes for our git tags.\nFrom the above link on mapping versions to commits:\n\nIf a module is defined in a subdirectory within the repository, that is, the module subdirectory portion of the module path is not empty, then each tag name must be prefixed with the module subdirectory, followed by a slash. For example, the module golang.org/x/tools/gopls is defined in the gopls subdirectory of the repository with root path golang.org/x/tools. The version v0.4.0 of that module must have the tag named gopls/v0.4.0 in that repository.\n\nThus, for any given release, we should have one tag for the release as a whole plus one corresponding tag for every Go module.\nAt the time of writing, this comprises:\n\napis/go\ncomponents/tls\nhodometer\noperator\nscheduler\n\n\n:warning: Adding these tags is currently a manual process.\n\nTo add the appropriate tags:\n\nCheck out the relevant tag, e.g.\ngit checkout v2.4.0\n\n\n\nFind all relevant Go modules and identify their subdirectory paths, e.g. with\nfind . -name go.mod -exec sed -n '1 { s|^module.*seldon-core/||; s|/v2$||; p }' {} \\;\n\n\n\nAdd corresponding tags for each module, e.g.\ngit tag apis/go/v2.4.0 v2.4.0\n\n\n\nConfirm that all tags point to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear as expected both via the git CLI and also in the GitHub UI.\nA short list", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "f58f0b36-a8fb-434e-8174-50f7bef5fd6f", "page": "development/release", "section": "id1", "text": "to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear as expected both via the git CLI and also in the GitHub UI.\nA short list of commands to cover all above in single go is:\nVERSION=v2.4.0\ngit tag apis/go/${VERSION} ${VERSION}\ngit tag components/tls/${VERSION} ${VERSION}\ngit tag hodometer/${VERSION} ${VERSION}\ngit tag operator/${VERSION} ${VERSION}\ngit tag scheduler/${VERSION} ${VERSION}\n\ngit push origin apis/go/${VERSION}\ngit push origin components/tls/${VERSION}\ngit push origin hodometer/${VERSION}\ngit push origin operator/${VERSION}\ngit push origin scheduler/${VERSION}\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "88aa7dc1-7e0b-4d67-95c4-8b1ee0559364", "page": "development/release", "section": "process-discussion", "text": "\nProcess discussion\u00b6\nThe development process follows a standard GitHub workflow.\n\nThe main development is happening in the v2 branch.\nThis is where new features land through Pull Requests.\nWhen all features for a new release have been merged, for example v0.1.0, we cut a branch for that release, e.g. release-0.1.\nThe release-0.1 branch will be the base for the v0.1.0 release as well as the release candidates, i.e. v0.1.0-rcX, and successive patch releases, i.e. v0.1.X.\nWe use GitHub Actions to prepare the release, build images and run all necessary testing.\nIf the release draft needs to be updated before being published, the new commits should be merged into the release-0.1 branch and relevant workflows re-triggered as required.\n\n\nDraft New Release Action\u00b6\nThe Draft New Release workflow is the first one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version (here v0.1.0-rc1)\n\n\nThis workflow cannot run on the v2 branch.\nIt will validate the provided version against a SemVer regex.\nIt will create a few commits with:\n\nUpdated Helm charts\nUpdated Kubernetes YAML manifests\nAn updated changelog\n\n\nOnce the workflow finishes, you will find a new release draft waiting to be published.\n\n\n:warning: NOTE: Before publishing the release, run the images build workflow and necessary tests (not yet automated)!\n\n\n\nBuild docker images Action\u00b6\nThe Build docker images workflow is the second one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version, e.g. 0.1.0-rc1\n\nNote the lack of the v prefix here\n\n\n\n\nThis", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "461ad4d6-2cf4-4c1d-9d9b-fbcf170ad8d0", "page": "development/release", "section": "process-discussion", "text": "published.\n\n\n:warning: NOTE: Before publishing the release, run the images build workflow and necessary tests (not yet automated)!\n\n\n\nBuild docker images Action\u00b6\nThe Build docker images workflow is the second one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version, e.g. 0.1.0-rc1\n\nNote the lack of the v prefix here\n\n\n\n\nThis workflow will then run unit tests and build a series of Docker images that will be automatically pushed to DockerHub.\n\n\nAdd Go module tags\u00b6\nGo module versions are mapped to VCS versions via semantic version tags.\nThis process is described in the Go documentation.\nAs we have multiple Go modules in subdirectories of the repository, we need to use corresponding prefixes for our git tags.\nFrom the above link on mapping versions to commits:\n\nIf a module is defined in a subdirectory within the repository, that is, the module subdirectory portion of the module path is not empty, then each tag name must be prefixed with the module subdirectory, followed by a slash. For example, the module golang.org/x/tools/gopls is defined in the gopls subdirectory of the repository with root path golang.org/x/tools. The version v0.4.0 of that module must have the tag named gopls/v0.4.0 in that repository.\n\nThus, for any given release, we should have one tag for the release as a whole plus one corresponding tag for every Go module.\nAt the time of writing, this comprises:\n\napis/go\ncomponents/tls\nhodometer\noperator\nscheduler\n\n\n:warning: Adding these tags is currently a manual process.\n\nTo add the appropriate tags:\n\nCheck out the relevant tag, e.g.\ngit checkout v2.4.0\n\n\n\nFind all relevant Go modules", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "69689650-cc44-4dc5-a963-3fab79dd1e4c", "page": "development/release", "section": "process-discussion", "text": "of that module must have the tag named gopls/v0.4.0 in that repository.\n\nThus, for any given release, we should have one tag for the release as a whole plus one corresponding tag for every Go module.\nAt the time of writing, this comprises:\n\napis/go\ncomponents/tls\nhodometer\noperator\nscheduler\n\n\n:warning: Adding these tags is currently a manual process.\n\nTo add the appropriate tags:\n\nCheck out the relevant tag, e.g.\ngit checkout v2.4.0\n\n\n\nFind all relevant Go modules and identify their subdirectory paths, e.g. with\nfind . -name go.mod -exec sed -n '1 { s|^module.*seldon-core/||; s|/v2$||; p }' {} \\;\n\n\n\nAdd corresponding tags for each module, e.g.\ngit tag apis/go/v2.4.0 v2.4.0\n\n\n\nConfirm that all tags point to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear as expected both via the git CLI and also in the GitHub UI.\nA short list of commands to cover all above in single go is:\nVERSION=v2.4.0\ngit tag apis/go/${VERSION} ${VERSION}\ngit tag components/tls/${VERSION} ${VERSION}\ngit tag hodometer/${VERSION} ${VERSION}\ngit tag operator/${VERSION} ${VERSION}\ngit tag scheduler/${VERSION} ${VERSION}\n\ngit push origin apis/go/${VERSION}\ngit push origin components/tls/${VERSION}\ngit push origin hodometer/${VERSION}\ngit push origin operator/${VERSION}\ngit push origin scheduler/${VERSION}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "1d7d2ae9-c961-4796-be67-0dc9d3d2cf11", "page": "development/release", "section": "draft-new-release-action", "text": "\nDraft New Release Action\u00b6\nThe Draft New Release workflow is the first one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version (here v0.1.0-rc1)\n\n\nThis workflow cannot run on the v2 branch.\nIt will validate the provided version against a SemVer regex.\nIt will create a few commits with:\n\nUpdated Helm charts\nUpdated Kubernetes YAML manifests\nAn updated changelog\n\n\nOnce the workflow finishes, you will find a new release draft waiting to be published.\n\n\n:warning: NOTE: Before publishing the release, run the images build workflow and necessary tests (not yet automated)!\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "814c9c18-ea4d-4c90-af35-7d83577d6240", "page": "development/release", "section": "build-docker-images-action", "text": "\nBuild docker images Action\u00b6\nThe Build docker images workflow is the second one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version, e.g. 0.1.0-rc1\n\nNote the lack of the v prefix here\n\n\n\n\nThis workflow will then run unit tests and build a series of Docker images that will be automatically pushed to DockerHub.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "3f067880-253c-4ab5-91fa-fc6e57de8b17", "page": "development/release", "section": "add-go-module-tags", "text": "\nAdd Go module tags\u00b6\nGo module versions are mapped to VCS versions via semantic version tags.\nThis process is described in the Go documentation.\nAs we have multiple Go modules in subdirectories of the repository, we need to use corresponding prefixes for our git tags.\nFrom the above link on mapping versions to commits:\n\nIf a module is defined in a subdirectory within the repository, that is, the module subdirectory portion of the module path is not empty, then each tag name must be prefixed with the module subdirectory, followed by a slash. For example, the module golang.org/x/tools/gopls is defined in the gopls subdirectory of the repository with root path golang.org/x/tools. The version v0.4.0 of that module must have the tag named gopls/v0.4.0 in that repository.\n\nThus, for any given release, we should have one tag for the release as a whole plus one corresponding tag for every Go module.\nAt the time of writing, this comprises:\n\napis/go\ncomponents/tls\nhodometer\noperator\nscheduler\n\n\n:warning: Adding these tags is currently a manual process.\n\nTo add the appropriate tags:\n\nCheck out the relevant tag, e.g.\ngit checkout v2.4.0\n\n\n\nFind all relevant Go modules and identify their subdirectory paths, e.g. with\nfind . -name go.mod -exec sed -n '1 { s|^module.*seldon-core/||; s|/v2$||; p }' {} \\;\n\n\n\nAdd corresponding tags for each module, e.g.\ngit tag apis/go/v2.4.0 v2.4.0\n\n\n\nConfirm that all tags point to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "b65c2155-78e6-46d7-93a9-d7b5cdcdc24a", "page": "development/release", "section": "add-go-module-tags", "text": "{} \\;\n\n\n\nAdd corresponding tags for each module, e.g.\ngit tag apis/go/v2.4.0 v2.4.0\n\n\n\nConfirm that all tags point to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear as expected both via the git CLI and also in the GitHub UI.\nA short list of commands to cover all above in single go is:\nVERSION=v2.4.0\ngit tag apis/go/${VERSION} ${VERSION}\ngit tag components/tls/${VERSION} ${VERSION}\ngit tag hodometer/${VERSION} ${VERSION}\ngit tag operator/${VERSION} ${VERSION}\ngit tag scheduler/${VERSION} ${VERSION}\n\ngit push origin apis/go/${VERSION}\ngit push origin components/tls/${VERSION}\ngit push origin hodometer/${VERSION}\ngit push origin operator/${VERSION}\ngit push origin scheduler/${VERSION}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html", "key": "development/release"}}, {"key": "14f17b8c-52a3-4cb6-a1d6-b01d47cf0ac9", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "\nPipeline to Pipeline Examples\u00b6\nRun these examples from the samples folder.\n\nSeldon V2 Pipeline to Pipeline Examples\u00b6\nThis notebook illustrates a series of Pipelines that are joined together.\n\nModels Used\u00b6\n\ngs://seldon-models/triton/simple an example Triton tensorflow model that takes 2 inputs INPUT0 and INPUT1 and adds them to produce OUTPUT0 and also subtracts INPUT1 from INPUT0 to produce OUTPUT1. See here for the original source code and license.\nOther models can be found at https://github.com/SeldonIO/triton-python-examples\n\n\n\nPipeline pulling from one other Pipeline\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cieq5dqi8ufs73flaj4g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n         ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "13ece554-1654-48ba-8235-24d118b09acd", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "   \"name\": \"tfsimple\",\n        \"uid\": \"cieq5dqi8ufs73flaj4g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:26:48.074696631Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "8e608ce1-b641-41d8-a0f7-e50b54c31119", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "    }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "d2e1df91-ecfa-4009-8f6d-0c9f0c94b693", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "   1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "be5bf613-219f-41e6-a2d2-6e4c06fa6e05", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "   1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-extended\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-extended\",\n        \"uid\": \"cieq5h2i8ufs73flaj50\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple2\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {},\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "d2f033f1-bc25-46dc-8dea-dcb766560eed", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": " ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {},\n        \"input\": {\n          \"externalInputs\": [\n            \"tfsimple.outputs\"\n          ],\n          \"tensorMap\": {\n            \"tfsimple.outputs.OUTPUT0\": \"INPUT0\",\n            \"tfsimple.outputs.OUTPUT1\": \"INPUT1\"\n          }\n        }\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:27:01.095715504Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "63f9ec36-3ed4-4af7-82c9-7fcb90142f03", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "    \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:27:01.095715504Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "a88f2599-ee53-496d-99ef-5ffcdf9b75cf", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nPipeline pulling from two other Pipelines\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable |", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "66c211df-55e6-45c2-b50f-f03c3bd3584e", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "unload tfsimple-extended\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nPipeline pulling from two other Pipelines\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cieq6aai8ufs73flaj5g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "801a89f6-342c-4c0b-abb9-6d6ec7c0ca37", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "       }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:28:41.766794892Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "700b2c99-b21d-4a88-bd51-6d9e197533a4", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "      6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "a2b3877a-f641-486c-bd90-36a055956105", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "      0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "4634ee04-f45a-42be-a0e9-7dfdebca7abe", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-combined\nspec:\n  input:\n    externalInputs:\n      - tfsimple-extended.outputs.OUTPUT0\n      - tfsimple-extended2.outputs.OUTPUT1\n    tensorMap:\n      tfsimple-extended.outputs.OUTPUT0: INPUT0\n      tfsimple-extended2.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\", \"uid\":\"cieq6dai8ufs73flaj60\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:53.963808852Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\", \"uid\":\"cieq6dai8ufs73flaj6g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.087670106Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined\", \"uid\":\"cieq6dii8ufs73flaj70\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs.OUTPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.330770841Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id2 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "b1c1f249-730d-4ddd-903a-d493ac82ab5c", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "\"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\", \"uid\":\"cieq6dai8ufs73flaj6g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.087670106Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined\", \"uid\":\"cieq6dii8ufs73flaj70\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs.OUTPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.330770841Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id2 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id2\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id2\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2 --verbose\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "ecf2271b-9ef8-4484-af67-eda939ae3cfa", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2 --verbose\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-e468d06afdab8f52-01]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.model.tfsimple2.outputs\ttest-id2\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-73bd1ee54a94d8fb-01]\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tpipeline=[tfsimple-extended]\ttraceparent=[00-3a6047efa647efc2b3fc5266ae023d23-fee12926788ce3b6-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id]\tx-forwarded-proto=[http]\tx-envoy-upstream-service-time=[5]\tx-seldon-route=[:tfsimple1_1:]\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-4df8459a992e0278-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id2]\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tpipeline=[tfsimple-extended]\ttraceparent=[00-3a6047efa647efc2b3fc5266ae023d23-b2f899a739c5cafd-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id]\tx-forwarded-proto=[http]\tx-envoy-upstream-service-time=[5]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id2\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "441d6423-2d0a-4253-b49f-68b211147fb6", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "\"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tpipeline=[tfsimple-extended]\ttraceparent=[00-3a6047efa647efc2b3fc5266ae023d23-b2f899a739c5cafd-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id]\tx-forwarded-proto=[http]\tx-envoy-upstream-service-time=[5]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id2\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-dfa399143feec23d-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\n\n\n\nseldon pipeline inspect tfsimple-extended2 --offset 2\n\n\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "8fe157b3-af50-41bc-863a-89b72aed819c", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple-combined.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nPipeline pullin from one pipeline with a trigger to another\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "2e4156db-105c-4073-a1be-52949c68ba47", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nPipeline pullin from one pipeline with a trigger to another\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"ciepkmii8ufs73flaj2g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "6de371fd-3255-483b-94f4-8e6320222644", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": " \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:51:06.822716088Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "b3736af4-6277-40f0-b817-55845ff84d94", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "b907424c-1f3a-4a40-96d9-7dd677ee3dd4", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "   \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-trigger.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "9f090491-a7cf-4f8f-82f7-f43a829ec15e", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "   \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-trigger.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-combined-trigger\nspec:\n  input:\n    externalInputs:\n      - tfsimple-extended.outputs\n    externalTriggers:\n      - tfsimple-extended2.outputs\n    tensorMap:\n      tfsimple-extended.outputs.OUTPUT0: INPUT0\n      tfsimple-extended.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined-trigger.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined-trigger -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\", \"uid\":\"ciepkoii8ufs73flaj30\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:14.937544974Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\", \"uid\":\"ciepkoii8ufs73flaj3g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.062097751Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-trigger\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-trigger\", \"uid\":\"ciepkoqi8ufs73flaj40\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs\"],", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "c9620e2a-32d2-477a-a823-7eb44b33eeb5", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined-trigger.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined-trigger -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\", \"uid\":\"ciepkoii8ufs73flaj30\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:14.937544974Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\", \"uid\":\"ciepkoii8ufs73flaj3g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.062097751Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-trigger\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-trigger\", \"uid\":\"ciepkoqi8ufs73flaj40\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs\"], \"externalTriggers\":[\"tfsimple-extended2.outputs\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.326170068Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id3 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id3\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "eaf94c9c-5c6f-4135-984d-d4afba5c4b35", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2\n\n\nseldon.default.model.tfsimple2.outputs\ttest-id3\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "1420149f-6abc-42bb-9caa-27038831d65a", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "\"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended2 --offset 2\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "90878ec9-11da-4b98-83a9-e24eb16e5d61", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined-trigger\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id3\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple-combined-trigger.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined-trigger.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "10b5e54b-7b56-4529-9f7f-9fa032710ef4", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined-trigger.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined-trigger\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nPipeline pulling from one other Pipeline Step\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6m46dpcs73c4qhl0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "1b5d2aaf-1e6b-4511-88f8-af5fb122eefa", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "  {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6m46dpcs73c4qhl0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:15:52.515491456Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "1e220ebe-8c3c-4968-bb82-309b13d24786", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "  \"lastChangeTimestamp\": \"2023-03-10T10:15:52.515491456Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "2dea6b59-48ce-47e0-be45-f575255de771", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": " \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended-step\nspec:\n  input:\n    externalInputs:\n      - tfsimple.step.tfsimple1.outputs\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "e7e548cc-2a80-477d-bbc2-6924ebea59f4", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": " \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended-step\nspec:\n  input:\n    externalInputs:\n      - tfsimple.step.tfsimple1.outputs\n    tensorMap:\n      tfsimple.step.tfsimple1.outputs.OUTPUT0: INPUT0\n      tfsimple.step.tfsimple1.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended-step.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple-extended-step -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-extended-step\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-extended-step\",\n        \"uid\": \"cg5g6ns6dpcs73c4qhlg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple2\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "3cc090d0-3304-4316-a4ce-d3cc4b911a9e", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "       }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {},\n        \"input\": {\n          \"externalInputs\": [\n            \"tfsimple.step.tfsimple1.outputs\"\n          ],\n          \"tensorMap\": {\n            \"tfsimple.step.tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n            \"tfsimple.step.tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n          }\n        }\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:15:59.634720740Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "e1cde696-7f5c-4559-8ce1-716b2d72eae9", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "\"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:15:59.634720740Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple --verbose\n\n\nseldon.default.model.tfsimple1.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\t\tpipeline=[tfsimple]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-90824e4cb70c3242-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\nseldon.default.model.tfsimple1.outputs\tcg5g6ogfh5ss73a44vvg\t{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\t\tx-request-id=[cg5g6ogfh5ss73a44vvg]\tpipeline=[tfsimple]\tx-envoy-upstream-service-time=[8]\tx-seldon-route=[:tfsimple1_1:]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-ca023a540fa463b3-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.pipeline.tfsimple.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\t\tpipeline=[tfsimple]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-843d6ce39292396d-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.pipeline.tfsimple.outputs\tcg5g6ogfh5ss73a44vvg\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\t\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\tx-envoy-upstream-service-time=[8]\tx-seldon-route=[:tfsimple1_1:]\tpipeline=[tfsimple]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-ee7527353e9fe5a2-01]\tx-forwarded-proto=[http]\n\n\n\nseldon pipeline inspect tfsimple-extended-step\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g6ogfh5ss73a44vvg\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\nseldon.default.pipeline.tfsimple-extended-step.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended-step.outputs\tcg5g6ogfh5ss73a44vvg\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended-step\nseldon pipeline unload tfsimple\n\n\n{}\n{}\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n{}\n{}\n\n\n\n\nPipeline pulling from two other Pipeline steps from same model\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6u46dpcs73c4qhm0\",\n        \"version\": 1,\n        \"steps\": [\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "323182d9-664f-4bbf-a80e-8708f4e4d514", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6u46dpcs73c4qhm0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:16:24.433333171Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "f67acc97-6428-4abf-86e2-0d14ad97550f", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "  \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:16:24.433333171Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "283c1b83-0c5b-4549-9040-375bc9867df4", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "     ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "02aec551-e550-4668-898e-38d0f0ac8120", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": "     ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-combined-step\nspec:\n  input:\n    externalInputs:\n      - tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\n      - tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\n    tensorMap:\n      tfsimple-extended.step.tfsimple2.outputs.OUTPUT0: INPUT0\n      tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined-step.yaml\n\n\n{}\n{}\n{}\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "7df035bd-5b6f-4372-a207-f0c88ad9a9f9", "page": "examples/pipeline-to-pipeline", "section": "pipeline-to-pipeline-examples", "text": " - tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\n    tensorMap:\n      tfsimple-extended.step.tfsimple2.outputs.OUTPUT0: INPUT0\n      tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined-step.yaml\n\n\n{}\n{}\n{}\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined-step -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\",\"uid\":\"cg5g7046dpcs73c4qhmg\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple.outputs\"],\"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:32.576588675Z\",\"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\",\"uid\":\"cg5g7046dpcs73c4qhn0\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple.outputs\"],\"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:32.711813099Z\",\"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-step\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-step\",\"uid\":\"cg5g7046dpcs73c4qhng\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\",\"tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\"],\"tensorMap\":{\"tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:33.017843490Z\",\"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\nseldon.default.model.tfsimple1.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\nseldon.default.pipeline.tfsimple.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended2\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple-extended2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined-step\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple-combined-step.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined-step.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined-step\nseldon pipeline unload tfsimple\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n{}\n{}\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "c3c38936-c22f-4325-bf0b-9d3b85e94a3e", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "\nSeldon V2 Pipeline to Pipeline Examples\u00b6\nThis notebook illustrates a series of Pipelines that are joined together.\n\nModels Used\u00b6\n\ngs://seldon-models/triton/simple an example Triton tensorflow model that takes 2 inputs INPUT0 and INPUT1 and adds them to produce OUTPUT0 and also subtracts INPUT1 from INPUT0 to produce OUTPUT1. See here for the original source code and license.\nOther models can be found at https://github.com/SeldonIO/triton-python-examples\n\n\n\nPipeline pulling from one other Pipeline\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cieq5dqi8ufs73flaj4g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "f8ec4204-deb2-49eb-989f-dee069413607", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "   \"uid\": \"cieq5dqi8ufs73flaj4g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:26:48.074696631Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "587a5af6-9497-4593-9668-85e9e3936b36", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": " ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "05c6098d-0ed2-45de-ae27-982260c436b5", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "  16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "e8b44d8d-33d2-48d2-8984-e858ba7574e2", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "  16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-extended\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-extended\",\n        \"uid\": \"cieq5h2i8ufs73flaj50\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple2\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {},\n        \"input\": {\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "aada94cd-2849-486c-914b-01860feb3c0f", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "\"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {},\n        \"input\": {\n          \"externalInputs\": [\n            \"tfsimple.outputs\"\n          ],\n          \"tensorMap\": {\n            \"tfsimple.outputs.OUTPUT0\": \"INPUT0\",\n            \"tfsimple.outputs.OUTPUT1\": \"INPUT1\"\n          }\n        }\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:27:01.095715504Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "3b457803-70d4-4438-b07b-aeedd47d0fec", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "     \"lastChangeTimestamp\": \"2023-06-29T15:27:01.095715504Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\",", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "598d2a91-0b0f-4fc6-bff7-7372f5c64def", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "\"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nPipeline pulling from two other Pipelines\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable |", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "2d8b9100-eb47-4a45-9535-347c492df13d", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "unload tfsimple2\n\n\n\n\nPipeline pulling from two other Pipelines\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cieq6aai8ufs73flaj5g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "27074036-e83f-44b8-8f44-dc5523200064", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "      ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:28:41.766794892Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "9440cd05-74ab-40f4-a1b9-220fd256d6c2", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "     8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "058b2ebb-8cf7-48b6-b2ca-c638a114d7b0", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "     0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "858de8ca-2309-407e-95ef-1d3faf329c3f", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "    tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-combined\nspec:\n  input:\n    externalInputs:\n      - tfsimple-extended.outputs.OUTPUT0\n      - tfsimple-extended2.outputs.OUTPUT1\n    tensorMap:\n      tfsimple-extended.outputs.OUTPUT0: INPUT0\n      tfsimple-extended2.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\", \"uid\":\"cieq6dai8ufs73flaj60\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:53.963808852Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\", \"uid\":\"cieq6dai8ufs73flaj6g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.087670106Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined\", \"uid\":\"cieq6dii8ufs73flaj70\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs.OUTPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.330770841Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id2 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "52827845-836d-45e7-9dbc-cd07fa77deed", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "\"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.087670106Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined\", \"uid\":\"cieq6dii8ufs73flaj70\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs.OUTPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.330770841Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id2 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id2\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id2\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2 --verbose\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-e468d06afdab8f52-01]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.model.tfsimple2.outputs\ttest-id2\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"],", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "db0ec01a-97fe-4e63-b53b-6badfa10e349", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2 --verbose\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-e468d06afdab8f52-01]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.model.tfsimple2.outputs\ttest-id2\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-73bd1ee54a94d8fb-01]\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tpipeline=[tfsimple-extended]\ttraceparent=[00-3a6047efa647efc2b3fc5266ae023d23-fee12926788ce3b6-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id]\tx-forwarded-proto=[http]\tx-envoy-upstream-service-time=[5]\tx-seldon-route=[:tfsimple1_1:]\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-4df8459a992e0278-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id2]\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tpipeline=[tfsimple-extended]\ttraceparent=[00-3a6047efa647efc2b3fc5266ae023d23-b2f899a739c5cafd-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id]\tx-forwarded-proto=[http]\tx-envoy-upstream-service-time=[5]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id2\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "5bd4a1bc-df40-4266-8b9c-c7466eb8e41a", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tpipeline=[tfsimple-extended]\ttraceparent=[00-3a6047efa647efc2b3fc5266ae023d23-b2f899a739c5cafd-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id]\tx-forwarded-proto=[http]\tx-envoy-upstream-service-time=[5]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id2\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-dfa399143feec23d-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\n\n\n\nseldon pipeline inspect tfsimple-extended2 --offset 2\n\n\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "fa946279-38f6-428b-a304-157dbd857640", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple-combined.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nPipeline pullin from one pipeline with a trigger to another\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "a76086c9-83bc-445d-ad2e-7553edd4d85e", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "\"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nPipeline pullin from one pipeline with a trigger to another\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"ciepkmii8ufs73flaj2g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "0d3834ae-cc1b-4906-b591-a40c71ead91b", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": " \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:51:06.822716088Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "bf18f544-299f-435b-9895-8f3f10c05862", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "   {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "452c5a2f-84b4-4470-b41c-002c466fb210", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "   {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-trigger.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "a5980777-25e5-46f2-8c8a-f61bc9acabf1", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": " ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-trigger.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-combined-trigger\nspec:\n  input:\n    externalInputs:\n      - tfsimple-extended.outputs\n    externalTriggers:\n      - tfsimple-extended2.outputs\n    tensorMap:\n      tfsimple-extended.outputs.OUTPUT0: INPUT0\n      tfsimple-extended.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined-trigger.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined-trigger -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\", \"uid\":\"ciepkoii8ufs73flaj30\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:14.937544974Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\", \"uid\":\"ciepkoii8ufs73flaj3g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.062097751Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-trigger\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-trigger\", \"uid\":\"ciepkoqi8ufs73flaj40\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs\"], \"externalTriggers\":[\"tfsimple-extended2.outputs\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.326170068Z\", \"modelsReady\":true}}]}\n\n\nseldon", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "f6b5736b-fdb3-40e3-aa93-415d708b34fe", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "load -f ./pipelines/tfsimple-combined-trigger.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined-trigger -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\", \"uid\":\"ciepkoii8ufs73flaj30\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:14.937544974Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\", \"uid\":\"ciepkoii8ufs73flaj3g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.062097751Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-trigger\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-trigger\", \"uid\":\"ciepkoqi8ufs73flaj40\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs\"], \"externalTriggers\":[\"tfsimple-extended2.outputs\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.326170068Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id3 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id3\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2\n\n\nseldon.default.model.tfsimple2.outputs\ttest-id3\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "482547fd-d215-4289-9201-e8b291418279", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2\n\n\nseldon.default.model.tfsimple2.outputs\ttest-id3\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "01170029-efe1-40c1-b9a7-3bcc77d91d7e", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended2 --offset 2\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\",", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "6b07574a-f886-48ba-99f0-88d4f81fb867", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined-trigger\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id3\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple-combined-trigger.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined-trigger.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined-trigger\nseldon pipeline", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "e7a3bcfe-9a62-40e5-b2ea-3937d65c4318", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined-trigger.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined-trigger\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n\n\nPipeline pulling from one other Pipeline Step\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6m46dpcs73c4qhl0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "99ac59e7-f675-462a-97fb-a3b6ad9fbcf4", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "{\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6m46dpcs73c4qhl0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:15:52.515491456Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "acbdb4c5-b031-4be1-9ffb-b4cf3e4ba5bd", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "  \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "29eb3360-965e-40af-b0c1-66c97610c73d", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "[\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended-step\nspec:\n  input:\n    externalInputs:\n      - tfsimple.step.tfsimple1.outputs\n    tensorMap:\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "532b0dbd-141a-4352-aa9e-d2ca064ff9f3", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "[\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended-step\nspec:\n  input:\n    externalInputs:\n      - tfsimple.step.tfsimple1.outputs\n    tensorMap:\n      tfsimple.step.tfsimple1.outputs.OUTPUT0: INPUT0\n      tfsimple.step.tfsimple1.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended-step.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple-extended-step -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-extended-step\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-extended-step\",\n        \"uid\": \"cg5g6ns6dpcs73c4qhlg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple2\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "6d52a1e6-997b-446e-9595-d7e9c40b8f84", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "      ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {},\n        \"input\": {\n          \"externalInputs\": [\n            \"tfsimple.step.tfsimple1.outputs\"\n          ],\n          \"tensorMap\": {\n            \"tfsimple.step.tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n            \"tfsimple.step.tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n          }\n        }\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:15:59.634720740Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple --verbose\n\n\nseldon.default.model.tfsimple1.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\t\tpipeline=[tfsimple]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-90824e4cb70c3242-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\nseldon.default.model.tfsimple1.outputs\tcg5g6ogfh5ss73a44vvg\t{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\t\tx-request-id=[cg5g6ogfh5ss73a44vvg]\tpipeline=[tfsimple]\tx-envoy-upstream-service-time=[8]\tx-seldon-route=[:tfsimple1_1:]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-ca023a540fa463b3-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.pipeline.tfsimple.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\t\tpipeline=[tfsimple]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-843d6ce39292396d-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.pipeline.tfsimple.outputs\tcg5g6ogfh5ss73a44vvg\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\t\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\tx-envoy-upstream-service-time=[8]\tx-seldon-route=[:tfsimple1_1:]\tpipeline=[tfsimple]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-ee7527353e9fe5a2-01]\tx-forwarded-proto=[http]\n\n\n\nseldon", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "0f259226-d09e-44d6-8873-7906f35c1d8d", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "\"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:15:59.634720740Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple --verbose\n\n\nseldon.default.model.tfsimple1.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\t\tpipeline=[tfsimple]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-90824e4cb70c3242-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\nseldon.default.model.tfsimple1.outputs\tcg5g6ogfh5ss73a44vvg\t{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\t\tx-request-id=[cg5g6ogfh5ss73a44vvg]\tpipeline=[tfsimple]\tx-envoy-upstream-service-time=[8]\tx-seldon-route=[:tfsimple1_1:]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-ca023a540fa463b3-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.pipeline.tfsimple.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\t\tpipeline=[tfsimple]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-843d6ce39292396d-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.pipeline.tfsimple.outputs\tcg5g6ogfh5ss73a44vvg\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\t\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\tx-envoy-upstream-service-time=[8]\tx-seldon-route=[:tfsimple1_1:]\tpipeline=[tfsimple]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-ee7527353e9fe5a2-01]\tx-forwarded-proto=[http]\n\n\n\nseldon pipeline inspect tfsimple-extended-step\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g6ogfh5ss73a44vvg\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\nseldon.default.pipeline.tfsimple-extended-step.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended-step.outputs\tcg5g6ogfh5ss73a44vvg\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended-step\nseldon pipeline unload tfsimple\n\n\n{}\n{}\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n{}\n{}\n\n\n\n\nPipeline pulling from two other Pipeline steps from same model\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6u46dpcs73c4qhm0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "fa157951-4ffa-490c-b655-a0a2b5619576", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "   {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6u46dpcs73c4qhm0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:16:24.433333171Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "f4aa394e-5bd5-4f61-aad8-3df99f9898a2", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "   \"lastChangeTimestamp\": \"2023-03-10T10:16:24.433333171Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "af0e57c7-086b-43bd-a8c8-e4d073c03a89", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "  \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "db6b615a-1e0e-4c3c-a92d-9eb19fb9d539", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "  \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-combined-step\nspec:\n  input:\n    externalInputs:\n      - tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\n      - tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\n    tensorMap:\n      tfsimple-extended.step.tfsimple2.outputs.OUTPUT0: INPUT0\n      tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined-step.yaml\n\n\n{}\n{}\n{}\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined-step -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\",\"uid\":\"cg5g7046dpcs73c4qhmg\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple.outputs\"],\"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:32.576588675Z\",\"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\",\"uid\":\"cg5g7046dpcs73c4qhn0\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple.outputs\"],\"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:32.711813099Z\",\"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-step\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-step\",\"uid\":\"cg5g7046dpcs73c4qhng\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\",\"tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\"],\"tensorMap\":{\"tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:33.017843490Z\",\"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "b821e5d3-38a5-45ea-ac34-ee3a8b582ad0", "page": "examples/pipeline-to-pipeline", "section": "seldon-v2-pipeline-to-pipeline-examples", "text": "   tfsimple-extended.step.tfsimple2.outputs.OUTPUT0: INPUT0\n      tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined-step.yaml\n\n\n{}\n{}\n{}\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined-step -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\",\"uid\":\"cg5g7046dpcs73c4qhmg\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple.outputs\"],\"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:32.576588675Z\",\"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\",\"uid\":\"cg5g7046dpcs73c4qhn0\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple.outputs\"],\"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:32.711813099Z\",\"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-step\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-step\",\"uid\":\"cg5g7046dpcs73c4qhng\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\",\"tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\"],\"tensorMap\":{\"tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:33.017843490Z\",\"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\nseldon.default.model.tfsimple1.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\nseldon.default.pipeline.tfsimple.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended2\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple-extended2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined-step\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple-combined-step.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined-step.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined-step\nseldon pipeline unload tfsimple\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n{}\n{}\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "8837be4f-2c07-4506-8779-40cdeab418a9", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline", "text": "\nPipeline pulling from one other Pipeline\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cieq5dqi8ufs73flaj4g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "5ae8ff14-b0f7-4fc9-9a77-30bb461d25c0", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline", "text": "     ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:26:48.074696631Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "1893da80-91bf-4c49-a883-d4a0cc00c17f", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline", "text": "    8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "bfc0144b-e1c0-4bec-886d-abfb6caa1a22", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline", "text": "    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-extended\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-extended\",\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "dee16dd2-ecd3-4e0a-b657-670854881c83", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline", "text": "INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-extended\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-extended\",\n        \"uid\": \"cieq5h2i8ufs73flaj50\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple2\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {},\n        \"input\": {\n          \"externalInputs\": [\n            \"tfsimple.outputs\"\n          ],\n          \"tensorMap\": {\n            \"tfsimple.outputs.OUTPUT0\": \"INPUT0\",\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "632001df-6e90-4200-826d-cc736a35172c", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline", "text": " \"input\": {\n          \"externalInputs\": [\n            \"tfsimple.outputs\"\n          ],\n          \"tensorMap\": {\n            \"tfsimple.outputs.OUTPUT0\": \"INPUT0\",\n            \"tfsimple.outputs.OUTPUT1\": \"INPUT1\"\n          }\n        }\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:27:01.095715504Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "53b4e560-99c3-4aaa-8cdd-292777f41ddb", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline", "text": "5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\",", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "72621a41-83bf-4099-8170-6edd480db651", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline", "text": "0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "43a85396-ecea-4aff-973b-79b8b445b789", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipelines", "text": "\nPipeline pulling from two other Pipelines\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cieq6aai8ufs73flaj5g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "8826a395-3c37-4a1e-b925-5b948ed49e10", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipelines", "text": "     ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T15:28:41.766794892Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "37788623-cbb3-4fe7-97c6-7de41ee39764", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipelines", "text": "    8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "8dddc986-e3e4-40ac-ac00-a259db5c5fbd", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipelines", "text": "    0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "3741d831-2a66-4fb1-87d7-39183f894de0", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipelines", "text": "   tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-combined\nspec:\n  input:\n    externalInputs:\n      - tfsimple-extended.outputs.OUTPUT0\n      - tfsimple-extended2.outputs.OUTPUT1\n    tensorMap:\n      tfsimple-extended.outputs.OUTPUT0: INPUT0\n      tfsimple-extended2.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\", \"uid\":\"cieq6dai8ufs73flaj60\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:53.963808852Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\", \"uid\":\"cieq6dai8ufs73flaj6g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.087670106Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined\", \"uid\":\"cieq6dii8ufs73flaj70\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs.OUTPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.330770841Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id2 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}},", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "d172baad-4fcd-42a2-90ae-01f956a31667", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipelines", "text": "\"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.087670106Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined\", \"uid\":\"cieq6dii8ufs73flaj70\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs.OUTPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended2.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T15:28:54.330770841Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id2 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id2\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id2\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2 --verbose\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-e468d06afdab8f52-01]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.model.tfsimple2.outputs\ttest-id2\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "6c146a70-ad3b-4bf4-8b7a-2f5bb9482403", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipelines", "text": "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2 --verbose\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-e468d06afdab8f52-01]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.model.tfsimple2.outputs\ttest-id2\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-73bd1ee54a94d8fb-01]\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tpipeline=[tfsimple-extended]\ttraceparent=[00-3a6047efa647efc2b3fc5266ae023d23-fee12926788ce3b6-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id]\tx-forwarded-proto=[http]\tx-envoy-upstream-service-time=[5]\tx-seldon-route=[:tfsimple1_1:]\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id2\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\t\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1:]\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-4df8459a992e0278-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id2]\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tpipeline=[tfsimple-extended]\ttraceparent=[00-3a6047efa647efc2b3fc5266ae023d23-b2f899a739c5cafd-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id]\tx-forwarded-proto=[http]\tx-envoy-upstream-service-time=[5]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id2\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "bf59d0f7-28fa-41b2-9fe1-19728dc919d2", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipelines", "text": "16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tpipeline=[tfsimple-extended]\ttraceparent=[00-3a6047efa647efc2b3fc5266ae023d23-b2f899a739c5cafd-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id]\tx-forwarded-proto=[http]\tx-envoy-upstream-service-time=[5]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id2\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\t\tx-envoy-upstream-service-time=[1]\tpipeline=[tfsimple-extended]\ttraceparent=[00-e438b82ad361ac2d5481bcfc494074d2-dfa399143feec23d-01]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[test-id2]\tx-forwarded-proto=[http]\tx-seldon-route=[:tfsimple1_1: :tfsimple2_1:]\n\n\n\nseldon pipeline inspect tfsimple-extended2 --offset 2\n\n\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "4d75f278-5635-436f-a2b4-323d743cff34", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipelines", "text": "26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple-combined.inputs\ttest-id\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined.outputs\ttest-id\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "f9bc0df7-312b-4ffb-8e2f-7b2a2edd15bf", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pullin-from-one-pipeline-with-a-trigger-to-another", "text": "\nPipeline pullin from one pipeline with a trigger to another\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"ciepkmii8ufs73flaj2g\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "84bb6838-1f02-45e7-8cbe-f4b3c5b7e9d1", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pullin-from-one-pipeline-with-a-trigger-to-another", "text": " }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-29T14:51:06.822716088Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "ed94ab6d-8f70-458c-8069-cf75d723d605", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pullin-from-one-pipeline-with-a-trigger-to-another", "text": "6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "17472ad1-e18c-439c-a041-4310af57ad62", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pullin-from-one-pipeline-with-a-trigger-to-another", "text": "0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-trigger.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "c0743961-2165-45ec-a7df-157c66079575", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pullin-from-one-pipeline-with-a-trigger-to-another", "text": "tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-combined-trigger\nspec:\n  input:\n    externalInputs:\n      - tfsimple-extended.outputs\n    externalTriggers:\n      - tfsimple-extended2.outputs\n    tensorMap:\n      tfsimple-extended.outputs.OUTPUT0: INPUT0\n      tfsimple-extended.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined-trigger.yaml\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined-trigger -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\", \"uid\":\"ciepkoii8ufs73flaj30\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:14.937544974Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\", \"uid\":\"ciepkoii8ufs73flaj3g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.062097751Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-trigger\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-trigger\", \"uid\":\"ciepkoqi8ufs73flaj40\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs\"], \"externalTriggers\":[\"tfsimple-extended2.outputs\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.326170068Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id3 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "837326cf-0ca0-4eb1-95ea-c52f2706bbd8", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pullin-from-one-pipeline-with-a-trigger-to-another", "text": "\"uid\":\"ciepkoii8ufs73flaj3g\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple.outputs\"], \"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.062097751Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-trigger\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-trigger\", \"uid\":\"ciepkoqi8ufs73flaj40\", \"version\":1, \"steps\":[{\"name\":\"tfsimple2\"}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}, \"input\":{\"externalInputs\":[\"tfsimple-extended.outputs\"], \"externalTriggers\":[\"tfsimple-extended2.outputs\"], \"tensorMap\":{\"tfsimple-extended.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple-extended.outputs.OUTPUT1\":\"INPUT1\"}}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:51:15.326170068Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple --header x-request-id=test-id3 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.model.tfsimple1.outputs\ttest-id3\t{\"modelName\":\"tfsimple1_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]}}]}\nseldon.default.pipeline.tfsimple.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2\n\n\nseldon.default.model.tfsimple2.outputs\ttest-id3\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "2db75372-4e7b-4d24-aeb6-e02ef9070a4d", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pullin-from-one-pipeline-with-a-trigger-to-another", "text": "\"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended --offset 2\n\n\nseldon.default.model.tfsimple2.outputs\ttest-id3\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended2 --offset 2\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "118749fa-dc62-4eb1-a502-b2e2948098b8", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pullin-from-one-pipeline-with-a-trigger-to-another", "text": "8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended2 --offset 2\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined-trigger\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "3866617d-ab8d-409e-89d1-2853a43b089f", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pullin-from-one-pipeline-with-a-trigger-to-another", "text": "18, 20, 22, 24, 26, 28, 30, 32]}}]}\nseldon.default.pipeline.tfsimple-extended2.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined-trigger\n\n\nseldon.default.model.tfsimple2.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\ttest-id3\t{\"modelName\":\"tfsimple2_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\nseldon.default.pipeline.tfsimple-combined-trigger.inputs\ttest-id3\t{\"inputs\":[{\"name\":\"INPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}, {\"name\":\"INPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]}}], \"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\", \"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined-trigger.outputs\ttest-id3\t{\"outputs\":[{\"name\":\"OUTPUT0\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]}}, {\"name\":\"OUTPUT1\", \"datatype\":\"INT32\", \"shape\":[\"1\", \"16\"], \"contents\":{\"intContents\":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined-trigger\nseldon pipeline unload tfsimple\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "f872c411-776a-456d-a3bd-0056bcf2a780", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline-step", "text": "\nPipeline pulling from one other Pipeline Step\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6m46dpcs73c4qhl0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "8ad8924d-a999-49f3-93e9-90ba57042936", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline-step", "text": "      ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:15:52.515491456Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "f592084b-2d84-48ce-b545-a3e0f1d4a398", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline-step", "text": "     8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "8bcef6ad-a84b-4842-889b-6683650c3c02", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline-step", "text": "     0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended-step\nspec:\n  input:\n    externalInputs:\n      - tfsimple.step.tfsimple1.outputs\n    tensorMap:\n      tfsimple.step.tfsimple1.outputs.OUTPUT0: INPUT0\n      tfsimple.step.tfsimple1.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended-step.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple-extended-step -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-extended-step\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-extended-step\",\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "b5b36b4d-4ff9-4b7e-b2ee-cdfb9a68aace", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline-step", "text": "tfsimple.step.tfsimple1.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended-step.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple-extended-step -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple-extended-step\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple-extended-step\",\n        \"uid\": \"cg5g6ns6dpcs73c4qhlg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple2\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple2.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {},\n        \"input\": {\n          \"externalInputs\": [\n            \"tfsimple.step.tfsimple1.outputs\"\n          ],\n          \"tensorMap\": {\n            \"tfsimple.step.tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "6591e8e4-565b-4d23-97b6-53df1373b967", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-one-other-pipeline-step", "text": "  \"input\": {\n          \"externalInputs\": [\n            \"tfsimple.step.tfsimple1.outputs\"\n          ],\n          \"tensorMap\": {\n            \"tfsimple.step.tfsimple1.outputs.OUTPUT0\": \"INPUT0\",\n            \"tfsimple.step.tfsimple1.outputs.OUTPUT1\": \"INPUT1\"\n          }\n        }\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:15:59.634720740Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple --verbose\n\n\nseldon.default.model.tfsimple1.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\t\tpipeline=[tfsimple]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-90824e4cb70c3242-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\nseldon.default.model.tfsimple1.outputs\tcg5g6ogfh5ss73a44vvg\t{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\t\tx-request-id=[cg5g6ogfh5ss73a44vvg]\tpipeline=[tfsimple]\tx-envoy-upstream-service-time=[8]\tx-seldon-route=[:tfsimple1_1:]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-ca023a540fa463b3-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.pipeline.tfsimple.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\t\tpipeline=[tfsimple]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-843d6ce39292396d-01]\tx-forwarded-proto=[http]\tx-envoy-expected-rq-timeout-ms=[60000]\nseldon.default.pipeline.tfsimple.outputs\tcg5g6ogfh5ss73a44vvg\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\t\tx-envoy-expected-rq-timeout-ms=[60000]\tx-request-id=[cg5g6ogfh5ss73a44vvg]\tx-envoy-upstream-service-time=[8]\tx-seldon-route=[:tfsimple1_1:]\tpipeline=[tfsimple]\ttraceparent=[00-2c66ff815d920ad238365be52a4467f5-ee7527353e9fe5a2-01]\tx-forwarded-proto=[http]\n\n\n\nseldon pipeline inspect tfsimple-extended-step\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g6ogfh5ss73a44vvg\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\nseldon.default.pipeline.tfsimple-extended-step.inputs\tcg5g6ogfh5ss73a44vvg\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended-step.outputs\tcg5g6ogfh5ss73a44vvg\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended-step\nseldon pipeline unload tfsimple\n\n\n{}\n{}\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n{}\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "1fe1ce47-cce7-445c-9428-478c3fff5ef8", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipeline-steps-from-same-model", "text": "\nPipeline pulling from two other Pipeline steps from same model\u00b6\n\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model load -f ./models/tfsimple2.yaml\n\n\n{}\n{}\n\n\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ./pipelines/tfsimple.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple\nspec:\n  steps:\n    - name: tfsimple1\n  output:\n    steps:\n    - tfsimple1\n\n\nseldon pipeline load -f ./pipelines/tfsimple.yaml\n\n\n{}\n\n\nseldon pipeline status tfsimple -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"tfsimple\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"tfsimple\",\n        \"uid\": \"cg5g6u46dpcs73c4qhm0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"tfsimple1\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "137db83b-c055-4523-9c1d-154ff34b7056", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipeline-steps-from-same-model", "text": " }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"tfsimple1.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-03-10T10:16:24.433333171Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"\",\n  \"outputs\": [\n    {\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "06046995-f0c3-426e-a3b6-3111b517af0c", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipeline-steps-from-same-model", "text": "6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ],\n      \"name\": \"OUTPUT0\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    },\n    {\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "f66683fa-bf23-49e8-bf20-d45acc3a6d7f", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipeline-steps-from-same-model", "text": "0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ],\n      \"name\": \"OUTPUT1\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"datatype\": \"INT32\"\n    }\n  ]\n}\n\n\ncat ./pipelines/tfsimple-extended.yaml\necho \"---\"\ncat ./pipelines/tfsimple-extended2.yaml\necho \"---\"\ncat ./pipelines/tfsimple-combined-step.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "86c6e34a-b350-4dc9-a948-b1dd928a3dfc", "page": "examples/pipeline-to-pipeline", "section": "pipeline-pulling-from-two-other-pipeline-steps-from-same-model", "text": "tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-extended2\nspec:\n  input:\n    externalInputs:\n      - tfsimple.outputs\n    tensorMap:\n      tfsimple.outputs.OUTPUT0: INPUT0\n      tfsimple.outputs.OUTPUT1: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimple-combined-step\nspec:\n  input:\n    externalInputs:\n      - tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\n      - tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\n    tensorMap:\n      tfsimple-extended.step.tfsimple2.outputs.OUTPUT0: INPUT0\n      tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0: INPUT1\n  steps:\n    - name: tfsimple2\n  output:\n    steps:\n    - tfsimple2\n\n\nseldon pipeline load -f ./pipelines/tfsimple-extended.yaml\nseldon pipeline load -f ./pipelines/tfsimple-extended2.yaml\nseldon pipeline load -f ./pipelines/tfsimple-combined-step.yaml\n\n\n{}\n{}\n{}\n\n\nseldon pipeline status tfsimple-extended -w PipelineReady\nseldon pipeline status tfsimple-extended2 -w PipelineReady\nseldon pipeline status tfsimple-combined-step -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimple-extended\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended\",\"uid\":\"cg5g7046dpcs73c4qhmg\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple.outputs\"],\"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:32.576588675Z\",\"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-extended2\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-extended2\",\"uid\":\"cg5g7046dpcs73c4qhn0\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple.outputs\"],\"tensorMap\":{\"tfsimple.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple.outputs.OUTPUT1\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:32.711813099Z\",\"modelsReady\":true}}]}\n{\"pipelineName\":\"tfsimple-combined-step\",\"versions\":[{\"pipeline\":{\"name\":\"tfsimple-combined-step\",\"uid\":\"cg5g7046dpcs73c4qhng\",\"version\":1,\"steps\":[{\"name\":\"tfsimple2\"}],\"output\":{\"steps\":[\"tfsimple2.outputs\"]},\"kubernetesMeta\":{},\"input\":{\"externalInputs\":[\"tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\",\"tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\"],\"tensorMap\":{\"tfsimple-extended.step.tfsimple2.outputs.OUTPUT0\":\"INPUT0\",\"tfsimple-extended2.step.tfsimple2.outputs.OUTPUT0\":\"INPUT1\"}}},\"state\":{\"pipelineVersion\":1,\"status\":\"PipelineReady\",\"reason\":\"created pipeline\",\"lastChangeTimestamp\":\"2023-03-10T10:16:33.017843490Z\",\"modelsReady\":true}}]}\n\n\nseldon pipeline infer tfsimple \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t2,\n\t\t\t\t4,\n\t\t\t\t6,\n\t\t\t\t8,\n\t\t\t\t10,\n\t\t\t\t12,\n\t\t\t\t14,\n\t\t\t\t16,\n\t\t\t\t18,\n\t\t\t\t20,\n\t\t\t\t22,\n\t\t\t\t24,\n\t\t\t\t26,\n\t\t\t\t28,\n\t\t\t\t30,\n\t\t\t\t32\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t},\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t16\n\t\t\t],\n\t\t\t\"datatype\": \"INT32\"\n\t\t}\n\t]\n}\n\n\nseldon pipeline inspect tfsimple\n\n\nseldon.default.model.tfsimple1.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\nseldon.default.model.tfsimple1.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple1_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}}]}\nseldon.default.pipeline.tfsimple.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple-extended.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-extended2\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple-extended2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"]}\nseldon.default.pipeline.tfsimple-extended2.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}]}\n\n\n\nseldon pipeline inspect tfsimple-combined-step\n\n\nseldon.default.model.tfsimple2.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.model.tfsimple2.outputs\tcg5g710fh5ss73a4500g\t{\"modelName\":\"tfsimple2_1\",\"modelVersion\":\"1\",\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\nseldon.default.pipeline.tfsimple-combined-step.inputs\tcg5g710fh5ss73a4500g\t{\"inputs\":[{\"name\":\"INPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}},{\"name\":\"INPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]}}],\"rawInputContents\":[\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\",\"AgAAAAQAAAAGAAAACAAAAAoAAAAMAAAADgAAABAAAAASAAAAFAAAABYAAAAYAAAAGgAAABwAAAAeAAAAIAAAAA==\"]}\nseldon.default.pipeline.tfsimple-combined-step.outputs\tcg5g710fh5ss73a4500g\t{\"outputs\":[{\"name\":\"OUTPUT0\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64]}},{\"name\":\"OUTPUT1\",\"datatype\":\"INT32\",\"shape\":[\"1\",\"16\"],\"contents\":{\"intContents\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]}\n\n\n\nseldon pipeline unload tfsimple-extended\nseldon pipeline unload tfsimple-extended2\nseldon pipeline unload tfsimple-combined-step\nseldon pipeline unload tfsimple\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\n{}\n{}\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-to-pipeline.html", "key": "examples/pipeline-to-pipeline"}}, {"key": "f7720302-3984-4738-b60b-b67230bf7aa1", "page": "cli/docs/seldon_experiment_status", "section": "seldon-experiment-status", "text": "\nseldon experiment status\u00b6\nget status for experiment\n\nSynopsis\u00b6\nget status for experiment\nseldon experiment status <experimentName> [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for status\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -w, --wait                    wait for experiment to be active\n\n\n\n\nSEE ALSO\u00b6\n\nseldon experiment\t - manage experiments\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_experiment_status.html", "key": "cli/docs/seldon_experiment_status"}}, {"key": "8fd633cc-6410-4247-92e6-2e8e9e1cb7ea", "page": "cli/docs/seldon_experiment_status", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for status\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -w, --wait                    wait for experiment to be active\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_experiment_status.html", "key": "cli/docs/seldon_experiment_status"}}, {"key": "d196c541-480e-4ea8-b8bb-e3ddb78b97fa", "page": "examples", "section": "examples", "text": "\nExamples\u00b6\nThis section will provide some examples to allow operations with Seldon to be tested so you can run your own models, experiments, pipelines and explainers.\n\nGetting Started Examples\u00b6\n\nLocal examples\nKubernetes examples\n\n\n\nModels\u00b6\n\nHuggingface models\nModel zoo\nArtifact versions\n\n\n\nPipelines\u00b6\n\nPipeline examples\nPipeline to pipeline examples\n\n\n\nExplainers\u00b6\n\nExplainer examples\n\n\n\nServers\u00b6\n\nCustom Servers\n\n\n\nExperiments\u00b6\n\nLocal experiments\nExperiment version examples\n\n\n\nMaking Inference Requests\u00b6\n\nInference examples\nTritonclient examples\nBatch Inference examples (kubernetes)\nBatch Inference examples (local)\n\n\n\nMisc\u00b6\n\nChecking Pipeline readiness\n\n\n\nFurther Kubernetes Examples\u00b6\n\nKubernetes custerwide example\n\n\n\nAdvanced Examples\u00b6\n\nHuggingface speech to sentiment with explanations pipeline\nProduction image classifier with drift and outlier monitoring\nProduction income classifier with drift, outlier and explanations\nConditional pipeline with pandas query model\nKubernetes Server with PVC\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/index.html", "key": "examples"}}, {"key": "7c752add-247b-4533-b389-ebc48c28ebfc", "page": "kubernetes/kafka", "section": "kafka", "text": "\nKafka\u00b6\nSeldon Core v2 requires Kafka to implement data-centric inference Pipelines.\nSee our architecture documentation to learn more on how Seldon Core v2 uses Kafka.\n\nNote\nKafka integration is required to enable data-centric inference pipelines feature.\nIt is highly advice to configure Kafka integration to take full advantage of Seldon Core v2 features.\n\nWe list alternatives below.\n\nManaged Kafka\u00b6\nWe recommend to use managed Kafka solution for production installation.\nThis allow to take away all the complexity on running secure and scalable Kafka cluster away.\nWe currently have tested and documented integration with following managed solutions:\n\nConfluent Cloud (security: SASL/PLAIN)\nConfluent Cloud (security: SASL/OAUTHBEARER)\nAmazon MSK (security: mTLS)\nAmazon MSK (security: SASL/SCRAM)\nAzure Event Hub (security: SASL/PLAIN)\n\nSee our Kafka security section for configuration examples.\n\n\nSelf Hosted Kafka\u00b6\n\nStrimzi Kafka\u00b6\nSeldon Core v2 requires Kafka to implement data-centric inference Pipelines.\nTo install Kafka for testing purposed in your k8s cluster, we recommend to use Strimzi Operator.\n\nNote\nThis page discuss how to install Strimzi Operator and create Kafka cluster for trial, dev, or testing purposes.\nFor production grade installation consult Strimzi documentation or use one of managed solutions mentioned here.\n\nYou can install and configure Strimzi using either Helm charts or our Ansible playbooks, both documented below.\n\nHelm\u00b6\nThe installation of a Kafka cluster requires the Strimzi Kafka operator installed in the same namespace.\nThis allows to directly use the mTLS certificates created by Strimzi Operator.\nOne option to install the Strimzi operator is via Helm.\nNote that we are using here KRaft instead of Zookeeper for Kafka.\nYou can enable featureGates during Helm installation via:\nhelm upgrade --install strimzi-kafka-operator \\\n  strimzi/strimzi-kafka-operator \\\n  --namespace seldon-mesh --create-namespace \\\n  --set featureGates='+UseKRaft\\,+UseStrimziPodSets'\n\n\n\nWarning\nUse with caution!\nCurrently Kraft installation of", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/kafka/index.html", "key": "kubernetes/kafka"}}, {"key": "3fda482f-d9af-4e5e-b50c-5cdf72388812", "page": "kubernetes/kafka", "section": "kafka", "text": "operator installed in the same namespace.\nThis allows to directly use the mTLS certificates created by Strimzi Operator.\nOne option to install the Strimzi operator is via Helm.\nNote that we are using here KRaft instead of Zookeeper for Kafka.\nYou can enable featureGates during Helm installation via:\nhelm upgrade --install strimzi-kafka-operator \\\n  strimzi/strimzi-kafka-operator \\\n  --namespace seldon-mesh --create-namespace \\\n  --set featureGates='+UseKRaft\\,+UseStrimziPodSets'\n\n\n\nWarning\nUse with caution!\nCurrently Kraft installation of Strimzi is not production ready.\nSee Strimzi documentation and related GitHub issue for further details.\n\nCreate Kafka cluster in seldon-mesh namespace\nhelm upgrade seldon-core-v2-kafka kafka/strimzi -n seldon-mesh --install\n\n\nNote that a specific strimzi operator version is associated with a subset of supported Kafka versions.\n\n\nAnsible\u00b6\nWe provide automation around the installation of a Kafka cluster for Seldon Core v2 to help with development and testing use cases.\nYou can follow the steps defined here to install Kafka via ansible.\nYou can use our Ansible playbooks to install only Strimzi Operator and Kafka cluster by setting extra Ansible vars:\nansible-playbook playbooks/setup-ecosystem.yaml -e full_install=no -e install_kafka=yes\n\n\n\n\nNotes\u00b6\n\nYou can check kafka-examples for more details.\nAs we are using KRaft, use Kafka version 3.3 or above.\nFor security settings check here.\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/kafka/index.html", "key": "kubernetes/kafka"}}, {"key": "c55e1206-b965-4714-96ff-8d6cc5e8363f", "page": "kubernetes/kafka", "section": "self-hosted-kafka", "text": "\nSelf Hosted Kafka\u00b6\n\nStrimzi Kafka\u00b6\nSeldon Core v2 requires Kafka to implement data-centric inference Pipelines.\nTo install Kafka for testing purposed in your k8s cluster, we recommend to use Strimzi Operator.\n\nNote\nThis page discuss how to install Strimzi Operator and create Kafka cluster for trial, dev, or testing purposes.\nFor production grade installation consult Strimzi documentation or use one of managed solutions mentioned here.\n\nYou can install and configure Strimzi using either Helm charts or our Ansible playbooks, both documented below.\n\nHelm\u00b6\nThe installation of a Kafka cluster requires the Strimzi Kafka operator installed in the same namespace.\nThis allows to directly use the mTLS certificates created by Strimzi Operator.\nOne option to install the Strimzi operator is via Helm.\nNote that we are using here KRaft instead of Zookeeper for Kafka.\nYou can enable featureGates during Helm installation via:\nhelm upgrade --install strimzi-kafka-operator \\\n  strimzi/strimzi-kafka-operator \\\n  --namespace seldon-mesh --create-namespace \\\n  --set featureGates='+UseKRaft\\,+UseStrimziPodSets'\n\n\n\nWarning\nUse with caution!\nCurrently Kraft installation of Strimzi is not production ready.\nSee Strimzi documentation and related GitHub issue for further details.\n\nCreate Kafka cluster in seldon-mesh namespace\nhelm upgrade seldon-core-v2-kafka kafka/strimzi -n seldon-mesh --install\n\n\nNote that a specific strimzi operator version is associated with a subset of supported Kafka versions.\n\n\nAnsible\u00b6\nWe provide automation around the installation of a Kafka cluster for Seldon Core v2 to help with development and testing use cases.\nYou can follow the steps defined here to install Kafka via ansible.\nYou can use our Ansible playbooks to install only Strimzi Operator and Kafka cluster by setting extra Ansible vars:\nansible-playbook playbooks/setup-ecosystem.yaml -e full_install=no -e install_kafka=yes\n\n\n\n\nNotes\u00b6\n\nYou can check kafka-examples for more details.\nAs we are using KRaft, use Kafka version", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/kafka/index.html", "key": "kubernetes/kafka"}}, {"key": "a8f4415b-ca94-405d-be11-6a3b71a2786d", "page": "kubernetes/kafka", "section": "self-hosted-kafka", "text": "installation of a Kafka cluster for Seldon Core v2 to help with development and testing use cases.\nYou can follow the steps defined here to install Kafka via ansible.\nYou can use our Ansible playbooks to install only Strimzi Operator and Kafka cluster by setting extra Ansible vars:\nansible-playbook playbooks/setup-ecosystem.yaml -e full_install=no -e install_kafka=yes\n\n\n\n\nNotes\u00b6\n\nYou can check kafka-examples for more details.\nAs we are using KRaft, use Kafka version 3.3 or above.\nFor security settings check here.\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/kafka/index.html", "key": "kubernetes/kafka"}}, {"key": "f6cca140-d1f9-4df1-86fa-a86239ca13b8", "page": "kubernetes/kafka", "section": "strimzi-kafka", "text": "\nStrimzi Kafka\u00b6\nSeldon Core v2 requires Kafka to implement data-centric inference Pipelines.\nTo install Kafka for testing purposed in your k8s cluster, we recommend to use Strimzi Operator.\n\nNote\nThis page discuss how to install Strimzi Operator and create Kafka cluster for trial, dev, or testing purposes.\nFor production grade installation consult Strimzi documentation or use one of managed solutions mentioned here.\n\nYou can install and configure Strimzi using either Helm charts or our Ansible playbooks, both documented below.\n\nHelm\u00b6\nThe installation of a Kafka cluster requires the Strimzi Kafka operator installed in the same namespace.\nThis allows to directly use the mTLS certificates created by Strimzi Operator.\nOne option to install the Strimzi operator is via Helm.\nNote that we are using here KRaft instead of Zookeeper for Kafka.\nYou can enable featureGates during Helm installation via:\nhelm upgrade --install strimzi-kafka-operator \\\n  strimzi/strimzi-kafka-operator \\\n  --namespace seldon-mesh --create-namespace \\\n  --set featureGates='+UseKRaft\\,+UseStrimziPodSets'\n\n\n\nWarning\nUse with caution!\nCurrently Kraft installation of Strimzi is not production ready.\nSee Strimzi documentation and related GitHub issue for further details.\n\nCreate Kafka cluster in seldon-mesh namespace\nhelm upgrade seldon-core-v2-kafka kafka/strimzi -n seldon-mesh --install\n\n\nNote that a specific strimzi operator version is associated with a subset of supported Kafka versions.\n\n\nAnsible\u00b6\nWe provide automation around the installation of a Kafka cluster for Seldon Core v2 to help with development and testing use cases.\nYou can follow the steps defined here to install Kafka via ansible.\nYou can use our Ansible playbooks to install only Strimzi Operator and Kafka cluster by setting extra Ansible vars:\nansible-playbook playbooks/setup-ecosystem.yaml -e full_install=no -e install_kafka=yes\n\n\n\n\nNotes\u00b6\n\nYou can check kafka-examples for more details.\nAs we are using KRaft, use Kafka version 3.3 or", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/kafka/index.html", "key": "kubernetes/kafka"}}, {"key": "9470066d-3a8f-408d-bccc-097d09d83453", "page": "kubernetes/kafka", "section": "strimzi-kafka", "text": "a Kafka cluster for Seldon Core v2 to help with development and testing use cases.\nYou can follow the steps defined here to install Kafka via ansible.\nYou can use our Ansible playbooks to install only Strimzi Operator and Kafka cluster by setting extra Ansible vars:\nansible-playbook playbooks/setup-ecosystem.yaml -e full_install=no -e install_kafka=yes\n\n\n\n\nNotes\u00b6\n\nYou can check kafka-examples for more details.\nAs we are using KRaft, use Kafka version 3.3 or above.\nFor security settings check here.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/kafka/index.html", "key": "kubernetes/kafka"}}, {"key": "247cba64-d012-44db-88d2-1a6e3979eb4e", "page": "kubernetes/kafka", "section": "helm", "text": "\nHelm\u00b6\nThe installation of a Kafka cluster requires the Strimzi Kafka operator installed in the same namespace.\nThis allows to directly use the mTLS certificates created by Strimzi Operator.\nOne option to install the Strimzi operator is via Helm.\nNote that we are using here KRaft instead of Zookeeper for Kafka.\nYou can enable featureGates during Helm installation via:\nhelm upgrade --install strimzi-kafka-operator \\\n  strimzi/strimzi-kafka-operator \\\n  --namespace seldon-mesh --create-namespace \\\n  --set featureGates='+UseKRaft\\,+UseStrimziPodSets'\n\n\n\nWarning\nUse with caution!\nCurrently Kraft installation of Strimzi is not production ready.\nSee Strimzi documentation and related GitHub issue for further details.\n\nCreate Kafka cluster in seldon-mesh namespace\nhelm upgrade seldon-core-v2-kafka kafka/strimzi -n seldon-mesh --install\n\n\nNote that a specific strimzi operator version is associated with a subset of supported Kafka versions.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/kafka/index.html", "key": "kubernetes/kafka"}}, {"key": "87d01879-70a7-40fc-b4a9-a141d192bbdc", "page": "kubernetes/scaling", "section": "scaling", "text": "\nScaling\u00b6\n\nModels\u00b6\nModels can be scaled by setting their replica count, e.g.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.2.3/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n  replicas: 3\n\n\nCurrently, the number of replicas will need not to exceed the replicas of the Server the model is scheduled to.\n\n\nServers\u00b6\nServers can be scaled by setting their replica count, e.g.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver\n  namespace: seldon\nspec:\n  replicas: 4\n  serverConfig: mlserver\n\n\nCurrently, models scheduled to a server can only scale up to the server replica count.\n\n\nInternal Components\u00b6\nSeldon Core v2 runs with several control and dataplane components. The scaling of these resources is discussed below:\n\nPipeline gateway.\n\nThis pipeline gateway handles REST and gRPC synchronous requests to Pipelines. It is stateless and can be scaled based on traffic demand.\n\n\nModel gateway.\n\nThis component pulls model requests from Kafka and sends them to inference servers. It can be scaled up to the partition factor of your Kafka topics. At present we set a uniform partition factor for all topics in one installation of Seldon Core V2.\n\n\nDataflow engine.\n\nThe dataflow engine runs KStream topologies to manage Pipelines. It can run as multiple replicas and the scheduler will balance Pipelines to run across it with a consistent hashing load balancer. Each Pipeline is managed up to the partition factor of Kafka (presently hardwired to one).\n\n\nScheduler.\n\nThis manages the control plane operations. It is presently required to be one replica as it maintains internal state within a BadgerDB held on local persistent storage (stateful set in Kubernetes). Performance tests have shown this not to be a bottleneck at", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/scaling/index.html", "key": "kubernetes/scaling"}}, {"key": "c813c911-04c6-418c-b958-5aa3e28d82e8", "page": "kubernetes/scaling", "section": "scaling", "text": "across it with a consistent hashing load balancer. Each Pipeline is managed up to the partition factor of Kafka (presently hardwired to one).\n\n\nScheduler.\n\nThis manages the control plane operations. It is presently required to be one replica as it maintains internal state within a BadgerDB held on local persistent storage (stateful set in Kubernetes). Performance tests have shown this not to be a bottleneck at present.\n\n\nKubernetes Controller.\n\nThe Kubernetes controller manages resources updates on the cluster which it passes on to the Scheduler. It is by default one replica but has the ability to scale.\n\n\nEnvoy\n\nEnvoy replicas get their state from the scheduler for routing information and can be scaled as needed.\n\n\n\n\nFuture Enhancements\u00b6\n\nAllow configuration of partition factor for data plane consistent hashing load balancer.\nAllow Model gateway and Pipeline gateway to use consistent hashing load balancer.\nConsider control plane scaling options.\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/scaling/index.html", "key": "kubernetes/scaling"}}, {"key": "9f448c50-5ab3-41aa-b177-20280bf02486", "page": "kubernetes/scaling", "section": "internal-components", "text": "\nInternal Components\u00b6\nSeldon Core v2 runs with several control and dataplane components. The scaling of these resources is discussed below:\n\nPipeline gateway.\n\nThis pipeline gateway handles REST and gRPC synchronous requests to Pipelines. It is stateless and can be scaled based on traffic demand.\n\n\nModel gateway.\n\nThis component pulls model requests from Kafka and sends them to inference servers. It can be scaled up to the partition factor of your Kafka topics. At present we set a uniform partition factor for all topics in one installation of Seldon Core V2.\n\n\nDataflow engine.\n\nThe dataflow engine runs KStream topologies to manage Pipelines. It can run as multiple replicas and the scheduler will balance Pipelines to run across it with a consistent hashing load balancer. Each Pipeline is managed up to the partition factor of Kafka (presently hardwired to one).\n\n\nScheduler.\n\nThis manages the control plane operations. It is presently required to be one replica as it maintains internal state within a BadgerDB held on local persistent storage (stateful set in Kubernetes). Performance tests have shown this not to be a bottleneck at present.\n\n\nKubernetes Controller.\n\nThe Kubernetes controller manages resources updates on the cluster which it passes on to the Scheduler. It is by default one replica but has the ability to scale.\n\n\nEnvoy\n\nEnvoy replicas get their state from the scheduler for routing information and can be scaled as needed.\n\n\n\n\nFuture Enhancements\u00b6\n\nAllow configuration of partition factor for data plane consistent hashing load balancer.\nAllow Model gateway and Pipeline gateway to use consistent hashing load balancer.\nConsider control plane scaling options.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/scaling/index.html", "key": "kubernetes/scaling"}}, {"key": "c98a09e7-3dff-4bc1-bf2b-c1b54134602d", "page": "cli/docs/seldon_model_status", "section": "seldon-model-status", "text": "\nseldon model status\u00b6\nget status for model\n\nSynopsis\u00b6\nget the status for a model\nseldon model status <modelName> [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for status\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -w, --wait string             model wait condition\n\n\n\n\nSEE ALSO\u00b6\n\nseldon model\t - manage models\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_model_status.html", "key": "cli/docs/seldon_model_status"}}, {"key": "b812ffe3-37d6-4354-b4cb-3e987660eb15", "page": "cli/docs/seldon_model_status", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for status\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -w, --wait string             model wait condition\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_model_status.html", "key": "cli/docs/seldon_model_status"}}, {"key": "d967e9b4-0783-427c-bb0f-1c6698de72b5", "page": "apis/internal/chainer", "section": "chainer-api", "text": "\nChainer API\u00b6\nThis API is for communication between the Seldon Scheduler and the Seldon dataflow component which manages pipelines.\n\nProto Definition\u00b6\nsyntax = \"proto3\";\n\npackage seldon.mlops.chainer;\n\noption go_package = \"github.com/seldonio/seldon-core/apis/go/v2/mlops/chainer\";\noption java_package = \"io.seldon.mlops.chainer\";\n\nmessage PipelineSubscriptionRequest {\n  string name = 1;\n}\n\nmessage PipelineUpdateMessage {\n  enum PipelineOperation {\n    Unknown = 0;\n    Create = 1;\n    Delete = 2;\n  }\n  PipelineOperation op = 1;\n  string pipeline = 2;\n  uint32 version = 3;\n  string uid = 4;\n  repeated PipelineStepUpdate updates = 5;\n}\n\nmessage PipelineStepUpdate {\n  enum PipelineJoinType {\n    Unknown = 0;\n    Inner = 1;\n    Outer = 2;\n    Any = 3;\n  }\n  // https://docs.google.com/document/d/1tX-uaOvngx1RpEyWEZ4EbEcU8D0OgYuRWVb2UAi85n4/edit\n  // Pipeline Resource example, e.g. transform.outputs.traffic\n  //    seldon.<namespace>.<model name>.<inputs|outputs>.<tensor name>\n  repeated PipelineTopic sources = 1;\n  repeated PipelineTopic triggers = 2;\n  PipelineTopic sink = 3;\n  PipelineJoinType inputJoinTy = 4;\n  PipelineJoinType triggersJoinTy = 5;\n  bool passEmptyResponses = 6; // Forward empty response to following steps, default false\n  optional uint32 joinWindowMs = 7; // Join window millisecs, some nozero default (TBD)\n  repeated PipelineTensorMapping tensorMap = 8; // optional list of tensor name mappings\n  Batch batch = 9; // Batch settings\n}\n\nmessage PipelineTensorMapping {\n  string pipelineName = 1;\n  string topicAndTensor = 2;\n  string tensorName = 3;\n}\n\nmessage PipelineTopic {\n  string pipelineName = 1;\n  string topicName = 2;\n  optional string tensor = 3;\n}\n\nmessage Batch {\n  optional uint32 size = 1;\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/chainer.html", "key": "apis/internal/chainer"}}, {"key": "1b12492b-751b-4c01-8b08-cbba3660d6fd", "page": "apis/internal/chainer", "section": "chainer-api", "text": " repeated PipelineTensorMapping tensorMap = 8; // optional list of tensor name mappings\n  Batch batch = 9; // Batch settings\n}\n\nmessage PipelineTensorMapping {\n  string pipelineName = 1;\n  string topicAndTensor = 2;\n  string tensorName = 3;\n}\n\nmessage PipelineTopic {\n  string pipelineName = 1;\n  string topicName = 2;\n  optional string tensor = 3;\n}\n\nmessage Batch {\n  optional uint32 size = 1;\n  optional uint32 windowMs = 2;\n  bool rolling = 3;\n}\n\nmessage PipelineUpdateStatusMessage {\n  // TODO - include `name` to identify transformer message comes from\n  PipelineUpdateMessage update = 1;\n  bool success = 2;\n  string reason = 3;\n}\n\nmessage PipelineUpdateStatusResponse {\n}\n\nservice Chainer {\n  rpc SubscribePipelineUpdates(PipelineSubscriptionRequest) returns (stream PipelineUpdateMessage) {};\n  rpc PipelineUpdateEvent(PipelineUpdateStatusMessage) returns (PipelineUpdateStatusResponse) {};\n}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/chainer.html", "key": "apis/internal/chainer"}}, {"key": "cdb8b74b-c9f6-48d5-9d96-6e8e69d700cc", "page": "apis/internal/chainer", "section": "proto-definition", "text": "\nProto Definition\u00b6\nsyntax = \"proto3\";\n\npackage seldon.mlops.chainer;\n\noption go_package = \"github.com/seldonio/seldon-core/apis/go/v2/mlops/chainer\";\noption java_package = \"io.seldon.mlops.chainer\";\n\nmessage PipelineSubscriptionRequest {\n  string name = 1;\n}\n\nmessage PipelineUpdateMessage {\n  enum PipelineOperation {\n    Unknown = 0;\n    Create = 1;\n    Delete = 2;\n  }\n  PipelineOperation op = 1;\n  string pipeline = 2;\n  uint32 version = 3;\n  string uid = 4;\n  repeated PipelineStepUpdate updates = 5;\n}\n\nmessage PipelineStepUpdate {\n  enum PipelineJoinType {\n    Unknown = 0;\n    Inner = 1;\n    Outer = 2;\n    Any = 3;\n  }\n  // https://docs.google.com/document/d/1tX-uaOvngx1RpEyWEZ4EbEcU8D0OgYuRWVb2UAi85n4/edit\n  // Pipeline Resource example, e.g. transform.outputs.traffic\n  //    seldon.<namespace>.<model name>.<inputs|outputs>.<tensor name>\n  repeated PipelineTopic sources = 1;\n  repeated PipelineTopic triggers = 2;\n  PipelineTopic sink = 3;\n  PipelineJoinType inputJoinTy = 4;\n  PipelineJoinType triggersJoinTy = 5;\n  bool passEmptyResponses = 6; // Forward empty response to following steps, default false\n  optional uint32 joinWindowMs = 7; // Join window millisecs, some nozero default (TBD)\n  repeated PipelineTensorMapping tensorMap = 8; // optional list of tensor name mappings\n  Batch batch = 9; // Batch settings\n}\n\nmessage PipelineTensorMapping {\n  string pipelineName = 1;\n  string topicAndTensor = 2;\n  string tensorName = 3;\n}\n\nmessage PipelineTopic {\n  string pipelineName = 1;\n  string topicName = 2;\n  optional string tensor = 3;\n}\n\nmessage Batch {\n  optional uint32 size = 1;\n  optional uint32 windowMs = 2;\n  bool rolling = 3;\n}\n\nmessage PipelineUpdateStatusMessage {\n  // TODO -", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/chainer.html", "key": "apis/internal/chainer"}}, {"key": "1d673ee1-08d6-4294-b46d-d4f28a14bdfd", "page": "apis/internal/chainer", "section": "proto-definition", "text": "9; // Batch settings\n}\n\nmessage PipelineTensorMapping {\n  string pipelineName = 1;\n  string topicAndTensor = 2;\n  string tensorName = 3;\n}\n\nmessage PipelineTopic {\n  string pipelineName = 1;\n  string topicName = 2;\n  optional string tensor = 3;\n}\n\nmessage Batch {\n  optional uint32 size = 1;\n  optional uint32 windowMs = 2;\n  bool rolling = 3;\n}\n\nmessage PipelineUpdateStatusMessage {\n  // TODO - include `name` to identify transformer message comes from\n  PipelineUpdateMessage update = 1;\n  bool success = 2;\n  string reason = 3;\n}\n\nmessage PipelineUpdateStatusResponse {\n}\n\nservice Chainer {\n  rpc SubscribePipelineUpdates(PipelineSubscriptionRequest) returns (stream PipelineUpdateMessage) {};\n  rpc PipelineUpdateEvent(PipelineUpdateStatusMessage) returns (PipelineUpdateStatusResponse) {};\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/chainer.html", "key": "apis/internal/chainer"}}, {"key": "18ec5bbe-b9c5-4421-b3c0-5ec29f34f38a", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "\nOpen Inference Protocol\u00b6\nThis page describes a predict/inference API independent of any\nspecific ML/DL framework and model server. These APIs are\nable to support both easy-to-use and high-performance use cases.\nBy implementing this protocol both\ninference clients and servers will increase their utility and\nportability by being able to operate seamlessly on platforms that have\nstandardized around this API. This protocol is endorsed by NVIDIA\nTriton Inference Server, TensorFlow Serving, and ONNX Runtime\nServer. It is sometimes referred to by its old name \u201cV2 Inference Protocol\u201d.\nFor an inference server to be compliant with this protocol the server\nmust implement all APIs described below, except where an optional\nfeature is explicitly noted. A compliant inference server may choose\nto implement either or both of the HTTP/REST API and the GRPC API.\nThe protocol supports an extension mechanism as a required part of the\nAPI, but this document does not propose any specific extensions. Any\nspecific extensions will be proposed separately.\n\nHTTP/REST\u00b6\nA compliant server must implement the health, metadata, and inference\nAPIs described in this section.\nThe HTTP/REST API uses JSON because it is widely supported and\nlanguage independent. In all JSON schemas shown in this document\n\\(number, \\)string, \\(boolean, \\)object and $array refer to the\nfundamental JSON types. #optional indicates an optional JSON field.\nAll strings in all contexts are case-sensitive.\nFor Seldon a server must recognize the following URLs. The\nversions portion of the URL is shown as optional to allow\nimplementations that don\u2019t support versioning or for cases when the\nuser does not want to specify a specific model version (in which case\nthe server will choose a version based on its own policies).\nHealth:\n GET v2/health/live\n GET v2/health/ready\n GET v2/models/${MODEL_NAME}[/versions/${MODEL_VERSION}]/ready\n\n\nServer Metadata:\n GET", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "3af4f76f-7be8-4bc8-8699-624c37f650c7", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "strings in all contexts are case-sensitive.\nFor Seldon a server must recognize the following URLs. The\nversions portion of the URL is shown as optional to allow\nimplementations that don\u2019t support versioning or for cases when the\nuser does not want to specify a specific model version (in which case\nthe server will choose a version based on its own policies).\nHealth:\n GET v2/health/live\n GET v2/health/ready\n GET v2/models/${MODEL_NAME}[/versions/${MODEL_VERSION}]/ready\n\n\nServer Metadata:\n GET v2\n\n\nModel Metadata:\n GET v2/models/${MODEL_NAME}[/versions/${MODEL_VERSION}]\n\n\nInference:\n POST v2/models/${MODEL_NAME}[/versions/${MODEL_VERSION}]/infer\n\n\n\nHealth\u00b6\nA health request is made with an HTTP GET to a health endpoint. The\nHTTP response status code indicates a boolean result for the health\nrequest. A 200 status code indicates true and a 4xx status code\nindicates false. The HTTP response body should be empty. There are\nthree health APIs.\n\nServer Live\u00b6\nThe \u201cserver live\u201d API indicates if the inference server is able to\nreceive and respond to metadata and inference requests. The \u201cserver\nlive\u201d API can be used directly to implement the Kubernetes\nlivenessProbe.\n\n\nServer Ready\u00b6\nThe \u201cserver ready\u201d health API indicates if all the models are ready\nfor inferencing. The \u201cserver ready\u201d health API can be used directly to\nimplement the Kubernetes readinessProbe.\n\n\nModel Ready\u00b6\nThe \u201cmodel ready\u201d health API indicates if a specific model is ready\nfor inferencing. The model name and (optionally) version must be\navailable in the URL. If a version is not provided the server may\nchoose a version based on its own policies.\n\n\n\nServer Metadata\u00b6\nThe server metadata endpoint provides information about the server. A\nserver metadata request is made with an HTTP GET to a server metadata\nendpoint. In the corresponding response the HTTP body contains the\nServer Metadata Response JSON Object\nor the\nServer Metadata Response JSON Error Object.\n\nServer Metadata Response JSON", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "094f307e-9541-40b8-beee-b5c9e8c918fa", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "be\navailable in the URL. If a version is not provided the server may\nchoose a version based on its own policies.\n\n\n\nServer Metadata\u00b6\nThe server metadata endpoint provides information about the server. A\nserver metadata request is made with an HTTP GET to a server metadata\nendpoint. In the corresponding response the HTTP body contains the\nServer Metadata Response JSON Object\nor the\nServer Metadata Response JSON Error Object.\n\nServer Metadata Response JSON Object\u00b6\nA successful server metadata request is indicated by a 200 HTTP status\ncode. The server metadata response object, identified as\n$metadata_server_response, is returned in the HTTP body.\n    $metadata_server_response =\n    {\n      \"name\" : $string,\n      \"version\" : $string,\n      \"extensions\" : [ $string, ... ]\n    }\n\n\n\n\u201cname\u201d : A descriptive name for the server.\n\u201cversion\u201d : The server version.\n\u201cextensions\u201d : The extensions supported by the server. Currently no\nstandard extensions are defined. Individual inference servers may\ndefine and document their own extensions.\n\n\n\nServer Metadata Response JSON Error Object\u00b6\nA failed server metadata request must be indicated by an HTTP error\nstatus (typically 400). The HTTP body must contain the\n$metadata_server_error_response object.\n    $metadata_server_error_response =\n    {\n      \"error\": $string\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\n\nModel Metadata\u00b6\nThe per-model metadata endpoint provides information about a model. A\nmodel metadata request is made with an HTTP GET to a model metadata\nendpoint. In the corresponding response the HTTP body contains the\nModel Metadata Response JSON Object\nor the\nModel Metadata Response JSON Error Object.\nThe model name", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "3aedda19-d48a-491c-a5c4-1f22ca99ed26", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "  {\n      \"error\": $string\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\n\nModel Metadata\u00b6\nThe per-model metadata endpoint provides information about a model. A\nmodel metadata request is made with an HTTP GET to a model metadata\nendpoint. In the corresponding response the HTTP body contains the\nModel Metadata Response JSON Object\nor the\nModel Metadata Response JSON Error Object.\nThe model name and (optionally) version must be available in the\nURL. If a version is not provided the server may choose a version\nbased on its own policies or return an error.\n\nModel Metadata Response JSON Object\u00b6\nA successful model metadata request is indicated by a 200 HTTP status\ncode. The metadata response object, identified as\n$metadata_model_response, is returned in the HTTP body for every\nsuccessful model metadata request.\n    $metadata_model_response =\n    {\n      \"name\" : $string,\n      \"versions\" : [ $string, ... ] #optional,\n      \"platform\" : $string,\n      \"inputs\" : [ $metadata_tensor, ... ],\n      \"outputs\" : [ $metadata_tensor, ... ]\n    }\n\n\n\n\u201cname\u201d : The name of the model.\n\u201cversions\u201d : The model versions that may be explicitly requested via\nthe appropriate endpoint. Optional for servers that don\u2019t support\nversions. Optional for models that don\u2019t allow a version to be\nexplicitly requested.\n\u201cplatform\u201d : The framework/backend for the model. See\nPlatforms.\n\u201cinputs\u201d : The inputs required by the model.\n\u201coutputs\u201d : The outputs produced by the model.\n\nEach model input and output tensors\u2019 metadata is described with a\n$metadata_tensor object.\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "4b67cc6b-7a1c-48d2-baf4-50842c4c1a7d", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "model.\n\u201cversions\u201d : The model versions that may be explicitly requested via\nthe appropriate endpoint. Optional for servers that don\u2019t support\nversions. Optional for models that don\u2019t allow a version to be\nexplicitly requested.\n\u201cplatform\u201d : The framework/backend for the model. See\nPlatforms.\n\u201cinputs\u201d : The inputs required by the model.\n\u201coutputs\u201d : The outputs produced by the model.\n\nEach model input and output tensors\u2019 metadata is described with a\n$metadata_tensor object.\n    $metadata_tensor =\n    {\n      \"name\" : $string,\n      \"datatype\" : $string,\n      \"shape\" : [ $number, ... ]\n    }\n\n\n\n\u201cname\u201d : The name of the tensor.\n\u201cdatatype\u201d : The data-type of the tensor elements as defined in\nTensor Data Types.\n\u201cshape\u201d : The shape of the tensor. Variable-size dimensions are\nspecified as -1.\n\n\n\nModel Metadata Response JSON Error Object\u00b6\nA failed model metadata request must be indicated by an HTTP error\nstatus (typically 400). The HTTP body must contain the\n$metadata_model_error_response object.\n    $metadata_model_error_response =\n    {\n      \"error\": $string\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\n\nInference\u00b6\nAn inference request is made with an HTTP POST to an inference\nendpoint. In the request the HTTP body contains the\nInference Request JSON Object. In\nthe corresponding response the HTTP body contains the\nInference Response JSON Object or\nInference Response JSON Error Object. See\nInference Request Examples for some\nexample HTTP/REST requests and responses.\n\nInference Request JSON Object\u00b6\nThe inference request object, identified as $inference_request, is\nrequired in the HTTP body of the POST request. The model name and\n(optionally) version must be available", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "83fe0d9e-9736-43cd-98c3-48a22fc6367a", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "an inference\nendpoint. In the request the HTTP body contains the\nInference Request JSON Object. In\nthe corresponding response the HTTP body contains the\nInference Response JSON Object or\nInference Response JSON Error Object. See\nInference Request Examples for some\nexample HTTP/REST requests and responses.\n\nInference Request JSON Object\u00b6\nThe inference request object, identified as $inference_request, is\nrequired in the HTTP body of the POST request. The model name and\n(optionally) version must be available in the URL. If a version is not\nprovided the server may choose a version based on its own policies or\nreturn an error.\n    $inference_request =\n    {\n      \"id\" : $string #optional,\n      \"parameters\" : $parameters #optional,\n      \"inputs\" : [ $request_input, ... ],\n      \"outputs\" : [ $request_output, ... ] #optional\n    }\n\n\n\n\u201cid\u201d : An identifier for this request. Optional, but if specified\nthis identifier must be returned in the response.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninference request expressed as key/value pairs. See\nParameters for more information.\n\u201cinputs\u201d : The input tensors. Each input is described using the\n$request_input schema defined in Request Input.\n\u201coutputs\u201d : The output tensors requested for this inference. Each\nrequested output is described using the $request_output schema\ndefined in Request Output. Optional, if not\nspecified all outputs produced by the model will be returned using\ndefault $request_output settings.\n\n\nRequest Input\u00b6\nThe $request_input JSON describes an input to the model. If the\ninput is batched, the shape and data must represent the full shape and\ncontents of the entire batch.\n    $request_input", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "44bd4fb1-e6f1-480f-9da7-67227cc291b5", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "The output tensors requested for this inference. Each\nrequested output is described using the $request_output schema\ndefined in Request Output. Optional, if not\nspecified all outputs produced by the model will be returned using\ndefault $request_output settings.\n\n\nRequest Input\u00b6\nThe $request_input JSON describes an input to the model. If the\ninput is batched, the shape and data must represent the full shape and\ncontents of the entire batch.\n    $request_input =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the input tensor.\n\u201cshape\u201d : The shape of the input tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the input tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n\nRequest Output\u00b6\nThe $request_output JSON is used to request which output tensors\nshould be returned from the model.\n    $request_output =\n    {\n      \"name\" : $string,\n      \"parameters\" : $parameters #optional,\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cparameters\u201d : An object containing zero or more parameters for this\noutput expressed as key/value pairs. See Parameters\nfor more information.\n\n\n\n\nInference Response", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "e77ba380-1630-4dc6-be7f-aedc7129e524", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "which output tensors\nshould be returned from the model.\n    $request_output =\n    {\n      \"name\" : $string,\n      \"parameters\" : $parameters #optional,\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cparameters\u201d : An object containing zero or more parameters for this\noutput expressed as key/value pairs. See Parameters\nfor more information.\n\n\n\n\nInference Response JSON Object\u00b6\nA successful inference request is indicated by a 200 HTTP status\ncode. The inference response object, identified as\n$inference_response, is returned in the HTTP body.\n    $inference_response =\n    {\n      \"model_name\" : $string,\n      \"model_version\" : $string #optional,\n      \"id\" : $string,\n      \"parameters\" : $parameters #optional,\n      \"outputs\" : [ $response_output, ... ]\n    }\n\n\n\n\u201cmodel_name\u201d : The name of the model used for inference.\n\u201cmodel_version\u201d : The specific model version used for\ninference. Inference servers that do not implement versioning should\nnot provide this field in the response.\n\u201cid\u201d : The \u201cid\u201d identifier given in the request, if any.\n\u201cparameters\u201d : An object containing zero or more parameters for this\nresponse expressed as key/value pairs. See Parameters\nfor more information.\n\u201coutputs\u201d : The output tensors. Each output is described using the\n$response_output schema defined in\nResponse Output.\n\n\nResponse Output\u00b6\nThe $response_output JSON describes an output from the model. If the\noutput is batched, the shape and data represents the full shape of the\nentire batch.\n    $response_output =\n    {\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "ce79bd79-7709-4690-a09f-595eb6eab4f8", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "more parameters for this\nresponse expressed as key/value pairs. See Parameters\nfor more information.\n\u201coutputs\u201d : The output tensors. Each output is described using the\n$response_output schema defined in\nResponse Output.\n\n\nResponse Output\u00b6\nThe $response_output JSON describes an output from the model. If the\noutput is batched, the shape and data represents the full shape of the\nentire batch.\n    $response_output =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cshape\u201d : The shape of the output tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the output tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n\n\nInference Response JSON Error Object\u00b6\nA failed inference request must be indicated by an HTTP error status\n(typically 400). The HTTP body must contain the\n$inference_error_response object.\n    $inference_error_response =\n    {\n      \"error\": <error message string>\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\nInference Request Examples\u00b6\nThe following example shows an inference request to a model with two\ninputs and one output. The HTTP Content-Length header gives the size\nof the JSON object.\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "829607f5-d75f-459b-8a1f-b46481fdeee8", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "HTTP body must contain the\n$inference_error_response object.\n    $inference_error_response =\n    {\n      \"error\": <error message string>\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\nInference Request Examples\u00b6\nThe following example shows an inference request to a model with two\ninputs and one output. The HTTP Content-Length header gives the size\nof the JSON object.\n    POST /v2/models/mymodel/infer HTTP/1.1\n    Host: localhost:8000\n    Content-Type: application/json\n    Content-Length: <xx>\n    {\n      \"id\" : \"42\",\n      \"inputs\" : [\n        {\n          \"name\" : \"input0\",\n          \"shape\" : [ 2, 2 ],\n          \"datatype\" : \"UINT32\",\n          \"data\" : [ 1, 2, 3, 4 ]\n        },\n        {\n          \"name\" : \"input1\",\n          \"shape\" : [ 3 ],\n          \"datatype\" : \"BOOL\",\n          \"data\" : [ true ]\n        }\n      ],\n      \"outputs\" : [\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "859627a9-c064-49b6-92d1-18c5b4573c4d", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": ": \"input1\",\n          \"shape\" : [ 3 ],\n          \"datatype\" : \"BOOL\",\n          \"data\" : [ true ]\n        }\n      ],\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\"\n        }\n      ]\n    }\n\n\nFor the above request the inference server must return the \u201coutput0\u201d\noutput tensor. Assuming the model returns a [ 3, 2 ] tensor of data\ntype FP32 the following response would be returned.\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n    Content-Length: <yy>\n    {\n      \"id\" : \"42\"\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\",\n          \"shape\" : [ 3, 2 ],\n          \"datatype\"  : \"FP32\",\n          \"data\" : [ 1.0, 1.1, 2.0, 2.1, 3.0, 3.1 ]\n        }\n      ]\n    }\n\n\n\n\n\nParameters\u00b6\nThe *\\(parameters* JSON describes", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "0e5f3da3-bd02-4e89-8270-f50962af59f8", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "     \"shape\" : [ 3, 2 ],\n          \"datatype\"  : \"FP32\",\n          \"data\" : [ 1.0, 1.1, 2.0, 2.1, 3.0, 3.1 ]\n        }\n      ]\n    }\n\n\n\n\n\nParameters\u00b6\nThe *\\(parameters* JSON describes zero or more \u201cname\u201d/\u201dvalue\u201d pairs,\nwhere the \u201cname\u201d is the name of the parameter and the \u201cvalue\u201d is a\n\\)string, \\(number, or \\)boolean.\n    $parameters =\n    {\n      $parameter, ...\n    }\n\n    $parameter = $string : $string | $number | $boolean\n\n\nCurrently no parameters are defined. As required a future proposal may\ndefine one or more standard parameters to allow portable functionality\nacross different inference servers. A server can implement\nserver-specific parameters to provide non-standard capabilities.\n\n\nTensor Data\u00b6\nTensor data must be presented in row-major order of the tensor\nelements. Element values must be given in \u201clinear\u201d order without any\nstride or padding between elements. Tensor elements may be presented\nin their nature multi-dimensional representation, or as a flattened\none-dimensional representation.\nTensor data given explicitly is provided in a JSON array. Each element\nof the array may be an integer, floating-point number, string or\nboolean value. The server can decide to coerce each element to the\nrequired type or return an error if an unexpected value is\nreceived. Note that fp16 is problematic to communicate explicitly\nsince there is not a standard fp16 representation across backends nor\ntypically the programmatic support to create the fp16 representation\nfor a", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "901df008-0910-4157-94ac-cfc37df0cce1", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "in a JSON array. Each element\nof the array may be an integer, floating-point number, string or\nboolean value. The server can decide to coerce each element to the\nrequired type or return an error if an unexpected value is\nreceived. Note that fp16 is problematic to communicate explicitly\nsince there is not a standard fp16 representation across backends nor\ntypically the programmatic support to create the fp16 representation\nfor a JSON number.\nFor example, the 2-dimensional matrix:\n[ 1 2\n  4 5 ]\n\n\nCan be represented in its natural format as:\n\"data\" : [ [ 1, 2 ], [ 4, 5 ] ]\n\n\nOr in a flattened one-dimensional representation:\n\"data\" : [ 1, 2, 4, 5 ]\n\n\n\n\n\nGRPC\u00b6\nThe GRPC API closely follows the concepts defined in the\nHTTP/REST API. A compliant server must implement the\nhealth, metadata, and inference APIs described in this section.\nAll strings in all contexts are case-sensitive.\nThe GRPC definition of the service is:\n//\n// Inference Server GRPC endpoints.\n//\nservice GRPCInferenceService\n{\n  // Check liveness of the inference server.\n  rpc ServerLive(ServerLiveRequest) returns (ServerLiveResponse) {}\n\n  // Check readiness of the inference server.\n  rpc ServerReady(ServerReadyRequest) returns (ServerReadyResponse) {}\n\n  // Check readiness of a model in the inference server.\n  rpc ModelReady(ModelReadyRequest) returns (ModelReadyResponse) {}\n\n  // Get server metadata.\n  rpc ServerMetadata(ServerMetadataRequest) returns (ServerMetadataResponse) {}\n\n  // Get model metadata.\n  rpc ModelMetadata(ModelMetadataRequest) returns (ModelMetadataResponse) {}\n\n  // Perform inference using a specific model.\n  rpc ModelInfer(ModelInferRequest) returns (ModelInferResponse) {}\n}\n\n\n\nHealth\u00b6\nA health request is made using the ServerLive, ServerReady, or\nModelReady endpoint. For each of these endpoints errors are indicated\nby the google.rpc.Status returned for the request. The OK code\nindicates success", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "a94114e2-1043-4adb-bf70-2cdd16582ebd", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": " // Get server metadata.\n  rpc ServerMetadata(ServerMetadataRequest) returns (ServerMetadataResponse) {}\n\n  // Get model metadata.\n  rpc ModelMetadata(ModelMetadataRequest) returns (ModelMetadataResponse) {}\n\n  // Perform inference using a specific model.\n  rpc ModelInfer(ModelInferRequest) returns (ModelInferResponse) {}\n}\n\n\n\nHealth\u00b6\nA health request is made using the ServerLive, ServerReady, or\nModelReady endpoint. For each of these endpoints errors are indicated\nby the google.rpc.Status returned for the request. The OK code\nindicates success and other codes indicate failure.\n\nServer Live\u00b6\nThe ServerLive API indicates if the inference server is able to\nreceive and respond to metadata and inference requests. The request\nand response messages for ServerLive are:\nmessage ServerLiveRequest {}\n\nmessage ServerLiveResponse\n{\n  // True if the inference server is live, false if not live.\n  bool live = 1;\n}\n\n\n\n\nServer Ready\u00b6\nThe ServerReady API indicates if the server is ready for\ninferencing. The request and response messages for ServerReady are:\nmessage ServerReadyRequest {}\n\nmessage ServerReadyResponse\n{\n  // True if the inference server is ready, false if not ready.\n  bool ready = 1;\n}\n\n\n\n\nModel Ready\u00b6\nThe ModelReady API indicates if a specific model is ready for\ninferencing. The request and response messages for ModelReady are:\nmessage ModelReadyRequest\n{\n  // The name of the model to check for readiness.\n  string name = 1;\n\n  // The version of the model to check for readiness. If not given the\n  // server will choose a version based on the model and internal policy.\n  string version = 2;\n}\n\nmessage ModelReadyResponse\n{\n  // True if the model is ready, false if not ready.\n  bool ready = 1;\n}\n\n\n\n\n\nServer Metadata\u00b6\nThe ServerMetadata API provides information about the server. Errors\nare indicated by the google.rpc.Status returned", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "13a737eb-acc7-4f48-a98a-b5388429cbd5", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "The version of the model to check for readiness. If not given the\n  // server will choose a version based on the model and internal policy.\n  string version = 2;\n}\n\nmessage ModelReadyResponse\n{\n  // True if the model is ready, false if not ready.\n  bool ready = 1;\n}\n\n\n\n\n\nServer Metadata\u00b6\nThe ServerMetadata API provides information about the server. Errors\nare indicated by the google.rpc.Status returned for the request. The\nOK code indicates success and other codes indicate failure. The\nrequest and response messages for ServerMetadata are:\nmessage ServerMetadataRequest {}\n\nmessage ServerMetadataResponse\n{\n  // The server name.\n  string name = 1;\n\n  // The server version.\n  string version = 2;\n\n  // The extensions supported by the server.\n  repeated string extensions = 3;\n}\n\n\n\n\nModel Metadata\u00b6\nThe per-model metadata API provides information about a model. Errors\nare indicated by the google.rpc.Status returned for the request. The\nOK code indicates success and other codes indicate failure. The\nrequest and response messages for ModelMetadata are:\nmessage ModelMetadataRequest\n{\n  // The name of the model.\n  string name = 1;\n\n  // The version of the model to check for readiness. If not given the\n  // server will choose a version based on the model and internal policy.\n  string version = 2;\n}\n\nmessage ModelMetadataResponse\n{\n  // Metadata for a tensor.\n  message TensorMetadata\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape. A variable-size dimension is represented\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "4151dd8e-0d2c-48fd-9947-9adac49911cf", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "model and internal policy.\n  string version = 2;\n}\n\nmessage ModelMetadataResponse\n{\n  // Metadata for a tensor.\n  message TensorMetadata\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape. A variable-size dimension is represented\n    // by a -1 value.\n    repeated int64 shape = 3;\n  }\n\n  // The model name.\n  string name = 1;\n\n  // The versions of the model available on the server.\n  repeated string versions = 2;\n\n  // The model's platform. See Platforms.\n  string platform = 3;\n\n  // The model's inputs.\n  repeated TensorMetadata inputs = 4;\n\n  // The model's outputs.\n  repeated TensorMetadata outputs = 5;\n}\n\n\n\n\nInference\u00b6\nThe ModelInfer API performs inference using the specified\nmodel. Errors are indicated by the google.rpc.Status returned for the\nrequest. The OK code indicates success and other codes indicate\nfailure. The request and response messages for ModelInfer are:\nmessage ModelInferRequest\n{\n  // An input tensor for an inference request.\n  message InferInputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape.\n    repeated int64 shape = 3;\n\n    // Optional inference input tensor parameters.\n    map<string, InferParameter> parameters = 4;\n\n    // The tensor", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "3fcf96e4-a855-4078-ad08-faf71b3ec6bb", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "// The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape.\n    repeated int64 shape = 3;\n\n    // Optional inference input tensor parameters.\n    map<string, InferParameter> parameters = 4;\n\n    // The tensor contents using a data-type format. This field must\n    // not be specified if \"raw\" tensor contents are being used for\n    // the inference request.\n    InferTensorContents contents = 5;\n  }\n\n  // An output tensor requested for an inference request.\n  message InferRequestedOutputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // Optional requested output tensor parameters.\n    map<string, InferParameter> parameters = 2;\n  }\n\n  // The name of the model to use for inferencing.\n  string model_name = 1;\n\n  // The version of the model to use for inference. If not given the\n  // server will choose a version based on the model and internal policy.\n  string model_version = 2;\n\n  // Optional identifier for the request. If specified will be\n  // returned in the response.\n  string id = 3;\n\n  // Optional inference parameters.\n  map<string, InferParameter> parameters = 4;\n\n  // The input tensors for the inference.\n  repeated InferInputTensor inputs = 5;\n\n  // The requested output tensors for the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "a4dd52a5-67dc-4a1f-8dcf-deba2486bcf1", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "model and internal policy.\n  string model_version = 2;\n\n  // Optional identifier for the request. If specified will be\n  // returned in the response.\n  string id = 3;\n\n  // Optional inference parameters.\n  map<string, InferParameter> parameters = 4;\n\n  // The input tensors for the inference.\n  repeated InferInputTensor inputs = 5;\n\n  // The requested output tensors for the inference. Optional, if not\n  // specified all outputs produced by the model will be returned.\n  repeated InferRequestedOutputTensor outputs = 6;\n\n  // The data contained in an input tensor can be represented in \"raw\"\n  // bytes form or in the repeated type that matches the tensor's data\n  // type. To use the raw representation 'raw_input_contents' must be\n  // initialized with data for each tensor in the same order as\n  // 'inputs'. For each tensor, the size of this content must match\n  // what is expected by the tensor's shape and data type. The raw\n  // data must be the flattened, one-dimensional, row-major order of\n  // the tensor elements without any stride or padding between the\n  // elements. Note that the FP16 data type must be represented as raw\n  // content as there is no specific data type for a 16-bit float\n  // type.\n  //\n  // If this field is specified then InferInputTensor::contents must\n  // not be specified for any input tensor.\n  repeated bytes raw_input_contents = 7;\n}\n\nmessage ModelInferResponse\n{\n  // An output tensor returned for an inference", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "8eb19654-1390-4bd5-8037-864a799ca45c", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "that the FP16 data type must be represented as raw\n  // content as there is no specific data type for a 16-bit float\n  // type.\n  //\n  // If this field is specified then InferInputTensor::contents must\n  // not be specified for any input tensor.\n  repeated bytes raw_input_contents = 7;\n}\n\nmessage ModelInferResponse\n{\n  // An output tensor returned for an inference request.\n  message InferOutputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape.\n    repeated int64 shape = 3;\n\n    // Optional output tensor parameters.\n    map<string, InferParameter> parameters = 4;\n\n    // The tensor contents using a data-type format. This field must\n    // not be specified if \"raw\" tensor contents are being used for\n    // the inference response.\n    InferTensorContents contents = 5;\n  }\n\n  // The name of the model used for inference.\n  string model_name = 1;\n\n  // The version of the model used for inference.\n  string model_version = 2;\n\n  // The id of the inference request if one was specified.\n  string id = 3;\n\n  // Optional inference response parameters.\n  map<string, InferParameter> parameters = 4;\n\n  // The output tensors holding inference results.\n  repeated InferOutputTensor outputs = 5;\n\n  // The data contained in an output", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "00eea94a-1b79-4d94-928a-2d56d1bd9b5b", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "The version of the model used for inference.\n  string model_version = 2;\n\n  // The id of the inference request if one was specified.\n  string id = 3;\n\n  // Optional inference response parameters.\n  map<string, InferParameter> parameters = 4;\n\n  // The output tensors holding inference results.\n  repeated InferOutputTensor outputs = 5;\n\n  // The data contained in an output tensor can be represented in\n  // \"raw\" bytes form or in the repeated type that matches the\n  // tensor's data type. To use the raw representation 'raw_output_contents'\n  // must be initialized with data for each tensor in the same order as\n  // 'outputs'. For each tensor, the size of this content must match\n  // what is expected by the tensor's shape and data type. The raw\n  // data must be the flattened, one-dimensional, row-major order of\n  // the tensor elements without any stride or padding between the\n  // elements. Note that the FP16 data type must be represented as raw\n  // content as there is no specific data type for a 16-bit float\n  // type.\n  //\n  // If this field is specified then InferOutputTensor::contents must\n  // not be specified for any output tensor.\n  repeated bytes raw_output_contents = 6;\n}\n\n\n\n\nParameters\u00b6\nThe Parameters message describes a \u201cname\u201d/\u201dvalue\u201d pair, where the\n\u201cname\u201d is the name of the parameter and the \u201cvalue\u201d is a boolean,\ninteger, or string corresponding to the parameter.\nCurrently no parameters are defined. As required a future proposal may\ndefine one or more standard", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "be9d46cb-b9fe-44cb-9a34-b9141dbfaf51", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "// If this field is specified then InferOutputTensor::contents must\n  // not be specified for any output tensor.\n  repeated bytes raw_output_contents = 6;\n}\n\n\n\n\nParameters\u00b6\nThe Parameters message describes a \u201cname\u201d/\u201dvalue\u201d pair, where the\n\u201cname\u201d is the name of the parameter and the \u201cvalue\u201d is a boolean,\ninteger, or string corresponding to the parameter.\nCurrently no parameters are defined. As required a future proposal may\ndefine one or more standard parameters to allow portable functionality\nacross different inference servers. A server can implement\nserver-specific parameters to provide non-standard capabilities.\n//\n// An inference parameter value.\n//\nmessage InferParameter\n{\n  // The parameter value can be a string, an int64, a boolean\n  // or a message specific to a predefined parameter.\n  oneof parameter_choice\n  {\n    // A boolean parameter value.\n    bool bool_param = 1;\n\n    // An int64 parameter value.\n    int64 int64_param = 2;\n\n    // A string parameter value.\n    string string_param = 3;\n  }\n}\n\n\n\n\nTensor Data\u00b6\nIn all representations tensor data must be flattened to a\none-dimensional, row-major order of the tensor elements. Element\nvalues must be given in \u201clinear\u201d order without any stride or padding\nbetween elements.\nUsing a \u201craw\u201d representation of tensors with\nModelInferRequest::raw_input_contents and\nModelInferResponse::raw_output_contents will typically allow higher\nperformance due to the way protobuf allocation and reuse interacts\nwith GRPC. For example, see https://github.com/grpc/grpc/issues/23231.\nAn alternative to the \u201craw\u201d representation is to use\nInferTensorContents to represent the tensor data in a format that\nmatches the tensor\u2019s data type.\n//\n// The data contained in a tensor represented by the repeated type\n// that matches the tensor's data type. Protobuf oneof is", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "fc27475d-bdb8-43cc-8cca-d9ec77217ed7", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "representation of tensors with\nModelInferRequest::raw_input_contents and\nModelInferResponse::raw_output_contents will typically allow higher\nperformance due to the way protobuf allocation and reuse interacts\nwith GRPC. For example, see https://github.com/grpc/grpc/issues/23231.\nAn alternative to the \u201craw\u201d representation is to use\nInferTensorContents to represent the tensor data in a format that\nmatches the tensor\u2019s data type.\n//\n// The data contained in a tensor represented by the repeated type\n// that matches the tensor's data type. Protobuf oneof is not used\n// because oneofs cannot contain repeated fields.\n//\nmessage InferTensorContents\n{\n  // Representation for BOOL data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated bool bool_contents = 1;\n\n  // Representation for INT8, INT16, and INT32 data types. The size\n  // must match what is expected by the tensor's shape. The contents\n  // must be the flattened, one-dimensional, row-major order of the\n  // tensor elements.\n  repeated int32 int_contents = 2;\n\n  // Representation for INT64 data types. The size must match what\n  // is expected by the tensor's shape. The contents must be the\n  // flattened, one-dimensional, row-major order of the tensor elements.\n  repeated int64 int64_contents = 3;\n\n  // Representation for UINT8, UINT16, and UINT32 data types. The size\n  // must match what is expected by the tensor's shape. The contents\n  // must be the flattened, one-dimensional, row-major order of the\n  // tensor elements.\n  repeated uint32 uint_contents = 4;\n\n  // Representation for UINT64 data types. The size", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "06feb61e-cc9c-4a51-a914-378e3a422b15", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "the tensor elements.\n  repeated int64 int64_contents = 3;\n\n  // Representation for UINT8, UINT16, and UINT32 data types. The size\n  // must match what is expected by the tensor's shape. The contents\n  // must be the flattened, one-dimensional, row-major order of the\n  // tensor elements.\n  repeated uint32 uint_contents = 4;\n\n  // Representation for UINT64 data types. The size must match what\n  // is expected by the tensor's shape. The contents must be the\n  // flattened, one-dimensional, row-major order of the tensor elements.\n  repeated uint64 uint64_contents = 5;\n\n  // Representation for FP32 data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated float fp32_contents = 6;\n\n  // Representation for FP64 data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated double fp64_contents = 7;\n\n  // Representation for BYTES data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated bytes bytes_contents = 8;\n}\n\n\n\n\n\nPlatforms\u00b6\nA platform is a string indicating a DL/ML framework or\nbackend. Platform is returned as part of the response to a\nModel Metadata request but is information only. The\nproposed inference APIs are generic relative to the DL/ML framework\nused by a", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "17c08a5f-2c98-45b0-b48a-afe60e1f9c83", "page": "apis/inference/v2", "section": "open-inference-protocol", "text": "// expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated bytes bytes_contents = 8;\n}\n\n\n\n\n\nPlatforms\u00b6\nA platform is a string indicating a DL/ML framework or\nbackend. Platform is returned as part of the response to a\nModel Metadata request but is information only. The\nproposed inference APIs are generic relative to the DL/ML framework\nused by a model and so a client does not need to know the platform of\na given model to use the API. Platform names use the format\n\u201c_\u201d. The following platform names are allowed:\n\ntensorrt_plan : A TensorRT model encoded as a serialized engine or \u201cplan\u201d.\ntensorflow_graphdef : A TensorFlow model encoded as a GraphDef.\ntensorflow_savedmodel : A TensorFlow model encoded as a SavedModel.\nonnx_onnxv1 : A ONNX model encoded for ONNX Runtime.\npytorch_torchscript : A PyTorch model encoded as TorchScript.\nmxnet_mxnet: An MXNet model\ncaffe2_netdef : A Caffe2 model encoded as a NetDef.\n\n\n\nTensor Data Types\u00b6\nTensor data types are shown in the following table along with the size\nof each type, in bytes.\n\n\nData Type\nSize (bytes)\n\n\n\nBOOL\n1\n\nUINT8\n1\n\nUINT16\n2\n\nUINT32\n4\n\nUINT64\n8\n\nINT8\n1\n\nINT16\n2\n\nINT32\n4\n\nINT64\n8\n\nFP16\n2\n\nFP32\n4\n\nFP64\n8\n\nBYTES\nVariable (max 232)\n\n\n\n\n\nReferences\u00b6\nThis document is based on the KServe original created during the lifetime of the KFServing project in Kubeflow by its various contributors including Seldon, NVIDIA, IBM, Bloomberg and others.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "d4b5971d-9eff-4da0-87b8-c4d27acf4043", "page": "apis/inference/v2", "section": "http-rest", "text": "\nHTTP/REST\u00b6\nA compliant server must implement the health, metadata, and inference\nAPIs described in this section.\nThe HTTP/REST API uses JSON because it is widely supported and\nlanguage independent. In all JSON schemas shown in this document\n\\(number, \\)string, \\(boolean, \\)object and $array refer to the\nfundamental JSON types. #optional indicates an optional JSON field.\nAll strings in all contexts are case-sensitive.\nFor Seldon a server must recognize the following URLs. The\nversions portion of the URL is shown as optional to allow\nimplementations that don\u2019t support versioning or for cases when the\nuser does not want to specify a specific model version (in which case\nthe server will choose a version based on its own policies).\nHealth:\n GET v2/health/live\n GET v2/health/ready\n GET v2/models/${MODEL_NAME}[/versions/${MODEL_VERSION}]/ready\n\n\nServer Metadata:\n GET v2\n\n\nModel Metadata:\n GET v2/models/${MODEL_NAME}[/versions/${MODEL_VERSION}]\n\n\nInference:\n POST v2/models/${MODEL_NAME}[/versions/${MODEL_VERSION}]/infer\n\n\n\nHealth\u00b6\nA health request is made with an HTTP GET to a health endpoint. The\nHTTP response status code indicates a boolean result for the health\nrequest. A 200 status code indicates true and a 4xx status code\nindicates false. The HTTP response body should be empty. There are\nthree health APIs.\n\nServer Live\u00b6\nThe \u201cserver live\u201d API indicates if the inference server is able to\nreceive and respond to metadata and inference requests. The \u201cserver\nlive\u201d API can be used directly to implement the Kubernetes\nlivenessProbe.\n\n\nServer Ready\u00b6\nThe \u201cserver ready\u201d health API indicates if all the models are ready\nfor inferencing. The \u201cserver ready\u201d health API can be used directly to\nimplement the Kubernetes readinessProbe.\n\n\nModel Ready\u00b6\nThe \u201cmodel ready\u201d health API indicates if a specific model is ready\nfor inferencing. The model name and (optionally) version must be\navailable in the URL. If a version is not provided the server may\nchoose a version", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "ad68059e-c10d-4f04-bc0c-0f2fef18d732", "page": "apis/inference/v2", "section": "http-rest", "text": "implement the Kubernetes\nlivenessProbe.\n\n\nServer Ready\u00b6\nThe \u201cserver ready\u201d health API indicates if all the models are ready\nfor inferencing. The \u201cserver ready\u201d health API can be used directly to\nimplement the Kubernetes readinessProbe.\n\n\nModel Ready\u00b6\nThe \u201cmodel ready\u201d health API indicates if a specific model is ready\nfor inferencing. The model name and (optionally) version must be\navailable in the URL. If a version is not provided the server may\nchoose a version based on its own policies.\n\n\n\nServer Metadata\u00b6\nThe server metadata endpoint provides information about the server. A\nserver metadata request is made with an HTTP GET to a server metadata\nendpoint. In the corresponding response the HTTP body contains the\nServer Metadata Response JSON Object\nor the\nServer Metadata Response JSON Error Object.\n\nServer Metadata Response JSON Object\u00b6\nA successful server metadata request is indicated by a 200 HTTP status\ncode. The server metadata response object, identified as\n$metadata_server_response, is returned in the HTTP body.\n    $metadata_server_response =\n    {\n      \"name\" : $string,\n      \"version\" : $string,\n      \"extensions\" : [ $string, ... ]\n    }\n\n\n\n\u201cname\u201d : A descriptive name for the server.\n\u201cversion\u201d : The server version.\n\u201cextensions\u201d : The extensions supported by the server. Currently no\nstandard extensions are defined. Individual inference servers may\ndefine and document their own extensions.\n\n\n\nServer Metadata Response JSON Error Object\u00b6\nA failed server metadata request must be indicated by an HTTP error\nstatus (typically 400). The HTTP body must contain the\n$metadata_server_error_response object.\n    $metadata_server_error_response =\n    {\n      \"error\": $string\n    }\n\n\n\n\u201cerror\u201d :", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "d00ee000-dfbf-4a04-b990-e9536daff293", "page": "apis/inference/v2", "section": "http-rest", "text": "supported by the server. Currently no\nstandard extensions are defined. Individual inference servers may\ndefine and document their own extensions.\n\n\n\nServer Metadata Response JSON Error Object\u00b6\nA failed server metadata request must be indicated by an HTTP error\nstatus (typically 400). The HTTP body must contain the\n$metadata_server_error_response object.\n    $metadata_server_error_response =\n    {\n      \"error\": $string\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\n\nModel Metadata\u00b6\nThe per-model metadata endpoint provides information about a model. A\nmodel metadata request is made with an HTTP GET to a model metadata\nendpoint. In the corresponding response the HTTP body contains the\nModel Metadata Response JSON Object\nor the\nModel Metadata Response JSON Error Object.\nThe model name and (optionally) version must be available in the\nURL. If a version is not provided the server may choose a version\nbased on its own policies or return an error.\n\nModel Metadata Response JSON Object\u00b6\nA successful model metadata request is indicated by a 200 HTTP status\ncode. The metadata response object, identified as\n$metadata_model_response, is returned in the HTTP body for every\nsuccessful model metadata request.\n    $metadata_model_response =\n    {\n      \"name\" : $string,\n      \"versions\" : [ $string, ... ] #optional,\n      \"platform\" : $string,\n      \"inputs\" : [ $metadata_tensor, ... ],\n      \"outputs\" : [ $metadata_tensor, ... ]\n    }\n\n\n\n\u201cname\u201d : The name of the model.\n\u201cversions\u201d : The model versions that may be explicitly requested via\nthe appropriate endpoint. Optional for", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "cf959f8d-3ce0-4dec-b2b1-60594e941529", "page": "apis/inference/v2", "section": "http-rest", "text": "   \"versions\" : [ $string, ... ] #optional,\n      \"platform\" : $string,\n      \"inputs\" : [ $metadata_tensor, ... ],\n      \"outputs\" : [ $metadata_tensor, ... ]\n    }\n\n\n\n\u201cname\u201d : The name of the model.\n\u201cversions\u201d : The model versions that may be explicitly requested via\nthe appropriate endpoint. Optional for servers that don\u2019t support\nversions. Optional for models that don\u2019t allow a version to be\nexplicitly requested.\n\u201cplatform\u201d : The framework/backend for the model. See\nPlatforms.\n\u201cinputs\u201d : The inputs required by the model.\n\u201coutputs\u201d : The outputs produced by the model.\n\nEach model input and output tensors\u2019 metadata is described with a\n$metadata_tensor object.\n    $metadata_tensor =\n    {\n      \"name\" : $string,\n      \"datatype\" : $string,\n      \"shape\" : [ $number, ... ]\n    }\n\n\n\n\u201cname\u201d : The name of the tensor.\n\u201cdatatype\u201d : The data-type of the tensor elements as defined in\nTensor Data Types.\n\u201cshape\u201d : The shape of the tensor. Variable-size dimensions are\nspecified as -1.\n\n\n\nModel Metadata Response JSON Error Object\u00b6\nA failed model metadata request must be indicated by an HTTP error\nstatus (typically 400). The HTTP body must contain the\n$metadata_model_error_response object.\n    $metadata_model_error_response =\n    {\n      \"error\": $string\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\n\nInference\u00b6\nAn inference request is made with an HTTP POST to an inference\nendpoint. In the request the HTTP body contains the\nInference Request JSON Object. In\nthe corresponding", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "8f2faa6b-b48d-4987-977a-a53c6d880469", "page": "apis/inference/v2", "section": "http-rest", "text": "by an HTTP error\nstatus (typically 400). The HTTP body must contain the\n$metadata_model_error_response object.\n    $metadata_model_error_response =\n    {\n      \"error\": $string\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\n\nInference\u00b6\nAn inference request is made with an HTTP POST to an inference\nendpoint. In the request the HTTP body contains the\nInference Request JSON Object. In\nthe corresponding response the HTTP body contains the\nInference Response JSON Object or\nInference Response JSON Error Object. See\nInference Request Examples for some\nexample HTTP/REST requests and responses.\n\nInference Request JSON Object\u00b6\nThe inference request object, identified as $inference_request, is\nrequired in the HTTP body of the POST request. The model name and\n(optionally) version must be available in the URL. If a version is not\nprovided the server may choose a version based on its own policies or\nreturn an error.\n    $inference_request =\n    {\n      \"id\" : $string #optional,\n      \"parameters\" : $parameters #optional,\n      \"inputs\" : [ $request_input, ... ],\n      \"outputs\" : [ $request_output, ... ] #optional\n    }\n\n\n\n\u201cid\u201d : An identifier for this request. Optional, but if specified\nthis identifier must be returned in the response.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninference request expressed as key/value pairs. See\nParameters for more information.\n\u201cinputs\u201d : The input tensors. Each input is described using the\n$request_input schema defined in Request Input.\n\u201coutputs\u201d : The output tensors requested for this inference. Each\nrequested output is described using the $request_output schema\ndefined", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "689c18e8-96ec-459e-9e3b-94fb91e2cc07", "page": "apis/inference/v2", "section": "http-rest", "text": "for this request. Optional, but if specified\nthis identifier must be returned in the response.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninference request expressed as key/value pairs. See\nParameters for more information.\n\u201cinputs\u201d : The input tensors. Each input is described using the\n$request_input schema defined in Request Input.\n\u201coutputs\u201d : The output tensors requested for this inference. Each\nrequested output is described using the $request_output schema\ndefined in Request Output. Optional, if not\nspecified all outputs produced by the model will be returned using\ndefault $request_output settings.\n\n\nRequest Input\u00b6\nThe $request_input JSON describes an input to the model. If the\ninput is batched, the shape and data must represent the full shape and\ncontents of the entire batch.\n    $request_input =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the input tensor.\n\u201cshape\u201d : The shape of the input tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the input tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n\nRequest Output\u00b6\nThe $request_output JSON is used to request which output tensors\nshould be returned from the model.\n    $request_output =\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "f1adc575-7424-4990-a063-b6fee0ab5308", "page": "apis/inference/v2", "section": "http-rest", "text": "value.\n\u201cdatatype\u201d : The data-type of the input tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n\nRequest Output\u00b6\nThe $request_output JSON is used to request which output tensors\nshould be returned from the model.\n    $request_output =\n    {\n      \"name\" : $string,\n      \"parameters\" : $parameters #optional,\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cparameters\u201d : An object containing zero or more parameters for this\noutput expressed as key/value pairs. See Parameters\nfor more information.\n\n\n\n\nInference Response JSON Object\u00b6\nA successful inference request is indicated by a 200 HTTP status\ncode. The inference response object, identified as\n$inference_response, is returned in the HTTP body.\n    $inference_response =\n    {\n      \"model_name\" : $string,\n      \"model_version\" : $string #optional,\n      \"id\" : $string,\n      \"parameters\" : $parameters #optional,\n      \"outputs\" : [ $response_output, ... ]\n    }\n\n\n\n\u201cmodel_name\u201d : The name of the model used for inference.\n\u201cmodel_version\u201d : The specific model version used for\ninference. Inference servers that do not implement versioning should\nnot provide this field in the response.\n\u201cid\u201d : The \u201cid\u201d identifier given in the request, if any.\n\u201cparameters\u201d : An object containing zero or more parameters for this\nresponse expressed as key/value pairs. See Parameters\nfor more information.\n\u201coutputs\u201d : The output", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "853b64c6-a7f5-4b5f-a8ae-ed327bacc6ad", "page": "apis/inference/v2", "section": "http-rest", "text": "  }\n\n\n\n\u201cmodel_name\u201d : The name of the model used for inference.\n\u201cmodel_version\u201d : The specific model version used for\ninference. Inference servers that do not implement versioning should\nnot provide this field in the response.\n\u201cid\u201d : The \u201cid\u201d identifier given in the request, if any.\n\u201cparameters\u201d : An object containing zero or more parameters for this\nresponse expressed as key/value pairs. See Parameters\nfor more information.\n\u201coutputs\u201d : The output tensors. Each output is described using the\n$response_output schema defined in\nResponse Output.\n\n\nResponse Output\u00b6\nThe $response_output JSON describes an output from the model. If the\noutput is batched, the shape and data represents the full shape of the\nentire batch.\n    $response_output =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cshape\u201d : The shape of the output tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the output tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n\n\nInference Response JSON Error Object\u00b6\nA failed inference request must be indicated by an HTTP error status\n(typically 400). The HTTP body must contain the\n$inference_error_response object.\n    $inference_error_response =\n    {\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "1eb7542d-75d4-4b6a-942c-dd9b7cc8f2c7", "page": "apis/inference/v2", "section": "http-rest", "text": "defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n\n\nInference Response JSON Error Object\u00b6\nA failed inference request must be indicated by an HTTP error status\n(typically 400). The HTTP body must contain the\n$inference_error_response object.\n    $inference_error_response =\n    {\n      \"error\": <error message string>\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\nInference Request Examples\u00b6\nThe following example shows an inference request to a model with two\ninputs and one output. The HTTP Content-Length header gives the size\nof the JSON object.\n    POST /v2/models/mymodel/infer HTTP/1.1\n    Host: localhost:8000\n    Content-Type: application/json\n    Content-Length: <xx>\n    {\n      \"id\" : \"42\",\n      \"inputs\" : [\n        {\n          \"name\" : \"input0\",\n          \"shape\" : [ 2, 2 ],\n          \"datatype\" : \"UINT32\",\n          \"data\" : [ 1, 2, 3, 4 ]\n        },\n        {\n          \"name\" : \"input1\",\n          \"shape\" : [ 3", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "5362fbc8-880b-45cd-a527-5ac7c33e6c8a", "page": "apis/inference/v2", "section": "http-rest", "text": "   \"datatype\" : \"UINT32\",\n          \"data\" : [ 1, 2, 3, 4 ]\n        },\n        {\n          \"name\" : \"input1\",\n          \"shape\" : [ 3 ],\n          \"datatype\" : \"BOOL\",\n          \"data\" : [ true ]\n        }\n      ],\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\"\n        }\n      ]\n    }\n\n\nFor the above request the inference server must return the \u201coutput0\u201d\noutput tensor. Assuming the model returns a [ 3, 2 ] tensor of data\ntype FP32 the following response would be returned.\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n    Content-Length: <yy>\n    {\n      \"id\" : \"42\"\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\",\n          \"shape\" : [ 3, 2 ],\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "a7e816a4-f0ab-428d-9b87-6a5d991e5539", "page": "apis/inference/v2", "section": "http-rest", "text": "   Content-Length: <yy>\n    {\n      \"id\" : \"42\"\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\",\n          \"shape\" : [ 3, 2 ],\n          \"datatype\"  : \"FP32\",\n          \"data\" : [ 1.0, 1.1, 2.0, 2.1, 3.0, 3.1 ]\n        }\n      ]\n    }\n\n\n\n\n\nParameters\u00b6\nThe *\\(parameters* JSON describes zero or more \u201cname\u201d/\u201dvalue\u201d pairs,\nwhere the \u201cname\u201d is the name of the parameter and the \u201cvalue\u201d is a\n\\)string, \\(number, or \\)boolean.\n    $parameters =\n    {\n      $parameter, ...\n    }\n\n    $parameter = $string : $string | $number | $boolean\n\n\nCurrently no parameters are defined. As required a future proposal may\ndefine one or more standard parameters to allow portable functionality\nacross different inference servers. A server can implement\nserver-specific parameters to provide non-standard capabilities.\n\n\nTensor Data\u00b6\nTensor data must be presented in row-major order of the tensor\nelements. Element values must be given in \u201clinear\u201d order without any\nstride or padding between elements. Tensor elements may be presented\nin their nature multi-dimensional representation, or as a flattened\none-dimensional representation.\nTensor data given explicitly is provided in a JSON array. Each element\nof the array may be an integer, floating-point number, string", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "a2f93c00-02b1-4873-a92c-bcecf8574959", "page": "apis/inference/v2", "section": "http-rest", "text": "parameters to provide non-standard capabilities.\n\n\nTensor Data\u00b6\nTensor data must be presented in row-major order of the tensor\nelements. Element values must be given in \u201clinear\u201d order without any\nstride or padding between elements. Tensor elements may be presented\nin their nature multi-dimensional representation, or as a flattened\none-dimensional representation.\nTensor data given explicitly is provided in a JSON array. Each element\nof the array may be an integer, floating-point number, string or\nboolean value. The server can decide to coerce each element to the\nrequired type or return an error if an unexpected value is\nreceived. Note that fp16 is problematic to communicate explicitly\nsince there is not a standard fp16 representation across backends nor\ntypically the programmatic support to create the fp16 representation\nfor a JSON number.\nFor example, the 2-dimensional matrix:\n[ 1 2\n  4 5 ]\n\n\nCan be represented in its natural format as:\n\"data\" : [ [ 1, 2 ], [ 4, 5 ] ]\n\n\nOr in a flattened one-dimensional representation:\n\"data\" : [ 1, 2, 4, 5 ]\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "89bded8b-14c6-4aee-931b-40130dad44d8", "page": "apis/inference/v2", "section": "health", "text": "\nHealth\u00b6\nA health request is made with an HTTP GET to a health endpoint. The\nHTTP response status code indicates a boolean result for the health\nrequest. A 200 status code indicates true and a 4xx status code\nindicates false. The HTTP response body should be empty. There are\nthree health APIs.\n\nServer Live\u00b6\nThe \u201cserver live\u201d API indicates if the inference server is able to\nreceive and respond to metadata and inference requests. The \u201cserver\nlive\u201d API can be used directly to implement the Kubernetes\nlivenessProbe.\n\n\nServer Ready\u00b6\nThe \u201cserver ready\u201d health API indicates if all the models are ready\nfor inferencing. The \u201cserver ready\u201d health API can be used directly to\nimplement the Kubernetes readinessProbe.\n\n\nModel Ready\u00b6\nThe \u201cmodel ready\u201d health API indicates if a specific model is ready\nfor inferencing. The model name and (optionally) version must be\navailable in the URL. If a version is not provided the server may\nchoose a version based on its own policies.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "d30cc70c-e58a-4574-8966-6b06537274bb", "page": "apis/inference/v2", "section": "server-metadata", "text": "\nServer Metadata\u00b6\nThe server metadata endpoint provides information about the server. A\nserver metadata request is made with an HTTP GET to a server metadata\nendpoint. In the corresponding response the HTTP body contains the\nServer Metadata Response JSON Object\nor the\nServer Metadata Response JSON Error Object.\n\nServer Metadata Response JSON Object\u00b6\nA successful server metadata request is indicated by a 200 HTTP status\ncode. The server metadata response object, identified as\n$metadata_server_response, is returned in the HTTP body.\n    $metadata_server_response =\n    {\n      \"name\" : $string,\n      \"version\" : $string,\n      \"extensions\" : [ $string, ... ]\n    }\n\n\n\n\u201cname\u201d : A descriptive name for the server.\n\u201cversion\u201d : The server version.\n\u201cextensions\u201d : The extensions supported by the server. Currently no\nstandard extensions are defined. Individual inference servers may\ndefine and document their own extensions.\n\n\n\nServer Metadata Response JSON Error Object\u00b6\nA failed server metadata request must be indicated by an HTTP error\nstatus (typically 400). The HTTP body must contain the\n$metadata_server_error_response object.\n    $metadata_server_error_response =\n    {\n      \"error\": $string\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "f798c955-07d9-4f9c-b0ca-359ef5b534ce", "page": "apis/inference/v2", "section": "server-metadata-response-json-object", "text": "\nServer Metadata Response JSON Object\u00b6\nA successful server metadata request is indicated by a 200 HTTP status\ncode. The server metadata response object, identified as\n$metadata_server_response, is returned in the HTTP body.\n    $metadata_server_response =\n    {\n      \"name\" : $string,\n      \"version\" : $string,\n      \"extensions\" : [ $string, ... ]\n    }\n\n\n\n\u201cname\u201d : A descriptive name for the server.\n\u201cversion\u201d : The server version.\n\u201cextensions\u201d : The extensions supported by the server. Currently no\nstandard extensions are defined. Individual inference servers may\ndefine and document their own extensions.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "da286ebc-f3c7-4125-9ec8-7b5df958cb81", "page": "apis/inference/v2", "section": "model-metadata", "text": "\nModel Metadata\u00b6\nThe per-model metadata endpoint provides information about a model. A\nmodel metadata request is made with an HTTP GET to a model metadata\nendpoint. In the corresponding response the HTTP body contains the\nModel Metadata Response JSON Object\nor the\nModel Metadata Response JSON Error Object.\nThe model name and (optionally) version must be available in the\nURL. If a version is not provided the server may choose a version\nbased on its own policies or return an error.\n\nModel Metadata Response JSON Object\u00b6\nA successful model metadata request is indicated by a 200 HTTP status\ncode. The metadata response object, identified as\n$metadata_model_response, is returned in the HTTP body for every\nsuccessful model metadata request.\n    $metadata_model_response =\n    {\n      \"name\" : $string,\n      \"versions\" : [ $string, ... ] #optional,\n      \"platform\" : $string,\n      \"inputs\" : [ $metadata_tensor, ... ],\n      \"outputs\" : [ $metadata_tensor, ... ]\n    }\n\n\n\n\u201cname\u201d : The name of the model.\n\u201cversions\u201d : The model versions that may be explicitly requested via\nthe appropriate endpoint. Optional for servers that don\u2019t support\nversions. Optional for models that don\u2019t allow a version to be\nexplicitly requested.\n\u201cplatform\u201d : The framework/backend for the model. See\nPlatforms.\n\u201cinputs\u201d : The inputs required by the model.\n\u201coutputs\u201d : The outputs produced by the model.\n\nEach model input and output tensors\u2019 metadata is described with a\n$metadata_tensor object.\n    $metadata_tensor =\n    {\n      \"name\" : $string,\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "b6412f37-c460-4b81-80ca-8fa344dd4c51", "page": "apis/inference/v2", "section": "model-metadata", "text": "for models that don\u2019t allow a version to be\nexplicitly requested.\n\u201cplatform\u201d : The framework/backend for the model. See\nPlatforms.\n\u201cinputs\u201d : The inputs required by the model.\n\u201coutputs\u201d : The outputs produced by the model.\n\nEach model input and output tensors\u2019 metadata is described with a\n$metadata_tensor object.\n    $metadata_tensor =\n    {\n      \"name\" : $string,\n      \"datatype\" : $string,\n      \"shape\" : [ $number, ... ]\n    }\n\n\n\n\u201cname\u201d : The name of the tensor.\n\u201cdatatype\u201d : The data-type of the tensor elements as defined in\nTensor Data Types.\n\u201cshape\u201d : The shape of the tensor. Variable-size dimensions are\nspecified as -1.\n\n\n\nModel Metadata Response JSON Error Object\u00b6\nA failed model metadata request must be indicated by an HTTP error\nstatus (typically 400). The HTTP body must contain the\n$metadata_model_error_response object.\n    $metadata_model_error_response =\n    {\n      \"error\": $string\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "f676430b-e4a0-4b14-8340-ea9746be794d", "page": "apis/inference/v2", "section": "model-metadata-response-json-object", "text": "\nModel Metadata Response JSON Object\u00b6\nA successful model metadata request is indicated by a 200 HTTP status\ncode. The metadata response object, identified as\n$metadata_model_response, is returned in the HTTP body for every\nsuccessful model metadata request.\n    $metadata_model_response =\n    {\n      \"name\" : $string,\n      \"versions\" : [ $string, ... ] #optional,\n      \"platform\" : $string,\n      \"inputs\" : [ $metadata_tensor, ... ],\n      \"outputs\" : [ $metadata_tensor, ... ]\n    }\n\n\n\n\u201cname\u201d : The name of the model.\n\u201cversions\u201d : The model versions that may be explicitly requested via\nthe appropriate endpoint. Optional for servers that don\u2019t support\nversions. Optional for models that don\u2019t allow a version to be\nexplicitly requested.\n\u201cplatform\u201d : The framework/backend for the model. See\nPlatforms.\n\u201cinputs\u201d : The inputs required by the model.\n\u201coutputs\u201d : The outputs produced by the model.\n\nEach model input and output tensors\u2019 metadata is described with a\n$metadata_tensor object.\n    $metadata_tensor =\n    {\n      \"name\" : $string,\n      \"datatype\" : $string,\n      \"shape\" : [ $number, ... ]\n    }\n\n\n\n\u201cname\u201d : The name of the tensor.\n\u201cdatatype\u201d : The data-type of the tensor elements as defined in\nTensor Data Types.\n\u201cshape\u201d : The shape of the tensor. Variable-size dimensions are\nspecified as -1.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "60122d63-87df-4c78-9517-4cfc83724b95", "page": "apis/inference/v2", "section": "inference", "text": "\nInference\u00b6\nAn inference request is made with an HTTP POST to an inference\nendpoint. In the request the HTTP body contains the\nInference Request JSON Object. In\nthe corresponding response the HTTP body contains the\nInference Response JSON Object or\nInference Response JSON Error Object. See\nInference Request Examples for some\nexample HTTP/REST requests and responses.\n\nInference Request JSON Object\u00b6\nThe inference request object, identified as $inference_request, is\nrequired in the HTTP body of the POST request. The model name and\n(optionally) version must be available in the URL. If a version is not\nprovided the server may choose a version based on its own policies or\nreturn an error.\n    $inference_request =\n    {\n      \"id\" : $string #optional,\n      \"parameters\" : $parameters #optional,\n      \"inputs\" : [ $request_input, ... ],\n      \"outputs\" : [ $request_output, ... ] #optional\n    }\n\n\n\n\u201cid\u201d : An identifier for this request. Optional, but if specified\nthis identifier must be returned in the response.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninference request expressed as key/value pairs. See\nParameters for more information.\n\u201cinputs\u201d : The input tensors. Each input is described using the\n$request_input schema defined in Request Input.\n\u201coutputs\u201d : The output tensors requested for this inference. Each\nrequested output is described using the $request_output schema\ndefined in Request Output. Optional, if not\nspecified all outputs produced by the model will be returned using\ndefault $request_output settings.\n\n\nRequest Input\u00b6\nThe $request_input JSON describes an input to the model. If the\ninput is batched, the shape and data must represent the full", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "c9c7d16c-3cc0-46b6-a99d-5ef9477ddeb7", "page": "apis/inference/v2", "section": "inference", "text": "is described using the\n$request_input schema defined in Request Input.\n\u201coutputs\u201d : The output tensors requested for this inference. Each\nrequested output is described using the $request_output schema\ndefined in Request Output. Optional, if not\nspecified all outputs produced by the model will be returned using\ndefault $request_output settings.\n\n\nRequest Input\u00b6\nThe $request_input JSON describes an input to the model. If the\ninput is batched, the shape and data must represent the full shape and\ncontents of the entire batch.\n    $request_input =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the input tensor.\n\u201cshape\u201d : The shape of the input tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the input tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n\nRequest Output\u00b6\nThe $request_output JSON is used to request which output tensors\nshould be returned from the model.\n    $request_output =\n    {\n      \"name\" : $string,\n      \"parameters\" : $parameters #optional,\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cparameters\u201d : An object containing zero or more parameters for", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "3ea2dc0d-52a7-451a-9ac2-a9f3ed81e52d", "page": "apis/inference/v2", "section": "inference", "text": "Data\nfor more information.\n\n\n\nRequest Output\u00b6\nThe $request_output JSON is used to request which output tensors\nshould be returned from the model.\n    $request_output =\n    {\n      \"name\" : $string,\n      \"parameters\" : $parameters #optional,\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cparameters\u201d : An object containing zero or more parameters for this\noutput expressed as key/value pairs. See Parameters\nfor more information.\n\n\n\n\nInference Response JSON Object\u00b6\nA successful inference request is indicated by a 200 HTTP status\ncode. The inference response object, identified as\n$inference_response, is returned in the HTTP body.\n    $inference_response =\n    {\n      \"model_name\" : $string,\n      \"model_version\" : $string #optional,\n      \"id\" : $string,\n      \"parameters\" : $parameters #optional,\n      \"outputs\" : [ $response_output, ... ]\n    }\n\n\n\n\u201cmodel_name\u201d : The name of the model used for inference.\n\u201cmodel_version\u201d : The specific model version used for\ninference. Inference servers that do not implement versioning should\nnot provide this field in the response.\n\u201cid\u201d : The \u201cid\u201d identifier given in the request, if any.\n\u201cparameters\u201d : An object containing zero or more parameters for this\nresponse expressed as key/value pairs. See Parameters\nfor more information.\n\u201coutputs\u201d : The output tensors. Each output is described using the\n$response_output schema defined in\nResponse Output.\n\n\nResponse Output\u00b6\nThe $response_output JSON describes an output from the model. If the\noutput is batched, the shape and data represents the full shape of the\nentire batch.\n    $response_output", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "bc4cb2bc-95e1-4d92-9c70-cd719f116966", "page": "apis/inference/v2", "section": "inference", "text": "the request, if any.\n\u201cparameters\u201d : An object containing zero or more parameters for this\nresponse expressed as key/value pairs. See Parameters\nfor more information.\n\u201coutputs\u201d : The output tensors. Each output is described using the\n$response_output schema defined in\nResponse Output.\n\n\nResponse Output\u00b6\nThe $response_output JSON describes an output from the model. If the\noutput is batched, the shape and data represents the full shape of the\nentire batch.\n    $response_output =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cshape\u201d : The shape of the output tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the output tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n\n\nInference Response JSON Error Object\u00b6\nA failed inference request must be indicated by an HTTP error status\n(typically 400). The HTTP body must contain the\n$inference_error_response object.\n    $inference_error_response =\n    {\n      \"error\": <error message string>\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\nInference Request Examples\u00b6\nThe following example shows an inference request to a model with two\ninputs and one output. The HTTP Content-Length", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "4b5d9a4e-2a5d-43db-be75-5402b8f3d71c", "page": "apis/inference/v2", "section": "inference", "text": "must be indicated by an HTTP error status\n(typically 400). The HTTP body must contain the\n$inference_error_response object.\n    $inference_error_response =\n    {\n      \"error\": <error message string>\n    }\n\n\n\n\u201cerror\u201d : The descriptive message for the error.\n\n\n\nInference Request Examples\u00b6\nThe following example shows an inference request to a model with two\ninputs and one output. The HTTP Content-Length header gives the size\nof the JSON object.\n    POST /v2/models/mymodel/infer HTTP/1.1\n    Host: localhost:8000\n    Content-Type: application/json\n    Content-Length: <xx>\n    {\n      \"id\" : \"42\",\n      \"inputs\" : [\n        {\n          \"name\" : \"input0\",\n          \"shape\" : [ 2, 2 ],\n          \"datatype\" : \"UINT32\",\n          \"data\" : [ 1, 2, 3, 4 ]\n        },\n        {\n          \"name\" : \"input1\",\n          \"shape\" : [ 3 ],\n          \"datatype\" : \"BOOL\",\n          \"data\" : [ true ]\n        }\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "a5f0e7a0-bd8d-4422-bac2-75ab41ac763d", "page": "apis/inference/v2", "section": "inference", "text": "         \"name\" : \"input1\",\n          \"shape\" : [ 3 ],\n          \"datatype\" : \"BOOL\",\n          \"data\" : [ true ]\n        }\n      ],\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\"\n        }\n      ]\n    }\n\n\nFor the above request the inference server must return the \u201coutput0\u201d\noutput tensor. Assuming the model returns a [ 3, 2 ] tensor of data\ntype FP32 the following response would be returned.\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n    Content-Length: <yy>\n    {\n      \"id\" : \"42\"\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\",\n          \"shape\" : [ 3, 2 ],\n          \"datatype\"  : \"FP32\",\n          \"data\" : [ 1.0, 1.1, 2.0, 2.1, 3.0, 3.1 ]\n        }\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "1f8fb552-add6-477e-ab42-fe4ac41b2d12", "page": "apis/inference/v2", "section": "inference", "text": "   \"name\" : \"output0\",\n          \"shape\" : [ 3, 2 ],\n          \"datatype\"  : \"FP32\",\n          \"data\" : [ 1.0, 1.1, 2.0, 2.1, 3.0, 3.1 ]\n        }\n      ]\n    }\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "2a79db6a-e86b-4b9c-aae2-c32b004b390d", "page": "apis/inference/v2", "section": "inference-request-json-object", "text": "\nInference Request JSON Object\u00b6\nThe inference request object, identified as $inference_request, is\nrequired in the HTTP body of the POST request. The model name and\n(optionally) version must be available in the URL. If a version is not\nprovided the server may choose a version based on its own policies or\nreturn an error.\n    $inference_request =\n    {\n      \"id\" : $string #optional,\n      \"parameters\" : $parameters #optional,\n      \"inputs\" : [ $request_input, ... ],\n      \"outputs\" : [ $request_output, ... ] #optional\n    }\n\n\n\n\u201cid\u201d : An identifier for this request. Optional, but if specified\nthis identifier must be returned in the response.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninference request expressed as key/value pairs. See\nParameters for more information.\n\u201cinputs\u201d : The input tensors. Each input is described using the\n$request_input schema defined in Request Input.\n\u201coutputs\u201d : The output tensors requested for this inference. Each\nrequested output is described using the $request_output schema\ndefined in Request Output. Optional, if not\nspecified all outputs produced by the model will be returned using\ndefault $request_output settings.\n\n\nRequest Input\u00b6\nThe $request_input JSON describes an input to the model. If the\ninput is batched, the shape and data must represent the full shape and\ncontents of the entire batch.\n    $request_input =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "9bc45005-908a-448d-815c-baa05f3edc4b", "page": "apis/inference/v2", "section": "inference-request-json-object", "text": "an input to the model. If the\ninput is batched, the shape and data must represent the full shape and\ncontents of the entire batch.\n    $request_input =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the input tensor.\n\u201cshape\u201d : The shape of the input tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the input tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n\nRequest Output\u00b6\nThe $request_output JSON is used to request which output tensors\nshould be returned from the model.\n    $request_output =\n    {\n      \"name\" : $string,\n      \"parameters\" : $parameters #optional,\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cparameters\u201d : An object containing zero or more parameters for this\noutput expressed as key/value pairs. See Parameters\nfor more information.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "11eeaaf7-9e5c-47ce-8a13-37b5fa7f7817", "page": "apis/inference/v2", "section": "request-input", "text": "\nRequest Input\u00b6\nThe $request_input JSON describes an input to the model. If the\ninput is batched, the shape and data must represent the full shape and\ncontents of the entire batch.\n    $request_input =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the input tensor.\n\u201cshape\u201d : The shape of the input tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the input tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "24cde981-1a96-4997-ae4b-c71a562bdf36", "page": "apis/inference/v2", "section": "request-output", "text": "\nRequest Output\u00b6\nThe $request_output JSON is used to request which output tensors\nshould be returned from the model.\n    $request_output =\n    {\n      \"name\" : $string,\n      \"parameters\" : $parameters #optional,\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cparameters\u201d : An object containing zero or more parameters for this\noutput expressed as key/value pairs. See Parameters\nfor more information.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "65a0c9f2-2fc9-48ab-9cd4-10097bcdfe75", "page": "apis/inference/v2", "section": "inference-response-json-object", "text": "\nInference Response JSON Object\u00b6\nA successful inference request is indicated by a 200 HTTP status\ncode. The inference response object, identified as\n$inference_response, is returned in the HTTP body.\n    $inference_response =\n    {\n      \"model_name\" : $string,\n      \"model_version\" : $string #optional,\n      \"id\" : $string,\n      \"parameters\" : $parameters #optional,\n      \"outputs\" : [ $response_output, ... ]\n    }\n\n\n\n\u201cmodel_name\u201d : The name of the model used for inference.\n\u201cmodel_version\u201d : The specific model version used for\ninference. Inference servers that do not implement versioning should\nnot provide this field in the response.\n\u201cid\u201d : The \u201cid\u201d identifier given in the request, if any.\n\u201cparameters\u201d : An object containing zero or more parameters for this\nresponse expressed as key/value pairs. See Parameters\nfor more information.\n\u201coutputs\u201d : The output tensors. Each output is described using the\n$response_output schema defined in\nResponse Output.\n\n\nResponse Output\u00b6\nThe $response_output JSON describes an output from the model. If the\noutput is batched, the shape and data represents the full shape of the\nentire batch.\n    $response_output =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cshape\u201d : The shape of the output tensor. Each dimension must be", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "d18f1291-5a6f-490e-bc8e-e59f3f1ea9e9", "page": "apis/inference/v2", "section": "inference-response-json-object", "text": "  \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cshape\u201d : The shape of the output tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the output tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "65f1b3b8-d717-4561-b457-5888a624b0ac", "page": "apis/inference/v2", "section": "response-output", "text": "\nResponse Output\u00b6\nThe $response_output JSON describes an output from the model. If the\noutput is batched, the shape and data represents the full shape of the\nentire batch.\n    $response_output =\n    {\n      \"name\" : $string,\n      \"shape\" : [ $number, ... ],\n      \"datatype\"  : $string,\n      \"parameters\" : $parameters #optional,\n      \"data\" : $tensor_data\n    }\n\n\n\n\u201cname\u201d : The name of the output tensor.\n\u201cshape\u201d : The shape of the output tensor. Each dimension must be an\ninteger representable as an unsigned 64-bit integer value.\n\u201cdatatype\u201d : The data-type of the output tensor elements as defined\nin Tensor Data Types.\n\u201cparameters\u201d : An object containing zero or more parameters for this\ninput expressed as key/value pairs. See Parameters\nfor more information.\n\u201cdata\u201d: The contents of the tensor. See Tensor Data\nfor more information.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "f851a84d-d08c-4351-af60-cbe47ec1c996", "page": "apis/inference/v2", "section": "inference-request-examples", "text": "\nInference Request Examples\u00b6\nThe following example shows an inference request to a model with two\ninputs and one output. The HTTP Content-Length header gives the size\nof the JSON object.\n    POST /v2/models/mymodel/infer HTTP/1.1\n    Host: localhost:8000\n    Content-Type: application/json\n    Content-Length: <xx>\n    {\n      \"id\" : \"42\",\n      \"inputs\" : [\n        {\n          \"name\" : \"input0\",\n          \"shape\" : [ 2, 2 ],\n          \"datatype\" : \"UINT32\",\n          \"data\" : [ 1, 2, 3, 4 ]\n        },\n        {\n          \"name\" : \"input1\",\n          \"shape\" : [ 3 ],\n          \"datatype\" : \"BOOL\",\n          \"data\" : [ true ]\n        }\n      ],\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\"\n        }\n      ]\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "d3379233-d0ef-4660-a761-1cc50e5b0f23", "page": "apis/inference/v2", "section": "inference-request-examples", "text": "   \"data\" : [ true ]\n        }\n      ],\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\"\n        }\n      ]\n    }\n\n\nFor the above request the inference server must return the \u201coutput0\u201d\noutput tensor. Assuming the model returns a [ 3, 2 ] tensor of data\ntype FP32 the following response would be returned.\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n    Content-Length: <yy>\n    {\n      \"id\" : \"42\"\n      \"outputs\" : [\n        {\n          \"name\" : \"output0\",\n          \"shape\" : [ 3, 2 ],\n          \"datatype\"  : \"FP32\",\n          \"data\" : [ 1.0, 1.1, 2.0, 2.1, 3.0, 3.1 ]\n        }\n      ]\n    }\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "5bbced1c-97e0-4748-8f50-d3e0c50cd2e1", "page": "apis/inference/v2", "section": "parameters", "text": "\nParameters\u00b6\nThe *\\(parameters* JSON describes zero or more \u201cname\u201d/\u201dvalue\u201d pairs,\nwhere the \u201cname\u201d is the name of the parameter and the \u201cvalue\u201d is a\n\\)string, \\(number, or \\)boolean.\n    $parameters =\n    {\n      $parameter, ...\n    }\n\n    $parameter = $string : $string | $number | $boolean\n\n\nCurrently no parameters are defined. As required a future proposal may\ndefine one or more standard parameters to allow portable functionality\nacross different inference servers. A server can implement\nserver-specific parameters to provide non-standard capabilities.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "e39b9041-283e-4ba9-84c2-eccf0fae68fb", "page": "apis/inference/v2", "section": "tensor-data", "text": "\nTensor Data\u00b6\nTensor data must be presented in row-major order of the tensor\nelements. Element values must be given in \u201clinear\u201d order without any\nstride or padding between elements. Tensor elements may be presented\nin their nature multi-dimensional representation, or as a flattened\none-dimensional representation.\nTensor data given explicitly is provided in a JSON array. Each element\nof the array may be an integer, floating-point number, string or\nboolean value. The server can decide to coerce each element to the\nrequired type or return an error if an unexpected value is\nreceived. Note that fp16 is problematic to communicate explicitly\nsince there is not a standard fp16 representation across backends nor\ntypically the programmatic support to create the fp16 representation\nfor a JSON number.\nFor example, the 2-dimensional matrix:\n[ 1 2\n  4 5 ]\n\n\nCan be represented in its natural format as:\n\"data\" : [ [ 1, 2 ], [ 4, 5 ] ]\n\n\nOr in a flattened one-dimensional representation:\n\"data\" : [ 1, 2, 4, 5 ]\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "76f6b457-53c4-4101-8944-477934550d38", "page": "apis/inference/v2", "section": "grpc", "text": "\nGRPC\u00b6\nThe GRPC API closely follows the concepts defined in the\nHTTP/REST API. A compliant server must implement the\nhealth, metadata, and inference APIs described in this section.\nAll strings in all contexts are case-sensitive.\nThe GRPC definition of the service is:\n//\n// Inference Server GRPC endpoints.\n//\nservice GRPCInferenceService\n{\n  // Check liveness of the inference server.\n  rpc ServerLive(ServerLiveRequest) returns (ServerLiveResponse) {}\n\n  // Check readiness of the inference server.\n  rpc ServerReady(ServerReadyRequest) returns (ServerReadyResponse) {}\n\n  // Check readiness of a model in the inference server.\n  rpc ModelReady(ModelReadyRequest) returns (ModelReadyResponse) {}\n\n  // Get server metadata.\n  rpc ServerMetadata(ServerMetadataRequest) returns (ServerMetadataResponse) {}\n\n  // Get model metadata.\n  rpc ModelMetadata(ModelMetadataRequest) returns (ModelMetadataResponse) {}\n\n  // Perform inference using a specific model.\n  rpc ModelInfer(ModelInferRequest) returns (ModelInferResponse) {}\n}\n\n\n\nHealth\u00b6\nA health request is made using the ServerLive, ServerReady, or\nModelReady endpoint. For each of these endpoints errors are indicated\nby the google.rpc.Status returned for the request. The OK code\nindicates success and other codes indicate failure.\n\nServer Live\u00b6\nThe ServerLive API indicates if the inference server is able to\nreceive and respond to metadata and inference requests. The request\nand response messages for ServerLive are:\nmessage ServerLiveRequest {}\n\nmessage ServerLiveResponse\n{\n  // True if the inference server is live, false if not live.\n  bool live = 1;\n}\n\n\n\n\nServer Ready\u00b6\nThe ServerReady API indicates if the server is ready for\ninferencing. The request and response messages for ServerReady are:\nmessage ServerReadyRequest {}\n\nmessage ServerReadyResponse\n{\n  // True if the inference server is ready, false if not ready.\n  bool ready = 1;\n}\n\n\n\n\nModel Ready\u00b6\nThe ModelReady API indicates if a specific model is ready for\ninferencing. The request and response", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "c11ec373-13b6-471f-8885-a58a2f953a09", "page": "apis/inference/v2", "section": "grpc", "text": "live, false if not live.\n  bool live = 1;\n}\n\n\n\n\nServer Ready\u00b6\nThe ServerReady API indicates if the server is ready for\ninferencing. The request and response messages for ServerReady are:\nmessage ServerReadyRequest {}\n\nmessage ServerReadyResponse\n{\n  // True if the inference server is ready, false if not ready.\n  bool ready = 1;\n}\n\n\n\n\nModel Ready\u00b6\nThe ModelReady API indicates if a specific model is ready for\ninferencing. The request and response messages for ModelReady are:\nmessage ModelReadyRequest\n{\n  // The name of the model to check for readiness.\n  string name = 1;\n\n  // The version of the model to check for readiness. If not given the\n  // server will choose a version based on the model and internal policy.\n  string version = 2;\n}\n\nmessage ModelReadyResponse\n{\n  // True if the model is ready, false if not ready.\n  bool ready = 1;\n}\n\n\n\n\n\nServer Metadata\u00b6\nThe ServerMetadata API provides information about the server. Errors\nare indicated by the google.rpc.Status returned for the request. The\nOK code indicates success and other codes indicate failure. The\nrequest and response messages for ServerMetadata are:\nmessage ServerMetadataRequest {}\n\nmessage ServerMetadataResponse\n{\n  // The server name.\n  string name = 1;\n\n  // The server version.\n  string version = 2;\n\n  // The extensions supported by the server.\n  repeated string extensions = 3;\n}\n\n\n\n\nModel Metadata\u00b6\nThe per-model metadata API provides information about a model. Errors\nare indicated by the google.rpc.Status returned for the request. The\nOK code indicates success and other codes indicate failure. The\nrequest and response messages for ModelMetadata are:\nmessage ModelMetadataRequest\n{\n  // The name of the model.\n  string name = 1;\n\n  //", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "2c9075fe-2110-47df-839f-72c44b981cbc", "page": "apis/inference/v2", "section": "grpc", "text": "2;\n\n  // The extensions supported by the server.\n  repeated string extensions = 3;\n}\n\n\n\n\nModel Metadata\u00b6\nThe per-model metadata API provides information about a model. Errors\nare indicated by the google.rpc.Status returned for the request. The\nOK code indicates success and other codes indicate failure. The\nrequest and response messages for ModelMetadata are:\nmessage ModelMetadataRequest\n{\n  // The name of the model.\n  string name = 1;\n\n  // The version of the model to check for readiness. If not given the\n  // server will choose a version based on the model and internal policy.\n  string version = 2;\n}\n\nmessage ModelMetadataResponse\n{\n  // Metadata for a tensor.\n  message TensorMetadata\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape. A variable-size dimension is represented\n    // by a -1 value.\n    repeated int64 shape = 3;\n  }\n\n  // The model name.\n  string name = 1;\n\n  // The versions of the model available on the server.\n  repeated string versions = 2;\n\n  // The model's platform. See Platforms.\n  string platform = 3;\n\n  // The model's inputs.\n  repeated TensorMetadata inputs = 4;\n\n  // The model's outputs.\n  repeated TensorMetadata outputs = 5;\n}\n\n\n\n\nInference\u00b6\nThe ModelInfer API performs inference using the specified\nmodel. Errors are indicated by the google.rpc.Status returned for the\nrequest. The OK code indicates success and other codes indicate\nfailure. The request and", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "6f4ce28d-5a9c-4328-8f09-7062a4f419f0", "page": "apis/inference/v2", "section": "grpc", "text": "= 2;\n\n  // The model's platform. See Platforms.\n  string platform = 3;\n\n  // The model's inputs.\n  repeated TensorMetadata inputs = 4;\n\n  // The model's outputs.\n  repeated TensorMetadata outputs = 5;\n}\n\n\n\n\nInference\u00b6\nThe ModelInfer API performs inference using the specified\nmodel. Errors are indicated by the google.rpc.Status returned for the\nrequest. The OK code indicates success and other codes indicate\nfailure. The request and response messages for ModelInfer are:\nmessage ModelInferRequest\n{\n  // An input tensor for an inference request.\n  message InferInputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape.\n    repeated int64 shape = 3;\n\n    // Optional inference input tensor parameters.\n    map<string, InferParameter> parameters = 4;\n\n    // The tensor contents using a data-type format. This field must\n    // not be specified if \"raw\" tensor contents are being used for\n    // the inference request.\n    InferTensorContents contents = 5;\n  }\n\n  // An output tensor requested for an inference request.\n  message InferRequestedOutputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // Optional requested output tensor parameters.\n    map<string, InferParameter> parameters = 2;\n  }\n\n  // The name of the model to use for inferencing.\n  string model_name = 1;\n\n  //", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "04d05e4a-504a-43aa-bc86-00e1e4c105ce", "page": "apis/inference/v2", "section": "grpc", "text": "An output tensor requested for an inference request.\n  message InferRequestedOutputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // Optional requested output tensor parameters.\n    map<string, InferParameter> parameters = 2;\n  }\n\n  // The name of the model to use for inferencing.\n  string model_name = 1;\n\n  // The version of the model to use for inference. If not given the\n  // server will choose a version based on the model and internal policy.\n  string model_version = 2;\n\n  // Optional identifier for the request. If specified will be\n  // returned in the response.\n  string id = 3;\n\n  // Optional inference parameters.\n  map<string, InferParameter> parameters = 4;\n\n  // The input tensors for the inference.\n  repeated InferInputTensor inputs = 5;\n\n  // The requested output tensors for the inference. Optional, if not\n  // specified all outputs produced by the model will be returned.\n  repeated InferRequestedOutputTensor outputs = 6;\n\n  // The data contained in an input tensor can be represented in \"raw\"\n  // bytes form or in the repeated type that matches the tensor's data\n  // type. To use the raw representation 'raw_input_contents' must be\n  // initialized with data for each tensor in the same order as\n  // 'inputs'. For each tensor, the size of this content must match\n  // what is expected by the tensor's shape and data type. The raw\n  // data must", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "6ae2640e-70c9-4b9e-a7e8-dffd743925e8", "page": "apis/inference/v2", "section": "grpc", "text": "in the repeated type that matches the tensor's data\n  // type. To use the raw representation 'raw_input_contents' must be\n  // initialized with data for each tensor in the same order as\n  // 'inputs'. For each tensor, the size of this content must match\n  // what is expected by the tensor's shape and data type. The raw\n  // data must be the flattened, one-dimensional, row-major order of\n  // the tensor elements without any stride or padding between the\n  // elements. Note that the FP16 data type must be represented as raw\n  // content as there is no specific data type for a 16-bit float\n  // type.\n  //\n  // If this field is specified then InferInputTensor::contents must\n  // not be specified for any input tensor.\n  repeated bytes raw_input_contents = 7;\n}\n\nmessage ModelInferResponse\n{\n  // An output tensor returned for an inference request.\n  message InferOutputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape.\n    repeated int64 shape = 3;\n\n    // Optional output tensor parameters.\n    map<string, InferParameter> parameters = 4;\n\n    // The tensor contents using a data-type format. This field must\n    // not be specified if \"raw\" tensor contents are being used for\n    // the inference response.\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "b0017afa-d19f-4444-a71b-a98d5cac53ef", "page": "apis/inference/v2", "section": "grpc", "text": "shape.\n    repeated int64 shape = 3;\n\n    // Optional output tensor parameters.\n    map<string, InferParameter> parameters = 4;\n\n    // The tensor contents using a data-type format. This field must\n    // not be specified if \"raw\" tensor contents are being used for\n    // the inference response.\n    InferTensorContents contents = 5;\n  }\n\n  // The name of the model used for inference.\n  string model_name = 1;\n\n  // The version of the model used for inference.\n  string model_version = 2;\n\n  // The id of the inference request if one was specified.\n  string id = 3;\n\n  // Optional inference response parameters.\n  map<string, InferParameter> parameters = 4;\n\n  // The output tensors holding inference results.\n  repeated InferOutputTensor outputs = 5;\n\n  // The data contained in an output tensor can be represented in\n  // \"raw\" bytes form or in the repeated type that matches the\n  // tensor's data type. To use the raw representation 'raw_output_contents'\n  // must be initialized with data for each tensor in the same order as\n  // 'outputs'. For each tensor, the size of this content must match\n  // what is expected by the tensor's shape and data type. The raw\n  // data must be the flattened, one-dimensional, row-major order of\n  // the tensor elements without any stride or padding between the\n  // elements. Note that the FP16 data type must be", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "8887dcdc-8b84-4be6-bc8d-accea6a548bd", "page": "apis/inference/v2", "section": "grpc", "text": "same order as\n  // 'outputs'. For each tensor, the size of this content must match\n  // what is expected by the tensor's shape and data type. The raw\n  // data must be the flattened, one-dimensional, row-major order of\n  // the tensor elements without any stride or padding between the\n  // elements. Note that the FP16 data type must be represented as raw\n  // content as there is no specific data type for a 16-bit float\n  // type.\n  //\n  // If this field is specified then InferOutputTensor::contents must\n  // not be specified for any output tensor.\n  repeated bytes raw_output_contents = 6;\n}\n\n\n\n\nParameters\u00b6\nThe Parameters message describes a \u201cname\u201d/\u201dvalue\u201d pair, where the\n\u201cname\u201d is the name of the parameter and the \u201cvalue\u201d is a boolean,\ninteger, or string corresponding to the parameter.\nCurrently no parameters are defined. As required a future proposal may\ndefine one or more standard parameters to allow portable functionality\nacross different inference servers. A server can implement\nserver-specific parameters to provide non-standard capabilities.\n//\n// An inference parameter value.\n//\nmessage InferParameter\n{\n  // The parameter value can be a string, an int64, a boolean\n  // or a message specific to a predefined parameter.\n  oneof parameter_choice\n  {\n    // A boolean parameter value.\n    bool bool_param = 1;\n\n    // An int64 parameter value.\n    int64 int64_param = 2;\n\n    // A string parameter value.\n    string string_param = 3;\n  }\n}\n\n\n\n\nTensor Data\u00b6\nIn all representations tensor data must be flattened", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "96dbf44c-af6d-4c2d-b716-1ef0d1276b69", "page": "apis/inference/v2", "section": "grpc", "text": "to a predefined parameter.\n  oneof parameter_choice\n  {\n    // A boolean parameter value.\n    bool bool_param = 1;\n\n    // An int64 parameter value.\n    int64 int64_param = 2;\n\n    // A string parameter value.\n    string string_param = 3;\n  }\n}\n\n\n\n\nTensor Data\u00b6\nIn all representations tensor data must be flattened to a\none-dimensional, row-major order of the tensor elements. Element\nvalues must be given in \u201clinear\u201d order without any stride or padding\nbetween elements.\nUsing a \u201craw\u201d representation of tensors with\nModelInferRequest::raw_input_contents and\nModelInferResponse::raw_output_contents will typically allow higher\nperformance due to the way protobuf allocation and reuse interacts\nwith GRPC. For example, see https://github.com/grpc/grpc/issues/23231.\nAn alternative to the \u201craw\u201d representation is to use\nInferTensorContents to represent the tensor data in a format that\nmatches the tensor\u2019s data type.\n//\n// The data contained in a tensor represented by the repeated type\n// that matches the tensor's data type. Protobuf oneof is not used\n// because oneofs cannot contain repeated fields.\n//\nmessage InferTensorContents\n{\n  // Representation for BOOL data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated bool bool_contents = 1;\n\n  // Representation for INT8, INT16, and INT32 data types. The size\n  // must match what is expected by the tensor's shape. The contents\n  // must be the flattened, one-dimensional, row-major order of the\n  // tensor elements.\n  repeated int32 int_contents = 2;\n\n  // Representation for INT64 data types. The size", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "7410148d-c203-4b7b-8d7b-b0937e723d61", "page": "apis/inference/v2", "section": "grpc", "text": "the tensor elements.\n  repeated bool bool_contents = 1;\n\n  // Representation for INT8, INT16, and INT32 data types. The size\n  // must match what is expected by the tensor's shape. The contents\n  // must be the flattened, one-dimensional, row-major order of the\n  // tensor elements.\n  repeated int32 int_contents = 2;\n\n  // Representation for INT64 data types. The size must match what\n  // is expected by the tensor's shape. The contents must be the\n  // flattened, one-dimensional, row-major order of the tensor elements.\n  repeated int64 int64_contents = 3;\n\n  // Representation for UINT8, UINT16, and UINT32 data types. The size\n  // must match what is expected by the tensor's shape. The contents\n  // must be the flattened, one-dimensional, row-major order of the\n  // tensor elements.\n  repeated uint32 uint_contents = 4;\n\n  // Representation for UINT64 data types. The size must match what\n  // is expected by the tensor's shape. The contents must be the\n  // flattened, one-dimensional, row-major order of the tensor elements.\n  repeated uint64 uint64_contents = 5;\n\n  // Representation for FP32 data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated float fp32_contents = 6;\n\n  // Representation for FP64 data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "16659143-b61a-44b9-8c6c-0e79b219d767", "page": "apis/inference/v2", "section": "grpc", "text": "must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated float fp32_contents = 6;\n\n  // Representation for FP64 data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated double fp64_contents = 7;\n\n  // Representation for BYTES data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated bytes bytes_contents = 8;\n}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "eb79fd16-792a-4aed-b984-17ca94902b3a", "page": "apis/inference/v2", "section": "id1", "text": "\nHealth\u00b6\nA health request is made using the ServerLive, ServerReady, or\nModelReady endpoint. For each of these endpoints errors are indicated\nby the google.rpc.Status returned for the request. The OK code\nindicates success and other codes indicate failure.\n\nServer Live\u00b6\nThe ServerLive API indicates if the inference server is able to\nreceive and respond to metadata and inference requests. The request\nand response messages for ServerLive are:\nmessage ServerLiveRequest {}\n\nmessage ServerLiveResponse\n{\n  // True if the inference server is live, false if not live.\n  bool live = 1;\n}\n\n\n\n\nServer Ready\u00b6\nThe ServerReady API indicates if the server is ready for\ninferencing. The request and response messages for ServerReady are:\nmessage ServerReadyRequest {}\n\nmessage ServerReadyResponse\n{\n  // True if the inference server is ready, false if not ready.\n  bool ready = 1;\n}\n\n\n\n\nModel Ready\u00b6\nThe ModelReady API indicates if a specific model is ready for\ninferencing. The request and response messages for ModelReady are:\nmessage ModelReadyRequest\n{\n  // The name of the model to check for readiness.\n  string name = 1;\n\n  // The version of the model to check for readiness. If not given the\n  // server will choose a version based on the model and internal policy.\n  string version = 2;\n}\n\nmessage ModelReadyResponse\n{\n  // True if the model is ready, false if not ready.\n  bool ready = 1;\n}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "dba55560-373d-4fe3-b738-7993885f7726", "page": "apis/inference/v2", "section": "id4", "text": "\nModel Ready\u00b6\nThe ModelReady API indicates if a specific model is ready for\ninferencing. The request and response messages for ModelReady are:\nmessage ModelReadyRequest\n{\n  // The name of the model to check for readiness.\n  string name = 1;\n\n  // The version of the model to check for readiness. If not given the\n  // server will choose a version based on the model and internal policy.\n  string version = 2;\n}\n\nmessage ModelReadyResponse\n{\n  // True if the model is ready, false if not ready.\n  bool ready = 1;\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "9d6d26b6-efe2-4493-b63d-c150a0335b24", "page": "apis/inference/v2", "section": "id5", "text": "\nServer Metadata\u00b6\nThe ServerMetadata API provides information about the server. Errors\nare indicated by the google.rpc.Status returned for the request. The\nOK code indicates success and other codes indicate failure. The\nrequest and response messages for ServerMetadata are:\nmessage ServerMetadataRequest {}\n\nmessage ServerMetadataResponse\n{\n  // The server name.\n  string name = 1;\n\n  // The server version.\n  string version = 2;\n\n  // The extensions supported by the server.\n  repeated string extensions = 3;\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "092083c4-3566-4d26-900a-7ec7112c8f79", "page": "apis/inference/v2", "section": "id6", "text": "\nModel Metadata\u00b6\nThe per-model metadata API provides information about a model. Errors\nare indicated by the google.rpc.Status returned for the request. The\nOK code indicates success and other codes indicate failure. The\nrequest and response messages for ModelMetadata are:\nmessage ModelMetadataRequest\n{\n  // The name of the model.\n  string name = 1;\n\n  // The version of the model to check for readiness. If not given the\n  // server will choose a version based on the model and internal policy.\n  string version = 2;\n}\n\nmessage ModelMetadataResponse\n{\n  // Metadata for a tensor.\n  message TensorMetadata\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape. A variable-size dimension is represented\n    // by a -1 value.\n    repeated int64 shape = 3;\n  }\n\n  // The model name.\n  string name = 1;\n\n  // The versions of the model available on the server.\n  repeated string versions = 2;\n\n  // The model's platform. See Platforms.\n  string platform = 3;\n\n  // The model's inputs.\n  repeated TensorMetadata inputs = 4;\n\n  // The model's outputs.\n  repeated TensorMetadata outputs = 5;\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "341d0666-95fc-483c-b457-0917c0f7a76e", "page": "apis/inference/v2", "section": "id7", "text": "\nInference\u00b6\nThe ModelInfer API performs inference using the specified\nmodel. Errors are indicated by the google.rpc.Status returned for the\nrequest. The OK code indicates success and other codes indicate\nfailure. The request and response messages for ModelInfer are:\nmessage ModelInferRequest\n{\n  // An input tensor for an inference request.\n  message InferInputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape.\n    repeated int64 shape = 3;\n\n    // Optional inference input tensor parameters.\n    map<string, InferParameter> parameters = 4;\n\n    // The tensor contents using a data-type format. This field must\n    // not be specified if \"raw\" tensor contents are being used for\n    // the inference request.\n    InferTensorContents contents = 5;\n  }\n\n  // An output tensor requested for an inference request.\n  message InferRequestedOutputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // Optional requested output tensor parameters.\n    map<string, InferParameter> parameters = 2;\n  }\n\n  // The name of the model to use for inferencing.\n  string model_name = 1;\n\n  // The version of the model to use for inference. If not given the\n  // server will choose a version based on the model and internal policy.\n  string model_version = 2;\n\n  // Optional", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "92fc820d-5d90-41d0-bf6a-cd6729390ac8", "page": "apis/inference/v2", "section": "id7", "text": "parameters.\n    map<string, InferParameter> parameters = 2;\n  }\n\n  // The name of the model to use for inferencing.\n  string model_name = 1;\n\n  // The version of the model to use for inference. If not given the\n  // server will choose a version based on the model and internal policy.\n  string model_version = 2;\n\n  // Optional identifier for the request. If specified will be\n  // returned in the response.\n  string id = 3;\n\n  // Optional inference parameters.\n  map<string, InferParameter> parameters = 4;\n\n  // The input tensors for the inference.\n  repeated InferInputTensor inputs = 5;\n\n  // The requested output tensors for the inference. Optional, if not\n  // specified all outputs produced by the model will be returned.\n  repeated InferRequestedOutputTensor outputs = 6;\n\n  // The data contained in an input tensor can be represented in \"raw\"\n  // bytes form or in the repeated type that matches the tensor's data\n  // type. To use the raw representation 'raw_input_contents' must be\n  // initialized with data for each tensor in the same order as\n  // 'inputs'. For each tensor, the size of this content must match\n  // what is expected by the tensor's shape and data type. The raw\n  // data must be the flattened, one-dimensional, row-major order of\n  // the tensor elements without any stride or padding between the\n  // elements. Note that the FP16 data type must be represented as raw\n  //", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "8033f11c-38f1-48ad-889f-a0470f930e5f", "page": "apis/inference/v2", "section": "id7", "text": "'inputs'. For each tensor, the size of this content must match\n  // what is expected by the tensor's shape and data type. The raw\n  // data must be the flattened, one-dimensional, row-major order of\n  // the tensor elements without any stride or padding between the\n  // elements. Note that the FP16 data type must be represented as raw\n  // content as there is no specific data type for a 16-bit float\n  // type.\n  //\n  // If this field is specified then InferInputTensor::contents must\n  // not be specified for any input tensor.\n  repeated bytes raw_input_contents = 7;\n}\n\nmessage ModelInferResponse\n{\n  // An output tensor returned for an inference request.\n  message InferOutputTensor\n  {\n    // The tensor name.\n    string name = 1;\n\n    // The tensor data type.\n    string datatype = 2;\n\n    // The tensor shape.\n    repeated int64 shape = 3;\n\n    // Optional output tensor parameters.\n    map<string, InferParameter> parameters = 4;\n\n    // The tensor contents using a data-type format. This field must\n    // not be specified if \"raw\" tensor contents are being used for\n    // the inference response.\n    InferTensorContents contents = 5;\n  }\n\n  // The name of the model used for inference.\n  string model_name = 1;\n\n  // The version of the model used for inference.\n  string model_version =", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "083f45ac-c531-4383-831a-e7399336f908", "page": "apis/inference/v2", "section": "id7", "text": "format. This field must\n    // not be specified if \"raw\" tensor contents are being used for\n    // the inference response.\n    InferTensorContents contents = 5;\n  }\n\n  // The name of the model used for inference.\n  string model_name = 1;\n\n  // The version of the model used for inference.\n  string model_version = 2;\n\n  // The id of the inference request if one was specified.\n  string id = 3;\n\n  // Optional inference response parameters.\n  map<string, InferParameter> parameters = 4;\n\n  // The output tensors holding inference results.\n  repeated InferOutputTensor outputs = 5;\n\n  // The data contained in an output tensor can be represented in\n  // \"raw\" bytes form or in the repeated type that matches the\n  // tensor's data type. To use the raw representation 'raw_output_contents'\n  // must be initialized with data for each tensor in the same order as\n  // 'outputs'. For each tensor, the size of this content must match\n  // what is expected by the tensor's shape and data type. The raw\n  // data must be the flattened, one-dimensional, row-major order of\n  // the tensor elements without any stride or padding between the\n  // elements. Note that the FP16 data type must be represented as raw\n  // content as there is no specific data type for a 16-bit float\n  // type.\n  //\n  // If this field is specified then InferOutputTensor::contents must\n  // not", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "95648754-ae21-4066-8782-1a492d7adb5c", "page": "apis/inference/v2", "section": "id7", "text": "the flattened, one-dimensional, row-major order of\n  // the tensor elements without any stride or padding between the\n  // elements. Note that the FP16 data type must be represented as raw\n  // content as there is no specific data type for a 16-bit float\n  // type.\n  //\n  // If this field is specified then InferOutputTensor::contents must\n  // not be specified for any output tensor.\n  repeated bytes raw_output_contents = 6;\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "32eea318-cbf3-4195-9f47-7b5cf318b47a", "page": "apis/inference/v2", "section": "id8", "text": "\nParameters\u00b6\nThe Parameters message describes a \u201cname\u201d/\u201dvalue\u201d pair, where the\n\u201cname\u201d is the name of the parameter and the \u201cvalue\u201d is a boolean,\ninteger, or string corresponding to the parameter.\nCurrently no parameters are defined. As required a future proposal may\ndefine one or more standard parameters to allow portable functionality\nacross different inference servers. A server can implement\nserver-specific parameters to provide non-standard capabilities.\n//\n// An inference parameter value.\n//\nmessage InferParameter\n{\n  // The parameter value can be a string, an int64, a boolean\n  // or a message specific to a predefined parameter.\n  oneof parameter_choice\n  {\n    // A boolean parameter value.\n    bool bool_param = 1;\n\n    // An int64 parameter value.\n    int64 int64_param = 2;\n\n    // A string parameter value.\n    string string_param = 3;\n  }\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "23613684-1510-4cb8-b3f6-9d208a59c6f4", "page": "apis/inference/v2", "section": "id9", "text": "\nTensor Data\u00b6\nIn all representations tensor data must be flattened to a\none-dimensional, row-major order of the tensor elements. Element\nvalues must be given in \u201clinear\u201d order without any stride or padding\nbetween elements.\nUsing a \u201craw\u201d representation of tensors with\nModelInferRequest::raw_input_contents and\nModelInferResponse::raw_output_contents will typically allow higher\nperformance due to the way protobuf allocation and reuse interacts\nwith GRPC. For example, see https://github.com/grpc/grpc/issues/23231.\nAn alternative to the \u201craw\u201d representation is to use\nInferTensorContents to represent the tensor data in a format that\nmatches the tensor\u2019s data type.\n//\n// The data contained in a tensor represented by the repeated type\n// that matches the tensor's data type. Protobuf oneof is not used\n// because oneofs cannot contain repeated fields.\n//\nmessage InferTensorContents\n{\n  // Representation for BOOL data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated bool bool_contents = 1;\n\n  // Representation for INT8, INT16, and INT32 data types. The size\n  // must match what is expected by the tensor's shape. The contents\n  // must be the flattened, one-dimensional, row-major order of the\n  // tensor elements.\n  repeated int32 int_contents = 2;\n\n  // Representation for INT64 data types. The size must match what\n  // is expected by the tensor's shape. The contents must be the\n  // flattened, one-dimensional, row-major order of the tensor elements.\n  repeated int64 int64_contents = 3;\n\n  // Representation for UINT8, UINT16, and UINT32 data types. The size\n  // must match what is expected by the tensor's shape.", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "b65cd630-44a2-467b-b370-25d1bce80804", "page": "apis/inference/v2", "section": "id9", "text": " // Representation for INT64 data types. The size must match what\n  // is expected by the tensor's shape. The contents must be the\n  // flattened, one-dimensional, row-major order of the tensor elements.\n  repeated int64 int64_contents = 3;\n\n  // Representation for UINT8, UINT16, and UINT32 data types. The size\n  // must match what is expected by the tensor's shape. The contents\n  // must be the flattened, one-dimensional, row-major order of the\n  // tensor elements.\n  repeated uint32 uint_contents = 4;\n\n  // Representation for UINT64 data types. The size must match what\n  // is expected by the tensor's shape. The contents must be the\n  // flattened, one-dimensional, row-major order of the tensor elements.\n  repeated uint64 uint64_contents = 5;\n\n  // Representation for FP32 data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated float fp32_contents = 6;\n\n  // Representation for FP64 data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated double fp64_contents = 7;\n\n  // Representation for BYTES data type. The size must match what is\n  // expected by the tensor's shape. The contents must be the flattened,\n  // one-dimensional, row-major order of the tensor elements.\n  repeated bytes bytes_contents = 8;\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "d727ddb8-16fb-4f7a-b015-46a076fdac08", "page": "apis/inference/v2", "section": "platforms", "text": "\nPlatforms\u00b6\nA platform is a string indicating a DL/ML framework or\nbackend. Platform is returned as part of the response to a\nModel Metadata request but is information only. The\nproposed inference APIs are generic relative to the DL/ML framework\nused by a model and so a client does not need to know the platform of\na given model to use the API. Platform names use the format\n\u201c_\u201d. The following platform names are allowed:\n\ntensorrt_plan : A TensorRT model encoded as a serialized engine or \u201cplan\u201d.\ntensorflow_graphdef : A TensorFlow model encoded as a GraphDef.\ntensorflow_savedmodel : A TensorFlow model encoded as a SavedModel.\nonnx_onnxv1 : A ONNX model encoded for ONNX Runtime.\npytorch_torchscript : A PyTorch model encoded as TorchScript.\nmxnet_mxnet: An MXNet model\ncaffe2_netdef : A Caffe2 model encoded as a NetDef.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/inference/v2.html", "key": "apis/inference/v2"}}, {"key": "cea349e8-3616-439c-ba25-5aa64d51a023", "page": "apis/internal/agent", "section": "agent-api", "text": "\nAgent API\u00b6\nThis API is for communication between the Seldon Scheduler and the Seldon Agent which runs next to each inference server and manages the loading and unloading of models onto the server as well as acting as a reverse proxy in the data plane for handling requests to the inference server.\n\nProto Definition\u00b6\nsyntax = \"proto3\";\n\npackage seldon.mlops.agent;\n\noption go_package = \"github.com/seldonio/seldon-core/apis/go/v2/mlops/agent\";\n\nimport \"mlops/scheduler/scheduler.proto\";\n\n// [START Messages]\n\nmessage ModelEventMessage {\n  string serverName = 1;\n  uint32 replicaIdx = 2;\n  string modelName = 3;\n  uint32 modelVersion = 4;\n  enum Event {\n      UNKNOWN_EVENT = 0;\n      LOAD_FAIL_MEMORY = 1;\n      LOADED = 2;\n      LOAD_FAILED = 3;\n      UNLOADED = 4;\n      UNLOAD_FAILED = 5;\n      REMOVED = 6; // unloaded and removed from local PVC\n      REMOVE_FAILED = 7;\n      RSYNC = 9; // Ask server for all models that need to be loaded\n      }\n  Event event = 5;\n  string message = 6;\n  uint64 availableMemoryBytes = 7;\n}\n\nmessage ModelEventResponse {\n\n}\n\nmessage ModelScalingTriggerMessage {\n  string serverName = 1;\n  uint32 replicaIdx = 2;\n  string modelName = 3;\n  uint32 modelVersion = 4;\n  enum Trigger {\n      SCALE_UP = 0;\n      SCALE_DOWN = 1;\n      }\n  Trigger trigger = 5;\n  uint32 amount", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/agent.html", "key": "apis/internal/agent"}}, {"key": "9b2af0da-4904-4487-b231-41f21a10dfdd", "page": "apis/internal/agent", "section": "agent-api", "text": "6;\n  uint64 availableMemoryBytes = 7;\n}\n\nmessage ModelEventResponse {\n\n}\n\nmessage ModelScalingTriggerMessage {\n  string serverName = 1;\n  uint32 replicaIdx = 2;\n  string modelName = 3;\n  uint32 modelVersion = 4;\n  enum Trigger {\n      SCALE_UP = 0;\n      SCALE_DOWN = 1;\n      }\n  Trigger trigger = 5;\n  uint32 amount = 6;  // number of replicas required\n  map<string,uint32> metrics = 7;  // optional metrics to expose to the scheduler\n}\n\nmessage ModelScalingTriggerResponse {\n\n}\n\nmessage AgentDrainRequest {\n  string serverName = 1;\n  uint32 replicaIdx = 2;\n}\n\nmessage AgentDrainResponse {\n  bool success = 1;\n}\n\nmessage AgentSubscribeRequest {\n  string serverName = 1;\n  bool shared = 2;\n  uint32 replicaIdx = 3;\n  ReplicaConfig replicaConfig = 4;\n  repeated ModelVersion loadedModels = 5;\n  uint64 availableMemoryBytes = 6;\n}\n\nmessage ReplicaConfig {\n  string inferenceSvc = 1; // inference DNS service name\n  int32 inferenceHttpPort = 2; // inference HTTP port\n  int32 inferenceGrpcPort = 3; // Inference grpc port\n  uint64 memoryBytes = 4; // The memory capacity of the server replica\n  repeated string capabilities = 5; // The list of capabilities of the server, e.g. sklearn, pytorch, xgboost, mlflow\n  uint32 overCommitPercentage = 6; // The percentage of over commit to allow, set to 0 (%) to disable over commit\n}\n\nmessage ModelOperationMessage {\n  enum Operation {\n    UNKNOWN_EVENT = 0;\n    LOAD_MODEL = 1;\n    UNLOAD_MODEL = 2;\n  }\n  Operation operation = 1;\n  ModelVersion", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/agent.html", "key": "apis/internal/agent"}}, {"key": "8c2f7e97-2d30-4fcc-ba69-cb0c532be374", "page": "apis/internal/agent", "section": "agent-api", "text": "of capabilities of the server, e.g. sklearn, pytorch, xgboost, mlflow\n  uint32 overCommitPercentage = 6; // The percentage of over commit to allow, set to 0 (%) to disable over commit\n}\n\nmessage ModelOperationMessage {\n  enum Operation {\n    UNKNOWN_EVENT = 0;\n    LOAD_MODEL = 1;\n    UNLOAD_MODEL = 2;\n  }\n  Operation operation = 1;\n  ModelVersion modelVersion = 2;\n  bool autoscalingEnabled = 3;\n}\n\nmessage ModelVersion {\n  scheduler.Model model = 1;\n  uint32 version = 2;\n}\n\n// [END Messages]\n\n// [START Services]\n\nservice AgentService {\n  rpc AgentEvent(ModelEventMessage) returns (ModelEventResponse) {};\n  rpc Subscribe(AgentSubscribeRequest) returns (stream ModelOperationMessage) {};\n  rpc ModelScalingTrigger(stream ModelScalingTriggerMessage) returns (ModelScalingTriggerResponse) {};\n  rpc AgentDrain(AgentDrainRequest) returns (AgentDrainResponse) {};\n}\n\n// [END Services]\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/agent.html", "key": "apis/internal/agent"}}, {"key": "225dba13-a5fd-45a8-964c-5d0e97a52a9e", "page": "apis/internal/agent", "section": "proto-definition", "text": "\nProto Definition\u00b6\nsyntax = \"proto3\";\n\npackage seldon.mlops.agent;\n\noption go_package = \"github.com/seldonio/seldon-core/apis/go/v2/mlops/agent\";\n\nimport \"mlops/scheduler/scheduler.proto\";\n\n// [START Messages]\n\nmessage ModelEventMessage {\n  string serverName = 1;\n  uint32 replicaIdx = 2;\n  string modelName = 3;\n  uint32 modelVersion = 4;\n  enum Event {\n      UNKNOWN_EVENT = 0;\n      LOAD_FAIL_MEMORY = 1;\n      LOADED = 2;\n      LOAD_FAILED = 3;\n      UNLOADED = 4;\n      UNLOAD_FAILED = 5;\n      REMOVED = 6; // unloaded and removed from local PVC\n      REMOVE_FAILED = 7;\n      RSYNC = 9; // Ask server for all models that need to be loaded\n      }\n  Event event = 5;\n  string message = 6;\n  uint64 availableMemoryBytes = 7;\n}\n\nmessage ModelEventResponse {\n\n}\n\nmessage ModelScalingTriggerMessage {\n  string serverName = 1;\n  uint32 replicaIdx = 2;\n  string modelName = 3;\n  uint32 modelVersion = 4;\n  enum Trigger {\n      SCALE_UP = 0;\n      SCALE_DOWN = 1;\n      }\n  Trigger trigger = 5;\n  uint32 amount = 6;  // number of replicas required\n  map<string,uint32> metrics = 7;  // optional metrics to expose to the scheduler\n}\n\nmessage ModelScalingTriggerResponse {\n\n}\n\nmessage AgentDrainRequest {\n  string serverName = 1;\n  uint32 replicaIdx = 2;\n}\n\nmessage AgentDrainResponse {\n  bool success = 1;\n}\n\nmessage AgentSubscribeRequest {\n  string serverName = 1;\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/agent.html", "key": "apis/internal/agent"}}, {"key": "f78d2a82-6386-47dc-8caa-028dec19bb70", "page": "apis/internal/agent", "section": "proto-definition", "text": "     }\n  Trigger trigger = 5;\n  uint32 amount = 6;  // number of replicas required\n  map<string,uint32> metrics = 7;  // optional metrics to expose to the scheduler\n}\n\nmessage ModelScalingTriggerResponse {\n\n}\n\nmessage AgentDrainRequest {\n  string serverName = 1;\n  uint32 replicaIdx = 2;\n}\n\nmessage AgentDrainResponse {\n  bool success = 1;\n}\n\nmessage AgentSubscribeRequest {\n  string serverName = 1;\n  bool shared = 2;\n  uint32 replicaIdx = 3;\n  ReplicaConfig replicaConfig = 4;\n  repeated ModelVersion loadedModels = 5;\n  uint64 availableMemoryBytes = 6;\n}\n\nmessage ReplicaConfig {\n  string inferenceSvc = 1; // inference DNS service name\n  int32 inferenceHttpPort = 2; // inference HTTP port\n  int32 inferenceGrpcPort = 3; // Inference grpc port\n  uint64 memoryBytes = 4; // The memory capacity of the server replica\n  repeated string capabilities = 5; // The list of capabilities of the server, e.g. sklearn, pytorch, xgboost, mlflow\n  uint32 overCommitPercentage = 6; // The percentage of over commit to allow, set to 0 (%) to disable over commit\n}\n\nmessage ModelOperationMessage {\n  enum Operation {\n    UNKNOWN_EVENT = 0;\n    LOAD_MODEL = 1;\n    UNLOAD_MODEL = 2;\n  }\n  Operation operation = 1;\n  ModelVersion modelVersion = 2;\n  bool autoscalingEnabled = 3;\n}\n\nmessage ModelVersion {\n  scheduler.Model model = 1;\n  uint32 version = 2;\n}\n\n// [END Messages]\n\n// [START Services]\n\nservice AgentService {\n  rpc AgentEvent(ModelEventMessage) returns (ModelEventResponse) {};\n  rpc Subscribe(AgentSubscribeRequest) returns (stream ModelOperationMessage) {};\n  rpc ModelScalingTrigger(stream ModelScalingTriggerMessage) returns (ModelScalingTriggerResponse) {};\n  rpc AgentDrain(AgentDrainRequest) returns", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/agent.html", "key": "apis/internal/agent"}}, {"key": "a7096ec8-7121-44bd-a994-98541a56b6f4", "page": "apis/internal/agent", "section": "proto-definition", "text": "  UNLOAD_MODEL = 2;\n  }\n  Operation operation = 1;\n  ModelVersion modelVersion = 2;\n  bool autoscalingEnabled = 3;\n}\n\nmessage ModelVersion {\n  scheduler.Model model = 1;\n  uint32 version = 2;\n}\n\n// [END Messages]\n\n// [START Services]\n\nservice AgentService {\n  rpc AgentEvent(ModelEventMessage) returns (ModelEventResponse) {};\n  rpc Subscribe(AgentSubscribeRequest) returns (stream ModelOperationMessage) {};\n  rpc ModelScalingTrigger(stream ModelScalingTriggerMessage) returns (ModelScalingTriggerResponse) {};\n  rpc AgentDrain(AgentDrainRequest) returns (AgentDrainResponse) {};\n}\n\n// [END Services]\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/internal/agent.html", "key": "apis/internal/agent"}}, {"key": "d9d75af4-053c-4d01-ac66-01050d712770", "page": "cli", "section": "cli", "text": "\nCLI\u00b6\nSeldon provides a CLI to allow easy management and testing of Model, Experiment, and Pipeline resources.\nAt present this needs to be built by hand from the operator folder.\nmake build-seldon     # for linux/macOS amd64\nmake build-seldon-arm # for macOS ARM\n\n\nThen place the bin/seldon executable in your path.\n\ncli docs\n\n\nEnvironment Variables and Services\u00b6\nThe CLI talks to 3 backend services on default endpoints:\n\nThe Seldon Core V2 Scheduler: default 0.0.0.0:9004\nThe Seldon Core inference endpoint: default 0.0.0.0:9000\nThe Seldon Kafka broker: default: 0.0.0.0:9092\n\nThese defaults will be correct when Seldon Core v2 is installed locally as per the docs. For Kubernetes, you will need to change these by defining environment variables.\nconst (\n\tdefaultInferHost     = \"0.0.0.0:9000\"\n\tdefaultKafkaHost     = \"0.0.0.0:9092\"\n\tdefaultSchedulerHost = \"0.0.0.0:9004\"\n)\n\n\n\n\nKubernetes Usage\u00b6\n\nInference Service\u00b6\nFor a default install into the seldon-mesh namespace if you have exposed the inference svc as a loadbalancer you will find it at:\nkubectl get svc seldon-mesh -n seldon-mesh -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n\n\nUse above IP at port 80:\nexport SELDON_INFER_HOST=<ip>:80\n\n\n\n\nScheduler Service\u00b6\nFor a default install into the seldon-mesh namespace if you have exposed the scheduler svc as a loadbalancer you will find it at:\nkubectl get svc seldon-scheduler -n seldon-mesh -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n\n\nUse above IP at port 9004:\nexport SELDON_SCHEDULE_HOST=<ip>:9004\n\n\n\n\nKafka Broker\u00b6\nThe Kafka broker will depend on how you have installed Kafka into your Kubernetes cluster. Find the broker IP and use:\nexport SELDON_KAFKA_BROKER=<ip>:<port>\n\n\n\n\n\nConfig file\u00b6\nYou can create a config file to manage connections to running seldon core v2 installs. The settings will override any environment variable settings.\nThe definition is shown below:\ntype SeldonCLIConfig struct {\n\tDataplane    *Dataplane    `json:\"dataplane,omitempty\"`\n\tControlplane *ControlPlane `json:\"controlplane,omitempty\"`\n\tKafka", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/index.html", "key": "cli"}}, {"key": "e5f5eb99-b706-4900-ad54-fd34613f5922", "page": "cli", "section": "cli", "text": "9004:\nexport SELDON_SCHEDULE_HOST=<ip>:9004\n\n\n\n\nKafka Broker\u00b6\nThe Kafka broker will depend on how you have installed Kafka into your Kubernetes cluster. Find the broker IP and use:\nexport SELDON_KAFKA_BROKER=<ip>:<port>\n\n\n\n\n\nConfig file\u00b6\nYou can create a config file to manage connections to running seldon core v2 installs. The settings will override any environment variable settings.\nThe definition is shown below:\ntype SeldonCLIConfig struct {\n\tDataplane    *Dataplane    `json:\"dataplane,omitempty\"`\n\tControlplane *ControlPlane `json:\"controlplane,omitempty\"`\n\tKafka        *KafkaConfig  `json:\"kafka,omitempty\"`\n}\n\ntype Dataplane struct {\n\tInferHost     string `json:\"inferHost,omitempty\"`\n\tTls           bool   `json:\"tls,omitempty\"`\n\tSkipSSLVerify bool   `json:\"skipSSLVerify,omitempty\"`\n\tKeyPath       string `json:\"keyPath,omitempty\"`\n\tCrtPath       string `json:\"crtPath,omitempty\"`\n\tCaPath        string `json:\"caPath,omitempty\"`\n}\n\ntype ControlPlane struct {\n\tSchedulerHost string `json:\"schedulerHost,omitempty\"`\n\tTls           bool   `json:\"tls,omitempty\"`\n\tKeyPath       string `json:\"keyPath,omitempty\"`\n\tCrtPath       string `json:\"crtPath,omitempty\"`\n\tCaPath        string `json:\"caPath,omitempty\"`\n}\n\nconst (\n\tKafkaConfigProtocolSSL          = \"ssl\"\n\tKafkaConfigProtocolSASLSSL      = \"sasl_ssl\"\n\tKafkaConfigProtocolSASLPlaintxt = \"sasl_plaintxt\"\n)\n\ntype KafkaConfig struct {\n\tBootstrap    string `json:\"bootstrap,omitempty\"`\n\tNamespace    string `json:\"namespace,omitempty\"`\n\tProtocol     string `json:\"protocol,omitempty\"`\n\tKeyPath      string `json:\"keyPath,omitempty\"`\n\tCrtPath      string `json:\"crtPath,omitempty\"`\n\tCaPath       string `json:\"caPath,omitempty\"`\n\tSaslUsername string `json:\"saslUsername,omitempty\"`\n\tSaslPassword string `json:\"saslPassword,omitempty\"`\n\tTopicPrefix  string `json:\"topicPrefix,omitempty\"`\n}\n\n\nAn example below shows an example where we connect via TLS to the Seldon scheduler using our scheduler", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/index.html", "key": "cli"}}, {"key": "9d0bed27-45d7-4fb0-af20-3b9abee64fe0", "page": "cli", "section": "cli", "text": "struct {\n\tBootstrap    string `json:\"bootstrap,omitempty\"`\n\tNamespace    string `json:\"namespace,omitempty\"`\n\tProtocol     string `json:\"protocol,omitempty\"`\n\tKeyPath      string `json:\"keyPath,omitempty\"`\n\tCrtPath      string `json:\"crtPath,omitempty\"`\n\tCaPath       string `json:\"caPath,omitempty\"`\n\tSaslUsername string `json:\"saslUsername,omitempty\"`\n\tSaslPassword string `json:\"saslPassword,omitempty\"`\n\tTopicPrefix  string `json:\"topicPrefix,omitempty\"`\n}\n\n\nAn example below shows an example where we connect via TLS to the Seldon scheduler using our scheduler client certificate:\n{\n    \"controlplane\":{\n\t\"schedulerHost\": \"seldon-scheduler.svc:9044\",\n\t\"tls\"; true,\n\t\"keyPath\": \"/home/certs/seldon-scheduler-client/tls.key\",\n\t\"crtPath\": \"/home/certs/seldon-scheduler-client/tls.crt\",\n\t\"caPath\": \"/home/certs/seldon-scheduler-client/ca.crt\"\n    }\n}\n\n\n\nTo manage config files and activate them you can use the CLI command seldon config which has subcommands to list, add, remove, activate and decative configs.\nFor example:\n$ seldon config list\nconfig\t\tpath\t\t\t\t\t\tactive\n------\t\t----\t\t\t\t\t\t------\nkind-sasl\t/home/work/seldon/cli/config-sasl.json\t\t*\n\n$ seldon config deactivate kind-sasl\n\n$ seldon config list\nconfig\t\tpath\t\t\t\t\t\tactive\n------\t\t----\t\t\t\t\t\t------\nkind-sasl\t/home/work/seldon/cli/config-sasl.json\n\n$ seldon config add gcp-scv2 ~/seldon/cli/gcp.json\n\n$ seldon config list\nconfig\t\tpath\t\t\t\t\t\tactive\n------\t\t----\t\t\t\t\t\t------\ngcp-scv2\t/home/work/seldon/cli/gcp.json\nkind-sasl\t/home/work/seldon/cli/config-sasl.json\n\n$ seldon config activate gcp-scv2\n\n$ seldon config list\nconfig\t\tpath\t\t\t\t\t\tactive\n------\t\t----\t\t\t\t\t\t------\ngcp-scv2\t/home/work/seldon/cli/gcp.json\t    \t\t*\nkind-sasl\t/home/work/seldon/cli/config-sasl.json\n\n$ seldon config list kind-sasl\n{\n  \"controlplane\": {\n    \"schedulerHost\": \"172.19.255.2:9004\"\n  },\n  \"kafka\": {\n    \"bootstrap\": \"172.19.255.3:9093\",\n    \"caPath\": \"/home/work/gcp/scv2/certs/seldon-cluster-ca-cert/ca.crt\"\n  }\n}\n\n\n\n\nTLS Certificates for Local Use\u00b6\nFor running with Kubernetes TLS connections on the control and/or data plane, certificates will need to be downloaded locally. We provide an example script which will download certificates from a Kubernetes secret and store them in a folder. It can be found in hack/download-k8s-certs.sh and takes 2 or 3 arguments:\n./download-k8s-certs.sh <namespace> <secret> [<folder>]\n\n\ne.g.:\n./download-k8s-certs.sh seldon-mesh seldon-scheduler-client\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/index.html", "key": "cli"}}, {"key": "fe254a2c-bce3-4fa1-93bc-f46e2c65bd8c", "page": "cli", "section": "environment-variables-and-services", "text": "\nEnvironment Variables and Services\u00b6\nThe CLI talks to 3 backend services on default endpoints:\n\nThe Seldon Core V2 Scheduler: default 0.0.0.0:9004\nThe Seldon Core inference endpoint: default 0.0.0.0:9000\nThe Seldon Kafka broker: default: 0.0.0.0:9092\n\nThese defaults will be correct when Seldon Core v2 is installed locally as per the docs. For Kubernetes, you will need to change these by defining environment variables.\nconst (\n\tdefaultInferHost     = \"0.0.0.0:9000\"\n\tdefaultKafkaHost     = \"0.0.0.0:9092\"\n\tdefaultSchedulerHost = \"0.0.0.0:9004\"\n)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/index.html", "key": "cli"}}, {"key": "d3c6a3e4-de6d-4c9f-82b2-8f68f8196270", "page": "cli", "section": "kubernetes-usage", "text": "\nKubernetes Usage\u00b6\n\nInference Service\u00b6\nFor a default install into the seldon-mesh namespace if you have exposed the inference svc as a loadbalancer you will find it at:\nkubectl get svc seldon-mesh -n seldon-mesh -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n\n\nUse above IP at port 80:\nexport SELDON_INFER_HOST=<ip>:80\n\n\n\n\nScheduler Service\u00b6\nFor a default install into the seldon-mesh namespace if you have exposed the scheduler svc as a loadbalancer you will find it at:\nkubectl get svc seldon-scheduler -n seldon-mesh -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n\n\nUse above IP at port 9004:\nexport SELDON_SCHEDULE_HOST=<ip>:9004\n\n\n\n\nKafka Broker\u00b6\nThe Kafka broker will depend on how you have installed Kafka into your Kubernetes cluster. Find the broker IP and use:\nexport SELDON_KAFKA_BROKER=<ip>:<port>\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/index.html", "key": "cli"}}, {"key": "a05eb2ae-1ad1-4763-a4e8-5d20720b502a", "page": "cli", "section": "config-file", "text": "\nConfig file\u00b6\nYou can create a config file to manage connections to running seldon core v2 installs. The settings will override any environment variable settings.\nThe definition is shown below:\ntype SeldonCLIConfig struct {\n\tDataplane    *Dataplane    `json:\"dataplane,omitempty\"`\n\tControlplane *ControlPlane `json:\"controlplane,omitempty\"`\n\tKafka        *KafkaConfig  `json:\"kafka,omitempty\"`\n}\n\ntype Dataplane struct {\n\tInferHost     string `json:\"inferHost,omitempty\"`\n\tTls           bool   `json:\"tls,omitempty\"`\n\tSkipSSLVerify bool   `json:\"skipSSLVerify,omitempty\"`\n\tKeyPath       string `json:\"keyPath,omitempty\"`\n\tCrtPath       string `json:\"crtPath,omitempty\"`\n\tCaPath        string `json:\"caPath,omitempty\"`\n}\n\ntype ControlPlane struct {\n\tSchedulerHost string `json:\"schedulerHost,omitempty\"`\n\tTls           bool   `json:\"tls,omitempty\"`\n\tKeyPath       string `json:\"keyPath,omitempty\"`\n\tCrtPath       string `json:\"crtPath,omitempty\"`\n\tCaPath        string `json:\"caPath,omitempty\"`\n}\n\nconst (\n\tKafkaConfigProtocolSSL          = \"ssl\"\n\tKafkaConfigProtocolSASLSSL      = \"sasl_ssl\"\n\tKafkaConfigProtocolSASLPlaintxt = \"sasl_plaintxt\"\n)\n\ntype KafkaConfig struct {\n\tBootstrap    string `json:\"bootstrap,omitempty\"`\n\tNamespace    string `json:\"namespace,omitempty\"`\n\tProtocol     string `json:\"protocol,omitempty\"`\n\tKeyPath      string `json:\"keyPath,omitempty\"`\n\tCrtPath      string `json:\"crtPath,omitempty\"`\n\tCaPath       string `json:\"caPath,omitempty\"`\n\tSaslUsername string `json:\"saslUsername,omitempty\"`\n\tSaslPassword string `json:\"saslPassword,omitempty\"`\n\tTopicPrefix  string `json:\"topicPrefix,omitempty\"`\n}\n\n\nAn example below shows an example where we connect via TLS to the Seldon scheduler using our scheduler client certificate:\n{\n    \"controlplane\":{\n\t\"schedulerHost\": \"seldon-scheduler.svc:9044\",\n\t\"tls\"; true,\n\t\"keyPath\": \"/home/certs/seldon-scheduler-client/tls.key\",\n\t\"crtPath\": \"/home/certs/seldon-scheduler-client/tls.crt\",\n\t\"caPath\": \"/home/certs/seldon-scheduler-client/ca.crt\"\n    }\n}\n\n\n\nTo manage config files and activate them you can", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/index.html", "key": "cli"}}, {"key": "fe36c24c-d7fa-494b-8c93-96c139a851ec", "page": "cli", "section": "config-file", "text": "string `json:\"keyPath,omitempty\"`\n\tCrtPath      string `json:\"crtPath,omitempty\"`\n\tCaPath       string `json:\"caPath,omitempty\"`\n\tSaslUsername string `json:\"saslUsername,omitempty\"`\n\tSaslPassword string `json:\"saslPassword,omitempty\"`\n\tTopicPrefix  string `json:\"topicPrefix,omitempty\"`\n}\n\n\nAn example below shows an example where we connect via TLS to the Seldon scheduler using our scheduler client certificate:\n{\n    \"controlplane\":{\n\t\"schedulerHost\": \"seldon-scheduler.svc:9044\",\n\t\"tls\"; true,\n\t\"keyPath\": \"/home/certs/seldon-scheduler-client/tls.key\",\n\t\"crtPath\": \"/home/certs/seldon-scheduler-client/tls.crt\",\n\t\"caPath\": \"/home/certs/seldon-scheduler-client/ca.crt\"\n    }\n}\n\n\n\nTo manage config files and activate them you can use the CLI command seldon config which has subcommands to list, add, remove, activate and decative configs.\nFor example:\n$ seldon config list\nconfig\t\tpath\t\t\t\t\t\tactive\n------\t\t----\t\t\t\t\t\t------\nkind-sasl\t/home/work/seldon/cli/config-sasl.json\t\t*\n\n$ seldon config deactivate kind-sasl\n\n$ seldon config list\nconfig\t\tpath\t\t\t\t\t\tactive\n------\t\t----\t\t\t\t\t\t------\nkind-sasl\t/home/work/seldon/cli/config-sasl.json\n\n$ seldon config add gcp-scv2 ~/seldon/cli/gcp.json\n\n$ seldon config list\nconfig\t\tpath\t\t\t\t\t\tactive\n------\t\t----\t\t\t\t\t\t------\ngcp-scv2\t/home/work/seldon/cli/gcp.json\nkind-sasl\t/home/work/seldon/cli/config-sasl.json\n\n$ seldon config activate gcp-scv2\n\n$ seldon config list\nconfig\t\tpath\t\t\t\t\t\tactive\n------\t\t----\t\t\t\t\t\t------\ngcp-scv2\t/home/work/seldon/cli/gcp.json\t    \t\t*\nkind-sasl\t/home/work/seldon/cli/config-sasl.json\n\n$ seldon config list kind-sasl\n{\n  \"controlplane\": {\n    \"schedulerHost\": \"172.19.255.2:9004\"\n  },\n  \"kafka\": {\n    \"bootstrap\": \"172.19.255.3:9093\",\n    \"caPath\": \"/home/work/gcp/scv2/certs/seldon-cluster-ca-cert/ca.crt\"\n  }\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/index.html", "key": "cli"}}, {"key": "b123ff52-d6ff-484f-beed-f1f966dce432", "page": "cli/docs/seldon_pipeline_inspect", "section": "seldon-pipeline-inspect", "text": "\nseldon pipeline inspect\u00b6\ninspect data in a pipeline\n\nSynopsis\u00b6\ninspect data in a pipeline. Specify as pipelineName or pipelineName.(inputs|outputs) or pipelineName.stepName or pipelineName.stepName.(inputs|outputs) or pipelineName.stepName.(inputs|outputs).tensorName\nseldon pipeline inspect <expression> [flags]\n\n\n\n\nOptions\u00b6\n      --format string           inspect output format: raw or json. Default raw (default \"raw\")\n  -h, --help                    help for inspect\n      --kafka-broker string     kafka broker (default \"0.0.0.0:9092\")\n      --namespace string        Kubernetes namespace. Default default (default \"default\")\n      --offset int              message offset to start reading from, i.e. default 1 is the last message only (default 1)\n      --request-id string       request id to show, if not specified will be all messages in offset range\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n      --verbose                 display more details, such as headers\n\n\n\n\nSEE ALSO\u00b6\n\nseldon pipeline\t - manage pipelines\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_inspect.html", "key": "cli/docs/seldon_pipeline_inspect"}}, {"key": "3ae856bb-9c7b-4980-b068-1778e019177c", "page": "cli/docs/seldon_pipeline_inspect", "section": "options", "text": "\nOptions\u00b6\n      --format string           inspect output format: raw or json. Default raw (default \"raw\")\n  -h, --help                    help for inspect\n      --kafka-broker string     kafka broker (default \"0.0.0.0:9092\")\n      --namespace string        Kubernetes namespace. Default default (default \"default\")\n      --offset int              message offset to start reading from, i.e. default 1 is the last message only (default 1)\n      --request-id string       request id to show, if not specified will be all messages in offset range\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n      --verbose                 display more details, such as headers\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_inspect.html", "key": "cli/docs/seldon_pipeline_inspect"}}, {"key": "b5acdd2d-7051-4ea5-a851-628143e11070", "page": "examples/local-examples", "section": "local-examples", "text": "\nLocal Examples\u00b6\nRun these examples from the samples folder.\n\nSeldon V2 Non Kubernetes Local Examples\u00b6\n\nSKLearn Model\u00b6\nWe use a simple sklearn iris classification model\ncat ./models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nLoad the model\nseldon model load -f ./models/sklearn-iris-gs.yaml\n\n\n{}\n\n\nWait for the model to be ready\nseldon model status iris -w ModelAvailable | jq -M .\n\n\n{}\n\n\nDo a REST inference call\nseldon model infer iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"983bd95f-4b4d-4ff1-95b2-df9d6d089164\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nDo a gRPC inference call\nseldon model infer iris --inference-mode grpc \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"parameters\": {\n        \"content_type\": {\n          \"stringParam\": \"np\"\n        }\n      },\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\nUnload the model\nseldon model unload", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "5bd949ec-b809-477b-9e3b-6bd52ab9d8ed", "page": "examples/local-examples", "section": "local-examples", "text": "       }\n      },\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\nUnload the model\nseldon model unload iris\n\n\n\n\nTensorflow Model\u00b6\nWe run a simple tensorflow model. Note the requirements section specifying tensorflow.\ncat ./models/tfsimple1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\n\n\n{}\n\n\nWait for the model to be ready.\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n\n\nGet model metadata\nseldon model metadata tfsimple1\n\n\n{\n\t\"name\": \"tfsimple1_1\",\n\t\"versions\": [\n\t\t\"1\"\n\t],\n\t\"platform\": \"tensorflow_graphdef\",\n\t\"inputs\": [\n\t\t{\n\t\t\t\"name\": \"INPUT0\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"INPUT1\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t}\n\t],\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nDo a REST inference call.\nseldon model infer tfsimple1 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"tfsimple1_1\",\n  \"model_version\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "bb5939f7-d94a-4e02-ab19-2b7ddef8bf6e", "page": "examples/local-examples", "section": "local-examples", "text": "  1,\n        16\n      ],\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "bd1c5544-1bf5-47ae-88a4-3028b1d57b4a", "page": "examples/local-examples", "section": "local-examples", "text": "  1,\n        16\n      ],\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ]\n    }\n  ]\n}\n\n\nDo a gRPC inference call\nseldon model infer tfsimple1 --inference-mode grpc \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"tfsimple1_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "0c80fd1d-7a0f-47d7-aae0-268281485069", "page": "examples/local-examples", "section": "local-examples", "text": "  {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "b46ecb07-2e87-4da2-9fcd-72b215e5dc7a", "page": "examples/local-examples", "section": "local-examples", "text": "         28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "a8df720c-507e-4d35-9453-64d7afc4634b", "page": "examples/local-examples", "section": "local-examples", "text": "        0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0\n        ]\n      }\n    }\n  ]\n}\n\n\nUnload the model\nseldon model unload tfsimple1\n\n\n\n\nExperiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate an experiment.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris | jq -M .\nseldon model status iris2 | jq -M .\n\n\n{\n  \"modelName\": \"iris\",\n  \"versions\": [\n    {\n      \"version\": 1,\n      \"serverName\": \"mlserver\",\n      \"kubernetesMeta\": {},\n      \"modelReplicaState\": {\n        \"0\": {\n          \"state\": \"Available\",\n          \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362720538Z\"\n        }\n      },\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "c4dcab6d-7e11-4ed2-8ce6-122464a0683d", "page": "examples/local-examples", "section": "local-examples", "text": "   \"serverName\": \"mlserver\",\n      \"kubernetesMeta\": {},\n      \"modelReplicaState\": {\n        \"0\": {\n          \"state\": \"Available\",\n          \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362720538Z\"\n        }\n      },\n      \"state\": {\n        \"state\": \"ModelAvailable\",\n        \"availableReplicas\": 1,\n        \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362720538Z\"\n      },\n      \"modelDefn\": {\n        \"meta\": {\n          \"name\": \"iris\",\n          \"kubernetesMeta\": {}\n        },\n        \"modelSpec\": {\n          \"uri\": \"gs://seldon-models/mlserver/iris\",\n          \"requirements\": [\n            \"sklearn\"\n          ]\n        },\n        \"deploymentSpec\": {\n          \"replicas\": 1\n        }\n      }\n    }\n  ]\n}\n{\n  \"modelName\": \"iris2\",\n  \"versions\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "5be95745-c89b-425d-ae3b-a1931c7a7d65", "page": "examples/local-examples", "section": "local-examples", "text": "\"sklearn\"\n          ]\n        },\n        \"deploymentSpec\": {\n          \"replicas\": 1\n        }\n      }\n    }\n  ]\n}\n{\n  \"modelName\": \"iris2\",\n  \"versions\": [\n    {\n      \"version\": 1,\n      \"serverName\": \"mlserver\",\n      \"kubernetesMeta\": {},\n      \"modelReplicaState\": {\n        \"0\": {\n          \"state\": \"Available\",\n          \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362845079Z\"\n        }\n      },\n      \"state\": {\n        \"state\": \"ModelAvailable\",\n        \"availableReplicas\": 1,\n        \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362845079Z\"\n      },\n      \"modelDefn\": {\n        \"meta\": {\n          \"name\": \"iris2\",\n          \"kubernetesMeta\": {}\n        },\n        \"modelSpec\": {\n          \"uri\": \"gs://seldon-models/mlserver/iris\",\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "a2650bbe-648d-4ce7-8b1e-5f00d580e40d", "page": "examples/local-examples", "section": "local-examples", "text": "    \"meta\": {\n          \"name\": \"iris2\",\n          \"kubernetesMeta\": {}\n        },\n        \"modelSpec\": {\n          \"uri\": \"gs://seldon-models/mlserver/iris\",\n          \"requirements\": [\n            \"sklearn\"\n          ]\n        },\n        \"deploymentSpec\": {\n          \"replicas\": 1\n        }\n      }\n    }\n  ]\n}\n\n\nCreate an experiment that modifies the iris model to add a second model splitting traffic 50/50 between the two.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nStart the experiment.\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\nWait for the experiment to be ready.\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\",", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "847c0841-cd28-4b22-b390-8baa6f8caf71", "page": "examples/local-examples", "section": "local-examples", "text": "experiment to be ready.\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::57 :iris_1::43]\n\n\n\nRun one more request\nseldon model infer iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"fa425bdf-737c-41fe-894d-58868f70fe5d\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nUse sticky session key passed by last infer request to ensure same route is taken each time.\nWe will test REST and gRPC.\nseldon model infer iris -s -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -s -i 50\\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nStop the experiment\nseldon experiment stop experiment-sample\n\n\nShow the requests all go to original model now.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::100]\n\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "edf6b140-87e8-43f3-a597-8c4f49475d37", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": "\nSeldon V2 Non Kubernetes Local Examples\u00b6\n\nSKLearn Model\u00b6\nWe use a simple sklearn iris classification model\ncat ./models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nLoad the model\nseldon model load -f ./models/sklearn-iris-gs.yaml\n\n\n{}\n\n\nWait for the model to be ready\nseldon model status iris -w ModelAvailable | jq -M .\n\n\n{}\n\n\nDo a REST inference call\nseldon model infer iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"983bd95f-4b4d-4ff1-95b2-df9d6d089164\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nDo a gRPC inference call\nseldon model infer iris --inference-mode grpc \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"parameters\": {\n        \"content_type\": {\n          \"stringParam\": \"np\"\n        }\n      },\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\nUnload the model\nseldon model unload iris\n\n\n\n\nTensorflow Model\u00b6\nWe run a simple tensorflow model.", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "4639f60e-2956-4024-84a9-185ecadd75ad", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": "}\n      },\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\nUnload the model\nseldon model unload iris\n\n\n\n\nTensorflow Model\u00b6\nWe run a simple tensorflow model. Note the requirements section specifying tensorflow.\ncat ./models/tfsimple1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\n\n\n{}\n\n\nWait for the model to be ready.\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n\n\nGet model metadata\nseldon model metadata tfsimple1\n\n\n{\n\t\"name\": \"tfsimple1_1\",\n\t\"versions\": [\n\t\t\"1\"\n\t],\n\t\"platform\": \"tensorflow_graphdef\",\n\t\"inputs\": [\n\t\t{\n\t\t\t\"name\": \"INPUT0\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"INPUT1\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t}\n\t],\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nDo a REST inference call.\nseldon model infer tfsimple1 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"tfsimple1_1\",\n  \"model_version\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "ba12517a-dd8e-47da-877b-39b00ebb7573", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": "   16\n      ],\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "8a335fc4-a0ef-4291-9905-44ceb36cb0c4", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": "   16\n      ],\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ]\n    }\n  ]\n}\n\n\nDo a gRPC inference call\nseldon model infer tfsimple1 --inference-mode grpc \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"tfsimple1_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n         ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "32518db9-f4d5-4404-9e02-2fcb87339b1e", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": " \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "15860f9a-c47a-4d29-80bf-b2fcc941002e", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": "  28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "1869b1ad-ccd1-46be-ac6b-42e4454c37e7", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": " 0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0\n        ]\n      }\n    }\n  ]\n}\n\n\nUnload the model\nseldon model unload tfsimple1\n\n\n\n\nExperiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate an experiment.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris | jq -M .\nseldon model status iris2 | jq -M .\n\n\n{\n  \"modelName\": \"iris\",\n  \"versions\": [\n    {\n      \"version\": 1,\n      \"serverName\": \"mlserver\",\n      \"kubernetesMeta\": {},\n      \"modelReplicaState\": {\n        \"0\": {\n          \"state\": \"Available\",\n          \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362720538Z\"\n        }\n      },\n      \"state\": {\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "e30d3324-91b1-4e9a-a6b9-9209b9b00028", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": "   \"kubernetesMeta\": {},\n      \"modelReplicaState\": {\n        \"0\": {\n          \"state\": \"Available\",\n          \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362720538Z\"\n        }\n      },\n      \"state\": {\n        \"state\": \"ModelAvailable\",\n        \"availableReplicas\": 1,\n        \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362720538Z\"\n      },\n      \"modelDefn\": {\n        \"meta\": {\n          \"name\": \"iris\",\n          \"kubernetesMeta\": {}\n        },\n        \"modelSpec\": {\n          \"uri\": \"gs://seldon-models/mlserver/iris\",\n          \"requirements\": [\n            \"sklearn\"\n          ]\n        },\n        \"deploymentSpec\": {\n          \"replicas\": 1\n        }\n      }\n    }\n  ]\n}\n{\n  \"modelName\": \"iris2\",\n  \"versions\": [\n    {\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "6df14037-4b99-454b-84e6-e781840bce57", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": "   ]\n        },\n        \"deploymentSpec\": {\n          \"replicas\": 1\n        }\n      }\n    }\n  ]\n}\n{\n  \"modelName\": \"iris2\",\n  \"versions\": [\n    {\n      \"version\": 1,\n      \"serverName\": \"mlserver\",\n      \"kubernetesMeta\": {},\n      \"modelReplicaState\": {\n        \"0\": {\n          \"state\": \"Available\",\n          \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362845079Z\"\n        }\n      },\n      \"state\": {\n        \"state\": \"ModelAvailable\",\n        \"availableReplicas\": 1,\n        \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362845079Z\"\n      },\n      \"modelDefn\": {\n        \"meta\": {\n          \"name\": \"iris2\",\n          \"kubernetesMeta\": {}\n        },\n        \"modelSpec\": {\n          \"uri\": \"gs://seldon-models/mlserver/iris\",\n          \"requirements\": [\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "d9a15151-6ae4-40a4-8506-84c8736aa29a", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": "        \"name\": \"iris2\",\n          \"kubernetesMeta\": {}\n        },\n        \"modelSpec\": {\n          \"uri\": \"gs://seldon-models/mlserver/iris\",\n          \"requirements\": [\n            \"sklearn\"\n          ]\n        },\n        \"deploymentSpec\": {\n          \"replicas\": 1\n        }\n      }\n    }\n  ]\n}\n\n\nCreate an experiment that modifies the iris model to add a second model splitting traffic 50/50 between the two.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nStart the experiment.\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\nWait for the experiment to be ready.\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::57 :iris_1::43]\n\n\n\nRun", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "4c109874-be28-417b-b86b-3c9e63424402", "page": "examples/local-examples", "section": "seldon-v2-non-kubernetes-local-examples", "text": "-w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::57 :iris_1::43]\n\n\n\nRun one more request\nseldon model infer iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"fa425bdf-737c-41fe-894d-58868f70fe5d\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nUse sticky session key passed by last infer request to ensure same route is taken each time.\nWe will test REST and gRPC.\nseldon model infer iris -s -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -s -i 50\\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nStop the experiment\nseldon experiment stop experiment-sample\n\n\nShow the requests all go to original model now.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::100]\n\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "b51ae8f6-c983-4760-a565-e40fe2fe9aa1", "page": "examples/local-examples", "section": "sklearn-model", "text": "\nSKLearn Model\u00b6\nWe use a simple sklearn iris classification model\ncat ./models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nLoad the model\nseldon model load -f ./models/sklearn-iris-gs.yaml\n\n\n{}\n\n\nWait for the model to be ready\nseldon model status iris -w ModelAvailable | jq -M .\n\n\n{}\n\n\nDo a REST inference call\nseldon model infer iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"983bd95f-4b4d-4ff1-95b2-df9d6d089164\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nDo a gRPC inference call\nseldon model infer iris --inference-mode grpc \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"parameters\": {\n        \"content_type\": {\n          \"stringParam\": \"np\"\n        }\n      },\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\nUnload the model\nseldon model unload iris\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "1aa8bdfe-8ae3-4f73-9235-8b4cf59b0216", "page": "examples/local-examples", "section": "tensorflow-model", "text": "\nTensorflow Model\u00b6\nWe run a simple tensorflow model. Note the requirements section specifying tensorflow.\ncat ./models/tfsimple1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nLoad the model.\nseldon model load -f ./models/tfsimple1.yaml\n\n\n{}\n\n\nWait for the model to be ready.\nseldon model status tfsimple1 -w ModelAvailable | jq -M .\n\n\n{}\n\n\nGet model metadata\nseldon model metadata tfsimple1\n\n\n{\n\t\"name\": \"tfsimple1_1\",\n\t\"versions\": [\n\t\t\"1\"\n\t],\n\t\"platform\": \"tensorflow_graphdef\",\n\t\"inputs\": [\n\t\t{\n\t\t\t\"name\": \"INPUT0\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"INPUT1\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t}\n\t],\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"OUTPUT0\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"name\": \"OUTPUT1\",\n\t\t\t\"datatype\": \"INT32\",\n\t\t\t\"shape\": [\n\t\t\t\t-1,\n\t\t\t\t16\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nDo a REST inference call.\nseldon model infer tfsimple1 \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"model_name\": \"tfsimple1_1\",\n  \"model_version\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"data\": [\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "c7600330-e6c9-4d5d-9aa2-30138a133018", "page": "examples/local-examples", "section": "tensorflow-model", "text": "       12,\n        14,\n        16,\n        18,\n        20,\n        22,\n        24,\n        26,\n        28,\n        30,\n        32\n      ]\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        1,\n        16\n      ],\n      \"data\": [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "9b424b84-71c4-4c95-aeca-f1b25070cc88", "page": "examples/local-examples", "section": "tensorflow-model", "text": "       0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ]\n    }\n  ]\n}\n\n\nDo a gRPC inference call\nseldon model infer tfsimple1 --inference-mode grpc \\\n    '{\"model_name\":\"tfsimple1\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"tfsimple1_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "a7a58b95-5ebf-40e6-a768-694936281247", "page": "examples/local-examples", "section": "tensorflow-model", "text": "       2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          0,\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "5bba327b-03d4-47e6-8584-4bb9ba2d8489", "page": "examples/local-examples", "section": "tensorflow-model", "text": "\"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0,\n          0\n        ]\n      }\n    }\n  ]\n}\n\n\nUnload the model\nseldon model unload tfsimple1\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "9c9d6d7d-d472-42ae-9f36-2615b64541c7", "page": "examples/local-examples", "section": "experiment", "text": "\nExperiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate an experiment.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris | jq -M .\nseldon model status iris2 | jq -M .\n\n\n{\n  \"modelName\": \"iris\",\n  \"versions\": [\n    {\n      \"version\": 1,\n      \"serverName\": \"mlserver\",\n      \"kubernetesMeta\": {},\n      \"modelReplicaState\": {\n        \"0\": {\n          \"state\": \"Available\",\n          \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362720538Z\"\n        }\n      },\n      \"state\": {\n        \"state\": \"ModelAvailable\",\n        \"availableReplicas\": 1,\n        \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362720538Z\"\n      },\n      \"modelDefn\": {\n        \"meta\": {\n          \"name\": \"iris\",\n          \"kubernetesMeta\": {}\n        },\n        \"modelSpec\": {\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "028c58b6-468d-4286-bce5-5b0f6871ba42", "page": "examples/local-examples", "section": "experiment", "text": "},\n      \"modelDefn\": {\n        \"meta\": {\n          \"name\": \"iris\",\n          \"kubernetesMeta\": {}\n        },\n        \"modelSpec\": {\n          \"uri\": \"gs://seldon-models/mlserver/iris\",\n          \"requirements\": [\n            \"sklearn\"\n          ]\n        },\n        \"deploymentSpec\": {\n          \"replicas\": 1\n        }\n      }\n    }\n  ]\n}\n{\n  \"modelName\": \"iris2\",\n  \"versions\": [\n    {\n      \"version\": 1,\n      \"serverName\": \"mlserver\",\n      \"kubernetesMeta\": {},\n      \"modelReplicaState\": {\n        \"0\": {\n          \"state\": \"Available\",\n          \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362845079Z\"\n        }\n      },\n      \"state\": {\n        \"state\": \"ModelAvailable\",\n        \"availableReplicas\": 1,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "e2a97600-b6c5-4187-95b1-e8c2b9345f34", "page": "examples/local-examples", "section": "experiment", "text": " \"0\": {\n          \"state\": \"Available\",\n          \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362845079Z\"\n        }\n      },\n      \"state\": {\n        \"state\": \"ModelAvailable\",\n        \"availableReplicas\": 1,\n        \"lastChangeTimestamp\": \"2023-06-29T14:01:41.362845079Z\"\n      },\n      \"modelDefn\": {\n        \"meta\": {\n          \"name\": \"iris2\",\n          \"kubernetesMeta\": {}\n        },\n        \"modelSpec\": {\n          \"uri\": \"gs://seldon-models/mlserver/iris\",\n          \"requirements\": [\n            \"sklearn\"\n          ]\n        },\n        \"deploymentSpec\": {\n          \"replicas\": 1\n        }\n      }\n    }\n  ]\n}\n\n\nCreate an experiment that modifies the iris model to add a second model splitting traffic 50/50 between the two.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "77ddd9b4-09c9-4158-92f8-7a0406f38c91", "page": "examples/local-examples", "section": "experiment", "text": " \"deploymentSpec\": {\n          \"replicas\": 1\n        }\n      }\n    }\n  ]\n}\n\n\nCreate an experiment that modifies the iris model to add a second model splitting traffic 50/50 between the two.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nStart the experiment.\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\nWait for the experiment to be ready.\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::57 :iris_1::43]\n\n\n\nRun one more request\nseldon model infer iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"fa425bdf-737c-41fe-894d-58868f70fe5d\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nUse sticky session key passed by last infer request to ensure same route is taken each time.\nWe will test REST and gRPC.\nseldon model infer iris -s -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -s -i 50\\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nStop the experiment\nseldon experiment stop experiment-sample\n\n\nShow the requests all go", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "d7164daf-ee87-4c72-b19e-718275f594aa", "page": "examples/local-examples", "section": "experiment", "text": "sticky session key passed by last infer request to ensure same route is taken each time.\nWe will test REST and gRPC.\nseldon model infer iris -s -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -s -i 50\\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nStop the experiment\nseldon experiment stop experiment-sample\n\n\nShow the requests all go to original model now.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::100]\n\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-examples.html", "key": "examples/local-examples"}}, {"key": "b6c4966e-693a-4e0f-9951-fa9ce0916794", "page": "models/parameterized-models", "section": "parameterized-models", "text": "\nParameterized Models\u00b6\nThe Model specification allows parameters to be passed to the loaded model to allow customization. For example:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: choice-is-one\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/pandasquery\"\n  requirements:\n  - mlserver\n  - python\n  parameters:\n  - name: query\n    value: \"choice == 1\"\n\n\nThis capability is only available for MLServer custom model runtimes. The named keys and values will be added to the model-settings.json file for the provided model in the\nparameters.extra Dict. MLServer models are able to read these values in their load method.\n\nExample Parameterized Models\u00b6\n\nPandas Query\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/parameterized-models/index.html", "key": "models/parameterized-models"}}, {"key": "6cc267a0-abd9-4be8-9576-526cb25d1ea1", "page": "cli/docs/seldon_model_unload", "section": "seldon-model-unload", "text": "\nseldon model unload\u00b6\nunload a model\n\nSynopsis\u00b6\nunload a model\nseldon model unload <modelName> [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for unload\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n\n\nSEE ALSO\u00b6\n\nseldon model\t - manage models\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_model_unload.html", "key": "cli/docs/seldon_model_unload"}}, {"key": "45a2ae6e-60b8-4409-97e4-5bd300e0296e", "page": "cli/docs/seldon_model_unload", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for unload\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_model_unload.html", "key": "cli/docs/seldon_model_unload"}}, {"key": "4c798965-844b-411d-adc9-5d051e8a46d0", "page": "cli/docs/seldon_pipeline_unload", "section": "seldon-pipeline-unload", "text": "\nseldon pipeline unload\u00b6\nunload a pipeline\n\nSynopsis\u00b6\nunload a pipeline\nseldon pipeline unload <pipelineName> [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for unload\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n\n\nSEE ALSO\u00b6\n\nseldon pipeline\t - manage pipelines\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_unload.html", "key": "cli/docs/seldon_pipeline_unload"}}, {"key": "e201e83e-bd7e-4ea0-99eb-03754355bede", "page": "cli/docs/seldon_pipeline_unload", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -h, --help                    help for unload\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_unload.html", "key": "cli/docs/seldon_pipeline_unload"}}, {"key": "b6fe7d24-af5c-4c8b-8ba2-3fc9686b4e40", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador", "text": "\nAmbassador\u00b6\nAmbassador provides service mesh and ingress products. Our examples here are based on the Emissary ingress.\nWe will run through some examples as shown in the notebook service-meshes/ambassador/ambassador.ipynb\n\nSingle Model\u00b6\n\nSeldon Iris classifier model\nDefault Ambassador Host and Listener\nAmbassador Mappings for REST and gRPC endpoints\n\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  hostname: '*'\n  prefix: /v2/\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n\n\nTraffic Split\u00b6\n\nWarning\nTraffic splitting does not presently work due to this issue. We recommend you use a Seldon Experiment instead.\n\nSeldon provides an Experiment resource for service mesh agnostic traffic splitting but if you wish to control this via Ambassador and example is shown below to split traffic between two models.\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "5e8272a9-f6fd-4ac4-b425-ca2c93150b87", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador", "text": "you use a Seldon Experiment instead.\n\nSeldon provides an Experiment resource for service mesh agnostic traffic splitting but if you wish to control this via Ambassador and example is shown below to split traffic between two models.\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  add_response_headers:\n    seldon_model:\n      value: iris1\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  add_response_headers:\n    seldon_model:\n      value: iris2\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "8fee64ce-0784-413c-b8fe-c55821e1ef73", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador", "text": "iris2\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  add_response_headers:\n    seldon_model:\n      value: iris2\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n\n\nAmbassador Notebook Example\u00b6\nAssumes\n\nYou have installed emissary as per their docs\n\nTested with\nemissary-ingress-7.3.2 insatlled via helm\nINGRESS_IP=!kubectl get svc emissary-ingress -n emissary -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nINGRESS_IP=INGRESS_IP[0]\nimport os\nos.environ['INGRESS_IP'] = INGRESS_IP\nINGRESS_IP\n\n\n'172.21.255.1'\n\n\n\nAmbassador Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  hostname: '*'\n  prefix: /v2/\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "ffbc5b24-d423-4627-add5-047aaa8846f7", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador", "text": "   seldon-model:\n      value: iris\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  hostname: '*'\n  prefix: /v2/\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n!kustomize build config/single-model | kubectl apply --validate=false -f -\n\n\nhost.getambassador.io/wildcard created\nlistener.getambassador.io/emissary-ingress-listener-8080 created\nmapping.getambassador.io/iris-grpc created\nmapping.getambassador.io/iris-http created\nmodel.mlops.seldon.io/iris created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\"\\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:45:43 GMT\n< server: envoy\n< x-envoy-upstream-service-time: 792\n< seldon-route: iris_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"72ac79f5-b355-4be3-b8c5-2ebedaa39f60\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "af848686-3b53-4e4d-b5ab-165f24e215ed", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador", "text": "-plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nhost.getambassador.io \"wildcard\" deleted\nlistener.getambassador.io \"emissary-ingress-listener-8080\" deleted\nmapping.getambassador.io \"iris-grpc\" deleted\nmapping.getambassador.io \"iris-http\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\nTraffic Split Two Models\u00b6\nCurrently not working due to this issue\n!kustomize build config/traffic-split\n\n\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  add_response_headers:\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "ac618130-a896-44b5-9fa5-a3f2ade37be9", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador", "text": " securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  add_response_headers:\n    seldon_model:\n      value: iris1\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  add_response_headers:\n    seldon_model:\n      value: iris2\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nhost.getambassador.io/wildcard created\nlistener.getambassador.io/emissary-ingress-listener-8080 created\nmapping.getambassador.io/iris1-grpc created\nmapping.getambassador.io/iris1-http created\nmapping.getambassador.io/iris2-grpc created\nmapping.getambassador.io/iris2-http created\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "dbee3cf2-9043-465e-a415-ae41ec735b51", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador", "text": "name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nhost.getambassador.io/wildcard created\nlistener.getambassador.io/emissary-ingress-listener-8080 created\nmapping.getambassador.io/iris1-grpc created\nmapping.getambassador.io/iris1-http created\nmapping.getambassador.io/iris2-grpc created\nmapping.getambassador.io/iris2-http created\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 197\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:46:17 GMT\n< server: envoy\n< x-envoy-upstream-service-time: 920\n< seldon-route: iris2_1\n< seldon_model: iris2\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris2_1\",\"model_version\":\"1\",\"id\":\"ed521c32-cd85-4cb8-90eb-7c896803f271\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris1\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris2_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/traffic-split | kubectl delete -f", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "223d59ac-92dd-4122-8db4-98e077c29884", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador", "text": "     \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/traffic-split | kubectl delete -f -\n\n\nhost.getambassador.io \"wildcard\" deleted\nlistener.getambassador.io \"emissary-ingress-listener-8080\" deleted\nmapping.getambassador.io \"iris1-grpc\" deleted\nmapping.getambassador.io \"iris1-http\" deleted\nmapping.getambassador.io \"iris2-grpc\" deleted\nmapping.getambassador.io \"iris2-http\" deleted\nmodel.mlops.seldon.io \"iris1\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "9c586bb4-4773-45ad-8093-7e7e5045deb4", "page": "kubernetes/service-meshes/ambassador", "section": "single-model", "text": "\nSingle Model\u00b6\n\nSeldon Iris classifier model\nDefault Ambassador Host and Listener\nAmbassador Mappings for REST and gRPC endpoints\n\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  hostname: '*'\n  prefix: /v2/\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "c6c6633c-5b54-4d26-bb65-e30475a519ae", "page": "kubernetes/service-meshes/ambassador", "section": "traffic-split", "text": "\nTraffic Split\u00b6\n\nWarning\nTraffic splitting does not presently work due to this issue. We recommend you use a Seldon Experiment instead.\n\nSeldon provides an Experiment resource for service mesh agnostic traffic splitting but if you wish to control this via Ambassador and example is shown below to split traffic between two models.\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  add_response_headers:\n    seldon_model:\n      value: iris1\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  add_response_headers:\n    seldon_model:\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "fa53b70f-40f1-4284-a291-21062c67764e", "page": "kubernetes/service-meshes/ambassador", "section": "traffic-split", "text": "seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  add_response_headers:\n    seldon_model:\n      value: iris2\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "fb437c8f-e421-4d7c-83d7-a25b301b87e4", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador-notebook-example", "text": "\nAmbassador Notebook Example\u00b6\nAssumes\n\nYou have installed emissary as per their docs\n\nTested with\nemissary-ingress-7.3.2 insatlled via helm\nINGRESS_IP=!kubectl get svc emissary-ingress -n emissary -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nINGRESS_IP=INGRESS_IP[0]\nimport os\nos.environ['INGRESS_IP'] = INGRESS_IP\nINGRESS_IP\n\n\n'172.21.255.1'\n\n\n\nAmbassador Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  hostname: '*'\n  prefix: /v2/\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n!kustomize build config/single-model | kubectl apply --validate=false -f -\n\n\nhost.getambassador.io/wildcard created\nlistener.getambassador.io/emissary-ingress-listener-8080 created\nmapping.getambassador.io/iris-grpc created\nmapping.getambassador.io/iris-http created\nmodel.mlops.seldon.io/iris created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\"\\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n<", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "aa860bfb-9adc-4a93-8c41-84a7530759f4", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador-notebook-example", "text": "http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\"\\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:45:43 GMT\n< server: envoy\n< x-envoy-upstream-service-time: 792\n< seldon-route: iris_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"72ac79f5-b355-4be3-b8c5-2ebedaa39f60\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nhost.getambassador.io \"wildcard\" deleted\nlistener.getambassador.io \"emissary-ingress-listener-8080\" deleted\nmapping.getambassador.io \"iris-grpc\" deleted\nmapping.getambassador.io \"iris-http\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\nTraffic Split Two Models\u00b6\nCurrently not working due to this issue\n!kustomize build config/traffic-split\n\n\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "1e7ffeca-bf90-4176-aa47-65194875ef0d", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador-notebook-example", "text": " ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nhost.getambassador.io \"wildcard\" deleted\nlistener.getambassador.io \"emissary-ingress-listener-8080\" deleted\nmapping.getambassador.io \"iris-grpc\" deleted\nmapping.getambassador.io \"iris-http\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\nTraffic Split Two Models\u00b6\nCurrently not working due to this issue\n!kustomize build config/traffic-split\n\n\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  add_response_headers:\n    seldon_model:\n      value: iris1\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  add_response_headers:\n    seldon_model:\n      value: iris2\n  hostname: '*'\n  prefix:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "bc172e96-a6ed-4763-bac2-daccbde0a35e", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador-notebook-example", "text": "     value: iris2\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  add_response_headers:\n    seldon_model:\n      value: iris2\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nhost.getambassador.io/wildcard created\nlistener.getambassador.io/emissary-ingress-listener-8080 created\nmapping.getambassador.io/iris1-grpc created\nmapping.getambassador.io/iris1-http created\nmapping.getambassador.io/iris2-grpc created\nmapping.getambassador.io/iris2-http created\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 197\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:46:17 GMT\n< server: envoy\n< x-envoy-upstream-service-time: 920\n< seldon-route: iris2_1\n< seldon_model: iris2\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris2_1\",\"model_version\":\"1\",\"id\":\"ed521c32-cd85-4cb8-90eb-7c896803f271\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris1\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris2_1\",\n  \"modelVersion\": \"1\",\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "e94f066c-1c20-4a51-8ee2-f6671962c384", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador-notebook-example", "text": "94 bytes\n< HTTP/1.1 200 OK\n< content-length: 197\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:46:17 GMT\n< server: envoy\n< x-envoy-upstream-service-time: 920\n< seldon-route: iris2_1\n< seldon_model: iris2\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris2_1\",\"model_version\":\"1\",\"id\":\"ed521c32-cd85-4cb8-90eb-7c896803f271\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris1\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris2_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/traffic-split | kubectl delete -f -\n\n\nhost.getambassador.io \"wildcard\" deleted\nlistener.getambassador.io \"emissary-ingress-listener-8080\" deleted\nmapping.getambassador.io \"iris1-grpc\" deleted\nmapping.getambassador.io \"iris1-http\" deleted\nmapping.getambassador.io \"iris2-grpc\" deleted\nmapping.getambassador.io \"iris2-http\" deleted\nmodel.mlops.seldon.io \"iris1\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "d6fa83ab-6283-4ce1-9dda-923bf11101ea", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador-single-model-example", "text": "\nAmbassador Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris\n  hostname: '*'\n  prefix: /v2/\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n!kustomize build config/single-model | kubectl apply --validate=false -f -\n\n\nhost.getambassador.io/wildcard created\nlistener.getambassador.io/emissary-ingress-listener-8080 created\nmapping.getambassador.io/iris-grpc created\nmapping.getambassador.io/iris-http created\nmodel.mlops.seldon.io/iris created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\"\\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:45:43 GMT\n< server: envoy\n< x-envoy-upstream-service-time: 792\n< seldon-route: iris_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"72ac79f5-b355-4be3-b8c5-2ebedaa39f60\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "8531e519-574b-44f8-9d07-25f0e009d03c", "page": "kubernetes/service-meshes/ambassador", "section": "ambassador-single-model-example", "text": "3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:45:43 GMT\n< server: envoy\n< x-envoy-upstream-service-time: 792\n< seldon-route: iris_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"72ac79f5-b355-4be3-b8c5-2ebedaa39f60\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nhost.getambassador.io \"wildcard\" deleted\nlistener.getambassador.io \"emissary-ingress-listener-8080\" deleted\nmapping.getambassador.io \"iris-grpc\" deleted\nmapping.getambassador.io \"iris-http\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "31f671b7-258c-4db6-a208-8bc66ceda864", "page": "kubernetes/service-meshes/ambassador", "section": "traffic-split-two-models", "text": "\nTraffic Split Two Models\u00b6\nCurrently not working due to this issue\n!kustomize build config/traffic-split\n\n\napiVersion: getambassador.io/v3alpha1\nkind: Host\nmetadata:\n  name: wildcard\n  namespace: seldon-mesh\nspec:\n  hostname: '*'\n  requestPolicy:\n    insecure:\n      action: Route\n---\napiVersion: getambassador.io/v3alpha1\nkind: Listener\nmetadata:\n  name: emissary-ingress-listener-8080\n  namespace: seldon-mesh\nspec:\n  hostBinding:\n    namespace:\n      from: ALL\n  port: 8080\n  protocol: HTTP\n  securityModel: INSECURE\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris1-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris1\n  add_response_headers:\n    seldon_model:\n      value: iris1\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-grpc\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  grpc: true\n  hostname: '*'\n  prefix: /inference.GRPCInferenceService\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: getambassador.io/v3alpha1\nkind: Mapping\nmetadata:\n  name: iris2-http\n  namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  add_response_headers:\n    seldon_model:\n      value: iris2\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "f8937c03-22a4-4e3e-815d-65cf22d941c2", "page": "kubernetes/service-meshes/ambassador", "section": "traffic-split-two-models", "text": " namespace: seldon-mesh\nspec:\n  add_request_headers:\n    seldon-model:\n      value: iris2\n  add_response_headers:\n    seldon_model:\n      value: iris2\n  hostname: '*'\n  prefix: /v2\n  rewrite: \"\"\n  service: seldon-mesh:80\n  weight: 50\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nhost.getambassador.io/wildcard created\nlistener.getambassador.io/emissary-ingress-listener-8080 created\nmapping.getambassador.io/iris1-grpc created\nmapping.getambassador.io/iris1-http created\nmapping.getambassador.io/iris2-grpc created\nmapping.getambassador.io/iris2-http created\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 197\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:46:17 GMT\n< server: envoy\n< x-envoy-upstream-service-time: 920\n< seldon-route: iris2_1\n< seldon_model: iris2\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris2_1\",\"model_version\":\"1\",\"id\":\"ed521c32-cd85-4cb8-90eb-7c896803f271\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris1\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris2_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "43e89a53-f83a-4cd9-aaf9-88426e2c335c", "page": "kubernetes/service-meshes/ambassador", "section": "traffic-split-two-models", "text": "left intact\n{\"model_name\":\"iris2_1\",\"model_version\":\"1\",\"id\":\"ed521c32-cd85-4cb8-90eb-7c896803f271\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris1\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris2_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/traffic-split | kubectl delete -f -\n\n\nhost.getambassador.io \"wildcard\" deleted\nlistener.getambassador.io \"emissary-ingress-listener-8080\" deleted\nmapping.getambassador.io \"iris1-grpc\" deleted\nmapping.getambassador.io \"iris1-http\" deleted\nmapping.getambassador.io \"iris2-grpc\" deleted\nmapping.getambassador.io \"iris2-http\" deleted\nmodel.mlops.seldon.io \"iris1\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/ambassador/index.html", "key": "kubernetes/service-meshes/ambassador"}}, {"key": "83a3bd92-3537-4d57-8415-1585b89eebda", "page": "upgrading", "section": "upgrading", "text": "\nUpgrading\u00b6\n\nUpgrading from 2.6 - 2.7\u00b6\nAll pods provisioned through the operator i.e. SeldonRuntime and Server resources now have the label app.kubernetes.io/name for identifying the pods.\nPreviously, the labelling has been inconsistent across different versions of Seldon Core v2, with mixture of app and app.kubernetes.io/name used.\nIf using the Prometheus operator (\u201cKube Prometheus\u201d), please apply the v2.7.0 manifests for Core v2 according to the metrics documentation.\nNote that these manifests need to be adjusted to discover metrics endpoints based on the existing setup.\nIf previous pod monitors had namespaceSelector fields set, these should be copied over and applied to the new manifests.\nIf namespaces do not matter, cluster-wide metrics endpoint discovery can be setup by modifying the namespaceSelector field in the pod monitors:\nspec:\n  namespaceSelector:\n    any: true\n\n\n\n\nUpgrading from 2.5 - 2.6\u00b6\nRelease 2.6 brings with it new custom resources SeldonConfig and SeldonRuntime, which provide a new way to install Seldon Core V2 in Kubernetes. Upgrading in the same namespace will cause downtime while the pods are being recreated. Alternatively  users can have an external service mesh or other means to be used over multiple namespaces to bring up the system in a new namespace and redeploy models before switch traffic between them.\nIf the new 2.6 charts are used to upgrade in an existing namespace models will eventually be redeloyed but there will be service downtime as the core components are redeployed.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/upgrading/index.html", "key": "upgrading"}}, {"key": "fa2bb60b-121b-454c-8d41-050dac24093b", "page": "upgrading", "section": "upgrading-from-2-6-2-7", "text": "\nUpgrading from 2.6 - 2.7\u00b6\nAll pods provisioned through the operator i.e. SeldonRuntime and Server resources now have the label app.kubernetes.io/name for identifying the pods.\nPreviously, the labelling has been inconsistent across different versions of Seldon Core v2, with mixture of app and app.kubernetes.io/name used.\nIf using the Prometheus operator (\u201cKube Prometheus\u201d), please apply the v2.7.0 manifests for Core v2 according to the metrics documentation.\nNote that these manifests need to be adjusted to discover metrics endpoints based on the existing setup.\nIf previous pod monitors had namespaceSelector fields set, these should be copied over and applied to the new manifests.\nIf namespaces do not matter, cluster-wide metrics endpoint discovery can be setup by modifying the namespaceSelector field in the pod monitors:\nspec:\n  namespaceSelector:\n    any: true\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/upgrading/index.html", "key": "upgrading"}}, {"key": "18ee17d8-3544-4461-8c68-1adc15f8a74e", "page": "upgrading", "section": "upgrading-from-2-5-2-6", "text": "\nUpgrading from 2.5 - 2.6\u00b6\nRelease 2.6 brings with it new custom resources SeldonConfig and SeldonRuntime, which provide a new way to install Seldon Core V2 in Kubernetes. Upgrading in the same namespace will cause downtime while the pods are being recreated. Alternatively  users can have an external service mesh or other means to be used over multiple namespaces to bring up the system in a new namespace and redeploy models before switch traffic between them.\nIf the new 2.6 charts are used to upgrade in an existing namespace models will eventually be redeloyed but there will be service downtime as the core components are redeployed.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/upgrading/index.html", "key": "upgrading"}}, {"key": "b7bdd43b-ad22-41f0-9e08-d7d91ce0cb30", "page": "models/inference-artifacts", "section": "inference-artifacts", "text": "\nInference Artifacts\u00b6\nTo run your model inside Seldon you must supply an inference artifact that can be downloaded and run on one of MLServer or Triton inference servers. We list artifacts below by alphabetical order below.\n\n\nType\nServer\nTag\nExample\n\n\n\nAlibi-Detect\nMLServer\nalibi-detect\nexample\n\nAlibi-Explain\nMLServer\nalibi-explain\nexample\n\nDALI\nTriton\ndali\nTBC\n\nHuggingface\nMLServer\nhuggingface\nexample\n\nLightGBM\nMLServer\nlightgbm\nexample\n\nMLFlow\nMLServer\nmlflow\nexample\n\nONNX\nTriton\nonnx\nexample\n\nOpenVino\nTriton\nopenvino\nTBC\n\nCustom Python\nMLServer\npython, mlserver\nexample\n\nCustom Python\nTriton\npython, triton\nexample\n\nPyTorch\nTriton\npytorch\nexample\n\nSKLearn\nMLServer\nsklearn\nexample\n\nSpark Mlib\nMLServer\nspark-mlib\nTBC\n\nTensorflow\nTriton\ntensorflow\nexample\n\nTensorRT\nTriton\ntensorrt\nTBC\n\nTriton FIL\nTriton\nfil\nTBC\n\nXGBoost\nMLServer\nxgboost\nexample\n\n\n\n\nSaving Model artifacts\u00b6\nFor many machine learning artifacts you can simply save them to a folder and load them into seldon core v2. Details are given below as well as a link to creating a custom model settings file if needed.\n\n\nType\nNotes\nCustom Model Settings\n\n\n\nAlibi-Detect\nSave model using Alibi-Detect.\ndocs\n\nAlibi-Explain\nSave model using Alibi-Explain.\ndocs\n\nDALI\nFollow the Triton docs to create a config.pbtxt and model folder with artifact.\ndocs\n\nHuggingface\nCreate an MLServer model-settings.json with the Huggingface model required\ndocs\n\nLightGBM\nSave model to file with extension.bst.\ndocs\n\nMLFlow\nUse the created artifacts/model folder from your training run.\ndocs\n\nONNX\nSave you model with name model.onnx.\ndocs\n\nOpenVino\nFollow the Triton docs to create your model artifacts.\ndocs\n\nCustom MLServer Python\nCreate a python file with a class that extends MLModel.\ndocs\n\nCustom Triton Python\nFollow the Triton docs to create your config.pbtxt and associated python files.\ndocs\n\nPyTorch\nCreate a Triton config.pbtxt describing inputs and outputs and place traced torchscript in folder as model.pt.\ndocs\n\nSKLearn\nSave model via joblib to a file with extension .joblib or with pickle to a file with extension .pkl or .pickle.\ndocs\n\nSpark Mlib\nFollow the MLServer docs.\ndocs\n\nTensorflow\nSave model in \u201cSaved Model\u201d format as model.savedodel. If using graphdef format you will need to create Triton config.pbtxt and place your model in a numbered sub folder. HDF5 is not supported.\ndocs\n\nTensorRT\nFollow the Triton docs to create your model artifacts.\ndocs\n\nTriton FIL\nFollow the Triton docs to create your model artifacts.\ndocs\n\nXGBoost\nSave model to file with extension.bst or .json.\ndocs\n\n\n\n\n\nCustom MLServer Model Settings\u00b6\nFor MLServer", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/inference-artifacts/index.html", "key": "models/inference-artifacts"}}, {"key": "e2f73c8e-6d72-4ebd-91af-c51d6621892f", "page": "models/inference-artifacts", "section": "inference-artifacts", "text": ".pickle.\ndocs\n\nSpark Mlib\nFollow the MLServer docs.\ndocs\n\nTensorflow\nSave model in \u201cSaved Model\u201d format as model.savedodel. If using graphdef format you will need to create Triton config.pbtxt and place your model in a numbered sub folder. HDF5 is not supported.\ndocs\n\nTensorRT\nFollow the Triton docs to create your model artifacts.\ndocs\n\nTriton FIL\nFollow the Triton docs to create your model artifacts.\ndocs\n\nXGBoost\nSave model to file with extension.bst or .json.\ndocs\n\n\n\n\n\nCustom MLServer Model Settings\u00b6\nFor MLServer targeted models you can create a model-settings.json file to help MLServer load your model and place this alongside your artifact. See the MLServer project  for details.\n\n\nCustom Triton Configuration\u00b6\nFor Triton inference server models you can create a configuration config.pbtxt file alongside your artifact.\n\n\nNotes\u00b6\n\nThe tag field represents the tag you need to add to the requirements part of the Model spec for your artifact to be loaded on a compatible server. e.g. for an sklearn model:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.5.0/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/inference-artifacts/index.html", "key": "models/inference-artifacts"}}, {"key": "64d2ee4f-2448-4d6d-889b-a2d24ced9ccc", "page": "models/inference-artifacts", "section": "saving-model-artifacts", "text": "\nSaving Model artifacts\u00b6\nFor many machine learning artifacts you can simply save them to a folder and load them into seldon core v2. Details are given below as well as a link to creating a custom model settings file if needed.\n\n\nType\nNotes\nCustom Model Settings\n\n\n\nAlibi-Detect\nSave model using Alibi-Detect.\ndocs\n\nAlibi-Explain\nSave model using Alibi-Explain.\ndocs\n\nDALI\nFollow the Triton docs to create a config.pbtxt and model folder with artifact.\ndocs\n\nHuggingface\nCreate an MLServer model-settings.json with the Huggingface model required\ndocs\n\nLightGBM\nSave model to file with extension.bst.\ndocs\n\nMLFlow\nUse the created artifacts/model folder from your training run.\ndocs\n\nONNX\nSave you model with name model.onnx.\ndocs\n\nOpenVino\nFollow the Triton docs to create your model artifacts.\ndocs\n\nCustom MLServer Python\nCreate a python file with a class that extends MLModel.\ndocs\n\nCustom Triton Python\nFollow the Triton docs to create your config.pbtxt and associated python files.\ndocs\n\nPyTorch\nCreate a Triton config.pbtxt describing inputs and outputs and place traced torchscript in folder as model.pt.\ndocs\n\nSKLearn\nSave model via joblib to a file with extension .joblib or with pickle to a file with extension .pkl or .pickle.\ndocs\n\nSpark Mlib\nFollow the MLServer docs.\ndocs\n\nTensorflow\nSave model in \u201cSaved Model\u201d format as model.savedodel. If using graphdef format you will need to create Triton config.pbtxt and place your model in a numbered sub folder. HDF5 is not supported.\ndocs\n\nTensorRT\nFollow the Triton docs to create your model artifacts.\ndocs\n\nTriton FIL\nFollow the Triton docs to create your model artifacts.\ndocs\n\nXGBoost\nSave model to file with extension.bst or .json.\ndocs\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/inference-artifacts/index.html", "key": "models/inference-artifacts"}}, {"key": "1cc2b51b-bef2-4fc5-ad98-968ea94b2ee7", "page": "kubernetes/tracing", "section": "tracing", "text": "\nTracing\u00b6\nWe support Open Telemetry tracing. By default all components will attempt to send OLTP events to seldon-collector.seldon-mesh:4317 which will export to Jaeger at simplest-collector.seldon-mesh:4317.\nThe components can be installed from the tracing/k8s folder. In future an Ansible playbook will be created. This installs a Open Telemetry collector and a simple Jaeger install with a service that can be port forwarded to at simplest.seldon-mesh:16686.\nAn example Jaeger trace is show below:\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/tracing/index.html", "key": "kubernetes/tracing"}}, {"key": "02775018-3243-4072-bc9d-25211fd62f26", "page": "architecture", "section": "architecture", "text": "\nArchitecture\u00b6\nThe current set of components used in Seldon Core V2 is shown below:\n\nThe core components are:\n\nScheduler : manages the load and unload of models, pipelines, explainers and experiments.\nPipeline gateway : handles REST/gRPC calls to pipelines.\nDataflow engine : handles the flow of data between components in a pipeline.\nModel gateway : handles the flow of data from models to inference requests on servers and passes on the responses.\nAgent : manages the loading and unloading of models on a server and access to the server over REST/gRPC.\nEnvoy : manages the proxying of requests to the correct servers including load balancing.\n\nAll the above are Kubernetes agnostic and can run locally, e.g. on Docker Compose.\nWe also provide a Kubernetes Operator to allow Kubernetes usage.\nKafka is used as the backbone for Pipelines allowing a decentralized, synchronous and asynchronous usage.\n\nKafka\u00b6\nKafka is used as the backbone for allowing Pipelines of Models to be connected together into arbitrary directed acyclic graphs. Models can be reused in different Pipelines. The flow of data between models is handled by the dataflow engine using KStreams.\n\n\n\nDataflow Architecture\u00b6\nSeldon V2 follows a dataflow design paradigm and it\u2019s part of the current movement for data centric machine learning. By taking a decentralized route that focuses on the flow of data users can have more flexibility and insight in building complex applications containing machine learning and traditional components. This contrasts with a more centralized orchestration more traditional in service orientated architectures.\n\nBy focusing on the data we allow users to join various flows together using stream joining concepts as shown below.\n\nWe support several types", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/index.html", "key": "architecture"}}, {"key": "003467a9-14c1-45ea-9580-44c7eec4753d", "page": "architecture", "section": "architecture", "text": "By taking a decentralized route that focuses on the flow of data users can have more flexibility and insight in building complex applications containing machine learning and traditional components. This contrasts with a more centralized orchestration more traditional in service orientated architectures.\n\nBy focusing on the data we allow users to join various flows together using stream joining concepts as shown below.\n\nWe support several types of joins:\n\ninner joins, where all inputs need to be present for a transaction to join the tensors passed through the Pipeline;\nouter joins, where only a subset needs to be available during the join window\ntriggers, in which data flows need to wait until records on one or more trigger data flows appear. The data in these triggers is not passed onwards from the join.\n\nThese techniques allow users to create complex pipeline flows of data between machine learning components.\nMore discussion on the data flow view of machine learning and its effect on v2 design can be found here.\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/index.html", "key": "architecture"}}, {"key": "bc73eb51-7eef-4762-a88c-f3b150693f78", "page": "architecture", "section": "dataflow-architecture", "text": "\nDataflow Architecture\u00b6\nSeldon V2 follows a dataflow design paradigm and it\u2019s part of the current movement for data centric machine learning. By taking a decentralized route that focuses on the flow of data users can have more flexibility and insight in building complex applications containing machine learning and traditional components. This contrasts with a more centralized orchestration more traditional in service orientated architectures.\n\nBy focusing on the data we allow users to join various flows together using stream joining concepts as shown below.\n\nWe support several types of joins:\n\ninner joins, where all inputs need to be present for a transaction to join the tensors passed through the Pipeline;\nouter joins, where only a subset needs to be available during the join window\ntriggers, in which data flows need to wait until records on one or more trigger data flows appear. The data in these triggers is not passed onwards from the join.\n\nThese techniques allow users to create complex pipeline flows of data between machine learning components.\nMore discussion on the data flow view of machine learning and its effect on v2 design can be found here.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/index.html", "key": "architecture"}}, {"key": "9d674f7d-dc83-458c-bfe7-6dc8ea0db0b2", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "\nHuggingface speech to sentiment pipeline\u00b6\nRun these examples from the samples/examples/huggingface folder.\n\nHuggingface Speech to Sentiment Pipeline Example\u00b6\nIn this example we create a Pipeline to chain two huggingface models to allow speech to sentiment functionalityand add an explainer to understand the result.\nThis example also illustrates how explainers can target pipelines to allow complex explanations flows.\n\nThis example requires ffmpeg package to be installed locally. run make install-requirements for the Python dependencies.\nfrom ipywebrtc import AudioRecorder, CameraStream\nimport torchaudio\nfrom IPython.display import Audio\nimport base64\nimport json\nimport requests\nimport os\nimport time\n\n\nCreate a method to load speech from recorder; transform into mp3 and send at base64 data. On return of the result extract and show the text and sentiment.\nreqJson = json.loads('{\"inputs\":[{\"name\":\"args\", \"parameters\": {\"content_type\": \"base64\"}, \"data\":[],\"datatype\":\"BYTES\",\"shape\":[1]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ndef infer(resource: str):\n    with open('recording.webm', 'wb') as f:\n        f.write(recorder.audio.value)\n    !ffmpeg -i recording.webm -vn -ab 128k -ar 44100 file.mp3 -y -hide_banner -loglevel panic\n    with open(\"file.mp3\", mode='rb') as file:\n        fileContent = file.read()\n        encoded = base64.b64encode(fileContent)\n        base64_message = encoded.decode('utf-8')\n    reqJson[\"inputs\"][0][\"data\"] = [str(base64_message)]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\": resource}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    j = response_raw.json()\n    sentiment = j[\"outputs\"][0][\"data\"][0]\n    text = j[\"outputs\"][1][\"data\"][0]\n    reqId = response_raw.headers[\"x-request-id\"]\n    print(reqId)\n    os.environ[\"REQUEST_ID\"]=reqId\n    print(base64.b64decode(text))\n    print(base64.b64decode(sentiment))\n\n\n\nLoad Huggingface Models\u00b6\nWe will load two", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "fd0d0941-9c9c-49a5-9390-78f1202766ae", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "= [str(base64_message)]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\": resource}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    j = response_raw.json()\n    sentiment = j[\"outputs\"][0][\"data\"][0]\n    text = j[\"outputs\"][1][\"data\"][0]\n    reqId = response_raw.headers[\"x-request-id\"]\n    print(reqId)\n    os.environ[\"REQUEST_ID\"]=reqId\n    print(base64.b64decode(text))\n    print(base64.b64decode(sentiment))\n\n\n\nLoad Huggingface Models\u00b6\nWe will load two Huggingface models for speech to text and text to sentiment.\ncat ../../models/hf-whisper.yaml\necho \"---\"\ncat ../../models/hf-sentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: whisper\nspec:\n  storageUri: \"gs://seldon-models/mlserver/huggingface/whisper\"\n  requirements:\n  - huggingface\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment\nspec:\n  storageUri: \"gs://seldon-models/mlserver/huggingface/sentiment\"\n  requirements:\n  - huggingface\n\n\nseldon model load -f ../../models/hf-whisper.yaml\nseldon model load -f ../../models/hf-sentiment.yaml\n\n\n{}\n{}\n\n\nseldon model status whisper -w ModelAvailable | jq -M .\nseldon model status sentiment -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\n\n\nCreate Explain Pipeline\u00b6\nTo allow Alibi-Explain to more easily explain the sentiment we will need:\n\ninput and output transfrorms that take the Dict values input and output by the Huggingface sentiment model and turn them into values that Alibi-Explain can easily understand with the core values we want to explain and the outputs from the sentiment model.\nA separate Pipeline to allow us to join the sentiment model with the output transform\n\nThese transform models are MLServer custom runtimes as shown below:\ncat ./sentiment-input-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "777c0063-5477-40a0-997d-2c79afa86306", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "model with the output transform\n\nThese transform models are MLServer custom runtimes as shown below:\ncat ./sentiment-input-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is defined in accordance with the LICENSE file.\n\nfrom mlserver import MLModel\nfrom mlserver.types import InferenceRequest, InferenceResponse, ResponseOutput\nfrom mlserver.codecs.string import StringRequestCodec\nfrom mlserver.logging import logger\nimport json\n\n\nclass SentimentInputTransformRuntime(MLModel):\n\n  async def load(self) -> bool:\n    return self.ready\n\n  async def predict(self, payload: InferenceRequest) -> InferenceResponse:\n    logger.info(\"payload (input-transform): %s\",payload)\n    res_list = self.decode_request(payload, default_codec=StringRequestCodec)\n    logger.info(\"res list (input-transform): %s\",res_list)\n    texts = []\n    for res in res_list:\n      logger.info(\"decoded data (input-transform): %s\", res)\n      #text = json.loads(res)\n      text = res\n      texts.append(text[\"text\"])\n\n    logger.info(\"transformed data (input-transform): %s\", texts)\n    response =  StringRequestCodec.encode_response(\n      model_name=\"sentiment\",\n      payload=texts\n    )\n    logger.info(\"response (input-transform): %s\", response)\n    return response\n\n\n\ncat ./sentiment-output-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "6f3a547a-a28c-4430-8690-5514f8bc0d98", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "     payload=texts\n    )\n    logger.info(\"response (input-transform): %s\", response)\n    return response\n\n\n\ncat ./sentiment-output-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is defined in accordance with the LICENSE file.\n\nfrom mlserver import MLModel\nfrom mlserver.types import InferenceRequest, InferenceResponse, ResponseOutput\nfrom mlserver.codecs import StringCodec, Base64Codec, NumpyRequestCodec\nfrom mlserver.codecs.string import StringRequestCodec\nfrom mlserver.codecs.numpy import NumpyRequestCodec\nimport base64\nfrom mlserver.logging import logger\nimport numpy as np\nimport json\n\nclass SentimentOutputTransformRuntime(MLModel):\n\n  async def load(self) -> bool:\n    return self.ready\n\n  async def predict(self, payload: InferenceRequest) -> InferenceResponse:\n    logger.info(\"payload (output-transform): %s\",payload)\n    res_list = self.decode_request(payload, default_codec=StringRequestCodec)\n    logger.info(\"res list (output-transform): %s\",res_list)\n    scores = []\n    for res in res_list:\n      logger.debug(\"decoded data (output transform): %s\",res)\n      #sentiment = json.loads(res)\n      sentiment = res\n      if sentiment[\"label\"] == \"POSITIVE\":\n        scores.append(1)\n      else:\n        scores.append(0)\n    response =  NumpyRequestCodec.encode_response(\n      model_name=\"sentiments\",\n      payload=np.array(scores)\n    )\n    logger.info(\"response (output-transform): %s\", response)\n    return response\n\n\n\ncat ../../models/hf-sentiment-input-transform.yaml\necho \"---\"\ncat ../../models/hf-sentiment-output-transform.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "85acaed7-94fd-457a-be0c-3db06813aea6", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "== \"POSITIVE\":\n        scores.append(1)\n      else:\n        scores.append(0)\n    response =  NumpyRequestCodec.encode_response(\n      model_name=\"sentiments\",\n      payload=np.array(scores)\n    )\n    logger.info(\"response (output-transform): %s\", response)\n    return response\n\n\n\ncat ../../models/hf-sentiment-input-transform.yaml\necho \"---\"\ncat ../../models/hf-sentiment-output-transform.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-input-transform\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/mlserver_1.3.5/sentiment-input-transform\"\n  requirements:\n  - mlserver\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-output-transform\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/mlserver_1.3.5/sentiment-output-transform\"\n  requirements:\n  - mlserver\n  - python\n\n\nseldon model load -f ../../models/hf-sentiment-input-transform.yaml\nseldon model load -f ../../models/hf-sentiment-output-transform.yaml\n\n\n{}\n{}\n\n\nseldon model status sentiment-input-transform -w ModelAvailable | jq -M .\nseldon model status sentiment-output-transform -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ../../pipelines/sentiment-explain.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: sentiment-explain\nspec:\n  steps:\n    - name: sentiment\n      tensorMap:\n        sentiment-explain.inputs.predict: array_inputs\n    - name: sentiment-output-transform\n      inputs:\n      - sentiment\n  output:\n    steps:\n    - sentiment-output-transform\n\n\nseldon pipeline load -f ../../pipelines/sentiment-explain.yaml\n\n\nseldon pipeline status sentiment-explain -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"sentiment-explain\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"sentiment-explain\",\n        \"uid\": \"cihuo3svgtec73bj6ncg\",\n        \"version\": 2,\n        \"steps\": [\n          {\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "8d59a969-9e9a-4984-bcf1-134fec5f048c", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": " \"pipelineName\": \"sentiment-explain\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"sentiment-explain\",\n        \"uid\": \"cihuo3svgtec73bj6ncg\",\n        \"version\": 2,\n        \"steps\": [\n          {\n            \"name\": \"sentiment\",\n            \"tensorMap\": {\n              \"sentiment-explain.inputs.predict\": \"array_inputs\"\n            }\n          },\n          {\n            \"name\": \"sentiment-output-transform\",\n            \"inputs\": [\n              \"sentiment.outputs\"\n            ]\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"sentiment-output-transform.outputs\"\n          ]\n        },\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "4a9a4be4-45ba-4e3b-8a63-17b285c600ed", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "     }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"sentiment-output-transform.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-07-04T09:53:19.250753906Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\ncat ../../models/hf-sentiment-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/speech-sentiment/explainer\"\n  explainer:\n    type: anchor_text\n    pipelineRef: sentiment-explain\n\n\nseldon model load -f ../../models/hf-sentiment-explainer.yaml\n\n\n{}\n\n\nseldon model status sentiment-explainer -w ModelAvailable | jq -M .\n\n\nError: Model wait status timeout\n\n\n\n\n\nSpeech to Sentiment Pipeline with Explanation\u00b6\nWe can now create the final pipeline that will take speech and generate sentiment alongwith an explanation of why that sentiment was predicted.\ncat ../../pipelines/speech-to-sentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: speech-to-sentiment\nspec:\n  steps:\n    - name: whisper\n    - name: sentiment\n      inputs:\n      - whisper\n      tensorMap:\n        whisper.outputs.output:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "abaa079b-9829-4927-8cc3-07a5403f648b", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "pipeline that will take speech and generate sentiment alongwith an explanation of why that sentiment was predicted.\ncat ../../pipelines/speech-to-sentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: speech-to-sentiment\nspec:\n  steps:\n    - name: whisper\n    - name: sentiment\n      inputs:\n      - whisper\n      tensorMap:\n        whisper.outputs.output: args\n    - name: sentiment-input-transform\n      inputs:\n      - whisper\n    - name: sentiment-explainer\n      inputs:\n      - sentiment-input-transform\n  output:\n    steps:\n    - sentiment\n    - whisper\n\n\nseldon pipeline load -f ../../pipelines/speech-to-sentiment.yaml\n\n\nseldon pipeline status speech-to-sentiment -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"speech-to-sentiment\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"speech-to-sentiment\",\n        \"uid\": \"cihuqb4vgtec73bj6nd0\",\n        \"version\": 2,\n        \"steps\": [\n          {\n            \"name\": \"sentiment\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ],\n         ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "4ec85b76-8430-4ee6-879a-6a2645568560", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "  {\n            \"name\": \"sentiment\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ],\n            \"tensorMap\": {\n              \"whisper.outputs.output\": \"args\"\n            }\n          },\n          {\n            \"name\": \"sentiment-explainer\",\n            \"inputs\": [\n              \"sentiment-input-transform.outputs\"\n            ]\n          },\n          {\n            \"name\": \"sentiment-input-transform\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ]\n          },\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "9be216fe-889e-40dd-af88-9063581e08c8", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "      \"name\": \"sentiment-input-transform\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ]\n          },\n          {\n            \"name\": \"whisper\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"sentiment.outputs\",\n            \"whisper.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-07-04T09:58:04.277171896Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\n\n\nTest\u00b6\ncamera = CameraStream(constraints={'audio': True,'video':False})\nrecorder = AudioRecorder(stream=camera)\nrecorder\n\n\nAudioRecorder(audio=Audio(value=b'', format='webm'), stream=CameraStream(constraints={'audio': True, 'video': \u2026\n\n\n\ninfer(\"speech-to-sentiment.pipeline\")\n\n\ncihuqm8fh5ss73der5gg\nb'{\"text\": \" Cambridge is a great place.\"}'\nb'{\"label\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "e9582176-ba6d-4d61-8940-3c54a7466085", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline", "text": "      \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-07-04T09:58:04.277171896Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\n\n\nTest\u00b6\ncamera = CameraStream(constraints={'audio': True,'video':False})\nrecorder = AudioRecorder(stream=camera)\nrecorder\n\n\nAudioRecorder(audio=Audio(value=b'', format='webm'), stream=CameraStream(constraints={'audio': True, 'video': \u2026\n\n\n\ninfer(\"speech-to-sentiment.pipeline\")\n\n\ncihuqm8fh5ss73der5gg\nb'{\"text\": \" Cambridge is a great place.\"}'\nb'{\"label\": \"POSITIVE\", \"score\": 0.9998548030853271}'\n\n\n\nWe will wait for the explanation which is run asynchronously to the functional output from the Pipeline above.\nwhile True:\n    base64Res = !seldon pipeline inspect speech-to-sentiment.sentiment-explainer.outputs --format json \\\n          --request-id ${REQUEST_ID}\n    j = json.loads(base64Res[0])\n    if j[\"topics\"][0][\"msgs\"] is not None:\n        expBase64 = j[\"topics\"][0][\"msgs\"][0][\"value\"][\"outputs\"][0][\"contents\"][\"bytesContents\"][0]\n        expRaw = base64.b64decode(expBase64)\n        exp = json.loads(expRaw)\n        print(\"\")\n        print(\"Explanation anchors:\",exp[\"data\"][\"anchor\"])\n        break\n    else:\n        print(\".\",end='')\n        time.sleep(1)\n\n\n\n......\nExplanation anchors: ['great']\n\n\n\n\n\nCleanup\u00b6\nseldon pipeline unload speech-to-sentiment\nseldon pipeline unload sentiment-explain\n\n\nseldon model unload whisper\nseldon model unload sentiment\nseldon model unload sentiment-explainer\nseldon model unload sentiment-output-transform\nseldon model unload sentiment-input-transform\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "e66eec15-d090-4801-b5c8-b4a0584f2871", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "\nHuggingface Speech to Sentiment Pipeline Example\u00b6\nIn this example we create a Pipeline to chain two huggingface models to allow speech to sentiment functionalityand add an explainer to understand the result.\nThis example also illustrates how explainers can target pipelines to allow complex explanations flows.\n\nThis example requires ffmpeg package to be installed locally. run make install-requirements for the Python dependencies.\nfrom ipywebrtc import AudioRecorder, CameraStream\nimport torchaudio\nfrom IPython.display import Audio\nimport base64\nimport json\nimport requests\nimport os\nimport time\n\n\nCreate a method to load speech from recorder; transform into mp3 and send at base64 data. On return of the result extract and show the text and sentiment.\nreqJson = json.loads('{\"inputs\":[{\"name\":\"args\", \"parameters\": {\"content_type\": \"base64\"}, \"data\":[],\"datatype\":\"BYTES\",\"shape\":[1]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ndef infer(resource: str):\n    with open('recording.webm', 'wb') as f:\n        f.write(recorder.audio.value)\n    !ffmpeg -i recording.webm -vn -ab 128k -ar 44100 file.mp3 -y -hide_banner -loglevel panic\n    with open(\"file.mp3\", mode='rb') as file:\n        fileContent = file.read()\n        encoded = base64.b64encode(fileContent)\n        base64_message = encoded.decode('utf-8')\n    reqJson[\"inputs\"][0][\"data\"] = [str(base64_message)]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\": resource}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    j = response_raw.json()\n    sentiment = j[\"outputs\"][0][\"data\"][0]\n    text = j[\"outputs\"][1][\"data\"][0]\n    reqId = response_raw.headers[\"x-request-id\"]\n    print(reqId)\n    os.environ[\"REQUEST_ID\"]=reqId\n    print(base64.b64decode(text))\n    print(base64.b64decode(sentiment))\n\n\n\nLoad Huggingface Models\u00b6\nWe will load two Huggingface models for speech to text and text to sentiment.\ncat", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "df734feb-49d6-4c28-bf01-26b019c09412", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "resource}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    j = response_raw.json()\n    sentiment = j[\"outputs\"][0][\"data\"][0]\n    text = j[\"outputs\"][1][\"data\"][0]\n    reqId = response_raw.headers[\"x-request-id\"]\n    print(reqId)\n    os.environ[\"REQUEST_ID\"]=reqId\n    print(base64.b64decode(text))\n    print(base64.b64decode(sentiment))\n\n\n\nLoad Huggingface Models\u00b6\nWe will load two Huggingface models for speech to text and text to sentiment.\ncat ../../models/hf-whisper.yaml\necho \"---\"\ncat ../../models/hf-sentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: whisper\nspec:\n  storageUri: \"gs://seldon-models/mlserver/huggingface/whisper\"\n  requirements:\n  - huggingface\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment\nspec:\n  storageUri: \"gs://seldon-models/mlserver/huggingface/sentiment\"\n  requirements:\n  - huggingface\n\n\nseldon model load -f ../../models/hf-whisper.yaml\nseldon model load -f ../../models/hf-sentiment.yaml\n\n\n{}\n{}\n\n\nseldon model status whisper -w ModelAvailable | jq -M .\nseldon model status sentiment -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\n\n\nCreate Explain Pipeline\u00b6\nTo allow Alibi-Explain to more easily explain the sentiment we will need:\n\ninput and output transfrorms that take the Dict values input and output by the Huggingface sentiment model and turn them into values that Alibi-Explain can easily understand with the core values we want to explain and the outputs from the sentiment model.\nA separate Pipeline to allow us to join the sentiment model with the output transform\n\nThese transform models are MLServer custom runtimes as shown below:\ncat ./sentiment-input-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is defined in accordance with the LICENSE file.\n\nfrom mlserver import MLModel\nfrom", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "756b0e90-4b1d-4967-8284-73847d5318d7", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "runtimes as shown below:\ncat ./sentiment-input-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is defined in accordance with the LICENSE file.\n\nfrom mlserver import MLModel\nfrom mlserver.types import InferenceRequest, InferenceResponse, ResponseOutput\nfrom mlserver.codecs.string import StringRequestCodec\nfrom mlserver.logging import logger\nimport json\n\n\nclass SentimentInputTransformRuntime(MLModel):\n\n  async def load(self) -> bool:\n    return self.ready\n\n  async def predict(self, payload: InferenceRequest) -> InferenceResponse:\n    logger.info(\"payload (input-transform): %s\",payload)\n    res_list = self.decode_request(payload, default_codec=StringRequestCodec)\n    logger.info(\"res list (input-transform): %s\",res_list)\n    texts = []\n    for res in res_list:\n      logger.info(\"decoded data (input-transform): %s\", res)\n      #text = json.loads(res)\n      text = res\n      texts.append(text[\"text\"])\n\n    logger.info(\"transformed data (input-transform): %s\", texts)\n    response =  StringRequestCodec.encode_response(\n      model_name=\"sentiment\",\n      payload=texts\n    )\n    logger.info(\"response (input-transform): %s\", response)\n    return response\n\n\n\ncat ./sentiment-output-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is defined in", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "0b0c23b9-62a3-48d3-a677-5640a44b2805", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "   logger.info(\"response (input-transform): %s\", response)\n    return response\n\n\n\ncat ./sentiment-output-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is defined in accordance with the LICENSE file.\n\nfrom mlserver import MLModel\nfrom mlserver.types import InferenceRequest, InferenceResponse, ResponseOutput\nfrom mlserver.codecs import StringCodec, Base64Codec, NumpyRequestCodec\nfrom mlserver.codecs.string import StringRequestCodec\nfrom mlserver.codecs.numpy import NumpyRequestCodec\nimport base64\nfrom mlserver.logging import logger\nimport numpy as np\nimport json\n\nclass SentimentOutputTransformRuntime(MLModel):\n\n  async def load(self) -> bool:\n    return self.ready\n\n  async def predict(self, payload: InferenceRequest) -> InferenceResponse:\n    logger.info(\"payload (output-transform): %s\",payload)\n    res_list = self.decode_request(payload, default_codec=StringRequestCodec)\n    logger.info(\"res list (output-transform): %s\",res_list)\n    scores = []\n    for res in res_list:\n      logger.debug(\"decoded data (output transform): %s\",res)\n      #sentiment = json.loads(res)\n      sentiment = res\n      if sentiment[\"label\"] == \"POSITIVE\":\n        scores.append(1)\n      else:\n        scores.append(0)\n    response =  NumpyRequestCodec.encode_response(\n      model_name=\"sentiments\",\n      payload=np.array(scores)\n    )\n    logger.info(\"response (output-transform): %s\", response)\n    return response\n\n\n\ncat ../../models/hf-sentiment-input-transform.yaml\necho \"---\"\ncat ../../models/hf-sentiment-output-transform.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-input-transform\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/mlserver_1.3.5/sentiment-input-transform\"\n  requirements:\n  -", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "b0c4139c-a4d5-4132-8fe7-1fe5648d1ca3", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "     else:\n        scores.append(0)\n    response =  NumpyRequestCodec.encode_response(\n      model_name=\"sentiments\",\n      payload=np.array(scores)\n    )\n    logger.info(\"response (output-transform): %s\", response)\n    return response\n\n\n\ncat ../../models/hf-sentiment-input-transform.yaml\necho \"---\"\ncat ../../models/hf-sentiment-output-transform.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-input-transform\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/mlserver_1.3.5/sentiment-input-transform\"\n  requirements:\n  - mlserver\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-output-transform\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/mlserver_1.3.5/sentiment-output-transform\"\n  requirements:\n  - mlserver\n  - python\n\n\nseldon model load -f ../../models/hf-sentiment-input-transform.yaml\nseldon model load -f ../../models/hf-sentiment-output-transform.yaml\n\n\n{}\n{}\n\n\nseldon model status sentiment-input-transform -w ModelAvailable | jq -M .\nseldon model status sentiment-output-transform -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ../../pipelines/sentiment-explain.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: sentiment-explain\nspec:\n  steps:\n    - name: sentiment\n      tensorMap:\n        sentiment-explain.inputs.predict: array_inputs\n    - name: sentiment-output-transform\n      inputs:\n      - sentiment\n  output:\n    steps:\n    - sentiment-output-transform\n\n\nseldon pipeline load -f ../../pipelines/sentiment-explain.yaml\n\n\nseldon pipeline status sentiment-explain -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"sentiment-explain\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"sentiment-explain\",\n        \"uid\": \"cihuo3svgtec73bj6ncg\",\n        \"version\": 2,\n        \"steps\": [\n          {\n           ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "1b60b80e-6441-4ddd-8147-325716657e9c", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "     \"pipeline\": {\n        \"name\": \"sentiment-explain\",\n        \"uid\": \"cihuo3svgtec73bj6ncg\",\n        \"version\": 2,\n        \"steps\": [\n          {\n            \"name\": \"sentiment\",\n            \"tensorMap\": {\n              \"sentiment-explain.inputs.predict\": \"array_inputs\"\n            }\n          },\n          {\n            \"name\": \"sentiment-output-transform\",\n            \"inputs\": [\n              \"sentiment.outputs\"\n            ]\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"sentiment-output-transform.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "7e5e5075-9a48-4ebe-b91f-247e4b7afed0", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "   ],\n        \"output\": {\n          \"steps\": [\n            \"sentiment-output-transform.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-07-04T09:53:19.250753906Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\ncat ../../models/hf-sentiment-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/speech-sentiment/explainer\"\n  explainer:\n    type: anchor_text\n    pipelineRef: sentiment-explain\n\n\nseldon model load -f ../../models/hf-sentiment-explainer.yaml\n\n\n{}\n\n\nseldon model status sentiment-explainer -w ModelAvailable | jq -M .\n\n\nError: Model wait status timeout\n\n\n\n\n\nSpeech to Sentiment Pipeline with Explanation\u00b6\nWe can now create the final pipeline that will take speech and generate sentiment alongwith an explanation of why that sentiment was predicted.\ncat ../../pipelines/speech-to-sentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: speech-to-sentiment\nspec:\n  steps:\n    - name: whisper\n    - name: sentiment\n      inputs:\n      - whisper\n      tensorMap:\n        whisper.outputs.output: args\n    - name: sentiment-input-transform\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "d6b6d9f6-97c8-4f3d-b875-0c478c944c2b", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "explanation of why that sentiment was predicted.\ncat ../../pipelines/speech-to-sentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: speech-to-sentiment\nspec:\n  steps:\n    - name: whisper\n    - name: sentiment\n      inputs:\n      - whisper\n      tensorMap:\n        whisper.outputs.output: args\n    - name: sentiment-input-transform\n      inputs:\n      - whisper\n    - name: sentiment-explainer\n      inputs:\n      - sentiment-input-transform\n  output:\n    steps:\n    - sentiment\n    - whisper\n\n\nseldon pipeline load -f ../../pipelines/speech-to-sentiment.yaml\n\n\nseldon pipeline status speech-to-sentiment -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"speech-to-sentiment\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"speech-to-sentiment\",\n        \"uid\": \"cihuqb4vgtec73bj6nd0\",\n        \"version\": 2,\n        \"steps\": [\n          {\n            \"name\": \"sentiment\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ],\n            \"tensorMap\": {\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "5098d8e4-5121-4e7d-97bb-fe5d6d97c6ab", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "    \"name\": \"sentiment\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ],\n            \"tensorMap\": {\n              \"whisper.outputs.output\": \"args\"\n            }\n          },\n          {\n            \"name\": \"sentiment-explainer\",\n            \"inputs\": [\n              \"sentiment-input-transform.outputs\"\n            ]\n          },\n          {\n            \"name\": \"sentiment-input-transform\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ]\n          },\n          {\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "1c01b9fd-bba1-4138-ae58-ce159543f0c9", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "         \"inputs\": [\n              \"whisper.outputs\"\n            ]\n          },\n          {\n            \"name\": \"whisper\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"sentiment.outputs\",\n            \"whisper.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-07-04T09:58:04.277171896Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\n\n\nTest\u00b6\ncamera = CameraStream(constraints={'audio': True,'video':False})\nrecorder = AudioRecorder(stream=camera)\nrecorder\n\n\nAudioRecorder(audio=Audio(value=b'', format='webm'), stream=CameraStream(constraints={'audio': True, 'video': \u2026\n\n\n\ninfer(\"speech-to-sentiment.pipeline\")\n\n\ncihuqm8fh5ss73der5gg\nb'{\"text\": \" Cambridge is a great place.\"}'\nb'{\"label\": \"POSITIVE\", \"score\": 0.9998548030853271}'\n\n\n\nWe will wait for the explanation which is", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "1ff5f8ba-0c9a-4506-a605-f420e64e7f85", "page": "examples/speech-to-sentiment", "section": "huggingface-speech-to-sentiment-pipeline-example", "text": "     \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-07-04T09:58:04.277171896Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\n\n\nTest\u00b6\ncamera = CameraStream(constraints={'audio': True,'video':False})\nrecorder = AudioRecorder(stream=camera)\nrecorder\n\n\nAudioRecorder(audio=Audio(value=b'', format='webm'), stream=CameraStream(constraints={'audio': True, 'video': \u2026\n\n\n\ninfer(\"speech-to-sentiment.pipeline\")\n\n\ncihuqm8fh5ss73der5gg\nb'{\"text\": \" Cambridge is a great place.\"}'\nb'{\"label\": \"POSITIVE\", \"score\": 0.9998548030853271}'\n\n\n\nWe will wait for the explanation which is run asynchronously to the functional output from the Pipeline above.\nwhile True:\n    base64Res = !seldon pipeline inspect speech-to-sentiment.sentiment-explainer.outputs --format json \\\n          --request-id ${REQUEST_ID}\n    j = json.loads(base64Res[0])\n    if j[\"topics\"][0][\"msgs\"] is not None:\n        expBase64 = j[\"topics\"][0][\"msgs\"][0][\"value\"][\"outputs\"][0][\"contents\"][\"bytesContents\"][0]\n        expRaw = base64.b64decode(expBase64)\n        exp = json.loads(expRaw)\n        print(\"\")\n        print(\"Explanation anchors:\",exp[\"data\"][\"anchor\"])\n        break\n    else:\n        print(\".\",end='')\n        time.sleep(1)\n\n\n\n......\nExplanation anchors: ['great']\n\n\n\n\n\nCleanup\u00b6\nseldon pipeline unload speech-to-sentiment\nseldon pipeline unload sentiment-explain\n\n\nseldon model unload whisper\nseldon model unload sentiment\nseldon model unload sentiment-explainer\nseldon model unload sentiment-output-transform\nseldon model unload sentiment-input-transform\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "99ae7bab-e12d-45ba-a048-c026a7f78afe", "page": "examples/speech-to-sentiment", "section": "load-huggingface-models", "text": "\nLoad Huggingface Models\u00b6\nWe will load two Huggingface models for speech to text and text to sentiment.\ncat ../../models/hf-whisper.yaml\necho \"---\"\ncat ../../models/hf-sentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: whisper\nspec:\n  storageUri: \"gs://seldon-models/mlserver/huggingface/whisper\"\n  requirements:\n  - huggingface\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment\nspec:\n  storageUri: \"gs://seldon-models/mlserver/huggingface/sentiment\"\n  requirements:\n  - huggingface\n\n\nseldon model load -f ../../models/hf-whisper.yaml\nseldon model load -f ../../models/hf-sentiment.yaml\n\n\n{}\n{}\n\n\nseldon model status whisper -w ModelAvailable | jq -M .\nseldon model status sentiment -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "f02d8fa5-db28-4df7-9d91-2371096cb04d", "page": "examples/speech-to-sentiment", "section": "create-explain-pipeline", "text": "\nCreate Explain Pipeline\u00b6\nTo allow Alibi-Explain to more easily explain the sentiment we will need:\n\ninput and output transfrorms that take the Dict values input and output by the Huggingface sentiment model and turn them into values that Alibi-Explain can easily understand with the core values we want to explain and the outputs from the sentiment model.\nA separate Pipeline to allow us to join the sentiment model with the output transform\n\nThese transform models are MLServer custom runtimes as shown below:\ncat ./sentiment-input-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is defined in accordance with the LICENSE file.\n\nfrom mlserver import MLModel\nfrom mlserver.types import InferenceRequest, InferenceResponse, ResponseOutput\nfrom mlserver.codecs.string import StringRequestCodec\nfrom mlserver.logging import logger\nimport json\n\n\nclass SentimentInputTransformRuntime(MLModel):\n\n  async def load(self) -> bool:\n    return self.ready\n\n  async def predict(self, payload: InferenceRequest) -> InferenceResponse:\n    logger.info(\"payload (input-transform): %s\",payload)\n    res_list = self.decode_request(payload, default_codec=StringRequestCodec)\n    logger.info(\"res list (input-transform): %s\",res_list)\n    texts = []\n    for res in res_list:\n      logger.info(\"decoded data (input-transform): %s\", res)\n      #text = json.loads(res)\n      text = res\n      texts.append(text[\"text\"])\n\n    logger.info(\"transformed data (input-transform): %s\", texts)\n    response =  StringRequestCodec.encode_response(\n      model_name=\"sentiment\",\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "ff23bf2f-da37-478f-8e17-4c9de549eb42", "page": "examples/speech-to-sentiment", "section": "create-explain-pipeline", "text": " texts = []\n    for res in res_list:\n      logger.info(\"decoded data (input-transform): %s\", res)\n      #text = json.loads(res)\n      text = res\n      texts.append(text[\"text\"])\n\n    logger.info(\"transformed data (input-transform): %s\", texts)\n    response =  StringRequestCodec.encode_response(\n      model_name=\"sentiment\",\n      payload=texts\n    )\n    logger.info(\"response (input-transform): %s\", response)\n    return response\n\n\n\ncat ./sentiment-output-transform/model.py | pygmentize\n\n\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is defined in accordance with the LICENSE file.\n\nfrom mlserver import MLModel\nfrom mlserver.types import InferenceRequest, InferenceResponse, ResponseOutput\nfrom mlserver.codecs import StringCodec, Base64Codec, NumpyRequestCodec\nfrom mlserver.codecs.string import StringRequestCodec\nfrom mlserver.codecs.numpy import NumpyRequestCodec\nimport base64\nfrom mlserver.logging import logger\nimport numpy as np\nimport json\n\nclass SentimentOutputTransformRuntime(MLModel):\n\n  async def load(self) -> bool:\n    return self.ready\n\n  async def predict(self, payload: InferenceRequest) -> InferenceResponse:\n    logger.info(\"payload (output-transform): %s\",payload)\n    res_list = self.decode_request(payload, default_codec=StringRequestCodec)\n    logger.info(\"res list (output-transform): %s\",res_list)\n    scores = []\n    for res in res_list:\n      logger.debug(\"decoded data (output transform): %s\",res)\n      #sentiment = json.loads(res)\n      sentiment = res\n      if sentiment[\"label\"]", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "392e3aed-e97e-4728-8dcf-8d9bcfc10ec7", "page": "examples/speech-to-sentiment", "section": "create-explain-pipeline", "text": " logger.info(\"payload (output-transform): %s\",payload)\n    res_list = self.decode_request(payload, default_codec=StringRequestCodec)\n    logger.info(\"res list (output-transform): %s\",res_list)\n    scores = []\n    for res in res_list:\n      logger.debug(\"decoded data (output transform): %s\",res)\n      #sentiment = json.loads(res)\n      sentiment = res\n      if sentiment[\"label\"] == \"POSITIVE\":\n        scores.append(1)\n      else:\n        scores.append(0)\n    response =  NumpyRequestCodec.encode_response(\n      model_name=\"sentiments\",\n      payload=np.array(scores)\n    )\n    logger.info(\"response (output-transform): %s\", response)\n    return response\n\n\n\ncat ../../models/hf-sentiment-input-transform.yaml\necho \"---\"\ncat ../../models/hf-sentiment-output-transform.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-input-transform\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/mlserver_1.3.5/sentiment-input-transform\"\n  requirements:\n  - mlserver\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-output-transform\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/mlserver_1.3.5/sentiment-output-transform\"\n  requirements:\n  - mlserver\n  - python\n\n\nseldon model load -f ../../models/hf-sentiment-input-transform.yaml\nseldon model load -f ../../models/hf-sentiment-output-transform.yaml\n\n\n{}\n{}\n\n\nseldon model status sentiment-input-transform -w ModelAvailable | jq -M .\nseldon model status sentiment-output-transform -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncat ../../pipelines/sentiment-explain.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: sentiment-explain\nspec:\n  steps:\n    - name: sentiment\n      tensorMap:\n        sentiment-explain.inputs.predict: array_inputs\n    - name: sentiment-output-transform\n      inputs:\n      - sentiment\n  output:\n    steps:\n    - sentiment-output-transform\n\n\nseldon pipeline load -f ../../pipelines/sentiment-explain.yaml\n\n\nseldon pipeline status sentiment-explain -w PipelineReady | jq -M .\n\n\n{\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "ba933411-b0ed-4ac5-8a06-3ee9c9a067f7", "page": "examples/speech-to-sentiment", "section": "create-explain-pipeline", "text": "   - name: sentiment\n      tensorMap:\n        sentiment-explain.inputs.predict: array_inputs\n    - name: sentiment-output-transform\n      inputs:\n      - sentiment\n  output:\n    steps:\n    - sentiment-output-transform\n\n\nseldon pipeline load -f ../../pipelines/sentiment-explain.yaml\n\n\nseldon pipeline status sentiment-explain -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"sentiment-explain\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"sentiment-explain\",\n        \"uid\": \"cihuo3svgtec73bj6ncg\",\n        \"version\": 2,\n        \"steps\": [\n          {\n            \"name\": \"sentiment\",\n            \"tensorMap\": {\n              \"sentiment-explain.inputs.predict\": \"array_inputs\"\n            }\n          },\n          {\n            \"name\": \"sentiment-output-transform\",\n            \"inputs\": [\n              \"sentiment.outputs\"\n            ]\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "b6adc04c-038c-456d-8415-bd13515c3539", "page": "examples/speech-to-sentiment", "section": "create-explain-pipeline", "text": "       {\n            \"name\": \"sentiment-output-transform\",\n            \"inputs\": [\n              \"sentiment.outputs\"\n            ]\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"sentiment-output-transform.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-07-04T09:53:19.250753906Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\ncat ../../models/hf-sentiment-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/speech-sentiment/explainer\"\n  explainer:\n    type: anchor_text\n    pipelineRef: sentiment-explain\n\n\nseldon model load -f ../../models/hf-sentiment-explainer.yaml\n\n\n{}\n\n\nseldon model status sentiment-explainer -w ModelAvailable | jq -M .\n\n\nError: Model wait status timeout\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "893e39ca-cc28-451b-a389-212a3c386a27", "page": "examples/speech-to-sentiment", "section": "speech-to-sentiment-pipeline-with-explanation", "text": "\nSpeech to Sentiment Pipeline with Explanation\u00b6\nWe can now create the final pipeline that will take speech and generate sentiment alongwith an explanation of why that sentiment was predicted.\ncat ../../pipelines/speech-to-sentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: speech-to-sentiment\nspec:\n  steps:\n    - name: whisper\n    - name: sentiment\n      inputs:\n      - whisper\n      tensorMap:\n        whisper.outputs.output: args\n    - name: sentiment-input-transform\n      inputs:\n      - whisper\n    - name: sentiment-explainer\n      inputs:\n      - sentiment-input-transform\n  output:\n    steps:\n    - sentiment\n    - whisper\n\n\nseldon pipeline load -f ../../pipelines/speech-to-sentiment.yaml\n\n\nseldon pipeline status speech-to-sentiment -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"speech-to-sentiment\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"speech-to-sentiment\",\n        \"uid\": \"cihuqb4vgtec73bj6nd0\",\n        \"version\": 2,\n        \"steps\": [\n          {\n            \"name\": \"sentiment\",\n            \"inputs\": [\n              \"whisper.outputs\"\n          ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "1c3754f4-5003-4d43-bfb5-385326284049", "page": "examples/speech-to-sentiment", "section": "speech-to-sentiment-pipeline-with-explanation", "text": "  \"steps\": [\n          {\n            \"name\": \"sentiment\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ],\n            \"tensorMap\": {\n              \"whisper.outputs.output\": \"args\"\n            }\n          },\n          {\n            \"name\": \"sentiment-explainer\",\n            \"inputs\": [\n              \"sentiment-input-transform.outputs\"\n            ]\n          },\n          {\n            \"name\": \"sentiment-input-transform\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ]\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "953e35e5-7996-4146-8c47-3131bcdbc4d8", "page": "examples/speech-to-sentiment", "section": "speech-to-sentiment-pipeline-with-explanation", "text": "     {\n            \"name\": \"sentiment-input-transform\",\n            \"inputs\": [\n              \"whisper.outputs\"\n            ]\n          },\n          {\n            \"name\": \"whisper\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"sentiment.outputs\",\n            \"whisper.outputs\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 2,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-07-04T09:58:04.277171896Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "0e503a1d-9ad7-45bd-a403-28b76a68faa0", "page": "examples/speech-to-sentiment", "section": "test", "text": "\nTest\u00b6\ncamera = CameraStream(constraints={'audio': True,'video':False})\nrecorder = AudioRecorder(stream=camera)\nrecorder\n\n\nAudioRecorder(audio=Audio(value=b'', format='webm'), stream=CameraStream(constraints={'audio': True, 'video': \u2026\n\n\n\ninfer(\"speech-to-sentiment.pipeline\")\n\n\ncihuqm8fh5ss73der5gg\nb'{\"text\": \" Cambridge is a great place.\"}'\nb'{\"label\": \"POSITIVE\", \"score\": 0.9998548030853271}'\n\n\n\nWe will wait for the explanation which is run asynchronously to the functional output from the Pipeline above.\nwhile True:\n    base64Res = !seldon pipeline inspect speech-to-sentiment.sentiment-explainer.outputs --format json \\\n          --request-id ${REQUEST_ID}\n    j = json.loads(base64Res[0])\n    if j[\"topics\"][0][\"msgs\"] is not None:\n        expBase64 = j[\"topics\"][0][\"msgs\"][0][\"value\"][\"outputs\"][0][\"contents\"][\"bytesContents\"][0]\n        expRaw = base64.b64decode(expBase64)\n        exp = json.loads(expRaw)\n        print(\"\")\n        print(\"Explanation anchors:\",exp[\"data\"][\"anchor\"])\n        break\n    else:\n        print(\".\",end='')\n        time.sleep(1)\n\n\n\n......\nExplanation anchors: ['great']\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/speech-to-sentiment.html", "key": "examples/speech-to-sentiment"}}, {"key": "f696a891-d08e-4068-b26e-c3bbb4f82246", "page": "examples/pandasquery", "section": "conditional-pipeline-with-pandas-query-model", "text": "\nConditional Pipeline with Pandas Query Model\u00b6\nThe model is defined as an MLServer custom runtime and allows the user to pass in a custom pandas query as a parameter defined at model creation to be used to filter the data passed to the model.\n# Copyright (c) 2024 Seldon Technologies Ltd.\n\n# Use of this software is governed BY\n# (1) the license included in the LICENSE file or\n# (2) if the license included in the LICENSE file is the Business Source License 1.1,\n# the Change License after the Change Date as each is defined in accordance with the LICENSE file.\n\nfrom mlserver import MLModel\nfrom mlserver.types import InferenceRequest, InferenceResponse\nfrom mlserver.codecs import PandasCodec\nfrom mlserver.errors import MLServerError\nimport pandas as pd\nfrom fastapi import status\nfrom mlserver.logging import logger\n\nQUERY_KEY = \"query\"\n\n\nclass ModelParametersMissing(MLServerError):\n  def __init__(self, model_name: str, reason: str):\n    super().__init__(\n      f\"Parameters missing for model {model_name} {reason}\", status.HTTP_400_BAD_REQUEST\n    )\n\nclass PandasQueryRuntime(MLModel):\n\n  async def load(self) -> bool:\n    logger.info(\"Loading with settings %s\", self.settings)\n    if self.settings.parameters is None or \\\n      self.settings.parameters.extra is None:\n      raise ModelParametersMissing(self.name, \"no settings.parameters.extra found\")\n    self.query = self.settings.parameters.extra[QUERY_KEY]\n    if self.query is None:\n      raise ModelParametersMissing(self.name, \"no settings.parameters.extra.query found\")\n    self.ready = True\n\n    return self.ready\n\n  async def predict(self, payload: InferenceRequest) -> InferenceResponse:\n    input_df: pd.DataFrame = PandasCodec.decode_request(payload)\n    # run query on input_df and save in output_df\n    output_df", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "3fb561a3-3b42-4b45-8740-ae2e480a1609", "page": "examples/pandasquery", "section": "conditional-pipeline-with-pandas-query-model", "text": "  self.query = self.settings.parameters.extra[QUERY_KEY]\n    if self.query is None:\n      raise ModelParametersMissing(self.name, \"no settings.parameters.extra.query found\")\n    self.ready = True\n\n    return self.ready\n\n  async def predict(self, payload: InferenceRequest) -> InferenceResponse:\n    input_df: pd.DataFrame = PandasCodec.decode_request(payload)\n    # run query on input_df and save in output_df\n    output_df = input_df.query(self.query)\n    if output_df.empty:\n      output_df = pd.DataFrame({'status':[\"no rows satisfied \" + self.query]})\n    else:\n      output_df[\"status\"] = \"row satisfied \" + self.query\n    return PandasCodec.encode_response(self.name, output_df, self.version)\n\n\n\nConditional Pipeline using PandasQuery\u00b6\ncat ../../models/choice1.yaml\necho \"---\"\ncat ../../models/choice2.yaml\necho \"---\"\ncat ../../models/add10.yaml\necho \"---\"\ncat ../../models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: choice-is-one\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/pandasquery\"\n  requirements:\n  - mlserver\n  - python\n  parameters:\n  - name: query\n    value: \"choice == 1\"\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: choice-is-two\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/pandasquery\"\n  requirements:\n  - mlserver\n  - python\n  parameters:\n  - name: query\n    value: \"choice == 2\"\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ../../models/choice1.yaml\nseldon model load -f ../../models/choice2.yaml\nseldon model load -f ../../models/add10.yaml\nseldon model load -f ../../models/mul10.yaml\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model status choice-is-one -w ModelAvailable\nseldon model status choice-is-two -w ModelAvailable\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n{}\n{}\n\n\ncat ../../pipelines/choice.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: choice\nspec:\n  steps:\n  - name: choice-is-one\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "91e664cd-e700-4711-95ec-2c011c87c931", "page": "examples/pandasquery", "section": "conditional-pipeline-with-pandas-query-model", "text": "Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ../../models/choice1.yaml\nseldon model load -f ../../models/choice2.yaml\nseldon model load -f ../../models/add10.yaml\nseldon model load -f ../../models/mul10.yaml\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model status choice-is-one -w ModelAvailable\nseldon model status choice-is-two -w ModelAvailable\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n{}\n{}\n\n\ncat ../../pipelines/choice.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: choice\nspec:\n  steps:\n  - name: choice-is-one\n  - name: mul10\n    inputs:\n    - choice.inputs.INPUT\n    triggers:\n    - choice-is-one.outputs.choice\n  - name: choice-is-two\n  - name: add10\n    inputs:\n    - choice.inputs.INPUT\n    triggers:\n    - choice-is-two.outputs.choice\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ../../pipelines/choice.yaml\n\n\nseldon pipeline status choice -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"choice\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"choice\",\n        \"uid\": \"cifel9aufmbc73e5intg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"choice.inputs.INPUT\"\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "df7adda6-f984-44e1-adbe-5359564bd95e", "page": "examples/pandasquery", "section": "conditional-pipeline-with-pandas-query-model", "text": "    \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"choice.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"choice-is-two.outputs.choice\"\n            ]\n          },\n          {\n            \"name\": \"choice-is-one\"\n          },\n          {\n            \"name\": \"choice-is-two\"\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"choice.inputs.INPUT\"\n            ],\n           ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "74351323-b64b-44b3-8878-ab395522459c", "page": "examples/pandasquery", "section": "conditional-pipeline-with-pandas-query-model", "text": "{\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"choice.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"choice-is-one.outputs.choice\"\n            ]\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n          \"stepsJoin\": \"ANY\"\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:45:57.284684328Z\",\n        \"modelsReady\": true\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "1164e320-cd91-448d-8b76-071958265312", "page": "examples/pandasquery", "section": "conditional-pipeline-with-pandas-query-model", "text": "     },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:45:57.284684328Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer choice --inference-mode grpc \\\n '{\"model_name\":\"choice\",\"inputs\":[{\"name\":\"choice\",\"contents\":{\"int_contents\":[1]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[5,6,7,8]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          50,\n          60,\n          70,\n          80\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer choice --inference-mode grpc \\\n '{\"model_name\":\"choice\",\"inputs\":[{\"name\":\"choice\",\"contents\":{\"int_contents\":[2]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[5,6,7,8]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "cd27858f-a610-4045-b4c6-4ab55c7db704", "page": "examples/pandasquery", "section": "conditional-pipeline-with-pandas-query-model", "text": " }\n    }\n  ]\n}\n\n\nseldon pipeline infer choice --inference-mode grpc \\\n '{\"model_name\":\"choice\",\"inputs\":[{\"name\":\"choice\",\"contents\":{\"int_contents\":[2]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[5,6,7,8]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          15,\n          16,\n          17,\n          18\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon model unload choice-is-one\nseldon model unload choice-is-two\nseldon model unload add10\nseldon model unload mul10\nseldon pipeline unload choice\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "546fd9bc-f208-431a-a446-e874645a7325", "page": "examples/pandasquery", "section": "conditional-pipeline-using-pandasquery", "text": "\nConditional Pipeline using PandasQuery\u00b6\ncat ../../models/choice1.yaml\necho \"---\"\ncat ../../models/choice2.yaml\necho \"---\"\ncat ../../models/add10.yaml\necho \"---\"\ncat ../../models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: choice-is-one\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/pandasquery\"\n  requirements:\n  - mlserver\n  - python\n  parameters:\n  - name: query\n    value: \"choice == 1\"\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: choice-is-two\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/pandasquery\"\n  requirements:\n  - mlserver\n  - python\n  parameters:\n  - name: query\n    value: \"choice == 2\"\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ../../models/choice1.yaml\nseldon model load -f ../../models/choice2.yaml\nseldon model load -f ../../models/add10.yaml\nseldon model load -f ../../models/mul10.yaml\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model status choice-is-one -w ModelAvailable\nseldon model status choice-is-two -w ModelAvailable\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n{}\n{}\n\n\ncat ../../pipelines/choice.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: choice\nspec:\n  steps:\n  - name: choice-is-one\n  - name: mul10\n    inputs:\n    - choice.inputs.INPUT\n    triggers:\n    - choice-is-one.outputs.choice\n  - name: choice-is-two\n  - name: add10\n    inputs:\n    - choice.inputs.INPUT\n    triggers:\n    - choice-is-two.outputs.choice\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ../../pipelines/choice.yaml\n\n\nseldon pipeline status choice -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"choice\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "b8d413db-b412-4a5c-a180-8a4a80df52df", "page": "examples/pandasquery", "section": "conditional-pipeline-using-pandasquery", "text": "   - choice-is-two.outputs.choice\n  output:\n    steps:\n    - mul10\n    - add10\n    stepsJoin: any\n\n\nseldon pipeline load -f ../../pipelines/choice.yaml\n\n\nseldon pipeline status choice -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"choice\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"choice\",\n        \"uid\": \"cifel9aufmbc73e5intg\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"add10\",\n            \"inputs\": [\n              \"choice.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"choice-is-two.outputs.choice\"\n            ]\n          },\n          {\n            \"name\": \"choice-is-one\"\n          },\n          {\n          ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "6da8e7c3-d003-41fd-be60-b4abdee2be19", "page": "examples/pandasquery", "section": "conditional-pipeline-using-pandasquery", "text": "]\n          },\n          {\n            \"name\": \"choice-is-one\"\n          },\n          {\n            \"name\": \"choice-is-two\"\n          },\n          {\n            \"name\": \"mul10\",\n            \"inputs\": [\n              \"choice.inputs.INPUT\"\n            ],\n            \"triggers\": [\n              \"choice-is-one.outputs.choice\"\n            ]\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "bd17ab6e-b27d-458e-a3d8-893674c29b1a", "page": "examples/pandasquery", "section": "conditional-pipeline-using-pandasquery", "text": "   ],\n        \"output\": {\n          \"steps\": [\n            \"mul10.outputs\",\n            \"add10.outputs\"\n          ],\n          \"stepsJoin\": \"ANY\"\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:45:57.284684328Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer choice --inference-mode grpc \\\n '{\"model_name\":\"choice\",\"inputs\":[{\"name\":\"choice\",\"contents\":{\"int_contents\":[1]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[5,6,7,8]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          50,\n          60,\n          70,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "a6b34e5e-4a1f-475a-bc35-294405f8ebe2", "page": "examples/pandasquery", "section": "conditional-pipeline-using-pandasquery", "text": "  \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          50,\n          60,\n          70,\n          80\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer choice --inference-mode grpc \\\n '{\"model_name\":\"choice\",\"inputs\":[{\"name\":\"choice\",\"contents\":{\"int_contents\":[2]},\"datatype\":\"INT32\",\"shape\":[1]},{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[5,6,7,8]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          15,\n          16,\n          17,\n          18\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon model unload choice-is-one\nseldon model unload choice-is-two\nseldon model unload add10\nseldon model unload mul10\nseldon pipeline unload choice\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pandasquery.html", "key": "examples/pandasquery"}}, {"key": "cb3e5eae-b400-4bfe-87a2-fdb9aeb21374", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "\nKubernetes Examples\u00b6\nRun these examples from the samples folder.\n\nSeldon V2 Kubernetes Examples\u00b6\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.18.255.2'\n\n\n\n\nModel\u00b6\ncat ./models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nkubectl create -f ./models/sklearn-iris-gs.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n\nkubectl get model iris -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:01:52Z\",\n      \"message\": \"ModelAvailable\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:01:52Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\nseldon model infer iris --inference-host ${MESH_IP}:80 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"7fd401e1-3dce-46f5-9668-902aea652b89\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model infer iris --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"parameters\": {\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "9f2eefd4-03f6-4b02-b9e3-975fca8f1b9f", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "\"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"parameters\": {\n        \"content_type\": {\n          \"stringParam\": \"np\"\n        }\n      },\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl get server mlserver -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T09:59:12Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T09:59:12Z\",\n      \"reason\": \"StatefulSet replicas matches desired replicas\",\n      \"status\": \"True\",\n      \"type\": \"StatefulSetReady\"\n    }\n  ],\n  \"loadedModels\": 1,\n  \"replicas\": 1,\n  \"selector\": \"seldon-server-name=mlserver\"\n}\n\n\nkubectl delete -f ./models/sklearn-iris-gs.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\n\nExperiment\u00b6\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "564f25b0-0bc7-4223-82cd-4a00410b5630", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "     \"reason\": \"StatefulSet replicas matches desired replicas\",\n      \"status\": \"True\",\n      \"type\": \"StatefulSetReady\"\n    }\n  ],\n  \"loadedModels\": 1,\n  \"replicas\": 1,\n  \"selector\": \"seldon-server-name=mlserver\"\n}\n\n\nkubectl delete -f ./models/sklearn-iris-gs.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\n\nExperiment\u00b6\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nkubectl create -f ./models/sklearn1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/sklearn2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\nmodel.mlops.seldon.io/iris2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nkubectl create -f ./experiments/ab-default-model.yaml -n ${NAMESPACE}\n\n\nexperiment.mlops.seldon.io/experiment-sample created\n\n\n\nkubectl wait --for condition=ready --timeout=300s experiment --all -n ${NAMESPACE}\n\n\nexperiment.mlops.seldon.io/experiment-sample condition met\n\n\n\nseldon model infer --inference-host ${MESH_IP}:80 -i 50 iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::29 :iris_1::21]\n\n\n\nkubectl delete -f ./experiments/ab-default-model.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/sklearn1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/sklearn2.yaml -n ${NAMESPACE}\n\n\nexperiment.mlops.seldon.io \"experiment-sample\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\n\n\n\n\n\nPipeline - model chain\u00b6\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\nmodel.mlops.seldon.io/tfsimple2 condition met\n\n\n\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "78a38ac5-9bd1-409c-80fd-e997aff45267", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\nmodel.mlops.seldon.io/tfsimple2 condition met\n\n\n\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nkubectl create -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples created\n\n\n\nkubectl wait --for condition=ready --timeout=300s pipeline --all -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples condition met\n\n\n\nseldon pipeline infer tfsimples --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "88372889-2f94-4a43-be20-4d87b25cb2c3", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": " \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "4390e790-c8db-42c4-9fe8-8871f29300ac", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "       ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "9a87d0ca-4a20-4e85-a5a3-4d61c7e0385f", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "        24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io \"tfsimples\" deleted\n\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\n\n\n\n\n\nPipeline - model join\u00b6\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\ncat ./models/tfsimple3.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple3\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple3.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\nmodel.mlops.seldon.io/tfsimple3 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\nmodel.mlops.seldon.io/tfsimple2 condition met\nmodel.mlops.seldon.io/tfsimple3 condition met\n\n\n\ncat ./pipelines/tfsimples-join.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: join\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: tfsimple3\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    -", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "faff88ab-d1a3-4580-8390-ea13235dac07", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": " - name: tfsimple2\n    - name: tfsimple3\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\nkubectl create -f ./pipelines/tfsimples-join.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/join created\n\n\n\nkubectl wait --for condition=ready --timeout=300s pipeline --all -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/join condition met\n\n\n\nseldon pipeline infer join --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "48d5b7d2-5604-490e-83c2-3b7767ab608b", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "6fea7bb0-545a-4a4d-a27f-9f6bf1b473ab", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "   ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f ./pipelines/tfsimples-join.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io \"join\" deleted\n\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple3.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\nmodel.mlops.seldon.io \"tfsimple3\" deleted\n\n\n\n\n\n\nExplainer\u00b6\ncat ./models/income.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/classifier\"\n  requirements:\n  - sklearn\n\n\nkubectl create -f ./models/income.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "688c0a35-e5c5-4c71-a92f-b070a34b433a", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": " }\n    }\n  ]\n}\n\n\nkubectl delete -f ./pipelines/tfsimples-join.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io \"join\" deleted\n\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple3.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\nmodel.mlops.seldon.io \"tfsimple3\" deleted\n\n\n\n\n\n\nExplainer\u00b6\ncat ./models/income.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/classifier\"\n  requirements:\n  - sklearn\n\n\nkubectl create -f ./models/income.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income condition met\n\n\n\nkubectl get model income -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:02:53Z\",\n      \"message\": \"ModelAvailable\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:02:53Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\nseldon model infer income --inference-host ${MESH_IP}:80 \\\n     '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 12], \"datatype\": \"FP32\", \"data\": [[47,4,1,1,1,3,4,1,0,0,40,9]]}]}'\n\n\n{\n\t\"model_name\": \"income_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"f52acfeb-0f22-429f-8c7a-785ef17cd470\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t0\n\t\t\t]\n\t\t}\n\t]\n}\n\n\ncat ./models/income-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/explainer\"\n  explainer:\n    type: anchor_tabular\n    modelRef: income\n\n\nkubectl create -f ./models/income-explainer.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income-explainer created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income condition met\nmodel.mlops.seldon.io/income-explainer condition met\n\n\n\nkubectl get model income-explainer -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:03:07Z\",\n      \"message\": \"ModelAvailable\",\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "86411712-6a72-4c7f-b055-829c98bc4895", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "   type: anchor_tabular\n    modelRef: income\n\n\nkubectl create -f ./models/income-explainer.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income-explainer created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income condition met\nmodel.mlops.seldon.io/income-explainer condition met\n\n\n\nkubectl get model income-explainer -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:03:07Z\",\n      \"message\": \"ModelAvailable\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:03:07Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\nseldon model infer income-explainer --inference-host ${MESH_IP}:80 \\\n     '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 12], \"datatype\": \"FP32\", \"data\": [[47,4,1,1,1,3,4,1,0,0,40,9]]}]}'\n\n\n{\n\t\"model_name\": \"income-explainer_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"3028a904-9bb3-42d7-bdb7-6e6993323ed7\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"explanation\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"str\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"meta\\\": {\\\"name\\\": \\\"AnchorTabular\\\", \\\"type\\\": [\\\"blackbox\\\"], \\\"explanations\\\": [\\\"local\\\"], \\\"params\\\": {\\\"seed\\\": 1, \\\"disc_perc\\\": [25, 50, 75], \\\"threshold\\\": 0.95, \\\"delta\\\": 0.1, \\\"tau\\\": 0.15, \\\"batch_size\\\": 100, \\\"coverage_samples\\\": 10000, \\\"beam_size\\\": 1, \\\"stop_on_first\\\": false, \\\"max_anchor_size\\\": null, \\\"min_samples_start\\\": 100, \\\"n_covered_ex\\\": 10, \\\"binary_cache_size\\\": 10000, \\\"cache_margin\\\": 1000, \\\"verbose\\\": false, \\\"verbose_every\\\": 1, \\\"kwargs\\\": {}}, \\\"version\\\": \\\"0.9.1\\\"}, \\\"data\\\": {\\\"anchor\\\": [\\\"Marital Status = Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"precision\\\": 0.9705882352941176, \\\"coverage\\\": 0.0699, \\\"raw\\\": {\\\"feature\\\": [3, 5], \\\"mean\\\": [0.8094218415417559, 0.9705882352941176], \\\"precision\\\": [0.8094218415417559, 0.9705882352941176], \\\"coverage\\\": [0.3036, 0.0699], \\\"examples\\\": [{\\\"covered_true\\\": [[23, 4, 1, 1, 5, 1, 4, 0, 0, 0, 40, 9], [44, 4, 1, 1, 8, 0, 4, 1, 0, 0, 40, 9], [60, 2, 5, 1, 5, 1, 4, 0, 0, 0, 25, 9], [52, 4, 1, 1,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "b59bcf08-1b31-46f8-bd9f-3aebf1852622", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "= Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"precision\\\": 0.9705882352941176, \\\"coverage\\\": 0.0699, \\\"raw\\\": {\\\"feature\\\": [3, 5], \\\"mean\\\": [0.8094218415417559, 0.9705882352941176], \\\"precision\\\": [0.8094218415417559, 0.9705882352941176], \\\"coverage\\\": [0.3036, 0.0699], \\\"examples\\\": [{\\\"covered_true\\\": [[23, 4, 1, 1, 5, 1, 4, 0, 0, 0, 40, 9], [44, 4, 1, 1, 8, 0, 4, 1, 0, 0, 40, 9], [60, 2, 5, 1, 5, 1, 4, 0, 0, 0, 25, 9], [52, 4, 1, 1, 2, 0, 4, 1, 0, 0, 50, 9], [66, 6, 1, 1, 8, 0, 4, 1, 0, 0, 8, 9], [52, 4, 1, 1, 8, 0, 4, 1, 0, 0, 40, 9], [27, 4, 1, 1, 1, 1, 4, 1, 0, 0, 35, 9], [48, 4, 1, 1, 6, 0, 4, 1, 0, 0, 45, 9], [45, 6, 1, 1, 5, 0, 4, 1, 0, 0, 40, 9], [40, 2, 1, 1, 5, 4, 4, 0, 0, 0, 45, 9]], \\\"covered_false\\\": [[42, 6, 5, 1, 6, 0, 4, 1, 99999, 0, 80, 9], [29, 4, 1, 1, 8, 1, 4, 1, 0, 0, 50, 9], [49, 4, 1, 1, 8, 0, 4, 1, 0, 0, 50, 9], [34, 4, 5, 1, 8, 0, 4, 1, 0, 0, 40, 9], [38, 2, 1, 1, 5, 5, 4, 0, 7688, 0, 40, 9], [45, 7, 5, 1, 5, 0, 4, 1, 0, 0, 45, 9], [43, 4, 2, 1, 5, 0, 4, 1, 99999, 0, 55, 9], [47, 4, 5, 1, 6, 1, 4, 1, 27828, 0, 60, 9], [42, 6, 1, 1, 2, 0, 4, 1, 15024, 0, 60, 9], [56, 4, 1,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "d3c89d5f-3a85-43cf-9329-ff37bf23fe2b", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "9], [38, 2, 1, 1, 5, 5, 4, 0, 7688, 0, 40, 9], [45, 7, 5, 1, 5, 0, 4, 1, 0, 0, 45, 9], [43, 4, 2, 1, 5, 0, 4, 1, 99999, 0, 55, 9], [47, 4, 5, 1, 6, 1, 4, 1, 27828, 0, 60, 9], [42, 6, 1, 1, 2, 0, 4, 1, 15024, 0, 60, 9], [56, 4, 1, 1, 6, 0, 2, 1, 7688, 0, 45, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}, {\\\"covered_true\\\": [[23, 4, 1, 1, 4, 3, 4, 1, 0, 0, 40, 9], [50, 2, 5, 1, 8, 3, 2, 1, 0, 0, 45, 9], [24, 4, 1, 1, 7, 3, 4, 0, 0, 0, 40, 3], [62, 4, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [22, 4, 1, 1, 5, 3, 4, 1, 0, 0, 40, 9], [44, 4, 1, 1, 1, 3, 4, 0, 0, 0, 40, 9], [46, 4, 1, 1, 4, 3, 4, 1, 0, 0, 40, 9], [44, 4, 1, 1, 2, 3, 4, 1, 0, 0, 40, 9], [25, 4, 5, 1, 5, 3, 4, 1, 0, 0, 35, 9], [32, 2, 5, 1, 5, 3, 4, 1, 0, 0, 50, 9]], \\\"covered_false\\\": [[57, 5, 5, 1, 6, 3, 4, 1, 99999, 0, 40, 9], [44, 4, 1, 1, 8, 3, 4, 1, 7688, 0, 60, 9], [43, 2, 5, 1, 4, 3, 2, 0, 8614, 0, 47, 9], [56, 5, 2, 1, 5, 3, 4, 1, 99999, 0, 70, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}], \\\"all_precision\\\": 0, \\\"num_preds\\\": 1000000, \\\"success\\\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "e2f072e5-c8c9-46aa-8efd-fa9b2a5e86e4", "page": "examples/k8s-examples", "section": "kubernetes-examples", "text": "4, 1, 0, 0, 50, 9]], \\\"covered_false\\\": [[57, 5, 5, 1, 6, 3, 4, 1, 99999, 0, 40, 9], [44, 4, 1, 1, 8, 3, 4, 1, 7688, 0, 60, 9], [43, 2, 5, 1, 4, 3, 2, 0, 8614, 0, 47, 9], [56, 5, 2, 1, 5, 3, 4, 1, 99999, 0, 70, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}], \\\"all_precision\\\": 0, \\\"num_preds\\\": 1000000, \\\"success\\\": true, \\\"names\\\": [\\\"Marital Status = Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"prediction\\\": [0], \\\"instance\\\": [47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0], \\\"instances\\\": [[47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0]]}}}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nkubectl delete -f ./models/income.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/income-explainer.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"income\" deleted\nmodel.mlops.seldon.io \"income-explainer\" deleted\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "033bb400-93bc-4913-b13d-d2d970d78f20", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": "\nSeldon V2 Kubernetes Examples\u00b6\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.18.255.2'\n\n\n\n\nModel\u00b6\ncat ./models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nkubectl create -f ./models/sklearn-iris-gs.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n\nkubectl get model iris -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:01:52Z\",\n      \"message\": \"ModelAvailable\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:01:52Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\nseldon model infer iris --inference-host ${MESH_IP}:80 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"7fd401e1-3dce-46f5-9668-902aea652b89\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model infer iris --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"parameters\": {\n        \"content_type\": {\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "00fe5f0c-8c76-4555-a603-cd60cb638de6", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": "{\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"parameters\": {\n        \"content_type\": {\n          \"stringParam\": \"np\"\n        }\n      },\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl get server mlserver -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T09:59:12Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T09:59:12Z\",\n      \"reason\": \"StatefulSet replicas matches desired replicas\",\n      \"status\": \"True\",\n      \"type\": \"StatefulSetReady\"\n    }\n  ],\n  \"loadedModels\": 1,\n  \"replicas\": 1,\n  \"selector\": \"seldon-server-name=mlserver\"\n}\n\n\nkubectl delete -f ./models/sklearn-iris-gs.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\n\nExperiment\u00b6\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "7fbf8033-b8e5-4e5c-b5d9-c3c8298a2278", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": "replicas matches desired replicas\",\n      \"status\": \"True\",\n      \"type\": \"StatefulSetReady\"\n    }\n  ],\n  \"loadedModels\": 1,\n  \"replicas\": 1,\n  \"selector\": \"seldon-server-name=mlserver\"\n}\n\n\nkubectl delete -f ./models/sklearn-iris-gs.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\n\nExperiment\u00b6\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nkubectl create -f ./models/sklearn1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/sklearn2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\nmodel.mlops.seldon.io/iris2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nkubectl create -f ./experiments/ab-default-model.yaml -n ${NAMESPACE}\n\n\nexperiment.mlops.seldon.io/experiment-sample created\n\n\n\nkubectl wait --for condition=ready --timeout=300s experiment --all -n ${NAMESPACE}\n\n\nexperiment.mlops.seldon.io/experiment-sample condition met\n\n\n\nseldon model infer --inference-host ${MESH_IP}:80 -i 50 iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::29 :iris_1::21]\n\n\n\nkubectl delete -f ./experiments/ab-default-model.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/sklearn1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/sklearn2.yaml -n ${NAMESPACE}\n\n\nexperiment.mlops.seldon.io \"experiment-sample\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\n\n\n\n\n\nPipeline - model chain\u00b6\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\nmodel.mlops.seldon.io/tfsimple2 condition met\n\n\n\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "7de0d087-2e92-4e8e-b926-42c7bcf3386b", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": " storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\nmodel.mlops.seldon.io/tfsimple2 condition met\n\n\n\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nkubectl create -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples created\n\n\n\nkubectl wait --for condition=ready --timeout=300s pipeline --all -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples condition met\n\n\n\nseldon pipeline infer tfsimples --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n         ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "86bb0db9-c902-4c10-a015-52cdaeecd7a3", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": "  \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "a4c379e2-d6ac-4ca5-8412-ef112ea3976e", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": "]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "8dc028a6-a2b9-4eee-9c07-7f9acc682eb2", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": " 24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io \"tfsimples\" deleted\n\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\n\n\n\n\n\nPipeline - model join\u00b6\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\ncat ./models/tfsimple3.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple3\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple3.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\nmodel.mlops.seldon.io/tfsimple3 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\nmodel.mlops.seldon.io/tfsimple2 condition met\nmodel.mlops.seldon.io/tfsimple3 condition met\n\n\n\ncat ./pipelines/tfsimples-join.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: join\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: tfsimple3\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\nkubectl create -f ./pipelines/tfsimples-join.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/join created\n\n\n\nkubectl", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "61442874-38ed-4141-acdc-6c473fab8136", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": "- name: tfsimple3\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\nkubectl create -f ./pipelines/tfsimples-join.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/join created\n\n\n\nkubectl wait --for condition=ready --timeout=300s pipeline --all -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/join condition met\n\n\n\nseldon pipeline infer join --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "7f8a56fd-8489-4a57-82c3-a964b2203d13", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": "   8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "9f73f2c5-d35b-4d01-abcf-d87e271afae5", "page": "examples/k8s-examples", "section": "seldon-v2-kubernetes-examples", "text": "  \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f ./pipelines/tfsimples-join.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io \"join\" deleted\n\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple3.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\nmodel.mlops.seldon.io \"tfsimple3\" deleted\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "3b930ffc-4d04-424b-9a2d-1502ee23f591", "page": "examples/k8s-examples", "section": "model", "text": "\nModel\u00b6\ncat ./models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nkubectl create -f ./models/sklearn-iris-gs.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n\nkubectl get model iris -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:01:52Z\",\n      \"message\": \"ModelAvailable\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:01:52Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\nseldon model infer iris --inference-host ${MESH_IP}:80 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"7fd401e1-3dce-46f5-9668-902aea652b89\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model infer iris --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"parameters\": {\n        \"content_type\": {\n          \"stringParam\": \"np\"\n        }\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "6491f9a5-c2bc-41bd-bd16-de7750a5912b", "page": "examples/k8s-examples", "section": "model", "text": "    \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"parameters\": {\n        \"content_type\": {\n          \"stringParam\": \"np\"\n        }\n      },\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl get server mlserver -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T09:59:12Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T09:59:12Z\",\n      \"reason\": \"StatefulSet replicas matches desired replicas\",\n      \"status\": \"True\",\n      \"type\": \"StatefulSetReady\"\n    }\n  ],\n  \"loadedModels\": 1,\n  \"replicas\": 1,\n  \"selector\": \"seldon-server-name=mlserver\"\n}\n\n\nkubectl delete -f ./models/sklearn-iris-gs.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "cde68b84-953b-46e0-b37f-dd44c762c320", "page": "examples/k8s-examples", "section": "experiment", "text": "\nExperiment\u00b6\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nkubectl create -f ./models/sklearn1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/sklearn2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\nmodel.mlops.seldon.io/iris2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nkubectl create -f ./experiments/ab-default-model.yaml -n ${NAMESPACE}\n\n\nexperiment.mlops.seldon.io/experiment-sample created\n\n\n\nkubectl wait --for condition=ready --timeout=300s experiment --all -n ${NAMESPACE}\n\n\nexperiment.mlops.seldon.io/experiment-sample condition met\n\n\n\nseldon model infer --inference-host ${MESH_IP}:80 -i 50 iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::29 :iris_1::21]\n\n\n\nkubectl delete -f ./experiments/ab-default-model.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/sklearn1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/sklearn2.yaml -n ${NAMESPACE}\n\n\nexperiment.mlops.seldon.io \"experiment-sample\" deleted\nmodel.mlops.seldon.io \"iris\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "1a2512b1-5f10-4b56-b74b-79ecb9902011", "page": "examples/k8s-examples", "section": "pipeline-model-chain", "text": "\nPipeline - model chain\u00b6\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\nmodel.mlops.seldon.io/tfsimple2 condition met\n\n\n\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\nkubectl create -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples created\n\n\n\nkubectl wait --for condition=ready --timeout=300s pipeline --all -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples condition met\n\n\n\nseldon pipeline infer tfsimples --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "ef210e2f-2daf-4de0-984f-066ffdbc3e37", "page": "examples/k8s-examples", "section": "pipeline-model-chain", "text": "     \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "c7080630-edab-4c00-aade-aadef0236472", "page": "examples/k8s-examples", "section": "pipeline-model-chain", "text": "   32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "90ebcae0-4745-4c3f-8e94-d8d1ae0fd1e2", "page": "examples/k8s-examples", "section": "pipeline-model-chain", "text": "  22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io \"tfsimples\" deleted\n\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "01c736ee-8f50-49a6-9624-5d75239fed63", "page": "examples/k8s-examples", "section": "pipeline-model-join", "text": "\nPipeline - model join\u00b6\ncat ./models/tfsimple1.yaml\ncat ./models/tfsimple2.yaml\ncat ./models/tfsimple3.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple1\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple2\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple3\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple3.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\nmodel.mlops.seldon.io/tfsimple3 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 condition met\nmodel.mlops.seldon.io/tfsimple2 condition met\nmodel.mlops.seldon.io/tfsimple3 condition met\n\n\n\ncat ./pipelines/tfsimples-join.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: join\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: tfsimple3\n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\nkubectl create -f ./pipelines/tfsimples-join.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/join created\n\n\n\nkubectl wait --for condition=ready --timeout=300s pipeline --all -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/join condition met\n\n\n\nseldon pipeline infer join --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n    '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "3e7f8e4b-837d-466f-8af7-ca10f487f12f", "page": "examples/k8s-examples", "section": "pipeline-model-join", "text": "   '{\"model_name\":\"simple\",\"inputs\":[{\"name\":\"INPUT0\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"contents\":{\"int_contents\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]},\"datatype\":\"INT32\",\"shape\":[1,16]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT0\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "3decb8a9-ae76-4b0d-b8ef-7f851c12ea95", "page": "examples/k8s-examples", "section": "pipeline-model-join", "text": " 24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    },\n    {\n      \"name\": \"OUTPUT1\",\n      \"datatype\": \"INT32\",\n      \"shape\": [\n        \"1\",\n        \"16\"\n      ],\n      \"contents\": {\n        \"intContents\": [\n          2,\n          4,\n          6,\n          8,\n          10,\n          12,\n          14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "cca61224-ee64-4f93-a146-e4a86e4b5b48", "page": "examples/k8s-examples", "section": "pipeline-model-join", "text": "14,\n          16,\n          18,\n          20,\n          22,\n          24,\n          26,\n          28,\n          30,\n          32\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f ./pipelines/tfsimples-join.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io \"join\" deleted\n\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple3.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\nmodel.mlops.seldon.io \"tfsimple3\" deleted\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "06d71734-7d64-492d-9c50-46caabfc8e85", "page": "examples/k8s-examples", "section": "explainer", "text": "\nExplainer\u00b6\ncat ./models/income.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/classifier\"\n  requirements:\n  - sklearn\n\n\nkubectl create -f ./models/income.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income condition met\n\n\n\nkubectl get model income -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:02:53Z\",\n      \"message\": \"ModelAvailable\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:02:53Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\nseldon model infer income --inference-host ${MESH_IP}:80 \\\n     '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 12], \"datatype\": \"FP32\", \"data\": [[47,4,1,1,1,3,4,1,0,0,40,9]]}]}'\n\n\n{\n\t\"model_name\": \"income_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"f52acfeb-0f22-429f-8c7a-785ef17cd470\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t0\n\t\t\t]\n\t\t}\n\t]\n}\n\n\ncat ./models/income-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/explainer\"\n  explainer:\n    type: anchor_tabular\n    modelRef: income\n\n\nkubectl create -f ./models/income-explainer.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income-explainer created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/income condition met\nmodel.mlops.seldon.io/income-explainer condition met\n\n\n\nkubectl get model income-explainer -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:03:07Z\",\n      \"message\": \"ModelAvailable\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:03:07Z\",\n      \"status\": \"True\",\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "270ae66f-4ce1-43b1-9aee-65c37e38d197", "page": "examples/k8s-examples", "section": "explainer", "text": "| jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:03:07Z\",\n      \"message\": \"ModelAvailable\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2023-06-30T10:03:07Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\nseldon model infer income-explainer --inference-host ${MESH_IP}:80 \\\n     '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 12], \"datatype\": \"FP32\", \"data\": [[47,4,1,1,1,3,4,1,0,0,40,9]]}]}'\n\n\n{\n\t\"model_name\": \"income-explainer_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"3028a904-9bb3-42d7-bdb7-6e6993323ed7\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"explanation\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"str\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"meta\\\": {\\\"name\\\": \\\"AnchorTabular\\\", \\\"type\\\": [\\\"blackbox\\\"], \\\"explanations\\\": [\\\"local\\\"], \\\"params\\\": {\\\"seed\\\": 1, \\\"disc_perc\\\": [25, 50, 75], \\\"threshold\\\": 0.95, \\\"delta\\\": 0.1, \\\"tau\\\": 0.15, \\\"batch_size\\\": 100, \\\"coverage_samples\\\": 10000, \\\"beam_size\\\": 1, \\\"stop_on_first\\\": false, \\\"max_anchor_size\\\": null, \\\"min_samples_start\\\": 100, \\\"n_covered_ex\\\": 10, \\\"binary_cache_size\\\": 10000, \\\"cache_margin\\\": 1000, \\\"verbose\\\": false, \\\"verbose_every\\\": 1, \\\"kwargs\\\": {}}, \\\"version\\\": \\\"0.9.1\\\"}, \\\"data\\\": {\\\"anchor\\\": [\\\"Marital Status = Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"precision\\\": 0.9705882352941176, \\\"coverage\\\": 0.0699, \\\"raw\\\": {\\\"feature\\\": [3, 5], \\\"mean\\\": [0.8094218415417559, 0.9705882352941176], \\\"precision\\\": [0.8094218415417559, 0.9705882352941176], \\\"coverage\\\": [0.3036, 0.0699], \\\"examples\\\": [{\\\"covered_true\\\": [[23, 4, 1, 1, 5, 1, 4, 0, 0, 0, 40, 9], [44, 4, 1, 1, 8, 0, 4, 1, 0, 0, 40, 9], [60, 2, 5, 1, 5, 1, 4, 0, 0, 0, 25, 9], [52, 4, 1, 1, 2, 0, 4, 1, 0, 0, 50, 9], [66, 6, 1, 1, 8, 0, 4, 1, 0, 0, 8, 9], [52, 4, 1, 1, 8, 0, 4, 1, 0, 0, 40, 9], [27, 4, 1,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "d4311183-e0c2-4bc7-b2f9-e573175d15df", "page": "examples/k8s-examples", "section": "explainer", "text": "9], [44, 4, 1, 1, 8, 0, 4, 1, 0, 0, 40, 9], [60, 2, 5, 1, 5, 1, 4, 0, 0, 0, 25, 9], [52, 4, 1, 1, 2, 0, 4, 1, 0, 0, 50, 9], [66, 6, 1, 1, 8, 0, 4, 1, 0, 0, 8, 9], [52, 4, 1, 1, 8, 0, 4, 1, 0, 0, 40, 9], [27, 4, 1, 1, 1, 1, 4, 1, 0, 0, 35, 9], [48, 4, 1, 1, 6, 0, 4, 1, 0, 0, 45, 9], [45, 6, 1, 1, 5, 0, 4, 1, 0, 0, 40, 9], [40, 2, 1, 1, 5, 4, 4, 0, 0, 0, 45, 9]], \\\"covered_false\\\": [[42, 6, 5, 1, 6, 0, 4, 1, 99999, 0, 80, 9], [29, 4, 1, 1, 8, 1, 4, 1, 0, 0, 50, 9], [49, 4, 1, 1, 8, 0, 4, 1, 0, 0, 50, 9], [34, 4, 5, 1, 8, 0, 4, 1, 0, 0, 40, 9], [38, 2, 1, 1, 5, 5, 4, 0, 7688, 0, 40, 9], [45, 7, 5, 1, 5, 0, 4, 1, 0, 0, 45, 9], [43, 4, 2, 1, 5, 0, 4, 1, 99999, 0, 55, 9], [47, 4, 5, 1, 6, 1, 4, 1, 27828, 0, 60, 9], [42, 6, 1, 1, 2, 0, 4, 1, 15024, 0, 60, 9], [56, 4, 1, 1, 6, 0, 2, 1, 7688, 0, 45, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}, {\\\"covered_true\\\": [[23, 4, 1, 1, 4, 3, 4, 1, 0, 0, 40, 9], [50, 2, 5, 1, 8, 3, 2, 1, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "20823a6c-31df-48ed-8cc3-5f7f4c1f3816", "page": "examples/k8s-examples", "section": "explainer", "text": "55, 9], [47, 4, 5, 1, 6, 1, 4, 1, 27828, 0, 60, 9], [42, 6, 1, 1, 2, 0, 4, 1, 15024, 0, 60, 9], [56, 4, 1, 1, 6, 0, 2, 1, 7688, 0, 45, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}, {\\\"covered_true\\\": [[23, 4, 1, 1, 4, 3, 4, 1, 0, 0, 40, 9], [50, 2, 5, 1, 8, 3, 2, 1, 0, 0, 45, 9], [24, 4, 1, 1, 7, 3, 4, 0, 0, 0, 40, 3], [62, 4, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [22, 4, 1, 1, 5, 3, 4, 1, 0, 0, 40, 9], [44, 4, 1, 1, 1, 3, 4, 0, 0, 0, 40, 9], [46, 4, 1, 1, 4, 3, 4, 1, 0, 0, 40, 9], [44, 4, 1, 1, 2, 3, 4, 1, 0, 0, 40, 9], [25, 4, 5, 1, 5, 3, 4, 1, 0, 0, 35, 9], [32, 2, 5, 1, 5, 3, 4, 1, 0, 0, 50, 9]], \\\"covered_false\\\": [[57, 5, 5, 1, 6, 3, 4, 1, 99999, 0, 40, 9], [44, 4, 1, 1, 8, 3, 4, 1, 7688, 0, 60, 9], [43, 2, 5, 1, 4, 3, 2, 0, 8614, 0, 47, 9], [56, 5, 2, 1, 5, 3, 4, 1, 99999, 0, 70, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}], \\\"all_precision\\\": 0, \\\"num_preds\\\": 1000000, \\\"success\\\": true, \\\"names\\\": [\\\"Marital Status = Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"prediction\\\": [0], \\\"instance\\\": [47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0], \\\"instances\\\": [[47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "bf93f654-59b9-4541-9f17-473af233dbc0", "page": "examples/k8s-examples", "section": "explainer", "text": "4, 3, 2, 0, 8614, 0, 47, 9], [56, 5, 2, 1, 5, 3, 4, 1, 99999, 0, 70, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}], \\\"all_precision\\\": 0, \\\"num_preds\\\": 1000000, \\\"success\\\": true, \\\"names\\\": [\\\"Marital Status = Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"prediction\\\": [0], \\\"instance\\\": [47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0], \\\"instances\\\": [[47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0]]}}}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nkubectl delete -f ./models/income.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/income-explainer.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"income\" deleted\nmodel.mlops.seldon.io \"income-explainer\" deleted\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-examples.html", "key": "examples/k8s-examples"}}, {"key": "c518a94d-f438-4072-b495-5d42527c2ba0", "page": "cli/docs/seldon_experiment_start", "section": "seldon-experiment-start", "text": "\nseldon experiment start\u00b6\nstart an experiment\n\nSynopsis\u00b6\nstart an experiment\nseldon experiment start [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        experiment manifest file (YAML)\n  -h, --help                    help for start\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n\n\nSEE ALSO\u00b6\n\nseldon experiment\t - manage experiments\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_experiment_start.html", "key": "cli/docs/seldon_experiment_start"}}, {"key": "76af49dd-e6e2-4525-81bb-04a52a1eb0ef", "page": "cli/docs/seldon_experiment_start", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        experiment manifest file (YAML)\n  -h, --help                    help for start\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_experiment_start.html", "key": "cli/docs/seldon_experiment_start"}}, {"key": "f4ceee41-0e72-4580-b0f7-43bc4a4533cd", "page": "examples/huggingface", "section": "huggingface-models", "text": "\nHuggingface Models\u00b6\nRun these examples from the samples folder.\n\nHuggingface Examples\u00b6\n\nText Generation Model\u00b6\ncat ./models/hf-text-gen.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: text-gen\nspec:\n  storageUri: \"gs://seldon-models/mlserver/huggingface/text-generation\"\n  requirements:\n  - huggingface\n\n\nLoad the model\nseldon model load -f ./models/hf-text-gen.yaml\n\n\n{}\n\n\nseldon model status text-gen -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer text-gen \\\n  '{\"inputs\": [{\"name\": \"args\",\"shape\": [1],\"datatype\": \"BYTES\",\"data\": [\"Once upon a time in a galaxy far away\"]}]}'\n\n\n{\n\t\"model_name\": \"text-gen_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"121ff5f4-1d4a-46d0-9a5e-4cd3b11040df\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"output\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"hg_jsonlist\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"generated_text\\\": \\\"Once upon a time in a galaxy far away, the planet is full of strange little creatures. A very strange combination of creatures in that universe, that is. A strange combination of creatures in that universe, that is. A kind of creature that is\\\"}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nres = !seldon model infer text-gen --inference-mode grpc \\\n   '{\"inputs\":[{\"name\":\"args\",\"contents\":{\"bytes_contents\":[\"T25jZSB1cG9uIGEgdGltZSBpbiBhIGdhbGF4eSBmYXIgYXdheQo=\"]},\"datatype\":\"BYTES\",\"shape\":[1]}]}'\n\n\nimport json\nimport base64\nr = json.loads(res[0])\nbase64.b64decode(r[\"outputs\"][0][\"contents\"][\"bytesContents\"][0])\n\n\nb'{\"generated_text\": \"Once upon a time in a galaxy far away\\\\n\\\\nThe Universe is a big and massive place. How can you feel any of this? Your body doesn\\'t make sense if the Universe is in full swing \\\\u2014 you don\\'t have to remember whether the\"}'\n\n\n\nUnload the model\nseldon model unload text-gen\n\n\n\n\nCustom Text Generation Model\u00b6\ncat ./models/hf-text-gen-custom-tiny-stories.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: custom-tiny-stories-text-gen\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/huggingface-text-gen-custom-tiny-stories\"\n  requirements:\n    - huggingface\n\n\nLoad the model\nseldon model load -f ./models/hf-text-gen-custom-tiny-stories.yaml\n\n\n{}\n\n\nseldon model status custom-tiny-stories-text-gen -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer custom-tiny-stories-text-gen \\\n  '{\"inputs\": [{\"name\": \"args\",\"shape\": [1],\"datatype\": \"BYTES\",\"data\": [\"Once upon a time in a galaxy far away\"]}]}'\n\n\n{\n\t\"model_name\": \"custom-tiny-stories-text-gen_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"d0fce59c-76e2-4f81-9711-1c93d08bcbf9\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"output\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"hg_jsonlist\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"generated_text\\\": \\\"Once upon a time in a galaxy far away. It was a very special place", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/huggingface.html", "key": "examples/huggingface"}}, {"key": "c62dbdf5-06e8-4993-87e3-ef4c1238547d", "page": "examples/huggingface", "section": "huggingface-models", "text": "  - huggingface\n\n\nLoad the model\nseldon model load -f ./models/hf-text-gen-custom-tiny-stories.yaml\n\n\n{}\n\n\nseldon model status custom-tiny-stories-text-gen -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer custom-tiny-stories-text-gen \\\n  '{\"inputs\": [{\"name\": \"args\",\"shape\": [1],\"datatype\": \"BYTES\",\"data\": [\"Once upon a time in a galaxy far away\"]}]}'\n\n\n{\n\t\"model_name\": \"custom-tiny-stories-text-gen_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"d0fce59c-76e2-4f81-9711-1c93d08bcbf9\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"output\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"hg_jsonlist\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"generated_text\\\": \\\"Once upon a time in a galaxy far away. It was a very special place to live.\\\\n\\\"}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nres = !seldon model infer custom-tiny-stories-text-gen --inference-mode grpc \\\n   '{\"inputs\":[{\"name\":\"args\",\"contents\":{\"bytes_contents\":[\"T25jZSB1cG9uIGEgdGltZSBpbiBhIGdhbGF4eSBmYXIgYXdheQo=\"]},\"datatype\":\"BYTES\",\"shape\":[1]}]}'\n\n\nimport json\nimport base64\nr = json.loads(res[0])\nbase64.b64decode(r[\"outputs\"][0][\"contents\"][\"bytesContents\"][0])\n\n\nb'{\"generated_text\": \"Once upon a time in a galaxy far away\\\\nOne night, a little girl named Lily went to\"}'\n\n\n\nUnload the model\nseldon model unload custom-tiny-stories-text-gen\n\n\nAs a next step, why not try running a larger-scale model? You can find a definition for one in ./models/hf-text-gen-custom-gpt2.yaml. However, you may need to request and allocate more memory!\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/huggingface.html", "key": "examples/huggingface"}}, {"key": "47970e9b-f04b-4e4b-bc28-b92126afdc66", "page": "examples/huggingface", "section": "huggingface-examples", "text": "\nHuggingface Examples\u00b6\n\nText Generation Model\u00b6\ncat ./models/hf-text-gen.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: text-gen\nspec:\n  storageUri: \"gs://seldon-models/mlserver/huggingface/text-generation\"\n  requirements:\n  - huggingface\n\n\nLoad the model\nseldon model load -f ./models/hf-text-gen.yaml\n\n\n{}\n\n\nseldon model status text-gen -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer text-gen \\\n  '{\"inputs\": [{\"name\": \"args\",\"shape\": [1],\"datatype\": \"BYTES\",\"data\": [\"Once upon a time in a galaxy far away\"]}]}'\n\n\n{\n\t\"model_name\": \"text-gen_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"121ff5f4-1d4a-46d0-9a5e-4cd3b11040df\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"output\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"hg_jsonlist\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"generated_text\\\": \\\"Once upon a time in a galaxy far away, the planet is full of strange little creatures. A very strange combination of creatures in that universe, that is. A strange combination of creatures in that universe, that is. A kind of creature that is\\\"}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nres = !seldon model infer text-gen --inference-mode grpc \\\n   '{\"inputs\":[{\"name\":\"args\",\"contents\":{\"bytes_contents\":[\"T25jZSB1cG9uIGEgdGltZSBpbiBhIGdhbGF4eSBmYXIgYXdheQo=\"]},\"datatype\":\"BYTES\",\"shape\":[1]}]}'\n\n\nimport json\nimport base64\nr = json.loads(res[0])\nbase64.b64decode(r[\"outputs\"][0][\"contents\"][\"bytesContents\"][0])\n\n\nb'{\"generated_text\": \"Once upon a time in a galaxy far away\\\\n\\\\nThe Universe is a big and massive place. How can you feel any of this? Your body doesn\\'t make sense if the Universe is in full swing \\\\u2014 you don\\'t have to remember whether the\"}'\n\n\n\nUnload the model\nseldon model unload text-gen\n\n\n\n\nCustom Text Generation Model\u00b6\ncat ./models/hf-text-gen-custom-tiny-stories.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: custom-tiny-stories-text-gen\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/huggingface-text-gen-custom-tiny-stories\"\n  requirements:\n    - huggingface\n\n\nLoad the model\nseldon model load -f ./models/hf-text-gen-custom-tiny-stories.yaml\n\n\n{}\n\n\nseldon model status custom-tiny-stories-text-gen -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer custom-tiny-stories-text-gen \\\n  '{\"inputs\": [{\"name\": \"args\",\"shape\": [1],\"datatype\": \"BYTES\",\"data\": [\"Once upon a time in a galaxy far away\"]}]}'\n\n\n{\n\t\"model_name\": \"custom-tiny-stories-text-gen_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"d0fce59c-76e2-4f81-9711-1c93d08bcbf9\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"output\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"hg_jsonlist\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"generated_text\\\": \\\"Once upon a time in a galaxy far away. It was a very special place to live.\\\\n\\\"}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nres = !seldon model infer custom-tiny-stories-text-gen", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/huggingface.html", "key": "examples/huggingface"}}, {"key": "dc6299e5-7298-49ab-9beb-88bd7673a957", "page": "examples/huggingface", "section": "huggingface-examples", "text": "load -f ./models/hf-text-gen-custom-tiny-stories.yaml\n\n\n{}\n\n\nseldon model status custom-tiny-stories-text-gen -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer custom-tiny-stories-text-gen \\\n  '{\"inputs\": [{\"name\": \"args\",\"shape\": [1],\"datatype\": \"BYTES\",\"data\": [\"Once upon a time in a galaxy far away\"]}]}'\n\n\n{\n\t\"model_name\": \"custom-tiny-stories-text-gen_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"d0fce59c-76e2-4f81-9711-1c93d08bcbf9\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"output\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"hg_jsonlist\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"generated_text\\\": \\\"Once upon a time in a galaxy far away. It was a very special place to live.\\\\n\\\"}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nres = !seldon model infer custom-tiny-stories-text-gen --inference-mode grpc \\\n   '{\"inputs\":[{\"name\":\"args\",\"contents\":{\"bytes_contents\":[\"T25jZSB1cG9uIGEgdGltZSBpbiBhIGdhbGF4eSBmYXIgYXdheQo=\"]},\"datatype\":\"BYTES\",\"shape\":[1]}]}'\n\n\nimport json\nimport base64\nr = json.loads(res[0])\nbase64.b64decode(r[\"outputs\"][0][\"contents\"][\"bytesContents\"][0])\n\n\nb'{\"generated_text\": \"Once upon a time in a galaxy far away\\\\nOne night, a little girl named Lily went to\"}'\n\n\n\nUnload the model\nseldon model unload custom-tiny-stories-text-gen\n\n\nAs a next step, why not try running a larger-scale model? You can find a definition for one in ./models/hf-text-gen-custom-gpt2.yaml. However, you may need to request and allocate more memory!\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/huggingface.html", "key": "examples/huggingface"}}, {"key": "f59b96b5-cd4f-4f37-a2a2-1c9f09ced18b", "page": "examples/huggingface", "section": "text-generation-model", "text": "\nText Generation Model\u00b6\ncat ./models/hf-text-gen.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: text-gen\nspec:\n  storageUri: \"gs://seldon-models/mlserver/huggingface/text-generation\"\n  requirements:\n  - huggingface\n\n\nLoad the model\nseldon model load -f ./models/hf-text-gen.yaml\n\n\n{}\n\n\nseldon model status text-gen -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer text-gen \\\n  '{\"inputs\": [{\"name\": \"args\",\"shape\": [1],\"datatype\": \"BYTES\",\"data\": [\"Once upon a time in a galaxy far away\"]}]}'\n\n\n{\n\t\"model_name\": \"text-gen_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"121ff5f4-1d4a-46d0-9a5e-4cd3b11040df\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"output\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"hg_jsonlist\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"generated_text\\\": \\\"Once upon a time in a galaxy far away, the planet is full of strange little creatures. A very strange combination of creatures in that universe, that is. A strange combination of creatures in that universe, that is. A kind of creature that is\\\"}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nres = !seldon model infer text-gen --inference-mode grpc \\\n   '{\"inputs\":[{\"name\":\"args\",\"contents\":{\"bytes_contents\":[\"T25jZSB1cG9uIGEgdGltZSBpbiBhIGdhbGF4eSBmYXIgYXdheQo=\"]},\"datatype\":\"BYTES\",\"shape\":[1]}]}'\n\n\nimport json\nimport base64\nr = json.loads(res[0])\nbase64.b64decode(r[\"outputs\"][0][\"contents\"][\"bytesContents\"][0])\n\n\nb'{\"generated_text\": \"Once upon a time in a galaxy far away\\\\n\\\\nThe Universe is a big and massive place. How can you feel any of this? Your body doesn\\'t make sense if the Universe is in full swing \\\\u2014 you don\\'t have to remember whether the\"}'\n\n\n\nUnload the model\nseldon model unload text-gen\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/huggingface.html", "key": "examples/huggingface"}}, {"key": "1f0f3ef3-c790-4918-952a-8a6931439515", "page": "examples/huggingface", "section": "custom-text-generation-model", "text": "\nCustom Text Generation Model\u00b6\ncat ./models/hf-text-gen-custom-tiny-stories.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: custom-tiny-stories-text-gen\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/huggingface-text-gen-custom-tiny-stories\"\n  requirements:\n    - huggingface\n\n\nLoad the model\nseldon model load -f ./models/hf-text-gen-custom-tiny-stories.yaml\n\n\n{}\n\n\nseldon model status custom-tiny-stories-text-gen -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer custom-tiny-stories-text-gen \\\n  '{\"inputs\": [{\"name\": \"args\",\"shape\": [1],\"datatype\": \"BYTES\",\"data\": [\"Once upon a time in a galaxy far away\"]}]}'\n\n\n{\n\t\"model_name\": \"custom-tiny-stories-text-gen_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"d0fce59c-76e2-4f81-9711-1c93d08bcbf9\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"output\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"hg_jsonlist\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"generated_text\\\": \\\"Once upon a time in a galaxy far away. It was a very special place to live.\\\\n\\\"}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nres = !seldon model infer custom-tiny-stories-text-gen --inference-mode grpc \\\n   '{\"inputs\":[{\"name\":\"args\",\"contents\":{\"bytes_contents\":[\"T25jZSB1cG9uIGEgdGltZSBpbiBhIGdhbGF4eSBmYXIgYXdheQo=\"]},\"datatype\":\"BYTES\",\"shape\":[1]}]}'\n\n\nimport json\nimport base64\nr = json.loads(res[0])\nbase64.b64decode(r[\"outputs\"][0][\"contents\"][\"bytesContents\"][0])\n\n\nb'{\"generated_text\": \"Once upon a time in a galaxy far away\\\\nOne night, a little girl named Lily went to\"}'\n\n\n\nUnload the model\nseldon model unload custom-tiny-stories-text-gen\n\n\nAs a next step, why not try running a larger-scale model? You can find a definition for one in ./models/hf-text-gen-custom-gpt2.yaml. However, you may need to request and allocate more memory!\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/huggingface.html", "key": "examples/huggingface"}}, {"key": "219f7e3e-26d0-4cc4-bb24-213914d85019", "page": "explainers", "section": "explainers", "text": "\nExplainers\u00b6\nExplainers are Model resources with some extra settings. They allow a range of explainers from the Alibi-Explain library to be run on MLServer.\nAn example Anchors explainer definitions is shown below.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.5.0/income-sklearn/anchor-explainer\"\n  explainer:\n    type: anchor_tabular\n    modelRef: income\n\n\nThe key additions are:\n\ntype : This must be one of the supported Alibi Explainer types supported by the Alibi Explain runtime in MLServer.\nmodelRef : The model name for black box explainers.\npipelineRef : The pipeline name for black box explainers.\n\nOnly one of modelRef and pipelineRef is allowed.\n\nPipeline Explanations\u00b6\nBlackbox explainers can explain a Pipeline as well as a model. An example from the Huggingface sentiment demo is show below.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/huggingface/speech-sentiment/explainer\"\n  explainer:\n    type: anchor_text\n    pipelineRef: sentiment-explain\n\n\n\n\nExamples\u00b6\n\nTabular income classification model with Anchor Tabular black box model explainer\nHuggingface Sentiment model with Anchor Text black box pipeline explainer\nAnchor Text movies sentiment explainer\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/explainers/index.html", "key": "explainers"}}, {"key": "905dc981-a667-4a04-bfda-d687f152dde7", "page": "examples/k8s-pvc", "section": "kubernetes-server-with-pvc", "text": "\nKubernetes Server with PVC\u00b6\n\nKubernetes PVC Example\u00b6\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.19.255.1'\n\n\n\nKind cluster setup\u00b6\nTo run this example in Kind we need to start Kind with access to a local folder where are models are location. In this example we will use a folder in /tmp and associate that with a path in the container.\n!cat kind-config.yaml\n\n\napiVersion: kind.x-k8s.io/v1alpha4\nkind: Cluster\nnodes:\n- role: control-plane\n  extraMounts:\n    - hostPath: /tmp/models\n      containerPath: /models\n\n\nTo start a Kind cluster with these settings using our ansible script you can run from the project root folder\nansible-playbook ansible/playbooks/kind-cluster.yaml -e kind_config_file=${PWD}/samples/examples/local-pvc/kind-config.yaml\n\n\nNow you should finish the Seldon install following the docs.\nCreate the local folder we will use for our models and copy an example iris sklearn model to it.\n!mkdir -p /tmp/models\n!gsutil cp -r gs://seldon-models/mlserver/iris /tmp/models\n\n\n\n\nCreate Server with PVC\u00b6\nHere we create a storage class and associated persistent colume referencing the /models folder where our models are stored.\n!cat pvc.yaml\n\n\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-path-immediate\nprovisioner: rancher.io/local-path\nreclaimPolicy: Delete\nmountOptions:\n  - debug\nvolumeBindingMode: Immediate\n---\nkind: PersistentVolume\napiVersion: v1\nmetadata:\n  name: ml-models-pv\n  namespace: seldon-mesh\n  labels:\n    type: local\nspec:\n  storageClassName: local-path-immediate\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/models\"\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: ml-models-pvc\n  namespace: seldon-mesh\nspec:\n  storageClassName: local-path-immediate\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  selector:\n    matchLabels:\n      type: local\n\n\nNow we create a new", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "c7213aad-258e-4998-88b3-d7018a891b28", "page": "examples/k8s-pvc", "section": "kubernetes-server-with-pvc", "text": "storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/models\"\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: ml-models-pvc\n  namespace: seldon-mesh\nspec:\n  storageClassName: local-path-immediate\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  selector:\n    matchLabels:\n      type: local\n\n\nNow we create a new Server based on the provided MLServer configuration but extend it with our PVC by adding this to the rclone container which will allow rclone to move models from this PVC onto the server.\nWe also add a new capability pvc to allow us to schedule models to this server that has the PVC.\n!cat server.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-pvc\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - \"pvc\"  \n  podSpec:\n    volumes:\n    - name: models-pvc\n      persistentVolumeClaim:\n        claimName: ml-models-pvc\n    containers:\n    - name: rclone\n      volumeMounts:\n      - name: models-pvc\n        mountPath: /var/models\n\n\n\n\nSKLearn Model\u00b6\nWe use a simple sklearn iris classification model with the added pvc requirement so our MLServer with the PVC will be targeted during scheduling.\n!cat ./iris.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\n!kubectl create -f iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!kubectl get model iris -n ${NAMESPACE} -o jsonpath='{.status}'", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "737bc230-e566-452b-9a86-52941e36930a", "page": "examples/k8s-pvc", "section": "kubernetes-server-with-pvc", "text": "Model\u00b6\nWe use a simple sklearn iris classification model with the added pvc requirement so our MLServer with the PVC will be targeted during scheduling.\n!cat ./iris.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\n!kubectl create -f iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!kubectl get model iris -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2022-12-24T11:04:37Z\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2022-12-24T11:04:37Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\n!seldon model infer iris --inference-host ${MESH_IP}:80 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}' \n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"dc032bcc-3f4e-4395-a2e4-7c1e3ef56e9e\",\n\t\"parameters\": {\n\t\t\"content_type\": null,\n\t\t\"headers\": null\n\t},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": null,\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nDo a gRPC inference call\n!seldon model infer iris --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"contents\": {\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "ede1cd7c-b432-4762-aa82-e4b62e9e5f03", "page": "examples/k8s-pvc", "section": "kubernetes-server-with-pvc", "text": " \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kubectl delete -f ./iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "2729d9c7-ca3c-4411-96be-61a2f61e28af", "page": "examples/k8s-pvc", "section": "kubernetes-pvc-example", "text": "\nKubernetes PVC Example\u00b6\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.19.255.1'\n\n\n\nKind cluster setup\u00b6\nTo run this example in Kind we need to start Kind with access to a local folder where are models are location. In this example we will use a folder in /tmp and associate that with a path in the container.\n!cat kind-config.yaml\n\n\napiVersion: kind.x-k8s.io/v1alpha4\nkind: Cluster\nnodes:\n- role: control-plane\n  extraMounts:\n    - hostPath: /tmp/models\n      containerPath: /models\n\n\nTo start a Kind cluster with these settings using our ansible script you can run from the project root folder\nansible-playbook ansible/playbooks/kind-cluster.yaml -e kind_config_file=${PWD}/samples/examples/local-pvc/kind-config.yaml\n\n\nNow you should finish the Seldon install following the docs.\nCreate the local folder we will use for our models and copy an example iris sklearn model to it.\n!mkdir -p /tmp/models\n!gsutil cp -r gs://seldon-models/mlserver/iris /tmp/models\n\n\n\n\nCreate Server with PVC\u00b6\nHere we create a storage class and associated persistent colume referencing the /models folder where our models are stored.\n!cat pvc.yaml\n\n\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-path-immediate\nprovisioner: rancher.io/local-path\nreclaimPolicy: Delete\nmountOptions:\n  - debug\nvolumeBindingMode: Immediate\n---\nkind: PersistentVolume\napiVersion: v1\nmetadata:\n  name: ml-models-pv\n  namespace: seldon-mesh\n  labels:\n    type: local\nspec:\n  storageClassName: local-path-immediate\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/models\"\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: ml-models-pvc\n  namespace: seldon-mesh\nspec:\n  storageClassName: local-path-immediate\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  selector:\n    matchLabels:\n      type: local\n\n\nNow we create a new Server based on", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "06d937a4-607d-4716-8351-0d20e772536a", "page": "examples/k8s-pvc", "section": "kubernetes-pvc-example", "text": "accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/models\"\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: ml-models-pvc\n  namespace: seldon-mesh\nspec:\n  storageClassName: local-path-immediate\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  selector:\n    matchLabels:\n      type: local\n\n\nNow we create a new Server based on the provided MLServer configuration but extend it with our PVC by adding this to the rclone container which will allow rclone to move models from this PVC onto the server.\nWe also add a new capability pvc to allow us to schedule models to this server that has the PVC.\n!cat server.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-pvc\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - \"pvc\"  \n  podSpec:\n    volumes:\n    - name: models-pvc\n      persistentVolumeClaim:\n        claimName: ml-models-pvc\n    containers:\n    - name: rclone\n      volumeMounts:\n      - name: models-pvc\n        mountPath: /var/models\n\n\n\n\nSKLearn Model\u00b6\nWe use a simple sklearn iris classification model with the added pvc requirement so our MLServer with the PVC will be targeted during scheduling.\n!cat ./iris.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\n!kubectl create -f iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!kubectl get model iris -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "ccd1c81b-9216-4ed0-a2a4-076c1c9411f2", "page": "examples/k8s-pvc", "section": "kubernetes-pvc-example", "text": "simple sklearn iris classification model with the added pvc requirement so our MLServer with the PVC will be targeted during scheduling.\n!cat ./iris.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\n!kubectl create -f iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!kubectl get model iris -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2022-12-24T11:04:37Z\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2022-12-24T11:04:37Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\n!seldon model infer iris --inference-host ${MESH_IP}:80 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}' \n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"dc032bcc-3f4e-4395-a2e4-7c1e3ef56e9e\",\n\t\"parameters\": {\n\t\t\"content_type\": null,\n\t\t\"headers\": null\n\t},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": null,\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nDo a gRPC inference call\n!seldon model infer iris --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "abe6b842-4f91-4456-8c9d-6f721e2d7bd6", "page": "examples/k8s-pvc", "section": "kubernetes-pvc-example", "text": "   {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kubectl delete -f ./iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "df5b5762-de3f-4e80-8679-f1826e5e7944", "page": "examples/k8s-pvc", "section": "kind-cluster-setup", "text": "\nKind cluster setup\u00b6\nTo run this example in Kind we need to start Kind with access to a local folder where are models are location. In this example we will use a folder in /tmp and associate that with a path in the container.\n!cat kind-config.yaml\n\n\napiVersion: kind.x-k8s.io/v1alpha4\nkind: Cluster\nnodes:\n- role: control-plane\n  extraMounts:\n    - hostPath: /tmp/models\n      containerPath: /models\n\n\nTo start a Kind cluster with these settings using our ansible script you can run from the project root folder\nansible-playbook ansible/playbooks/kind-cluster.yaml -e kind_config_file=${PWD}/samples/examples/local-pvc/kind-config.yaml\n\n\nNow you should finish the Seldon install following the docs.\nCreate the local folder we will use for our models and copy an example iris sklearn model to it.\n!mkdir -p /tmp/models\n!gsutil cp -r gs://seldon-models/mlserver/iris /tmp/models\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "e36a883f-193f-4131-97da-dc4574ed3247", "page": "examples/k8s-pvc", "section": "create-server-with-pvc", "text": "\nCreate Server with PVC\u00b6\nHere we create a storage class and associated persistent colume referencing the /models folder where our models are stored.\n!cat pvc.yaml\n\n\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-path-immediate\nprovisioner: rancher.io/local-path\nreclaimPolicy: Delete\nmountOptions:\n  - debug\nvolumeBindingMode: Immediate\n---\nkind: PersistentVolume\napiVersion: v1\nmetadata:\n  name: ml-models-pv\n  namespace: seldon-mesh\n  labels:\n    type: local\nspec:\n  storageClassName: local-path-immediate\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/models\"\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: ml-models-pvc\n  namespace: seldon-mesh\nspec:\n  storageClassName: local-path-immediate\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  selector:\n    matchLabels:\n      type: local\n\n\nNow we create a new Server based on the provided MLServer configuration but extend it with our PVC by adding this to the rclone container which will allow rclone to move models from this PVC onto the server.\nWe also add a new capability pvc to allow us to schedule models to this server that has the PVC.\n!cat server.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-pvc\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - \"pvc\"  \n  podSpec:\n    volumes:\n    - name: models-pvc\n      persistentVolumeClaim:\n        claimName: ml-models-pvc\n    containers:\n    - name: rclone\n      volumeMounts:\n      - name: models-pvc\n        mountPath: /var/models\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "aa5f1466-e864-4974-865b-57d1dd524440", "page": "examples/k8s-pvc", "section": "sklearn-model", "text": "\nSKLearn Model\u00b6\nWe use a simple sklearn iris classification model with the added pvc requirement so our MLServer with the PVC will be targeted during scheduling.\n!cat ./iris.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\n!kubectl create -f iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!kubectl get model iris -n ${NAMESPACE} -o jsonpath='{.status}' | jq -M .\n\n\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2022-12-24T11:04:37Z\",\n      \"status\": \"True\",\n      \"type\": \"ModelReady\"\n    },\n    {\n      \"lastTransitionTime\": \"2022-12-24T11:04:37Z\",\n      \"status\": \"True\",\n      \"type\": \"Ready\"\n    }\n  ],\n  \"replicas\": 1\n}\n\n\n!seldon model infer iris --inference-host ${MESH_IP}:80 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}' \n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"dc032bcc-3f4e-4395-a2e4-7c1e3ef56e9e\",\n\t\"parameters\": {\n\t\t\"content_type\": null,\n\t\t\"headers\": null\n\t},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": null,\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nDo a gRPC inference call\n!seldon model infer iris --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"contents\": {\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "1ba4c460-f61d-4f7c-ad45-f490db975582", "page": "examples/k8s-pvc", "section": "sklearn-model", "text": "\"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\",\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kubectl delete -f ./iris.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"iris\" deleted\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/k8s-pvc.html", "key": "examples/k8s-pvc"}}, {"key": "2cf2f4d9-c325-4b27-9b09-8c18746aa412", "page": "getting-started/kubernetes-installation/security/reference", "section": "security-settings-reference", "text": "\nSecurity Settings Reference\u00b6\n\nHelm Settings\u00b6\n# Security settings\nsecurity:\n  controlplane:\n    protocol: PLAINTEXT\n    ssl:\n      server:\n        secret: seldon-controlplane-server\n        clientValidationSecret: seldon-controlplane-client\n        keyPath: /tmp/certs/cps/tls.key\n        crtPath: /tmp/certs/cps/tls.crt\n        caPath: /tmp/certs/cps/ca.crt\n        clientCaPath: /tmp/certs/cpc/ca.crt\n      client:\n        secret: seldon-controlplane-client\n        serverValidationSecret: seldon-controlplane-server\n        keyPath: /tmp/certs/cpc/tls.key\n        crtPath: /tmp/certs/cpc/tls.crt\n        caPath: /tmp/certs/cpc/ca.crt\n        serverCaPath: /tmp/certs/cps/ca.crt\n  kafka:\n    protocol: PLAINTEXT\n    sasl:\n      mechanism: SCRAM-SHA-512\n      client:\n        username: seldon\n        secret:\n        passwordPath: password\n    ssl:\n      client:\n        secret:\n        brokerValidationSecret:\n        keyPath: /tmp/certs/kafka/client/tls.key\n        crtPath: /tmp/certs/kafka/client/tls.crt\n        caPath: /tmp/certs/kafka/client/ca.crt\n        brokerCaPath: /tmp/certs/kafka/broker/ca.crt\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "02a4ede9-9628-45c2-a96e-7d5134447d5b", "page": "getting-started/kubernetes-installation/security/reference", "section": "security-settings-reference", "text": "    client:\n        secret:\n        brokerValidationSecret:\n        keyPath: /tmp/certs/kafka/client/tls.key\n        crtPath: /tmp/certs/kafka/client/tls.crt\n        caPath: /tmp/certs/kafka/client/ca.crt\n        brokerCaPath: /tmp/certs/kafka/broker/ca.crt\n        endpointIdentificationAlgorithm:\n  envoy:\n    protocol: PLAINTEXT\n    ssl:\n      upstream:\n        server:\n          secret: seldon-upstream-server\n          clientValidationSecret: seldon-upstream-client\n          keyPath: /tmp/certs/dus/tls.key\n          crtPath: /tmp/certs/dus/tls.crt\n          caPath: /tmp/certs/dus/ca.crt\n          clientCaPath: /tmp/certs/duc/ca.crt\n        client:\n          secret: seldon-upstream-client\n          serverValidationSecret: seldon-upstream-server\n          keyPath: /tmp/certs/duc/tls.key\n          crtPath: /tmp/certs/duc/tls.crt\n          caPath: /tmp/certs/duc/ca.crt\n          serverCaPath: /tmp/certs/dus/ca.crt\n      downstream:\n        server:\n          secret: seldon-downstream-server\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "25cda36f-866c-43c2-901d-67203b3e12c3", "page": "getting-started/kubernetes-installation/security/reference", "section": "security-settings-reference", "text": "   keyPath: /tmp/certs/duc/tls.key\n          crtPath: /tmp/certs/duc/tls.crt\n          caPath: /tmp/certs/duc/ca.crt\n          serverCaPath: /tmp/certs/dus/ca.crt\n      downstream:\n        server:\n          secret: seldon-downstream-server\n          clientValidationSecret:\n          keyPath: /tmp/certs/dds/tls.key\n          crtPath: /tmp/certs/dds/tls.crt\n          caPath: /tmp/certs/dds/ca.crt\n          clientCaPath: /tmp/certs/ddc/ca.crt\n        client:\n          mtls: false\n          secret:\n          serverValidationSecret: seldon-downstream-server\n          keyPath: /tmp/certs/ddc/tls.key\n          crtPath: /tmp/certs/ddc/tls.crt\n          caPath: /tmp/certs/ddc/ca.crt\n          serverCaPath: /tmp/certs/dds/ca.crt\n\n# A list of image pull secrets\nimagePullSecrets:\n\n\n\n\n\nEnvironment variables\u00b6\nKubernetes secrets and mounted files can be used to provide the certificates in PEM format. These are controlled by environment variables for server or client depending on the component:\n\nControl Plane\u00b6\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_SECURITY_PROTOCOL\nSSL or PLAINTEXT\n\n\n\nFor a server (scheduler):\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nCONTROL_PLANE_CLIENT_TLS_SECRET_NAME\n(optional) the name of the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "f435d5c3-4560-42bb-a967-2a274dd962d4", "page": "getting-started/kubernetes-installation/security/reference", "section": "security-settings-reference", "text": "       serverCaPath: /tmp/certs/dds/ca.crt\n\n# A list of image pull secrets\nimagePullSecrets:\n\n\n\n\n\nEnvironment variables\u00b6\nKubernetes secrets and mounted files can be used to provide the certificates in PEM format. These are controlled by environment variables for server or client depending on the component:\n\nControl Plane\u00b6\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_SECURITY_PROTOCOL\nSSL or PLAINTEXT\n\n\n\nFor a server (scheduler):\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nCONTROL_PLANE_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nCONTROL_PLANE_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nCONTROL_PLANE_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nCONTROL_PLANE_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nCONTROL_PLANE_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nFor a client (agent, modelgateway, hodometer, CRD controller):\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nCONTROL_PLANE_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the server certificate\n\nCONTROL_PLANE_CLIENT_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nCONTROL_PLANE_CLIENT_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nCONTROL_PLANE_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client\n\nCONTROL_PLANE_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server for mTLS verification\n\n\n\n\n\nKafka\u00b6\n\n\nEnvVar\nValue\n\n\n\nKAFKA_SECURITY_PROTOCOL\nPLAINTXT, SSL, or SASL_SSL\n\n\n\n\n\nEnvVar\nValue\n\n\n\nKAFKA_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the Kafka client certificate\n\nKAFKA_CLIENT_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nKAFKA_CLIENT_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nKAFKA_CLIENT_SERVER_TLS_CA_LOCATION\nthe path to the CA chain for the client\n\nKAFKA_BROKER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots for the kafka broker\n\nKAFKA_BROKER_TLS_CA_LOCATION\nThe path to the broker validatiob CA chain\n\nKAFKA_CLIENT_SASL_USERNAME\nSASL username\n\nKAFKA_CLIENT_SASL_SECRET_NAME\nthe name of the namespaced secret which holds the SASL password\n\nKAFKA_CLIENT_SASL_PASSWORD_LOCATION\nthe path to the file containing the SASL password\n\n\n\n\n\nEnvoy\u00b6\nEnvoy xDS server will use the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "e8916043-5b86-49f2-9078-4ff9fa26f0a7", "page": "getting-started/kubernetes-installation/security/reference", "section": "security-settings-reference", "text": "the TLS private key\n\nKAFKA_CLIENT_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nKAFKA_CLIENT_SERVER_TLS_CA_LOCATION\nthe path to the CA chain for the client\n\nKAFKA_BROKER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots for the kafka broker\n\nKAFKA_BROKER_TLS_CA_LOCATION\nThe path to the broker validatiob CA chain\n\nKAFKA_CLIENT_SASL_USERNAME\nSASL username\n\nKAFKA_CLIENT_SASL_SECRET_NAME\nthe name of the namespaced secret which holds the SASL password\n\nKAFKA_CLIENT_SASL_PASSWORD_LOCATION\nthe path to the file containing the SASL password\n\n\n\n\n\nEnvoy\u00b6\nEnvoy xDS server will use the control plane server and client certificates defined above.\nDownstream server\n\n\nEnvVar\nValue\n\n\n\nENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nENVOY_DOWNSTREAM_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_DOWNSTREAM_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nDownstream client\n\n\nEnvVar\nValue\n\n\n\nENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the server certificate\n\nENVOY_DOWNSTREAM_CLIENT_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_DOWNSTREAM_CLIENT_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server for mTLS verification\n\n\n\nUpstream server\n\n\nEnvVar\nValue\n\n\n\nENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nUpstream client\n\n\nEnvVar\nValue\n\n\n\nENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "f7010855-eb13-4886-8f40-f1f0437e6121", "page": "getting-started/kubernetes-installation/security/reference", "section": "security-settings-reference", "text": "server\n\n\nEnvVar\nValue\n\n\n\nENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nUpstream client\n\n\nEnvVar\nValue\n\n\n\nENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the server certificate\n\nENVOY_UPSTREAM_CLIENT_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_UPSTREAM_CLIENT_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server for mTLS verification\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "d5a7253b-93eb-4c5c-bfd6-cfc326e56b83", "page": "getting-started/kubernetes-installation/security/reference", "section": "helm-settings", "text": "\nHelm Settings\u00b6\n# Security settings\nsecurity:\n  controlplane:\n    protocol: PLAINTEXT\n    ssl:\n      server:\n        secret: seldon-controlplane-server\n        clientValidationSecret: seldon-controlplane-client\n        keyPath: /tmp/certs/cps/tls.key\n        crtPath: /tmp/certs/cps/tls.crt\n        caPath: /tmp/certs/cps/ca.crt\n        clientCaPath: /tmp/certs/cpc/ca.crt\n      client:\n        secret: seldon-controlplane-client\n        serverValidationSecret: seldon-controlplane-server\n        keyPath: /tmp/certs/cpc/tls.key\n        crtPath: /tmp/certs/cpc/tls.crt\n        caPath: /tmp/certs/cpc/ca.crt\n        serverCaPath: /tmp/certs/cps/ca.crt\n  kafka:\n    protocol: PLAINTEXT\n    sasl:\n      mechanism: SCRAM-SHA-512\n      client:\n        username: seldon\n        secret:\n        passwordPath: password\n    ssl:\n      client:\n        secret:\n        brokerValidationSecret:\n        keyPath: /tmp/certs/kafka/client/tls.key\n        crtPath: /tmp/certs/kafka/client/tls.crt\n        caPath: /tmp/certs/kafka/client/ca.crt\n        brokerCaPath: /tmp/certs/kafka/broker/ca.crt\n        endpointIdentificationAlgorithm:\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "ac8ee28c-f5de-41fc-a443-6d5e200818db", "page": "getting-started/kubernetes-installation/security/reference", "section": "helm-settings", "text": "  client:\n        secret:\n        brokerValidationSecret:\n        keyPath: /tmp/certs/kafka/client/tls.key\n        crtPath: /tmp/certs/kafka/client/tls.crt\n        caPath: /tmp/certs/kafka/client/ca.crt\n        brokerCaPath: /tmp/certs/kafka/broker/ca.crt\n        endpointIdentificationAlgorithm:\n  envoy:\n    protocol: PLAINTEXT\n    ssl:\n      upstream:\n        server:\n          secret: seldon-upstream-server\n          clientValidationSecret: seldon-upstream-client\n          keyPath: /tmp/certs/dus/tls.key\n          crtPath: /tmp/certs/dus/tls.crt\n          caPath: /tmp/certs/dus/ca.crt\n          clientCaPath: /tmp/certs/duc/ca.crt\n        client:\n          secret: seldon-upstream-client\n          serverValidationSecret: seldon-upstream-server\n          keyPath: /tmp/certs/duc/tls.key\n          crtPath: /tmp/certs/duc/tls.crt\n          caPath: /tmp/certs/duc/ca.crt\n          serverCaPath: /tmp/certs/dus/ca.crt\n      downstream:\n        server:\n          secret: seldon-downstream-server\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "2ac296bf-a0f7-46ec-ae8d-d4ee359008f9", "page": "getting-started/kubernetes-installation/security/reference", "section": "helm-settings", "text": " keyPath: /tmp/certs/duc/tls.key\n          crtPath: /tmp/certs/duc/tls.crt\n          caPath: /tmp/certs/duc/ca.crt\n          serverCaPath: /tmp/certs/dus/ca.crt\n      downstream:\n        server:\n          secret: seldon-downstream-server\n          clientValidationSecret:\n          keyPath: /tmp/certs/dds/tls.key\n          crtPath: /tmp/certs/dds/tls.crt\n          caPath: /tmp/certs/dds/ca.crt\n          clientCaPath: /tmp/certs/ddc/ca.crt\n        client:\n          mtls: false\n          secret:\n          serverValidationSecret: seldon-downstream-server\n          keyPath: /tmp/certs/ddc/tls.key\n          crtPath: /tmp/certs/ddc/tls.crt\n          caPath: /tmp/certs/ddc/ca.crt\n          serverCaPath: /tmp/certs/dds/ca.crt\n\n# A list of image pull secrets\nimagePullSecrets:\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "f1afe280-1523-40f2-8e72-928f99d2f8e4", "page": "getting-started/kubernetes-installation/security/reference", "section": "environment-variables", "text": "\nEnvironment variables\u00b6\nKubernetes secrets and mounted files can be used to provide the certificates in PEM format. These are controlled by environment variables for server or client depending on the component:\n\nControl Plane\u00b6\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_SECURITY_PROTOCOL\nSSL or PLAINTEXT\n\n\n\nFor a server (scheduler):\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nCONTROL_PLANE_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nCONTROL_PLANE_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nCONTROL_PLANE_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nCONTROL_PLANE_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nCONTROL_PLANE_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nFor a client (agent, modelgateway, hodometer, CRD controller):\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nCONTROL_PLANE_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the server certificate\n\nCONTROL_PLANE_CLIENT_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nCONTROL_PLANE_CLIENT_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nCONTROL_PLANE_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client\n\nCONTROL_PLANE_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server for mTLS verification\n\n\n\n\n\nKafka\u00b6\n\n\nEnvVar\nValue\n\n\n\nKAFKA_SECURITY_PROTOCOL\nPLAINTXT, SSL, or SASL_SSL\n\n\n\n\n\nEnvVar\nValue\n\n\n\nKAFKA_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the Kafka client certificate\n\nKAFKA_CLIENT_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nKAFKA_CLIENT_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nKAFKA_CLIENT_SERVER_TLS_CA_LOCATION\nthe path to the CA chain for the client\n\nKAFKA_BROKER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots for the kafka broker\n\nKAFKA_BROKER_TLS_CA_LOCATION\nThe path to the broker validatiob CA chain\n\nKAFKA_CLIENT_SASL_USERNAME\nSASL username\n\nKAFKA_CLIENT_SASL_SECRET_NAME\nthe name of the namespaced secret which holds the SASL password\n\nKAFKA_CLIENT_SASL_PASSWORD_LOCATION\nthe path to the file containing the SASL password\n\n\n\n\n\nEnvoy\u00b6\nEnvoy xDS server will use the control plane server and client certificates defined above.\nDownstream server\n\n\nEnvVar\nValue\n\n\n\nENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "2793d306-1602-4bd4-a60e-52c4cd0ca8be", "page": "getting-started/kubernetes-installation/security/reference", "section": "environment-variables", "text": "for the client\n\nKAFKA_BROKER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots for the kafka broker\n\nKAFKA_BROKER_TLS_CA_LOCATION\nThe path to the broker validatiob CA chain\n\nKAFKA_CLIENT_SASL_USERNAME\nSASL username\n\nKAFKA_CLIENT_SASL_SECRET_NAME\nthe name of the namespaced secret which holds the SASL password\n\nKAFKA_CLIENT_SASL_PASSWORD_LOCATION\nthe path to the file containing the SASL password\n\n\n\n\n\nEnvoy\u00b6\nEnvoy xDS server will use the control plane server and client certificates defined above.\nDownstream server\n\n\nEnvVar\nValue\n\n\n\nENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nENVOY_DOWNSTREAM_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_DOWNSTREAM_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nDownstream client\n\n\nEnvVar\nValue\n\n\n\nENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the server certificate\n\nENVOY_DOWNSTREAM_CLIENT_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_DOWNSTREAM_CLIENT_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server for mTLS verification\n\n\n\nUpstream server\n\n\nEnvVar\nValue\n\n\n\nENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nUpstream client\n\n\nEnvVar\nValue\n\n\n\nENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "fd66f40c-5a44-44a1-ab6a-3ebd0e43a0ad", "page": "getting-started/kubernetes-installation/security/reference", "section": "environment-variables", "text": "the namespaced secret which holds the validation ca roots to verify the client certificate\n\nENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nUpstream client\n\n\nEnvVar\nValue\n\n\n\nENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the server certificate\n\nENVOY_UPSTREAM_CLIENT_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_UPSTREAM_CLIENT_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server for mTLS verification\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "1bc72825-a023-4438-b21b-6ae28363a656", "page": "getting-started/kubernetes-installation/security/reference", "section": "control-plane", "text": "\nControl Plane\u00b6\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_SECURITY_PROTOCOL\nSSL or PLAINTEXT\n\n\n\nFor a server (scheduler):\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nCONTROL_PLANE_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nCONTROL_PLANE_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nCONTROL_PLANE_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nCONTROL_PLANE_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nCONTROL_PLANE_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nFor a client (agent, modelgateway, hodometer, CRD controller):\n\n\nEnvVar\nValue\n\n\n\nCONTROL_PLANE_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nCONTROL_PLANE_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the server certificate\n\nCONTROL_PLANE_CLIENT_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nCONTROL_PLANE_CLIENT_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nCONTROL_PLANE_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client\n\nCONTROL_PLANE_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server for mTLS verification\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "d1678e66-c352-4a5e-9707-82fbc59e1a1d", "page": "getting-started/kubernetes-installation/security/reference", "section": "kafka", "text": "\nKafka\u00b6\n\n\nEnvVar\nValue\n\n\n\nKAFKA_SECURITY_PROTOCOL\nPLAINTXT, SSL, or SASL_SSL\n\n\n\n\n\nEnvVar\nValue\n\n\n\nKAFKA_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the Kafka client certificate\n\nKAFKA_CLIENT_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nKAFKA_CLIENT_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nKAFKA_CLIENT_SERVER_TLS_CA_LOCATION\nthe path to the CA chain for the client\n\nKAFKA_BROKER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots for the kafka broker\n\nKAFKA_BROKER_TLS_CA_LOCATION\nThe path to the broker validatiob CA chain\n\nKAFKA_CLIENT_SASL_USERNAME\nSASL username\n\nKAFKA_CLIENT_SASL_SECRET_NAME\nthe name of the namespaced secret which holds the SASL password\n\nKAFKA_CLIENT_SASL_PASSWORD_LOCATION\nthe path to the file containing the SASL password\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "f470b23c-1348-428f-a7d5-5e95dc76f7b3", "page": "getting-started/kubernetes-installation/security/reference", "section": "envoy", "text": "\nEnvoy\u00b6\nEnvoy xDS server will use the control plane server and client certificates defined above.\nDownstream server\n\n\nEnvVar\nValue\n\n\n\nENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nENVOY_DOWNSTREAM_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_DOWNSTREAM_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nDownstream client\n\n\nEnvVar\nValue\n\n\n\nENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the server certificate\n\nENVOY_DOWNSTREAM_CLIENT_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_DOWNSTREAM_CLIENT_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server for mTLS verification\n\n\n\nUpstream server\n\n\nEnvVar\nValue\n\n\n\nENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the client certificate\n\nENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the client for mTLS verification\n\n\n\nUpstream client\n\n\nEnvVar\nValue\n\n\n\nENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the certificates\n\nENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME\n(optional) the name of the namespaced secret which holds the validation ca roots to verify the server certificate\n\nENVOY_UPSTREAM_CLIENT_TLS_KEY_LOCATION\nthe path to the TLS private key\n\nENVOY_UPSTREAM_CLIENT_TLS_CRT_LOCATION\nthe path to the TLS certificate\n\nENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server\n\nENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION\nthe path to the TLS CA chain for the server for mTLS verification\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/reference.html", "key": "getting-started/kubernetes-installation/security/reference"}}, {"key": "bb21b10c-5c7f-4a97-aeb6-1ab0c0109444", "page": "metrics/operational", "section": "operational-metrics", "text": "\nOperational Metrics\u00b6\nWhile the system is running we collect metrics via Prometheus that allow users to observe different aspects of SCv2 with regards to throughout, latency, memory, CPU etc.\nThis is in addition to the standard Kubernetes metrics that are scraped by Prometheus.\nThere is a Grafana dashboard (referenced below) that provides an overview of the system.\n\nList of SCv2 metrics\u00b6\nThe list of SCv2 metrics that we are compiling is as follows.\nFor the agent that sits next to the inference servers:\n// Model metrics\nconst (\n\t// Histograms do no include pipeline label for efficiency\n\tmodelHistogramName = \"seldon_model_infer_api_seconds\"\n\t// We use base infer counters to store core metrics per pipeline\n\tmodelInferCounterName                 = \"seldon_model_infer_total\"\n\tmodelInferLatencyCounterName          = \"seldon_model_infer_seconds_total\"\n\tmodelAggregateInferCounterName        = \"seldon_model_aggregate_infer_total\"\n\tmodelAggregateInferLatencyCounterName = \"seldon_model_aggregate_infer_seconds_total\"\n)\n\n// Agent metrics\nconst (\n\tcacheEvictCounterName                              = \"seldon_cache_evict_count\"\n\tcacheMissCounterName                               = \"seldon_cache_miss_count\"\n\tloadModelCounterName                               = \"seldon_load_model_counter\"\n\tunloadModelCounterName                 ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/operational.html", "key": "metrics/operational"}}, {"key": "a00cee77-8753-4e2a-95a5-ef7c2f3b6f63", "page": "metrics/operational", "section": "operational-metrics", "text": "             = \"seldon_cache_miss_count\"\n\tloadModelCounterName                               = \"seldon_load_model_counter\"\n\tunloadModelCounterName                             = \"seldon_unload_model_counter\"\n\tloadedModelGaugeName                               = \"seldon_loaded_model_gauge\"\n\tloadedModelMemoryGaugeName                         = \"seldon_loaded_model_memory_bytes_gauge\"\n\tevictedModelMemoryGaugeName                        = \"seldon_evicted_model_memory_bytes_gauge\"\n\tserverReplicaMemoryCapacityGaugeName               = \"seldon_server_replica_memory_capacity_bytes_gauge\"\n\tserverReplicaMemoryCapacityWithOverCommitGaugeName = \"seldon_server_replica_memory_capacity_overcommit_bytes_gauge\"\n)\n\n\nFor the pipeline gateway that handles requests to pipelines:\n//\n// The aggregate metrics exist for efficiency, as the summation can be\n// very slow in Prometheus when many pipelines exist.\nconst (\n\t// Histograms do no include model label for efficiency\n\tpipelineHistogramName = \"seldon_pipeline_infer_api_seconds\"\n\t// We use base infer counters to store core metrics per pipeline\n\tpipelineInferCounterName                 = \"seldon_pipeline_infer_total\"\n\tpipelineInferLatencyCounterName          = \"seldon_pipeline_infer_seconds_total\"\n\tpipelineAggregateInferCounterName", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/operational.html", "key": "metrics/operational"}}, {"key": "9381c04d-3d4e-4fd3-bee9-52b2ece33faa", "page": "metrics/operational", "section": "operational-metrics", "text": "as the summation can be\n// very slow in Prometheus when many pipelines exist.\nconst (\n\t// Histograms do no include model label for efficiency\n\tpipelineHistogramName = \"seldon_pipeline_infer_api_seconds\"\n\t// We use base infer counters to store core metrics per pipeline\n\tpipelineInferCounterName                 = \"seldon_pipeline_infer_total\"\n\tpipelineInferLatencyCounterName          = \"seldon_pipeline_infer_seconds_total\"\n\tpipelineAggregateInferCounterName        = \"seldon_pipeline_aggregate_infer_total\"\n\tpipelineAggregateInferLatencyCounterName = \"seldon_pipeline_aggregate_infer_seconds_total\"\n)\n\n\nMany of these metrics are model and pipeline level counters and gauges.\nWe also aggregate some of these metrics to speed up the display of graphs. We don\u2019t presently store per-model histogram metrics for performance reasons. However, we do presently store per-pipeline histogram metrics.\nThis is experimental and these metrics are bound to change to reflect the trends we want to capture as we get more information about the usage of the system.\n\n\nGrafana dashboard\u00b6\nWe have a prebuilt Grafana dashboard that makes use of many of the metrics that we expose.\n\n\nLocal Use\u00b6\nGrafana and Prometheus are available when you run Seldon locally.\nYou will be able to connect to the Grafana dashboard at http://localhost:3000.\nPrometheus will be available at http://localhost:9090.\n\n\nKubernetes Installation\u00b6\nDownload the dashboard from SCv2 dashboard and import it in Grafana, making sure that the data source is pointing to the correct Prometheus store.\nFind more information on how to import the dashboard here.\n\n\nLocal Metrics Examples\u00b6\nAn example to show raw metrics that Prometheus will scrape.\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/operational.html", "key": "metrics/operational"}}, {"key": "790cdbb6-1778-4403-9689-7bff52bc8b28", "page": "metrics/operational", "section": "list-of-scv2-metrics", "text": "\nList of SCv2 metrics\u00b6\nThe list of SCv2 metrics that we are compiling is as follows.\nFor the agent that sits next to the inference servers:\n// Model metrics\nconst (\n\t// Histograms do no include pipeline label for efficiency\n\tmodelHistogramName = \"seldon_model_infer_api_seconds\"\n\t// We use base infer counters to store core metrics per pipeline\n\tmodelInferCounterName                 = \"seldon_model_infer_total\"\n\tmodelInferLatencyCounterName          = \"seldon_model_infer_seconds_total\"\n\tmodelAggregateInferCounterName        = \"seldon_model_aggregate_infer_total\"\n\tmodelAggregateInferLatencyCounterName = \"seldon_model_aggregate_infer_seconds_total\"\n)\n\n// Agent metrics\nconst (\n\tcacheEvictCounterName                              = \"seldon_cache_evict_count\"\n\tcacheMissCounterName                               = \"seldon_cache_miss_count\"\n\tloadModelCounterName                               = \"seldon_load_model_counter\"\n\tunloadModelCounterName                             = \"seldon_unload_model_counter\"\n\tloadedModelGaugeName                               = \"seldon_loaded_model_gauge\"\n\tloadedModelMemoryGaugeName        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/operational.html", "key": "metrics/operational"}}, {"key": "541d1be2-f2b4-4dd0-9960-dd270c575496", "page": "metrics/operational", "section": "list-of-scv2-metrics", "text": "                      = \"seldon_unload_model_counter\"\n\tloadedModelGaugeName                               = \"seldon_loaded_model_gauge\"\n\tloadedModelMemoryGaugeName                         = \"seldon_loaded_model_memory_bytes_gauge\"\n\tevictedModelMemoryGaugeName                        = \"seldon_evicted_model_memory_bytes_gauge\"\n\tserverReplicaMemoryCapacityGaugeName               = \"seldon_server_replica_memory_capacity_bytes_gauge\"\n\tserverReplicaMemoryCapacityWithOverCommitGaugeName = \"seldon_server_replica_memory_capacity_overcommit_bytes_gauge\"\n)\n\n\nFor the pipeline gateway that handles requests to pipelines:\n//\n// The aggregate metrics exist for efficiency, as the summation can be\n// very slow in Prometheus when many pipelines exist.\nconst (\n\t// Histograms do no include model label for efficiency\n\tpipelineHistogramName = \"seldon_pipeline_infer_api_seconds\"\n\t// We use base infer counters to store core metrics per pipeline\n\tpipelineInferCounterName                 = \"seldon_pipeline_infer_total\"\n\tpipelineInferLatencyCounterName          = \"seldon_pipeline_infer_seconds_total\"\n\tpipelineAggregateInferCounterName        = \"seldon_pipeline_aggregate_infer_total\"\n\tpipelineAggregateInferLatencyCounterName = \"seldon_pipeline_aggregate_infer_seconds_total\"\n)\n\n\nMany of these metrics are model and pipeline level counters and gauges.\nWe also aggregate some of these metrics to speed up the display of graphs. We don\u2019t presently store per-model histogram metrics for performance reasons. However, we do presently store per-pipeline histogram metrics.\nThis", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/operational.html", "key": "metrics/operational"}}, {"key": "14ef3fab-6582-4c60-b55d-027a69768f8e", "page": "metrics/operational", "section": "list-of-scv2-metrics", "text": "         = \"seldon_pipeline_infer_seconds_total\"\n\tpipelineAggregateInferCounterName        = \"seldon_pipeline_aggregate_infer_total\"\n\tpipelineAggregateInferLatencyCounterName = \"seldon_pipeline_aggregate_infer_seconds_total\"\n)\n\n\nMany of these metrics are model and pipeline level counters and gauges.\nWe also aggregate some of these metrics to speed up the display of graphs. We don\u2019t presently store per-model histogram metrics for performance reasons. However, we do presently store per-pipeline histogram metrics.\nThis is experimental and these metrics are bound to change to reflect the trends we want to capture as we get more information about the usage of the system.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/operational.html", "key": "metrics/operational"}}, {"key": "4d8e60aa-651f-468c-8efc-887c8f7998d0", "page": "metrics/operational", "section": "grafana-dashboard", "text": "\nGrafana dashboard\u00b6\nWe have a prebuilt Grafana dashboard that makes use of many of the metrics that we expose.\n\n\nLocal Use\u00b6\nGrafana and Prometheus are available when you run Seldon locally.\nYou will be able to connect to the Grafana dashboard at http://localhost:3000.\nPrometheus will be available at http://localhost:9090.\n\n\nKubernetes Installation\u00b6\nDownload the dashboard from SCv2 dashboard and import it in Grafana, making sure that the data source is pointing to the correct Prometheus store.\nFind more information on how to import the dashboard here.\n\n\nLocal Metrics Examples\u00b6\nAn example to show raw metrics that Prometheus will scrape.\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/operational.html", "key": "metrics/operational"}}, {"key": "73bc2649-999d-427d-847c-bbd49c22e531", "page": "examples/pipeline-ready-and-metadata", "section": "pipeline-readiness", "text": "\nPipeline Readiness\u00b6\nRun these examples from the samples folder.\n\nPipeline Readiness Check and Metdata Calls\u00b6\nLocal example settings.\n%env INFER_REST_ENDPOINT=http://0.0.0.0:9000\n%env INFER_GRPC_ENDPOINT=0.0.0.0:9000\n%env SELDON_SCHEDULE_HOST=0.0.0.0:9004\n\n\nenv: INFER_REST_ENDPOINT=http://0.0.0.0:9000\nenv: INFER_GRPC_ENDPOINT=0.0.0.0:9000\nenv: SELDON_SCHEDULE_HOST=0.0.0.0:9004\n\n\n\nRemote k8s cluster example settings - change as neeed for your needs.\n#%env INFER_REST_ENDPOINT=http://172.19.255.1:80\n#%env INFER_GRPC_ENDPOINT=172.19.255.1:80\n#%env SELDON_SCHEDULE_HOST=172.19.255.2:9004\n\n\n\nModel Chain - Ready Check\u00b6\nWe will check the readiness of the Pipeline after every change to model and pipeline.\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\nERROR:\n  Code: Unimplemented\n  Message:\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\nseldon pipeline status tfsimples -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimples\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimples\", \"uid\":\"ciepit2i8ufs73flaitg\", \"version\":1, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:47:16.365934922Z\"}}]}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\nnull\n\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n\n}\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-ready-and-metadata.html", "key": "examples/pipeline-ready-and-metadata"}}, {"key": "504e3dd6-a149-463a-bac1-9f96be62f901", "page": "examples/pipeline-ready-and-metadata", "section": "pipeline-readiness", "text": "'{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n\n}\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n\n}\n\n\nseldon model load -f ./models/tfsimple2.yaml\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n  \"ready\": true\n}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon pipeline unload tfsimples\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\nERROR:\n  Code: Unimplemented\n  Message:\n\n\nModels will still be ready even though Pipeline terminated\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\nseldon pipeline status tfsimples -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimples\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimples\", \"uid\":\"ciepj5qi8ufs73flaiu0\", \"version\":1, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:47:51.626155116Z\", \"modelsReady\":true}}]}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n  \"ready\": true\n}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\nseldon pipeline", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-ready-and-metadata.html", "key": "examples/pipeline-ready-and-metadata"}}, {"key": "fb08b6a7-0c0f-4aa7-abbd-68b253057190", "page": "examples/pipeline-ready-and-metadata", "section": "pipeline-readiness", "text": "\"uid\":\"ciepj5qi8ufs73flaiu0\", \"version\":1, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:47:51.626155116Z\", \"modelsReady\":true}}]}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n  \"ready\": true\n}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\nnull\n\n\n\nseldon pipeline unload tfsimples\n\n\n\n\nKubernetes Resource Example\u00b6\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.19.255.1'\n\n\n\nkubectl create -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples created\n\n\n\nkubectl wait --for condition=ready --timeout=1s pipeline --all -n ${NAMESPACE}\n\n\nerror: timed out waiting for the condition on pipelines/tfsimples\n\n\n\nkubectl get pipeline tfsimples -o jsonpath='{.status.conditions[0]}' -n ${NAMESPACE}\n\n\n{\"lastTransitionTime\":\"2022-11-14T10:25:31Z\",\"status\":\"False\",\"type\":\"ModelsReady\"}\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s pipeline --all -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples condition met\n\n\n\nkubectl get pipeline tfsimples -o jsonpath='{.status.conditions[0]}' -n ${NAMESPACE}\n\n\n{\"lastTransitionTime\":\"2022-11-14T10:25:49Z\",\"status\":\"True\",\"type\":\"ModelsReady\"}\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl delete -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\npipeline.mlops.seldon.io \"tfsimples\" deleted\n\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-ready-and-metadata.html", "key": "examples/pipeline-ready-and-metadata"}}, {"key": "aa9fed9f-bdee-4734-8382-38f2499435b6", "page": "examples/pipeline-ready-and-metadata", "section": "pipeline-readiness-check-and-metdata-calls", "text": "\nPipeline Readiness Check and Metdata Calls\u00b6\nLocal example settings.\n%env INFER_REST_ENDPOINT=http://0.0.0.0:9000\n%env INFER_GRPC_ENDPOINT=0.0.0.0:9000\n%env SELDON_SCHEDULE_HOST=0.0.0.0:9004\n\n\nenv: INFER_REST_ENDPOINT=http://0.0.0.0:9000\nenv: INFER_GRPC_ENDPOINT=0.0.0.0:9000\nenv: SELDON_SCHEDULE_HOST=0.0.0.0:9004\n\n\n\nRemote k8s cluster example settings - change as neeed for your needs.\n#%env INFER_REST_ENDPOINT=http://172.19.255.1:80\n#%env INFER_GRPC_ENDPOINT=172.19.255.1:80\n#%env SELDON_SCHEDULE_HOST=172.19.255.2:9004\n\n\n\nModel Chain - Ready Check\u00b6\nWe will check the readiness of the Pipeline after every change to model and pipeline.\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\nERROR:\n  Code: Unimplemented\n  Message:\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\nseldon pipeline status tfsimples -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimples\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimples\", \"uid\":\"ciepit2i8ufs73flaitg\", \"version\":1, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:47:16.365934922Z\"}}]}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\nnull\n\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n\n}\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT}", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-ready-and-metadata.html", "key": "examples/pipeline-ready-and-metadata"}}, {"key": "ebf35043-7cad-487f-8cbd-018887f3ca4b", "page": "examples/pipeline-ready-and-metadata", "section": "pipeline-readiness-check-and-metdata-calls", "text": "   -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n\n}\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n\n}\n\n\nseldon model load -f ./models/tfsimple2.yaml\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n  \"ready\": true\n}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon pipeline unload tfsimples\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\nERROR:\n  Code: Unimplemented\n  Message:\n\n\nModels will still be ready even though Pipeline terminated\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\nseldon pipeline status tfsimples -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimples\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimples\", \"uid\":\"ciepj5qi8ufs73flaiu0\", \"version\":1, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:47:51.626155116Z\", \"modelsReady\":true}}]}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n  \"ready\": true\n}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\nnull\n\n\n\nseldon pipeline unload", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-ready-and-metadata.html", "key": "examples/pipeline-ready-and-metadata"}}, {"key": "1340a423-7a27-487a-a9f1-36879c62ad5f", "page": "examples/pipeline-ready-and-metadata", "section": "pipeline-readiness-check-and-metdata-calls", "text": "\"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:47:51.626155116Z\", \"modelsReady\":true}}]}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n  \"ready\": true\n}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\nnull\n\n\n\nseldon pipeline unload tfsimples\n\n\n\n\nKubernetes Resource Example\u00b6\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.19.255.1'\n\n\n\nkubectl create -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples created\n\n\n\nkubectl wait --for condition=ready --timeout=1s pipeline --all -n ${NAMESPACE}\n\n\nerror: timed out waiting for the condition on pipelines/tfsimples\n\n\n\nkubectl get pipeline tfsimples -o jsonpath='{.status.conditions[0]}' -n ${NAMESPACE}\n\n\n{\"lastTransitionTime\":\"2022-11-14T10:25:31Z\",\"status\":\"False\",\"type\":\"ModelsReady\"}\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s pipeline --all -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples condition met\n\n\n\nkubectl get pipeline tfsimples -o jsonpath='{.status.conditions[0]}' -n ${NAMESPACE}\n\n\n{\"lastTransitionTime\":\"2022-11-14T10:25:49Z\",\"status\":\"True\",\"type\":\"ModelsReady\"}\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl delete -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\npipeline.mlops.seldon.io \"tfsimples\" deleted\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-ready-and-metadata.html", "key": "examples/pipeline-ready-and-metadata"}}, {"key": "783d0d75-7a7e-4bf6-8939-14ba4c01df18", "page": "examples/pipeline-ready-and-metadata", "section": "model-chain-ready-check", "text": "\nModel Chain - Ready Check\u00b6\nWe will check the readiness of the Pipeline after every change to model and pipeline.\ncat ./pipelines/tfsimples.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: tfsimples\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n      inputs:\n      - tfsimple1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple1.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple2\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\nERROR:\n  Code: Unimplemented\n  Message:\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\nseldon pipeline status tfsimples -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimples\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimples\", \"uid\":\"ciepit2i8ufs73flaitg\", \"version\":1, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:47:16.365934922Z\"}}]}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\nnull\n\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n\n}\n\n\nseldon model load -f ./models/tfsimple1.yaml\nseldon model status tfsimple1 -w ModelAvailable\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n\n}\n\n\nseldon model load -f ./models/tfsimple2.yaml\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-ready-and-metadata.html", "key": "examples/pipeline-ready-and-metadata"}}, {"key": "a8ca010c-8e9a-4bdc-901f-3a23509e6bb4", "page": "examples/pipeline-ready-and-metadata", "section": "model-chain-ready-check", "text": "model status tfsimple1 -w ModelAvailable\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n\n}\n\n\nseldon model load -f ./models/tfsimple2.yaml\nseldon model status tfsimple2 -w ModelAvailable | jq -M .\n\n\n{}\n{}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n  \"ready\": true\n}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon pipeline unload tfsimples\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\nERROR:\n  Code: Unimplemented\n  Message:\n\n\nModels will still be ready even though Pipeline terminated\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon pipeline load -f ./pipelines/tfsimples.yaml\nseldon pipeline status tfsimples -w PipelineReady\n\n\n{\"pipelineName\":\"tfsimples\", \"versions\":[{\"pipeline\":{\"name\":\"tfsimples\", \"uid\":\"ciepj5qi8ufs73flaiu0\", \"version\":1, \"steps\":[{\"name\":\"tfsimple1\"}, {\"name\":\"tfsimple2\", \"inputs\":[\"tfsimple1.outputs\"], \"tensorMap\":{\"tfsimple1.outputs.OUTPUT0\":\"INPUT0\", \"tfsimple1.outputs.OUTPUT1\":\"INPUT1\"}}], \"output\":{\"steps\":[\"tfsimple2.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:47:51.626155116Z\", \"modelsReady\":true}}]}\n\n\ncurl -Ik ${INFER_REST_ENDPOINT}/v2/pipelines/tfsimples/ready\n\n\n\n\n\ngrpcurl -d '{\"name\":\"tfsimples\"}' \\\n    -plaintext \\\n    -import-path ../apis \\\n    -proto ../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    -rpc-header seldon-model:tfsimples.pipeline \\\n    ${INFER_GRPC_ENDPOINT} inference.GRPCInferenceService/ModelReady\n\n\n{\n  \"ready\": true\n}\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\ntrue\n\n\n\nseldon model unload tfsimple1\nseldon model unload tfsimple2\n\n\nseldon pipeline status tfsimples | jq .versions[0].state.modelsReady\n\n\nnull\n\n\n\nseldon pipeline unload tfsimples\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-ready-and-metadata.html", "key": "examples/pipeline-ready-and-metadata"}}, {"key": "fcabf61e-7abd-43d9-9fde-d8e08524a98f", "page": "examples/pipeline-ready-and-metadata", "section": "kubernetes-resource-example", "text": "\nKubernetes Resource Example\u00b6\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.19.255.1'\n\n\n\nkubectl create -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples created\n\n\n\nkubectl wait --for condition=ready --timeout=1s pipeline --all -n ${NAMESPACE}\n\n\nerror: timed out waiting for the condition on pipelines/tfsimples\n\n\n\nkubectl get pipeline tfsimples -o jsonpath='{.status.conditions[0]}' -n ${NAMESPACE}\n\n\n{\"lastTransitionTime\":\"2022-11-14T10:25:31Z\",\"status\":\"False\",\"type\":\"ModelsReady\"}\n\n\nkubectl create -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl create -f ./models/tfsimple2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/tfsimple1 created\nmodel.mlops.seldon.io/tfsimple2 created\n\n\n\nkubectl wait --for condition=ready --timeout=300s pipeline --all -n ${NAMESPACE}\n\n\npipeline.mlops.seldon.io/tfsimples condition met\n\n\n\nkubectl get pipeline tfsimples -o jsonpath='{.status.conditions[0]}' -n ${NAMESPACE}\n\n\n{\"lastTransitionTime\":\"2022-11-14T10:25:49Z\",\"status\":\"True\",\"type\":\"ModelsReady\"}\n\n\nkubectl delete -f ./models/tfsimple1.yaml -n ${NAMESPACE}\nkubectl delete -f ./models/tfsimple2.yaml -n ${NAMESPACE}\nkubectl delete -f ./pipelines/tfsimples.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"tfsimple1\" deleted\nmodel.mlops.seldon.io \"tfsimple2\" deleted\npipeline.mlops.seldon.io \"tfsimples\" deleted\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/pipeline-ready-and-metadata.html", "key": "examples/pipeline-ready-and-metadata"}}, {"key": "2e03d823-783d-4c25-b41c-ddeb81616667", "page": "inference", "section": "inference", "text": "\nInference\u00b6\nThis section will discuss how to make inference calls against your Seldon models or pipelines.\nYou can make synchronous inference requests via REST or gRPC or asynchronous requests via Kafka topics.\nThe content of your request should be an inference v2 protocol payload:\n\nREST payloads will generally be in the JSON v2 protocol format.\ngRPC and Kafka payloads must be in the Protobuf v2 protocol format.\n\n\nSynchronous Requests\u00b6\nFor making synchronous requests, the process will generally be:\n\nFind the appropriate service endpoint (IP address and port) for accessing the installation of Seldon Core v2.\nDetermine the appropriate headers/metadata for the request.\nMake requests via REST or gRPC.\n\n\nFind the Seldon Service Endpoint\u00b6\n\nDocker ComposeKubernetesIn the default Docker Compose setup, container ports are accessible from the host machine.\nThis means you can use localhost or 0.0.0.0 as the hostname.\nThe default port for sending inference requests to the Seldon system is 9000.\nThis is controlled by the ENVOY_DATA_PORT environment variable for Compose.\nPutting this together, you can send inference requests to 0.0.0.0:9000.\nIn Kubernetes, Seldon creates a single Service called seldon-mesh in the namespace it is installed into.\nBy default, this namespace is also called seldon-mesh.\nIf this Service is exposed via a load balancer, the appropriate address and port can be found via:\nkubectl get svc seldon-mesh -n seldon-mesh -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n\n\nIf you are not using a LoadBalancer for the seldon-mesh Service, you can still send inference requests.\nFor development and testing purposes, you can port-forward the Service locally using the below.\nInference requests can then be sent to localhost:8080.\nkubectl port-forward svc/seldon-mesh -n seldon-mesh 8080:80\n\n\nIf you are using a service mesh like Istio or Ambassador, you will need", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "889c0b0a-88d8-4ce0-a2bb-e37a87d6beeb", "page": "inference", "section": "inference", "text": "be found via:\nkubectl get svc seldon-mesh -n seldon-mesh -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n\n\nIf you are not using a LoadBalancer for the seldon-mesh Service, you can still send inference requests.\nFor development and testing purposes, you can port-forward the Service locally using the below.\nInference requests can then be sent to localhost:8080.\nkubectl port-forward svc/seldon-mesh -n seldon-mesh 8080:80\n\n\nIf you are using a service mesh like Istio or Ambassador, you will need to use the IP address of the service mesh ingress and determine the appropriate port.\n\n\n\nMake Inference Requests\u00b6\nLet us imagine making inference requests to a model called iris.\nThis iris model has the following schema, which can be set in a model-settings.json file for MLServer:\n{\n    \"name\": \"iris\",\n    \"implementation\": \"mlserver_sklearn.SKLearnModel\",\n    \"inputs\": [\n        {\n            \"name\": \"predict\",\n            \"datatype\": \"FP32\",\n            \"shape\": [-1, 4]\n        }\n    ],\n    \"outputs\": [\n        {\n            \"name\": \"predict\",\n            \"datatype\": \"INT64\",\n            \"shape\": [-1, 1]\n        }\n    ],\n    \"parameters\": {\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "b50869a8-7e63-4623-9319-1bf83034fd6f", "page": "inference", "section": "inference", "text": "  {\n            \"name\": \"predict\",\n            \"datatype\": \"INT64\",\n            \"shape\": [-1, 1]\n        }\n    ],\n    \"parameters\": {\n        \"version\": \"1\"\n    }\n}\n\n\nExamples are given below for some common tools for making requests.\n\nSeldon CLIcURLgrpcurlPython tritonclientAn example seldon request might look like this:\nseldon model infer iris \\\n        '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nThe default inference mode is REST, but you can also send gRPC requests like this:\nseldon model infer iris \\\n        --inference-mode grpc \\\n        '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nAn example curl request might look like this:\ncurl -v http://0.0.0.0:9000/v2/models/iris/infer \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nAn example grpcurl request might look like this:\ngrpcurl \\\n\t-d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n\t-plaintext \\\n\t-import-path apis \\\n\t-proto apis/mlops/v2_dataplane/v2_dataplane.proto \\\n\t0.0.0.0:9000 inference.GRPCInferenceService/ModelInfer\n\n\nThe above request was run from the project root folder allowing reference to the Protobuf manifests defined in the apis/ folder.\nYou can use the Python tritonclient package to send inference requests.\nA short, self-contained example is:\nimport tritonclient.http as httpclient\nimport numpy as np\n\nclient = httpclient.InferenceServerClient(\n    url=\"localhost:8080\",\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "50dbec24-870f-4eed-9183-a203954f6489", "page": "inference", "section": "inference", "text": "3, 4]]}]}'\n\n\nAn example grpcurl request might look like this:\ngrpcurl \\\n\t-d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n\t-plaintext \\\n\t-import-path apis \\\n\t-proto apis/mlops/v2_dataplane/v2_dataplane.proto \\\n\t0.0.0.0:9000 inference.GRPCInferenceService/ModelInfer\n\n\nThe above request was run from the project root folder allowing reference to the Protobuf manifests defined in the apis/ folder.\nYou can use the Python tritonclient package to send inference requests.\nA short, self-contained example is:\nimport tritonclient.http as httpclient\nimport numpy as np\n\nclient = httpclient.InferenceServerClient(\n    url=\"localhost:8080\",\n    verbose=False,\n)\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\"iris\", inputs)\nprint(\"result is:\", result.as_numpy(\"predict\"))\n\n\n\n\nTip\nFor pipelines, a synchronous request is possible if the pipeline has an outputs section defined in its spec.\n\n\n\nRequest Routing\u00b6\n\nSeldon Routes\u00b6\nSeldon needs to determine where to route requests to, as models and pipelines might have the same name.\nThere are two ways of doing this: header-based routing (preferred) and path-based routing.\n\nHeadersPathsSeldon can route requests to the correct endpoint via headers in HTTP calls, both for REST (HTTP/1.1) and gRPC (HTTP/2).\nUse the Seldon-Model header as follows:\n\nFor models, use the model name as the value.\nFor example, to send requests to a model named foo use the header Seldon-Model: foo.\nFor pipelines, use the pipeline name followed by .pipeline as the value.\nFor example, to send requests to a pipeline named foo use the header Seldon-Model: foo.pipeline.\n\nThe seldon CLI is aware of these rules and can be used to easily send requests to your deployed resources.\nSee the examples and the Seldon CLI docs for more information.\nThe inference v2 protocol is only aware of models, thus has no concept of pipelines.\nSeldon works around this limitation by", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "fff7f173-8f01-4110-8f67-5563220e4e3e", "page": "inference", "section": "inference", "text": "the value.\nFor example, to send requests to a pipeline named foo use the header Seldon-Model: foo.pipeline.\n\nThe seldon CLI is aware of these rules and can be used to easily send requests to your deployed resources.\nSee the examples and the Seldon CLI docs for more information.\nThe inference v2 protocol is only aware of models, thus has no concept of pipelines.\nSeldon works around this limitation by introducing virtual endpoints for pipelines.\nVirtual means that Seldon understands them, but other v2 protocol-compatible components like inference servers do not.\nUse the following rules for paths to route to models and pipelines:\n\nFor models, use the path prefix /v2/models/{model name}.\nThis is normal usage of the inference v2 protocol.\nFor pipelines, you can use the path prefix /v2/pipelines/{pipeline name}.\nOtherwise calling pipelines looks just like the inference v2 protocol for models.\nDo not use any suffix for the pipeline name as you would for routing headers.\nFor pipelines, you can also use the path prefix /v2/models/{pipeline name}.pipeline.\nAgain, this form looks just like the inference v2 protocol for models.\n\n\nExtending our examples from above, the requests may look like the below when using header-based routing.\n\nSeldon CLIcURLgrpcurlPython tritonclientNo changes are required as the seldon CLI already understands how to set the appropriate gRPC and REST headers.\nNote the header in the last line:\ncurl -v http://0.0.0.0:9000/v2/models/iris/infer \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}' \\\n        -H \"Seldon-Model: iris\"\n\n\nNote the rpc-header flag in", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "df72c1f3-ad3f-4981-a6e6-6db8d17c15f6", "page": "inference", "section": "inference", "text": "to set the appropriate gRPC and REST headers.\nNote the header in the last line:\ncurl -v http://0.0.0.0:9000/v2/models/iris/infer \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}' \\\n        -H \"Seldon-Model: iris\"\n\n\nNote the rpc-header flag in the penultimate line:\ngrpcurl \\\n\t-d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n\t-plaintext \\\n\t-import-path apis \\\n\t-proto apis/mlops/v2_dataplane/v2_dataplane.proto \\\n\t-rpc-header seldon-model:iris \\\n\t0.0.0.0:9000 inference.GRPCInferenceService/ModelInfer\n\n\nNote the headers dictionary in the client.infer() call:\nimport tritonclient.http as httpclient\nimport numpy as np\n\nclient = httpclient.InferenceServerClient(\n    url=\"localhost:8080\",\n    verbose=False,\n)\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\n    \"iris\",\n    inputs,\n    headers={\"Seldon-Model\": \"iris\"},\n)\nprint(\"result is:\", result.as_numpy(\"predict\"))\n\n\n\n\n\nIngress Routes\u00b6\nIf you are using an ingress controller to make inference requests with Seldon, you will need to configure the routing rules correctly.\nThere are many ways to do this, but custom path prefixes will not work with gRPC.\nThis is because gRPC determines the path based on the Protobuf definition.\nSome gRPC implementations permit manipulating paths when sending requests, but this is by no means universal.\nIf you want to expose your inference endpoints via gRPC and REST in a consistent way, you should use virtual hosts, subdomains, or headers.\nThe downside of using only paths is that you cannot differentiate between different installations of Seldon Core v2 or between traffic to Seldon and any other inference endpoints you may have exposed via the same ingress.\nYou might", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "ece53fd2-c9b0-42cc-8b54-0e002d3383af", "page": "inference", "section": "inference", "text": "is by no means universal.\nIf you want to expose your inference endpoints via gRPC and REST in a consistent way, you should use virtual hosts, subdomains, or headers.\nThe downside of using only paths is that you cannot differentiate between different installations of Seldon Core v2 or between traffic to Seldon and any other inference endpoints you may have exposed via the same ingress.\nYou might want to use a mixture of these methods; the choice is yours.\n\nVirtual HostsSubdomainsHeadersPathsVirtual hosts are a way of differentiating between logical services accessed via the same physical machine(s).\nVirtual hosts are defined by the Host header for HTTP/1 and the :authority pseudo-header for HTTP/2.\nThese represent the same thing, and the HTTP/2 specification defines how to translate these when converting between protocol versions.\nMany tools and libraries treat these headers as special and have particular ways of handling them.\nSome common ones are given below:\n\nThe seldon CLI has an --authority flag which applies to both REST and gRPC inference calls.\ncurl accepts Host as a normal header.\ngrpcurl has an -authority flag.\nIn Go, the standard library\u2019s http.Request struct has a Host field and ignores attempts to set this value via headers.\nIn Python, the requests library accepts the host as a normal header.\n\nBe sure to check the documentation for how to set this with your preferred tools and languages.\nSubdomain names constitute a part of the overall host name.\nAs such, specifying a subdomain name for requests will involve setting the appropriate host in the URI.\nFor example, you may expose inference services in the namespaces seldon-1 and seldon-2 as in the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "d9719a56-37da-4df1-bfe6-f314def3ff0e", "page": "inference", "section": "inference", "text": "library accepts the host as a normal header.\n\nBe sure to check the documentation for how to set this with your preferred tools and languages.\nSubdomain names constitute a part of the overall host name.\nAs such, specifying a subdomain name for requests will involve setting the appropriate host in the URI.\nFor example, you may expose inference services in the namespaces seldon-1 and seldon-2 as in the following snippets:\ncurl https://seldon-1.example.com/v2/models/iris/infer ...\n\nseldon model infer --inference-host https://seldon-2.example.com/v2/models/iris/infer ...\n\n\nMany popular ingresses support subdomain-based routing, including Istio and Nginx.\nPlease refer to the documentation for your ingress of choice for further information.\nMany ingress controllers and service meshes support routing on headers.\nYou can use whatever headers you prefer, so long as they do not conflict with any Seldon relies upon.\nMany tools and libraries support adding custom headers to requests.\nSome common ones are given below:\n\nThe seldon CLI accepts headers using the --header flag, which can be specified multiple times.\ncurl accepts headers using the -H or --header flags.\ngrpcurl accepts headers using the -H flag, which can be specified multiple times.\n\nIt is possible to route on paths by using well-known path prefixes defined by the inference v2 protocol.\nFor gRPC, the full path (or \u201cmethod\u201d) for an inference call is:\n/inference.GRPCInferenceService/ModelInfer\n\n\nThis corresponds to the package (inference), service (GRPCInferenceService), and RPC name (ModelInfer) in the Protobuf definition of the inference v2 protocol.\nYou could use an exact match or a regex like .*inference.* to match this path, for example.\n\n\n\n\n\nAsynchronous Requests\u00b6\nThe Seldon architecture uses Kafka and therefore asynchronous requests can be sent by pushing inference v2 protocol payloads to the appropriate topic.\nTopics have", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "f026470b-32d2-4e32-b606-604295b3a985", "page": "inference", "section": "inference", "text": "for an inference call is:\n/inference.GRPCInferenceService/ModelInfer\n\n\nThis corresponds to the package (inference), service (GRPCInferenceService), and RPC name (ModelInfer) in the Protobuf definition of the inference v2 protocol.\nYou could use an exact match or a regex like .*inference.* to match this path, for example.\n\n\n\n\n\nAsynchronous Requests\u00b6\nThe Seldon architecture uses Kafka and therefore asynchronous requests can be sent by pushing inference v2 protocol payloads to the appropriate topic.\nTopics have the following form:\nseldon.<namespace>.<model|pipeline>.<name>.<inputs|outputs>\n\n\n\nNote\nIf writing to a pipeline topic, you will need to include a Kafka header with the key pipeline and the value being the name of the pipeline.\n\n\nModel Inference\u00b6\nFor a local install if you have a model iris, you would be able to send a prediction request by pushing to the topic: seldon.default.model.iris.inputs.\nThe response will appear on seldon.default.model.iris.outputs.\nFor a Kubernetes install in seldon-mesh if you have a model iris, you would be able to send a prediction request by pushing to the topic: seldon.seldon-mesh.model.iris.inputs.\nThe response will appear on seldon.seldon-mesh.model.iris.outputs.\n\n\nPipeline Inference\u00b6\nFor a local install if you have a pipeline mypipeline, you would be able to send a prediction request by pushing to the topic: seldon.default.pipeline.mypipeline.inputs. The response will appear on seldon.default.pipeline.mypipeline.outputs.\nFor a Kubernetes install in seldon-mesh if you have a pipeline mypipeline, you would be able to send a prediction request by pushing to the topic: seldon.seldon-mesh.pipeline.mypipeline.inputs. The response will appear on seldon.seldon-mesh.pipeline.mypipeline.outputs.\n\n\n\nPipeline Metadata\u00b6\nIt may be useful to send metadata alongside your inference.\nIf using Kafka directly as described above, you can attach Kafka metadata to your request, which will be passed around the graph.\nWhen making synchronous requests to your pipeline with REST", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "592119fd-e016-4103-8bb4-c7e2033cd503", "page": "inference", "section": "inference", "text": "have a pipeline mypipeline, you would be able to send a prediction request by pushing to the topic: seldon.seldon-mesh.pipeline.mypipeline.inputs. The response will appear on seldon.seldon-mesh.pipeline.mypipeline.outputs.\n\n\n\nPipeline Metadata\u00b6\nIt may be useful to send metadata alongside your inference.\nIf using Kafka directly as described above, you can attach Kafka metadata to your request, which will be passed around the graph.\nWhen making synchronous requests to your pipeline with REST or gRPC you can also do this.\n\nFor REST requests add HTTP headers prefixed with X-\nFor gRPC requests add metadata with keys starting with X-\n\nYou can also do this with the Seldon CLI by setting headers with the --header argument (and also showing response headers with the --show-headers argument)\nseldon pipeline infer --show-headers --header X-foo=bar tfsimples \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n\n\nRequest IDs\u00b6\nFor both model and pipeline requests the response will contain a x-request-id response header. For pipeline requests this can be used to inspect the pipeline steps via the CLI, e.g.:\nseldon pipeline inspect tfsimples --request-id carjjolvqj3j2pfbut10 --offset 10\n\n\nThe --offset parameter specifies how many messages (from the latest) you want to search to find your request. If not specified the last request will be shown.\nx-request-id will also appear in tracing spans.\nIf x-request-id is passed in by the caller then this will be used. It is the caller\u2019s responsibility to ensure it is unique.\nThe IDs generated are XIDs.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "94b3de72-e429-4c93-856c-066f88cdb8cc", "page": "inference", "section": "synchronous-requests", "text": "\nSynchronous Requests\u00b6\nFor making synchronous requests, the process will generally be:\n\nFind the appropriate service endpoint (IP address and port) for accessing the installation of Seldon Core v2.\nDetermine the appropriate headers/metadata for the request.\nMake requests via REST or gRPC.\n\n\nFind the Seldon Service Endpoint\u00b6\n\nDocker ComposeKubernetesIn the default Docker Compose setup, container ports are accessible from the host machine.\nThis means you can use localhost or 0.0.0.0 as the hostname.\nThe default port for sending inference requests to the Seldon system is 9000.\nThis is controlled by the ENVOY_DATA_PORT environment variable for Compose.\nPutting this together, you can send inference requests to 0.0.0.0:9000.\nIn Kubernetes, Seldon creates a single Service called seldon-mesh in the namespace it is installed into.\nBy default, this namespace is also called seldon-mesh.\nIf this Service is exposed via a load balancer, the appropriate address and port can be found via:\nkubectl get svc seldon-mesh -n seldon-mesh -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n\n\nIf you are not using a LoadBalancer for the seldon-mesh Service, you can still send inference requests.\nFor development and testing purposes, you can port-forward the Service locally using the below.\nInference requests can then be sent to localhost:8080.\nkubectl port-forward svc/seldon-mesh -n seldon-mesh 8080:80\n\n\nIf you are using a service mesh like Istio or Ambassador, you will need to use the IP address of the service mesh ingress and determine the appropriate port.\n\n\n\nMake Inference Requests\u00b6\nLet us imagine making inference requests to a model called iris.\nThis iris model has the following schema, which can be set in a model-settings.json file for MLServer:\n{\n    \"name\": \"iris\",\n    \"implementation\": \"mlserver_sklearn.SKLearnModel\",\n    \"inputs\": [\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "166e553a-c339-40a4-b849-a404cf473856", "page": "inference", "section": "synchronous-requests", "text": "you will need to use the IP address of the service mesh ingress and determine the appropriate port.\n\n\n\nMake Inference Requests\u00b6\nLet us imagine making inference requests to a model called iris.\nThis iris model has the following schema, which can be set in a model-settings.json file for MLServer:\n{\n    \"name\": \"iris\",\n    \"implementation\": \"mlserver_sklearn.SKLearnModel\",\n    \"inputs\": [\n        {\n            \"name\": \"predict\",\n            \"datatype\": \"FP32\",\n            \"shape\": [-1, 4]\n        }\n    ],\n    \"outputs\": [\n        {\n            \"name\": \"predict\",\n            \"datatype\": \"INT64\",\n            \"shape\": [-1, 1]\n        }\n    ],\n    \"parameters\": {\n        \"version\": \"1\"\n    }\n}\n\n\nExamples are given below for some common tools for making requests.\n\nSeldon CLIcURLgrpcurlPython tritonclientAn example seldon request might look like this:\nseldon model infer iris \\\n        '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nThe default inference mode is REST, but you can also", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "28b65fda-d0ba-475b-a405-a95129f9cc43", "page": "inference", "section": "synchronous-requests", "text": "      \"version\": \"1\"\n    }\n}\n\n\nExamples are given below for some common tools for making requests.\n\nSeldon CLIcURLgrpcurlPython tritonclientAn example seldon request might look like this:\nseldon model infer iris \\\n        '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nThe default inference mode is REST, but you can also send gRPC requests like this:\nseldon model infer iris \\\n        --inference-mode grpc \\\n        '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nAn example curl request might look like this:\ncurl -v http://0.0.0.0:9000/v2/models/iris/infer \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nAn example grpcurl request might look like this:\ngrpcurl \\\n\t-d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n\t-plaintext \\\n\t-import-path apis \\\n\t-proto apis/mlops/v2_dataplane/v2_dataplane.proto \\\n\t0.0.0.0:9000 inference.GRPCInferenceService/ModelInfer\n\n\nThe above request was run from the project root folder allowing reference to the Protobuf manifests defined in the apis/ folder.\nYou can use the Python tritonclient package to send inference requests.\nA short, self-contained example is:\nimport tritonclient.http as httpclient\nimport numpy as np\n\nclient = httpclient.InferenceServerClient(\n    url=\"localhost:8080\",\n    verbose=False,\n)\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\"iris\", inputs)\nprint(\"result is:\", result.as_numpy(\"predict\"))\n\n\n\n\nTip\nFor pipelines, a synchronous request is possible if the pipeline has an outputs section defined in its spec.\n\n\n\nRequest Routing\u00b6\n\nSeldon Routes\u00b6\nSeldon needs to determine where to route requests to, as models and pipelines might have the same name.\nThere", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "a4cfb07f-8f50-4808-853e-22169fb4dbad", "page": "inference", "section": "synchronous-requests", "text": "  url=\"localhost:8080\",\n    verbose=False,\n)\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\"iris\", inputs)\nprint(\"result is:\", result.as_numpy(\"predict\"))\n\n\n\n\nTip\nFor pipelines, a synchronous request is possible if the pipeline has an outputs section defined in its spec.\n\n\n\nRequest Routing\u00b6\n\nSeldon Routes\u00b6\nSeldon needs to determine where to route requests to, as models and pipelines might have the same name.\nThere are two ways of doing this: header-based routing (preferred) and path-based routing.\n\nHeadersPathsSeldon can route requests to the correct endpoint via headers in HTTP calls, both for REST (HTTP/1.1) and gRPC (HTTP/2).\nUse the Seldon-Model header as follows:\n\nFor models, use the model name as the value.\nFor example, to send requests to a model named foo use the header Seldon-Model: foo.\nFor pipelines, use the pipeline name followed by .pipeline as the value.\nFor example, to send requests to a pipeline named foo use the header Seldon-Model: foo.pipeline.\n\nThe seldon CLI is aware of these rules and can be used to easily send requests to your deployed resources.\nSee the examples and the Seldon CLI docs for more information.\nThe inference v2 protocol is only aware of models, thus has no concept of pipelines.\nSeldon works around this limitation by introducing virtual endpoints for pipelines.\nVirtual means that Seldon understands them, but other v2 protocol-compatible components like inference servers do not.\nUse the following rules for paths to route to models and pipelines:\n\nFor models, use the path prefix /v2/models/{model name}.\nThis is normal usage of the inference v2 protocol.\nFor pipelines, you can use the path prefix /v2/pipelines/{pipeline name}.\nOtherwise calling pipelines looks just like the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "118b9c73-38cd-4907-91e7-171dc0ee91cf", "page": "inference", "section": "synchronous-requests", "text": "this limitation by introducing virtual endpoints for pipelines.\nVirtual means that Seldon understands them, but other v2 protocol-compatible components like inference servers do not.\nUse the following rules for paths to route to models and pipelines:\n\nFor models, use the path prefix /v2/models/{model name}.\nThis is normal usage of the inference v2 protocol.\nFor pipelines, you can use the path prefix /v2/pipelines/{pipeline name}.\nOtherwise calling pipelines looks just like the inference v2 protocol for models.\nDo not use any suffix for the pipeline name as you would for routing headers.\nFor pipelines, you can also use the path prefix /v2/models/{pipeline name}.pipeline.\nAgain, this form looks just like the inference v2 protocol for models.\n\n\nExtending our examples from above, the requests may look like the below when using header-based routing.\n\nSeldon CLIcURLgrpcurlPython tritonclientNo changes are required as the seldon CLI already understands how to set the appropriate gRPC and REST headers.\nNote the header in the last line:\ncurl -v http://0.0.0.0:9000/v2/models/iris/infer \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}' \\\n        -H \"Seldon-Model: iris\"\n\n\nNote the rpc-header flag in the penultimate line:\ngrpcurl \\\n\t-d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n\t-plaintext \\\n\t-import-path apis \\\n\t-proto apis/mlops/v2_dataplane/v2_dataplane.proto \\\n\t-rpc-header seldon-model:iris \\\n\t0.0.0.0:9000 inference.GRPCInferenceService/ModelInfer\n\n\nNote the headers dictionary in the client.infer() call:\nimport tritonclient.http as httpclient\nimport numpy as np\n\nclient = httpclient.InferenceServerClient(\n    url=\"localhost:8080\",\n    verbose=False,\n)\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\n    \"iris\",\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "7c1d4652-0315-412f-b8f7-55e664e9f5a9", "page": "inference", "section": "synchronous-requests", "text": "rpc-header flag in the penultimate line:\ngrpcurl \\\n\t-d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n\t-plaintext \\\n\t-import-path apis \\\n\t-proto apis/mlops/v2_dataplane/v2_dataplane.proto \\\n\t-rpc-header seldon-model:iris \\\n\t0.0.0.0:9000 inference.GRPCInferenceService/ModelInfer\n\n\nNote the headers dictionary in the client.infer() call:\nimport tritonclient.http as httpclient\nimport numpy as np\n\nclient = httpclient.InferenceServerClient(\n    url=\"localhost:8080\",\n    verbose=False,\n)\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\n    \"iris\",\n    inputs,\n    headers={\"Seldon-Model\": \"iris\"},\n)\nprint(\"result is:\", result.as_numpy(\"predict\"))\n\n\n\n\n\nIngress Routes\u00b6\nIf you are using an ingress controller to make inference requests with Seldon, you will need to configure the routing rules correctly.\nThere are many ways to do this, but custom path prefixes will not work with gRPC.\nThis is because gRPC determines the path based on the Protobuf definition.\nSome gRPC implementations permit manipulating paths when sending requests, but this is by no means universal.\nIf you want to expose your inference endpoints via gRPC and REST in a consistent way, you should use virtual hosts, subdomains, or headers.\nThe downside of using only paths is that you cannot differentiate between different installations of Seldon Core v2 or between traffic to Seldon and any other inference endpoints you may have exposed via the same ingress.\nYou might want to use a mixture of these methods; the choice is yours.\n\nVirtual HostsSubdomainsHeadersPathsVirtual hosts are a way of differentiating between logical services accessed via the same physical machine(s).\nVirtual hosts are defined by the Host header for HTTP/1 and the :authority pseudo-header for HTTP/2.\nThese represent the same thing, and the HTTP/2 specification defines how to translate these when converting between protocol versions.\nMany", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "0b0454f8-62ac-4b4d-b6ea-52d34b8aa4b8", "page": "inference", "section": "synchronous-requests", "text": "same ingress.\nYou might want to use a mixture of these methods; the choice is yours.\n\nVirtual HostsSubdomainsHeadersPathsVirtual hosts are a way of differentiating between logical services accessed via the same physical machine(s).\nVirtual hosts are defined by the Host header for HTTP/1 and the :authority pseudo-header for HTTP/2.\nThese represent the same thing, and the HTTP/2 specification defines how to translate these when converting between protocol versions.\nMany tools and libraries treat these headers as special and have particular ways of handling them.\nSome common ones are given below:\n\nThe seldon CLI has an --authority flag which applies to both REST and gRPC inference calls.\ncurl accepts Host as a normal header.\ngrpcurl has an -authority flag.\nIn Go, the standard library\u2019s http.Request struct has a Host field and ignores attempts to set this value via headers.\nIn Python, the requests library accepts the host as a normal header.\n\nBe sure to check the documentation for how to set this with your preferred tools and languages.\nSubdomain names constitute a part of the overall host name.\nAs such, specifying a subdomain name for requests will involve setting the appropriate host in the URI.\nFor example, you may expose inference services in the namespaces seldon-1 and seldon-2 as in the following snippets:\ncurl https://seldon-1.example.com/v2/models/iris/infer ...\n\nseldon model infer --inference-host https://seldon-2.example.com/v2/models/iris/infer ...\n\n\nMany popular ingresses support subdomain-based routing, including Istio and Nginx.\nPlease refer to the documentation for your ingress of choice for further information.\nMany ingress controllers and service meshes support routing on headers.\nYou can use whatever headers you prefer, so long as they do not conflict with any Seldon relies upon.\nMany tools and libraries support", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "723cff84-6617-417d-9f11-cf5f82b64294", "page": "inference", "section": "synchronous-requests", "text": "as in the following snippets:\ncurl https://seldon-1.example.com/v2/models/iris/infer ...\n\nseldon model infer --inference-host https://seldon-2.example.com/v2/models/iris/infer ...\n\n\nMany popular ingresses support subdomain-based routing, including Istio and Nginx.\nPlease refer to the documentation for your ingress of choice for further information.\nMany ingress controllers and service meshes support routing on headers.\nYou can use whatever headers you prefer, so long as they do not conflict with any Seldon relies upon.\nMany tools and libraries support adding custom headers to requests.\nSome common ones are given below:\n\nThe seldon CLI accepts headers using the --header flag, which can be specified multiple times.\ncurl accepts headers using the -H or --header flags.\ngrpcurl accepts headers using the -H flag, which can be specified multiple times.\n\nIt is possible to route on paths by using well-known path prefixes defined by the inference v2 protocol.\nFor gRPC, the full path (or \u201cmethod\u201d) for an inference call is:\n/inference.GRPCInferenceService/ModelInfer\n\n\nThis corresponds to the package (inference), service (GRPCInferenceService), and RPC name (ModelInfer) in the Protobuf definition of the inference v2 protocol.\nYou could use an exact match or a regex like .*inference.* to match this path, for example.\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "09f02c3e-bab5-4919-9de1-7f65a99ffd30", "page": "inference", "section": "find-the-seldon-service-endpoint", "text": "\nFind the Seldon Service Endpoint\u00b6\n\nDocker ComposeKubernetesIn the default Docker Compose setup, container ports are accessible from the host machine.\nThis means you can use localhost or 0.0.0.0 as the hostname.\nThe default port for sending inference requests to the Seldon system is 9000.\nThis is controlled by the ENVOY_DATA_PORT environment variable for Compose.\nPutting this together, you can send inference requests to 0.0.0.0:9000.\nIn Kubernetes, Seldon creates a single Service called seldon-mesh in the namespace it is installed into.\nBy default, this namespace is also called seldon-mesh.\nIf this Service is exposed via a load balancer, the appropriate address and port can be found via:\nkubectl get svc seldon-mesh -n seldon-mesh -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n\n\nIf you are not using a LoadBalancer for the seldon-mesh Service, you can still send inference requests.\nFor development and testing purposes, you can port-forward the Service locally using the below.\nInference requests can then be sent to localhost:8080.\nkubectl port-forward svc/seldon-mesh -n seldon-mesh 8080:80\n\n\nIf you are using a service mesh like Istio or Ambassador, you will need to use the IP address of the service mesh ingress and determine the appropriate port.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "af085bfd-9c31-4c56-adca-2fd718b30d58", "page": "inference", "section": "make-inference-requests", "text": "\nMake Inference Requests\u00b6\nLet us imagine making inference requests to a model called iris.\nThis iris model has the following schema, which can be set in a model-settings.json file for MLServer:\n{\n    \"name\": \"iris\",\n    \"implementation\": \"mlserver_sklearn.SKLearnModel\",\n    \"inputs\": [\n        {\n            \"name\": \"predict\",\n            \"datatype\": \"FP32\",\n            \"shape\": [-1, 4]\n        }\n    ],\n    \"outputs\": [\n        {\n            \"name\": \"predict\",\n            \"datatype\": \"INT64\",\n            \"shape\": [-1, 1]\n        }\n    ],\n    \"parameters\": {\n        \"version\": \"1\"\n    }\n}\n\n\nExamples are given below for some common tools for making requests.\n\nSeldon CLIcURLgrpcurlPython tritonclientAn example seldon request might look like this:\nseldon model infer iris \\\n        '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nThe default inference mode is REST, but you can also send gRPC requests like this:\nseldon model infer iris \\\n        --inference-mode", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "61e8560a-7bb4-4d5f-b583-ca7f95bf6963", "page": "inference", "section": "make-inference-requests", "text": "common tools for making requests.\n\nSeldon CLIcURLgrpcurlPython tritonclientAn example seldon request might look like this:\nseldon model infer iris \\\n        '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nThe default inference mode is REST, but you can also send gRPC requests like this:\nseldon model infer iris \\\n        --inference-mode grpc \\\n        '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nAn example curl request might look like this:\ncurl -v http://0.0.0.0:9000/v2/models/iris/infer \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nAn example grpcurl request might look like this:\ngrpcurl \\\n\t-d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n\t-plaintext \\\n\t-import-path apis \\\n\t-proto apis/mlops/v2_dataplane/v2_dataplane.proto \\\n\t0.0.0.0:9000 inference.GRPCInferenceService/ModelInfer\n\n\nThe above request was run from the project root folder allowing reference to the Protobuf manifests defined in the apis/ folder.\nYou can use the Python tritonclient package to send inference requests.\nA short, self-contained example is:\nimport tritonclient.http as httpclient\nimport numpy as np\n\nclient = httpclient.InferenceServerClient(\n    url=\"localhost:8080\",\n    verbose=False,\n)\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\"iris\", inputs)\nprint(\"result is:\", result.as_numpy(\"predict\"))\n\n\n\n\nTip\nFor pipelines, a synchronous request is possible if the pipeline has an outputs section defined in its spec.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "3c14828e-7d7a-4a1d-ba90-79613473ba53", "page": "inference", "section": "request-routing", "text": "\nRequest Routing\u00b6\n\nSeldon Routes\u00b6\nSeldon needs to determine where to route requests to, as models and pipelines might have the same name.\nThere are two ways of doing this: header-based routing (preferred) and path-based routing.\n\nHeadersPathsSeldon can route requests to the correct endpoint via headers in HTTP calls, both for REST (HTTP/1.1) and gRPC (HTTP/2).\nUse the Seldon-Model header as follows:\n\nFor models, use the model name as the value.\nFor example, to send requests to a model named foo use the header Seldon-Model: foo.\nFor pipelines, use the pipeline name followed by .pipeline as the value.\nFor example, to send requests to a pipeline named foo use the header Seldon-Model: foo.pipeline.\n\nThe seldon CLI is aware of these rules and can be used to easily send requests to your deployed resources.\nSee the examples and the Seldon CLI docs for more information.\nThe inference v2 protocol is only aware of models, thus has no concept of pipelines.\nSeldon works around this limitation by introducing virtual endpoints for pipelines.\nVirtual means that Seldon understands them, but other v2 protocol-compatible components like inference servers do not.\nUse the following rules for paths to route to models and pipelines:\n\nFor models, use the path prefix /v2/models/{model name}.\nThis is normal usage of the inference v2 protocol.\nFor pipelines, you can use the path prefix /v2/pipelines/{pipeline name}.\nOtherwise calling pipelines looks just like the inference v2 protocol for models.\nDo not use any suffix for the pipeline name as you would for routing headers.\nFor pipelines, you can also use the path prefix /v2/models/{pipeline name}.pipeline.\nAgain, this form looks just like the inference v2 protocol for models.\n\n\nExtending our examples from above,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "17b81133-af0e-44b9-ae14-5e7332602f04", "page": "inference", "section": "request-routing", "text": "of the inference v2 protocol.\nFor pipelines, you can use the path prefix /v2/pipelines/{pipeline name}.\nOtherwise calling pipelines looks just like the inference v2 protocol for models.\nDo not use any suffix for the pipeline name as you would for routing headers.\nFor pipelines, you can also use the path prefix /v2/models/{pipeline name}.pipeline.\nAgain, this form looks just like the inference v2 protocol for models.\n\n\nExtending our examples from above, the requests may look like the below when using header-based routing.\n\nSeldon CLIcURLgrpcurlPython tritonclientNo changes are required as the seldon CLI already understands how to set the appropriate gRPC and REST headers.\nNote the header in the last line:\ncurl -v http://0.0.0.0:9000/v2/models/iris/infer \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}' \\\n        -H \"Seldon-Model: iris\"\n\n\nNote the rpc-header flag in the penultimate line:\ngrpcurl \\\n\t-d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n\t-plaintext \\\n\t-import-path apis \\\n\t-proto apis/mlops/v2_dataplane/v2_dataplane.proto \\\n\t-rpc-header seldon-model:iris \\\n\t0.0.0.0:9000 inference.GRPCInferenceService/ModelInfer\n\n\nNote the headers dictionary in the client.infer() call:\nimport tritonclient.http as httpclient\nimport numpy as np\n\nclient = httpclient.InferenceServerClient(\n    url=\"localhost:8080\",\n    verbose=False,\n)\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\n    \"iris\",\n    inputs,\n    headers={\"Seldon-Model\": \"iris\"},\n)\nprint(\"result is:\", result.as_numpy(\"predict\"))\n\n\n\n\n\nIngress Routes\u00b6\nIf you are using an ingress controller to make inference requests with Seldon, you will need to configure the routing rules correctly.\nThere are many ways to do this, but custom path prefixes will not work", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "2da44145-f579-41e7-b541-cc7a45153474", "page": "inference", "section": "request-routing", "text": "\"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\n    \"iris\",\n    inputs,\n    headers={\"Seldon-Model\": \"iris\"},\n)\nprint(\"result is:\", result.as_numpy(\"predict\"))\n\n\n\n\n\nIngress Routes\u00b6\nIf you are using an ingress controller to make inference requests with Seldon, you will need to configure the routing rules correctly.\nThere are many ways to do this, but custom path prefixes will not work with gRPC.\nThis is because gRPC determines the path based on the Protobuf definition.\nSome gRPC implementations permit manipulating paths when sending requests, but this is by no means universal.\nIf you want to expose your inference endpoints via gRPC and REST in a consistent way, you should use virtual hosts, subdomains, or headers.\nThe downside of using only paths is that you cannot differentiate between different installations of Seldon Core v2 or between traffic to Seldon and any other inference endpoints you may have exposed via the same ingress.\nYou might want to use a mixture of these methods; the choice is yours.\n\nVirtual HostsSubdomainsHeadersPathsVirtual hosts are a way of differentiating between logical services accessed via the same physical machine(s).\nVirtual hosts are defined by the Host header for HTTP/1 and the :authority pseudo-header for HTTP/2.\nThese represent the same thing, and the HTTP/2 specification defines how to translate these when converting between protocol versions.\nMany tools and libraries treat these headers as special and have particular ways of handling them.\nSome common ones are given below:\n\nThe seldon CLI has an --authority flag which applies to both REST and gRPC inference calls.\ncurl accepts Host as a normal header.\ngrpcurl has an -authority", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "e332c8f3-694c-44e0-a03f-7823e8b1bbf2", "page": "inference", "section": "request-routing", "text": "for HTTP/2.\nThese represent the same thing, and the HTTP/2 specification defines how to translate these when converting between protocol versions.\nMany tools and libraries treat these headers as special and have particular ways of handling them.\nSome common ones are given below:\n\nThe seldon CLI has an --authority flag which applies to both REST and gRPC inference calls.\ncurl accepts Host as a normal header.\ngrpcurl has an -authority flag.\nIn Go, the standard library\u2019s http.Request struct has a Host field and ignores attempts to set this value via headers.\nIn Python, the requests library accepts the host as a normal header.\n\nBe sure to check the documentation for how to set this with your preferred tools and languages.\nSubdomain names constitute a part of the overall host name.\nAs such, specifying a subdomain name for requests will involve setting the appropriate host in the URI.\nFor example, you may expose inference services in the namespaces seldon-1 and seldon-2 as in the following snippets:\ncurl https://seldon-1.example.com/v2/models/iris/infer ...\n\nseldon model infer --inference-host https://seldon-2.example.com/v2/models/iris/infer ...\n\n\nMany popular ingresses support subdomain-based routing, including Istio and Nginx.\nPlease refer to the documentation for your ingress of choice for further information.\nMany ingress controllers and service meshes support routing on headers.\nYou can use whatever headers you prefer, so long as they do not conflict with any Seldon relies upon.\nMany tools and libraries support adding custom headers to requests.\nSome common ones are given below:\n\nThe seldon CLI accepts headers using the --header flag, which can be specified multiple times.\ncurl accepts headers using the -H or --header flags.\ngrpcurl accepts headers using the -H flag, which can be specified multiple times.\n\nIt", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "5d4f6a71-e1fc-47ac-a5d7-454e69e913b6", "page": "inference", "section": "request-routing", "text": "whatever headers you prefer, so long as they do not conflict with any Seldon relies upon.\nMany tools and libraries support adding custom headers to requests.\nSome common ones are given below:\n\nThe seldon CLI accepts headers using the --header flag, which can be specified multiple times.\ncurl accepts headers using the -H or --header flags.\ngrpcurl accepts headers using the -H flag, which can be specified multiple times.\n\nIt is possible to route on paths by using well-known path prefixes defined by the inference v2 protocol.\nFor gRPC, the full path (or \u201cmethod\u201d) for an inference call is:\n/inference.GRPCInferenceService/ModelInfer\n\n\nThis corresponds to the package (inference), service (GRPCInferenceService), and RPC name (ModelInfer) in the Protobuf definition of the inference v2 protocol.\nYou could use an exact match or a regex like .*inference.* to match this path, for example.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "db7709b4-8bac-4ff6-9158-5016f0645621", "page": "inference", "section": "seldon-routes", "text": "\nSeldon Routes\u00b6\nSeldon needs to determine where to route requests to, as models and pipelines might have the same name.\nThere are two ways of doing this: header-based routing (preferred) and path-based routing.\n\nHeadersPathsSeldon can route requests to the correct endpoint via headers in HTTP calls, both for REST (HTTP/1.1) and gRPC (HTTP/2).\nUse the Seldon-Model header as follows:\n\nFor models, use the model name as the value.\nFor example, to send requests to a model named foo use the header Seldon-Model: foo.\nFor pipelines, use the pipeline name followed by .pipeline as the value.\nFor example, to send requests to a pipeline named foo use the header Seldon-Model: foo.pipeline.\n\nThe seldon CLI is aware of these rules and can be used to easily send requests to your deployed resources.\nSee the examples and the Seldon CLI docs for more information.\nThe inference v2 protocol is only aware of models, thus has no concept of pipelines.\nSeldon works around this limitation by introducing virtual endpoints for pipelines.\nVirtual means that Seldon understands them, but other v2 protocol-compatible components like inference servers do not.\nUse the following rules for paths to route to models and pipelines:\n\nFor models, use the path prefix /v2/models/{model name}.\nThis is normal usage of the inference v2 protocol.\nFor pipelines, you can use the path prefix /v2/pipelines/{pipeline name}.\nOtherwise calling pipelines looks just like the inference v2 protocol for models.\nDo not use any suffix for the pipeline name as you would for routing headers.\nFor pipelines, you can also use the path prefix /v2/models/{pipeline name}.pipeline.\nAgain, this form looks just like the inference v2 protocol for models.\n\n\nExtending our examples from above, the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "f4f167eb-2746-48de-8dc6-52836ba23c3d", "page": "inference", "section": "seldon-routes", "text": "the inference v2 protocol.\nFor pipelines, you can use the path prefix /v2/pipelines/{pipeline name}.\nOtherwise calling pipelines looks just like the inference v2 protocol for models.\nDo not use any suffix for the pipeline name as you would for routing headers.\nFor pipelines, you can also use the path prefix /v2/models/{pipeline name}.pipeline.\nAgain, this form looks just like the inference v2 protocol for models.\n\n\nExtending our examples from above, the requests may look like the below when using header-based routing.\n\nSeldon CLIcURLgrpcurlPython tritonclientNo changes are required as the seldon CLI already understands how to set the appropriate gRPC and REST headers.\nNote the header in the last line:\ncurl -v http://0.0.0.0:9000/v2/models/iris/infer \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}' \\\n        -H \"Seldon-Model: iris\"\n\n\nNote the rpc-header flag in the penultimate line:\ngrpcurl \\\n\t-d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n\t-plaintext \\\n\t-import-path apis \\\n\t-proto apis/mlops/v2_dataplane/v2_dataplane.proto \\\n\t-rpc-header seldon-model:iris \\\n\t0.0.0.0:9000 inference.GRPCInferenceService/ModelInfer\n\n\nNote the headers dictionary in the client.infer() call:\nimport tritonclient.http as httpclient\nimport numpy as np\n\nclient = httpclient.InferenceServerClient(\n    url=\"localhost:8080\",\n    verbose=False,\n)\n\ninputs = [httpclient.InferInput(\"predict\", (1, 4), \"FP64\")]\ninputs[0].set_data_from_numpy(\n    np.array([[1, 2, 3, 4]]).astype(\"float64\"),\n    binary_data=False,\n)\n\nresult = client.infer(\n    \"iris\",\n    inputs,\n    headers={\"Seldon-Model\": \"iris\"},\n)\nprint(\"result is:\", result.as_numpy(\"predict\"))\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "3a3b7086-b9e2-4085-bc46-206851d8a0e7", "page": "inference", "section": "ingress-routes", "text": "\nIngress Routes\u00b6\nIf you are using an ingress controller to make inference requests with Seldon, you will need to configure the routing rules correctly.\nThere are many ways to do this, but custom path prefixes will not work with gRPC.\nThis is because gRPC determines the path based on the Protobuf definition.\nSome gRPC implementations permit manipulating paths when sending requests, but this is by no means universal.\nIf you want to expose your inference endpoints via gRPC and REST in a consistent way, you should use virtual hosts, subdomains, or headers.\nThe downside of using only paths is that you cannot differentiate between different installations of Seldon Core v2 or between traffic to Seldon and any other inference endpoints you may have exposed via the same ingress.\nYou might want to use a mixture of these methods; the choice is yours.\n\nVirtual HostsSubdomainsHeadersPathsVirtual hosts are a way of differentiating between logical services accessed via the same physical machine(s).\nVirtual hosts are defined by the Host header for HTTP/1 and the :authority pseudo-header for HTTP/2.\nThese represent the same thing, and the HTTP/2 specification defines how to translate these when converting between protocol versions.\nMany tools and libraries treat these headers as special and have particular ways of handling them.\nSome common ones are given below:\n\nThe seldon CLI has an --authority flag which applies to both REST and gRPC inference calls.\ncurl accepts Host as a normal header.\ngrpcurl has an -authority flag.\nIn Go, the standard library\u2019s http.Request struct has a Host field and ignores attempts to set this value via headers.\nIn Python, the requests library accepts the host as", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "d448609b-799f-4cb6-8d8b-c81c6c747b6f", "page": "inference", "section": "ingress-routes", "text": "and have particular ways of handling them.\nSome common ones are given below:\n\nThe seldon CLI has an --authority flag which applies to both REST and gRPC inference calls.\ncurl accepts Host as a normal header.\ngrpcurl has an -authority flag.\nIn Go, the standard library\u2019s http.Request struct has a Host field and ignores attempts to set this value via headers.\nIn Python, the requests library accepts the host as a normal header.\n\nBe sure to check the documentation for how to set this with your preferred tools and languages.\nSubdomain names constitute a part of the overall host name.\nAs such, specifying a subdomain name for requests will involve setting the appropriate host in the URI.\nFor example, you may expose inference services in the namespaces seldon-1 and seldon-2 as in the following snippets:\ncurl https://seldon-1.example.com/v2/models/iris/infer ...\n\nseldon model infer --inference-host https://seldon-2.example.com/v2/models/iris/infer ...\n\n\nMany popular ingresses support subdomain-based routing, including Istio and Nginx.\nPlease refer to the documentation for your ingress of choice for further information.\nMany ingress controllers and service meshes support routing on headers.\nYou can use whatever headers you prefer, so long as they do not conflict with any Seldon relies upon.\nMany tools and libraries support adding custom headers to requests.\nSome common ones are given below:\n\nThe seldon CLI accepts headers using the --header flag, which can be specified multiple times.\ncurl accepts headers using the -H or --header flags.\ngrpcurl accepts headers using the -H flag, which can be specified multiple times.\n\nIt is possible to route on paths by using well-known path prefixes defined by the inference v2 protocol.\nFor gRPC, the full path (or \u201cmethod\u201d) for an inference call is:\n/inference.GRPCInferenceService/ModelInfer\n\n\nThis", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "b376fb91-967d-4cd4-95f5-d165d4b3e047", "page": "inference", "section": "ingress-routes", "text": "given below:\n\nThe seldon CLI accepts headers using the --header flag, which can be specified multiple times.\ncurl accepts headers using the -H or --header flags.\ngrpcurl accepts headers using the -H flag, which can be specified multiple times.\n\nIt is possible to route on paths by using well-known path prefixes defined by the inference v2 protocol.\nFor gRPC, the full path (or \u201cmethod\u201d) for an inference call is:\n/inference.GRPCInferenceService/ModelInfer\n\n\nThis corresponds to the package (inference), service (GRPCInferenceService), and RPC name (ModelInfer) in the Protobuf definition of the inference v2 protocol.\nYou could use an exact match or a regex like .*inference.* to match this path, for example.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "fe5078e0-9763-45a7-a708-29a8d8f6e98e", "page": "inference", "section": "asynchronous-requests", "text": "\nAsynchronous Requests\u00b6\nThe Seldon architecture uses Kafka and therefore asynchronous requests can be sent by pushing inference v2 protocol payloads to the appropriate topic.\nTopics have the following form:\nseldon.<namespace>.<model|pipeline>.<name>.<inputs|outputs>\n\n\n\nNote\nIf writing to a pipeline topic, you will need to include a Kafka header with the key pipeline and the value being the name of the pipeline.\n\n\nModel Inference\u00b6\nFor a local install if you have a model iris, you would be able to send a prediction request by pushing to the topic: seldon.default.model.iris.inputs.\nThe response will appear on seldon.default.model.iris.outputs.\nFor a Kubernetes install in seldon-mesh if you have a model iris, you would be able to send a prediction request by pushing to the topic: seldon.seldon-mesh.model.iris.inputs.\nThe response will appear on seldon.seldon-mesh.model.iris.outputs.\n\n\nPipeline Inference\u00b6\nFor a local install if you have a pipeline mypipeline, you would be able to send a prediction request by pushing to the topic: seldon.default.pipeline.mypipeline.inputs. The response will appear on seldon.default.pipeline.mypipeline.outputs.\nFor a Kubernetes install in seldon-mesh if you have a pipeline mypipeline, you would be able to send a prediction request by pushing to the topic: seldon.seldon-mesh.pipeline.mypipeline.inputs. The response will appear on seldon.seldon-mesh.pipeline.mypipeline.outputs.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "a20b16bf-f923-4440-bbab-112a7d3e3f86", "page": "inference", "section": "pipeline-metadata", "text": "\nPipeline Metadata\u00b6\nIt may be useful to send metadata alongside your inference.\nIf using Kafka directly as described above, you can attach Kafka metadata to your request, which will be passed around the graph.\nWhen making synchronous requests to your pipeline with REST or gRPC you can also do this.\n\nFor REST requests add HTTP headers prefixed with X-\nFor gRPC requests add metadata with keys starting with X-\n\nYou can also do this with the Seldon CLI by setting headers with the --header argument (and also showing response headers with the --show-headers argument)\nseldon pipeline infer --show-headers --header X-foo=bar tfsimples \\\n    '{\"inputs\":[{\"name\":\"INPUT0\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]},{\"name\":\"INPUT1\",\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"datatype\":\"INT32\",\"shape\":[1,16]}]}'\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "0c07b968-3c91-41b1-a915-2e4ea19ba546", "page": "inference", "section": "request-ids", "text": "\nRequest IDs\u00b6\nFor both model and pipeline requests the response will contain a x-request-id response header. For pipeline requests this can be used to inspect the pipeline steps via the CLI, e.g.:\nseldon pipeline inspect tfsimples --request-id carjjolvqj3j2pfbut10 --offset 10\n\n\nThe --offset parameter specifies how many messages (from the latest) you want to search to find your request. If not specified the last request will be shown.\nx-request-id will also appear in tracing spans.\nIf x-request-id is passed in by the caller then this will be used. It is the caller\u2019s responsibility to ensure it is unique.\nThe IDs generated are XIDs.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/inference/index.html", "key": "inference"}}, {"key": "9104088b-272b-4125-a076-7bdd3d5d8255", "page": "getting-started/kubernetes-installation/security", "section": "security", "text": "\nSecurity\u00b6\nSeldon can be run with secure control plane and data plane operations. There are three areas of concern:\n\nControl Plane\nKafka\nData Plane\n\nThe various communication points between services are shown in the diagram below:\n\n\nControl Plane\u00b6\nTLS control plane activation is switched on and off via the environment variable: CONTROL_PLANE_SECURITY_PROTOCOL whose values can be PLAINTEXT or SSL.\nCertificates will be loaded and used for the control plane gRPC services. The secrets or folders will be watched for updates (on certificate renewal) and automatically loaded again.\n\nHelm Control Plane Install\u00b6\nWhen installing seldon-core-v2-setup you can set the secret names for your certificates. If using cert-manager example discussed below this would be as follows:\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh \\\n      --set security.controlplane.protocol=SSL\n\n\n\n\n\nKafka\u00b6\nKafka secure activation is switched on and off via the environment variable: KAFKA_SECURITY_PROTOCOL whose values can be PLAINTEXT, SSL or SASL_SSL.\nExamples are shown below:\n\nmTLS Strimzi example\nmTLS AWS MSK example\nSASL PLAIN with Confluent Cloud example\nSASL PLAIN with Azure Event Hub example\nSASL SCRAM with Strimzi example\nSASL SCRAM with AWS MSK example\nSASL OAUTH with Confluent Cloud example\n\n\n\nData Plane\u00b6\nTLS Data plane activation is switched on and off via the environment variable: ENVOY_SECURITY_PROTOCOL whose values can be PLAINTEXT or SSL.\nWhen activated this ensures TLS is used to communicate to Envoy via the xDS server as well as using the SDS service to send cretificates to envoy to use for  upstream and downstream networking. Downstream is the external access to Seldon and upstream is the path from Envoy to the model servers or pipeline gateway.\n\nHelm Data Plane Install\u00b6\nWhen installing seldon-core-v2-setup you can set data plane", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/index.html", "key": "getting-started/kubernetes-installation/security"}}, {"key": "579f9d8d-a5b9-469f-a7c8-56429614c3f3", "page": "getting-started/kubernetes-installation/security", "section": "security", "text": "this ensures TLS is used to communicate to Envoy via the xDS server as well as using the SDS service to send cretificates to envoy to use for  upstream and downstream networking. Downstream is the external access to Seldon and upstream is the path from Envoy to the model servers or pipeline gateway.\n\nHelm Data Plane Install\u00b6\nWhen installing seldon-core-v2-setup you can set data plane operations to TLS as below. This assumes the secrets installed by the helm chart at the end of this section.\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh --set security.envoy.protocol=SSL\n\n\nThe above uses default secret names defined for the certificates installed. You can change the names of the required certificate secrets as shown in a longer configuration below (again using the default names for illustration).\nFor this we use the following updated Helm values (k8s/samples/values-tls-dataplane-example.yaml):\nsecurity:\n  controlplane:\n    protocol: PLAINTEXT\n    ssl:\n      server:\n        secret: seldon-controlplane-server\n        clientValidationSecret: seldon-controlplane-client\n      client:\n        secret: seldon-controlplane-client\n        serverValidationSecret: seldon-controlplane-server\n  envoy:\n    protocol: SSL\n    ssl:\n      upstream:\n        server:\n          secret: seldon-upstream-server\n          clientValidationSecret: seldon-upstream-client\n        client:\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/index.html", "key": "getting-started/kubernetes-installation/security"}}, {"key": "e8118fe9-e494-4036-83c2-e54a7ef7e0a1", "page": "getting-started/kubernetes-installation/security", "section": "security", "text": "seldon-controlplane-server\n  envoy:\n    protocol: SSL\n    ssl:\n      upstream:\n        server:\n          secret: seldon-upstream-server\n          clientValidationSecret: seldon-upstream-client\n        client:\n          secret: seldon-upstream-client\n          serverValidationSecret: seldon-upstream-server\n      downstream:\n        client:\n          serverValidationSecret: seldon-downstream-server\n        server: \n          secret: seldon-downstream-server\n\n\nWe use Envoy internally to direct traffic and in Envoy\u2019s terminology upstream is for internal model servers called from Envoy while the downstream server is the entrypoint server running in Envoy to receive grpc and REST calls. The above settings ensure mTLS for internal \u201cupstream\u201d traffic while provides a standard SSL non-mTLS entrpoint.\nTo use the above with the seldon CLI you would need a custom config file as follow:\n{\n    \"dataplane\": {\n\t\"tls\": true,\n\t\"skipSSLVerify\": true\n    }\n}\n\n\nWe skip SSL Verify as these are internal self-signed certificates. For production use you would change this to the correct DNS name you are exposing the Seldon entrypoint.\n\n\n\nCetificate Providers\u00b6\nThe installer/cluster controller for Seldon needs to provide the certificates. As part of Seldon we provide an example set of certificate issuers and certificates using cert-manager.\n\nHelm\u00b6\nYou can", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/index.html", "key": "getting-started/kubernetes-installation/security"}}, {"key": "30f412f0-6bf5-4adb-ad44-89b79e4cec66", "page": "getting-started/kubernetes-installation/security", "section": "security", "text": "  \"dataplane\": {\n\t\"tls\": true,\n\t\"skipSSLVerify\": true\n    }\n}\n\n\nWe skip SSL Verify as these are internal self-signed certificates. For production use you would change this to the correct DNS name you are exposing the Seldon entrypoint.\n\n\n\nCetificate Providers\u00b6\nThe installer/cluster controller for Seldon needs to provide the certificates. As part of Seldon we provide an example set of certificate issuers and certificates using cert-manager.\n\nHelm\u00b6\nYou can install Certificates into the desired namespace, here we use seldon-mesh as an example.\nhelm install seldon-v2-certs k8s/helm-charts/seldon-core-v2-certs/ -n seldon-mesh\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/index.html", "key": "getting-started/kubernetes-installation/security"}}, {"key": "35bc3dfc-e471-465f-8909-65b2eb80e09a", "page": "getting-started/kubernetes-installation/security", "section": "control-plane", "text": "\nControl Plane\u00b6\nTLS control plane activation is switched on and off via the environment variable: CONTROL_PLANE_SECURITY_PROTOCOL whose values can be PLAINTEXT or SSL.\nCertificates will be loaded and used for the control plane gRPC services. The secrets or folders will be watched for updates (on certificate renewal) and automatically loaded again.\n\nHelm Control Plane Install\u00b6\nWhen installing seldon-core-v2-setup you can set the secret names for your certificates. If using cert-manager example discussed below this would be as follows:\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh \\\n      --set security.controlplane.protocol=SSL\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/index.html", "key": "getting-started/kubernetes-installation/security"}}, {"key": "d110c6f5-bba0-41e5-93f5-28ca014050a2", "page": "getting-started/kubernetes-installation/security", "section": "data-plane", "text": "\nData Plane\u00b6\nTLS Data plane activation is switched on and off via the environment variable: ENVOY_SECURITY_PROTOCOL whose values can be PLAINTEXT or SSL.\nWhen activated this ensures TLS is used to communicate to Envoy via the xDS server as well as using the SDS service to send cretificates to envoy to use for  upstream and downstream networking. Downstream is the external access to Seldon and upstream is the path from Envoy to the model servers or pipeline gateway.\n\nHelm Data Plane Install\u00b6\nWhen installing seldon-core-v2-setup you can set data plane operations to TLS as below. This assumes the secrets installed by the helm chart at the end of this section.\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh --set security.envoy.protocol=SSL\n\n\nThe above uses default secret names defined for the certificates installed. You can change the names of the required certificate secrets as shown in a longer configuration below (again using the default names for illustration).\nFor this we use the following updated Helm values (k8s/samples/values-tls-dataplane-example.yaml):\nsecurity:\n  controlplane:\n    protocol: PLAINTEXT\n    ssl:\n      server:\n        secret: seldon-controlplane-server\n        clientValidationSecret: seldon-controlplane-client\n      client:\n        secret: seldon-controlplane-client\n        serverValidationSecret: seldon-controlplane-server\n  envoy:\n    protocol: SSL\n    ssl:\n      upstream:\n        server:\n          secret: seldon-upstream-server\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/index.html", "key": "getting-started/kubernetes-installation/security"}}, {"key": "57a4a5c8-632a-4a77-b9bb-a2032fd51255", "page": "getting-started/kubernetes-installation/security", "section": "data-plane", "text": "     client:\n        secret: seldon-controlplane-client\n        serverValidationSecret: seldon-controlplane-server\n  envoy:\n    protocol: SSL\n    ssl:\n      upstream:\n        server:\n          secret: seldon-upstream-server\n          clientValidationSecret: seldon-upstream-client\n        client:\n          secret: seldon-upstream-client\n          serverValidationSecret: seldon-upstream-server\n      downstream:\n        client:\n          serverValidationSecret: seldon-downstream-server\n        server: \n          secret: seldon-downstream-server\n\n\nWe use Envoy internally to direct traffic and in Envoy\u2019s terminology upstream is for internal model servers called from Envoy while the downstream server is the entrypoint server running in Envoy to receive grpc and REST calls. The above settings ensure mTLS for internal \u201cupstream\u201d traffic while provides a standard SSL non-mTLS entrpoint.\nTo use the above with the seldon CLI you would need a custom config file as follow:\n{\n    \"dataplane\": {\n\t\"tls\": true,\n\t\"skipSSLVerify\": true\n    }\n}\n\n\nWe skip SSL Verify as these are internal self-signed certificates. For production use you would change this to the correct DNS name you are exposing the Seldon entrypoint.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/index.html", "key": "getting-started/kubernetes-installation/security"}}, {"key": "7f33ca60-b84d-4ce4-97ed-8f170ca0a38d", "page": "getting-started/kubernetes-installation/security", "section": "helm-data-plane-install", "text": "\nHelm Data Plane Install\u00b6\nWhen installing seldon-core-v2-setup you can set data plane operations to TLS as below. This assumes the secrets installed by the helm chart at the end of this section.\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh --set security.envoy.protocol=SSL\n\n\nThe above uses default secret names defined for the certificates installed. You can change the names of the required certificate secrets as shown in a longer configuration below (again using the default names for illustration).\nFor this we use the following updated Helm values (k8s/samples/values-tls-dataplane-example.yaml):\nsecurity:\n  controlplane:\n    protocol: PLAINTEXT\n    ssl:\n      server:\n        secret: seldon-controlplane-server\n        clientValidationSecret: seldon-controlplane-client\n      client:\n        secret: seldon-controlplane-client\n        serverValidationSecret: seldon-controlplane-server\n  envoy:\n    protocol: SSL\n    ssl:\n      upstream:\n        server:\n          secret: seldon-upstream-server\n          clientValidationSecret: seldon-upstream-client\n        client:\n          secret: seldon-upstream-client\n          serverValidationSecret: seldon-upstream-server\n      downstream:\n        client:\n          serverValidationSecret: seldon-downstream-server\n        server: \n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/index.html", "key": "getting-started/kubernetes-installation/security"}}, {"key": "fe55e73c-d437-4170-818e-4352894f206c", "page": "getting-started/kubernetes-installation/security", "section": "helm-data-plane-install", "text": "  client:\n          secret: seldon-upstream-client\n          serverValidationSecret: seldon-upstream-server\n      downstream:\n        client:\n          serverValidationSecret: seldon-downstream-server\n        server: \n          secret: seldon-downstream-server\n\n\nWe use Envoy internally to direct traffic and in Envoy\u2019s terminology upstream is for internal model servers called from Envoy while the downstream server is the entrypoint server running in Envoy to receive grpc and REST calls. The above settings ensure mTLS for internal \u201cupstream\u201d traffic while provides a standard SSL non-mTLS entrpoint.\nTo use the above with the seldon CLI you would need a custom config file as follow:\n{\n    \"dataplane\": {\n\t\"tls\": true,\n\t\"skipSSLVerify\": true\n    }\n}\n\n\nWe skip SSL Verify as these are internal self-signed certificates. For production use you would change this to the correct DNS name you are exposing the Seldon entrypoint.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/index.html", "key": "getting-started/kubernetes-installation/security"}}, {"key": "25933761-886e-4664-b811-9546297cf66b", "page": "examples/model-zoo", "section": "model-zoo", "text": "\nModel Zoo\u00b6\nRun these examples from the samples folder.\n\nSeldon Model Zoo\u00b6\nExamples of various model artifact types from various frameworks running under Seldon Core V2.\n\nSKlearn\nTensorflow\nXGBoost\nONNX\nLightgbm\nMLFlow\nPyTorch\n\nPython requirements in model-zoo-requirements.txt\n\nSKLearn Iris Classification Model\u00b6\nThe training code for this model can be found at ./scripts/models/iris\ncat ./models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nseldon model load -f ./models/sklearn-iris-gs.yaml\n\n\n{}\n\n\nseldon model status iris -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"09263298-ca66-49c5-acb9-0ca75b06f825\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload iris\n\n\n{}\n\n\n\n\nTensorflow CIFAR10 Image Classification Model\u00b6\nimport requests\nimport json\nfrom typing import Dict, List\nimport numpy as np\nimport os\nimport tensorflow as tf\nfrom alibi_detect.utils.perturbation import apply_mask\nfrom alibi_detect.datasets import fetch_cifar10c\nimport matplotlib.pyplot as plt\ntf.keras.backend.clear_session()\n\n\n2023-03-09 19:43:43.637892: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n2023-03-09 19:43:43.637906: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n\n\n\ntrain, test = tf.keras.datasets.cifar10.load_data()\nX_train, y_train = train\nX_test, y_test = test\n\nX_train = X_train.astype('float32') / 255\nX_test = X_test.astype('float32') / 255\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nclasses = (\n    \"plane\",\n    \"car\",\n    \"bird\",\n    \"cat\",\n    \"deer\",\n    \"dog\",\n    \"frog\",\n    \"horse\",\n    \"ship\",\n    \"truck\",\n)\n\n\n\n(50000, 32, 32, 3) (50000, 1) (10000, 32, 32, 3) (10000, 1)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\ndef infer(resourceName: str, idx: int):\n    rows = X_train[idx:idx+1]\n    show(rows[0])\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "aaa62c22-bd06-4f02-89f5-8acaa9dd505a", "page": "examples/model-zoo", "section": "model-zoo", "text": "  \"car\",\n    \"bird\",\n    \"cat\",\n    \"deer\",\n    \"dog\",\n    \"frog\",\n    \"horse\",\n    \"ship\",\n    \"truck\",\n)\n\n\n\n(50000, 32, 32, 3) (50000, 1) (10000, 32, 32, 3) (10000, 1)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\ndef infer(resourceName: str, idx: int):\n    rows = X_train[idx:idx+1]\n    show(rows[0])\n    reqJson[\"inputs\"][0][\"data\"] = rows.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [1, 32, 32, 3]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":resourceName}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    probs = np.array(response_raw.json()[\"outputs\"][0][\"data\"])\n    print(classes[probs.argmax(axis=0)])\n\n\ndef show(X):\n    plt.imshow(X.reshape(32, 32, 3))\n    plt.axis(\"off\")\n    plt.show()\n\n\n\ncat ./models/cifar10-no-config.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/tensorflow/cifar10\"\n  requirements:\n  - tensorflow\n\n\nseldon model load -f ./models/cifar10-no-config.yaml\n\n\n{}\n\n\nseldon model status cifar10 -w ModelAvailable | jq -M .\n\n\n{}\n\n\ninfer(\"cifar10\",4)\n\n\n![png](model-zoo_files/model-zoo_14_0.png)\n\n\n\ncar\n\n\n\nseldon model unload cifar10\n\n\n{}\n\n\n\n\nXGBoost Model\u00b6\nThe training code for this model can be found at ./scripts/models/income-xgb\ncat ./models/income-xgb.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-xgb\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/income-xgb\"\n  requirements:\n  - xgboost\n\n\nseldon model load -f ./models/income-xgb.yaml\n\n\n{}\n\n\nseldon model status income-xgb -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer income-xgb \\\n  '{ \"parameters\": {\"content_type\": \"pd\"}, \"inputs\": [{\"name\": \"Age\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [47]},{\"name\": \"Workclass\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Education\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Marital Status\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Occupation\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Relationship\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [3]},{\"name\": \"Race\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "a04f7737-5e38-4558-880f-f28700f9ac45", "page": "examples/model-zoo", "section": "model-zoo", "text": " '{ \"parameters\": {\"content_type\": \"pd\"}, \"inputs\": [{\"name\": \"Age\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [47]},{\"name\": \"Workclass\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Education\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Marital Status\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Occupation\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Relationship\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [3]},{\"name\": \"Race\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Sex\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Capital Gain\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Capital Loss\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Hours per week\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [40]},{\"name\": \"Country\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [9]}]}'\n\n\n{\n\t\"model_name\": \"income-xgb_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"e30c3b44-fa14-4e5f-88f5-d6f4d287da20\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"FP32\",\n\t\t\t\"data\": [\n\t\t\t\t-1.8380107879638672\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload income-xgb\n\n\n{}\n\n\n\n\n\nONNX MNIST Model\u00b6\nThis model is a pretrained model as defined in ./scripts/models/Makefile target mnist-onnx\nimport matplotlib.pyplot as plt\nimport json\nimport requests\nfrom torchvision.datasets import MNIST\nfrom torchvision.transforms import ToTensor\nfrom torchvision import transforms\nfrom torch.utils.data import DataLoader\nimport numpy as np\ntraining_data = MNIST(\n    root=\".\",\n    download=True,\n    train=False,\n    transform = transforms.Compose([\n              transforms.ToTensor()\n          ])\n)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"Input3\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ndl = DataLoader(training_data, batch_size=1, shuffle=False)\ndlIter = iter(dl)\n\ndef infer_mnist():\n    x, y = next(dlIter)\n    data = x.cpu().numpy()\n    reqJson[\"inputs\"][0][\"data\"] = data.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [1, 1, 28, 28]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":\"mnist-onnx\"}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    show_mnist(x)\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "39de570e-9aaf-4289-ac8d-95bc411d9a1d", "page": "examples/model-zoo", "section": "model-zoo", "text": "    ])\n)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"Input3\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ndl = DataLoader(training_data, batch_size=1, shuffle=False)\ndlIter = iter(dl)\n\ndef infer_mnist():\n    x, y = next(dlIter)\n    data = x.cpu().numpy()\n    reqJson[\"inputs\"][0][\"data\"] = data.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [1, 1, 28, 28]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":\"mnist-onnx\"}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    show_mnist(x)\n    probs = np.array(response_raw.json()[\"outputs\"][0][\"data\"])\n    print(probs.argmax(axis=0))\n\n\ndef show_mnist(X):\n    plt.imshow(X.reshape(28, 28))\n    plt.axis(\"off\")\n    plt.show()\n\n\ncat ./models/mnist-onnx.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mnist-onnx\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mnist-onnx\"\n  requirements:\n  - onnx\n\n\nseldon model load -f ./models/mnist-onnx.yaml\n\n\n{}\n\n\nseldon model status mnist-onnx -w ModelAvailable | jq -M .\n\n\n{}\n\n\ninfer_mnist()\n\n\n![png](model-zoo_files/model-zoo_28_0.png)\n\n\n\n7\n\n\n\nseldon model unload mnist-onnx\n\n\n{}\n\n\n\nLightGBM Model\u00b6\nThe training code for this model can be found at ./scripts/models/income-lgb\ncat ./models/income-lgb.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-lgb\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/income-lgb\"\n  requirements:\n  - lightgbm\n\n\nseldon model load -f ./models/income-lgb.yaml\n\n\n{}\n\n\nseldon model status income-lgb -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer income-lgb \\\n  '{ \"parameters\": {\"content_type\": \"pd\"}, \"inputs\": [{\"name\": \"Age\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [47]},{\"name\": \"Workclass\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Education\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Marital Status\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Occupation\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Relationship\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [3]},{\"name\": \"Race\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Sex\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Capital Gain\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Capital Loss\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Hours per week\", \"shape\": [1, 1],", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "f365676a-5c2b-47f0-b688-a5ad623de695", "page": "examples/model-zoo", "section": "model-zoo", "text": "Status\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Occupation\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Relationship\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [3]},{\"name\": \"Race\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Sex\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Capital Gain\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Capital Loss\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Hours per week\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [40]},{\"name\": \"Country\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [9]}]}'\n\n\n{\n\t\"model_name\": \"income-lgb_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"4437a71e-9af1-4e3b-aa4b-cb95d2cd86b9\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"FP64\",\n\t\t\t\"data\": [\n\t\t\t\t0.06279460120044741\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload income-lgb\n\n\n{}\n\n\n\n\nMLFlow Wine Model\u00b6\nThe training code for this model can be found at ./scripts/models/wine-mlflow\ncat ./models/wine-mlflow.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: wine\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/wine-mlflow\"\n  requirements:\n  - mlflow\n\n\nseldon model load -f ./models/wine-mlflow.yaml\n\n\n{}\n\n\nseldon model status wine -w ModelAvailable | jq -M .\n\n\n{}\n\n\nimport requests\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ninference_request = {\n    \"inputs\": [\n        {\n          \"name\": \"fixed acidity\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [7.4],\n        },\n        {\n          \"name\": \"volatile acidity\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.7000],\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "eb4c95a9-c651-4d2f-8872-a7c28c46d4d6", "page": "examples/model-zoo", "section": "model-zoo", "text": "     },\n        {\n          \"name\": \"volatile acidity\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.7000],\n        },\n        {\n          \"name\": \"citric acid\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0],\n        },\n        {\n          \"name\": \"residual sugar\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [1.9],\n        },\n        {\n          \"name\": \"chlorides\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.076],\n        },\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "9adc4254-c06a-4878-9994-6937420f50a3", "page": "examples/model-zoo", "section": "model-zoo", "text": "    {\n          \"name\": \"chlorides\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.076],\n        },\n        {\n          \"name\": \"free sulfur dioxide\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [11],\n        },\n        {\n          \"name\": \"total sulfur dioxide\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [34],\n        },\n        {\n          \"name\": \"density\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.9978],\n        },\n        {\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "1e90a2ab-cb03-44ed-8c51-2b4050551269", "page": "examples/model-zoo", "section": "model-zoo", "text": "      \"name\": \"density\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.9978],\n        },\n        {\n          \"name\": \"pH\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [3.51],\n        },\n        {\n          \"name\": \"sulphates\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.56],\n        },\n        {\n          \"name\": \"alcohol\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [9.4],\n        },\n    ]\n}\nheaders = {\"Content-Type\": \"application/json\", \"seldon-model\":\"wine\"}\nresponse_raw = requests.post(url, json=inference_request, headers=headers)\nprint(response_raw.json())\n\n\n{'model_name': 'wine_1', 'model_version': '1', 'id': '0d7e44f8-b46c-4438-b8af-a749e6aa6039', 'parameters': {}, 'outputs': [{'name': 'output-1', 'shape': [1, 1], 'datatype': 'FP64',", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "84b6c2e4-1cdd-430e-9bfb-185dc0dbc9e2", "page": "examples/model-zoo", "section": "model-zoo", "text": "     \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [9.4],\n        },\n    ]\n}\nheaders = {\"Content-Type\": \"application/json\", \"seldon-model\":\"wine\"}\nresponse_raw = requests.post(url, json=inference_request, headers=headers)\nprint(response_raw.json())\n\n\n{'model_name': 'wine_1', 'model_version': '1', 'id': '0d7e44f8-b46c-4438-b8af-a749e6aa6039', 'parameters': {}, 'outputs': [{'name': 'output-1', 'shape': [1, 1], 'datatype': 'FP64', 'data': [5.576883936610762]}]}\n\n\n\nseldon model unload wine\n\n\n{}\n\n\n\n\n\nPytorch MNIST Model\u00b6\nThis example model is downloaded and trained in ./scripts/models/Makefile target mnist-pytorch\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport json\nimport requests\nfrom torchvision.datasets import MNIST\nfrom torchvision.transforms import ToTensor\nfrom torchvision import transforms\nfrom torch.utils.data import DataLoader\ntraining_data = MNIST(\n    root=\".\",\n    download=True,\n    train=False,\n    transform = transforms.Compose([\n              transforms.ToTensor()\n          ])\n)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"x__0\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ndl = DataLoader(training_data, batch_size=1, shuffle=False)\ndlIter = iter(dl)\n\ndef infer_mnist():\n    x, y = next(dlIter)\n    data = x.cpu().numpy()\n    reqJson[\"inputs\"][0][\"data\"] = data.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [1, 1, 28, 28]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":\"mnist-pytorch\"}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    show_mnist(x)\n    probs = np.array(response_raw.json()[\"outputs\"][0][\"data\"])\n    print(probs.argmax(axis=0))\n\n\ndef show_mnist(X):\n    plt.imshow(X.reshape(28, 28))\n    plt.axis(\"off\")\n    plt.show()\n\n\ncat ./models/mnist-pytorch.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mnist-pytorch\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mnist-pytorch\"\n  requirements:\n  - pytorch\n\n\nseldon model load -f ./models/mnist-pytorch.yaml\n\n\n{}\n\n\nseldon model status mnist-pytorch -w ModelAvailable | jq -M .\n\n\n{}\n\n\ninfer_mnist()\n\n\n![png](model-zoo_files/model-zoo_48_0.png)\n\n\n\n7\n\n\n\nseldon model", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "d584f2c1-b1c8-4afa-8514-f8b8ce1027a2", "page": "examples/model-zoo", "section": "model-zoo", "text": "   response_raw = requests.post(url, json=reqJson, headers=headers)\n    show_mnist(x)\n    probs = np.array(response_raw.json()[\"outputs\"][0][\"data\"])\n    print(probs.argmax(axis=0))\n\n\ndef show_mnist(X):\n    plt.imshow(X.reshape(28, 28))\n    plt.axis(\"off\")\n    plt.show()\n\n\ncat ./models/mnist-pytorch.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mnist-pytorch\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mnist-pytorch\"\n  requirements:\n  - pytorch\n\n\nseldon model load -f ./models/mnist-pytorch.yaml\n\n\n{}\n\n\nseldon model status mnist-pytorch -w ModelAvailable | jq -M .\n\n\n{}\n\n\ninfer_mnist()\n\n\n![png](model-zoo_files/model-zoo_48_0.png)\n\n\n\n7\n\n\n\nseldon model unload mnist-pytorch\n\n\n{}\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "8cefb13b-a125-4020-88c4-b05dd07a3375", "page": "examples/model-zoo", "section": "seldon-model-zoo", "text": "\nSeldon Model Zoo\u00b6\nExamples of various model artifact types from various frameworks running under Seldon Core V2.\n\nSKlearn\nTensorflow\nXGBoost\nONNX\nLightgbm\nMLFlow\nPyTorch\n\nPython requirements in model-zoo-requirements.txt\n\nSKLearn Iris Classification Model\u00b6\nThe training code for this model can be found at ./scripts/models/iris\ncat ./models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nseldon model load -f ./models/sklearn-iris-gs.yaml\n\n\n{}\n\n\nseldon model status iris -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"09263298-ca66-49c5-acb9-0ca75b06f825\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload iris\n\n\n{}\n\n\n\n\nTensorflow CIFAR10 Image Classification Model\u00b6\nimport requests\nimport json\nfrom typing import Dict, List\nimport numpy as np\nimport os\nimport tensorflow as tf\nfrom alibi_detect.utils.perturbation import apply_mask\nfrom alibi_detect.datasets import fetch_cifar10c\nimport matplotlib.pyplot as plt\ntf.keras.backend.clear_session()\n\n\n2023-03-09 19:43:43.637892: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n2023-03-09 19:43:43.637906: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n\n\n\ntrain, test = tf.keras.datasets.cifar10.load_data()\nX_train, y_train = train\nX_test, y_test = test\n\nX_train = X_train.astype('float32') / 255\nX_test = X_test.astype('float32') / 255\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nclasses = (\n    \"plane\",\n    \"car\",\n    \"bird\",\n    \"cat\",\n    \"deer\",\n    \"dog\",\n    \"frog\",\n    \"horse\",\n    \"ship\",\n    \"truck\",\n)\n\n\n\n(50000, 32, 32, 3) (50000, 1) (10000, 32, 32, 3) (10000, 1)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\ndef infer(resourceName: str, idx: int):\n    rows = X_train[idx:idx+1]\n    show(rows[0])\n    reqJson[\"inputs\"][0][\"data\"] = rows.flatten().tolist()\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "d08b9ea0-27fa-4033-be30-bd99d20eb1a8", "page": "examples/model-zoo", "section": "seldon-model-zoo", "text": "   \"cat\",\n    \"deer\",\n    \"dog\",\n    \"frog\",\n    \"horse\",\n    \"ship\",\n    \"truck\",\n)\n\n\n\n(50000, 32, 32, 3) (50000, 1) (10000, 32, 32, 3) (10000, 1)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\ndef infer(resourceName: str, idx: int):\n    rows = X_train[idx:idx+1]\n    show(rows[0])\n    reqJson[\"inputs\"][0][\"data\"] = rows.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [1, 32, 32, 3]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":resourceName}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    probs = np.array(response_raw.json()[\"outputs\"][0][\"data\"])\n    print(classes[probs.argmax(axis=0)])\n\n\ndef show(X):\n    plt.imshow(X.reshape(32, 32, 3))\n    plt.axis(\"off\")\n    plt.show()\n\n\n\ncat ./models/cifar10-no-config.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/tensorflow/cifar10\"\n  requirements:\n  - tensorflow\n\n\nseldon model load -f ./models/cifar10-no-config.yaml\n\n\n{}\n\n\nseldon model status cifar10 -w ModelAvailable | jq -M .\n\n\n{}\n\n\ninfer(\"cifar10\",4)\n\n\n![png](model-zoo_files/model-zoo_14_0.png)\n\n\n\ncar\n\n\n\nseldon model unload cifar10\n\n\n{}\n\n\n\n\nXGBoost Model\u00b6\nThe training code for this model can be found at ./scripts/models/income-xgb\ncat ./models/income-xgb.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-xgb\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/income-xgb\"\n  requirements:\n  - xgboost\n\n\nseldon model load -f ./models/income-xgb.yaml\n\n\n{}\n\n\nseldon model status income-xgb -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer income-xgb \\\n  '{ \"parameters\": {\"content_type\": \"pd\"}, \"inputs\": [{\"name\": \"Age\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [47]},{\"name\": \"Workclass\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Education\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Marital Status\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Occupation\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Relationship\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [3]},{\"name\": \"Race\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Sex\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "a5a27cf2-88c2-4e0e-b855-7fbbe1d98171", "page": "examples/model-zoo", "section": "seldon-model-zoo", "text": "\"Age\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [47]},{\"name\": \"Workclass\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Education\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Marital Status\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Occupation\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Relationship\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [3]},{\"name\": \"Race\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Sex\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Capital Gain\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Capital Loss\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Hours per week\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [40]},{\"name\": \"Country\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [9]}]}'\n\n\n{\n\t\"model_name\": \"income-xgb_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"e30c3b44-fa14-4e5f-88f5-d6f4d287da20\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"FP32\",\n\t\t\t\"data\": [\n\t\t\t\t-1.8380107879638672\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload income-xgb\n\n\n{}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "7e922930-e678-45ce-90ff-ea6bb04c7867", "page": "examples/model-zoo", "section": "sklearn-iris-classification-model", "text": "\nSKLearn Iris Classification Model\u00b6\nThe training code for this model can be found at ./scripts/models/iris\ncat ./models/sklearn-iris-gs.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nseldon model load -f ./models/sklearn-iris-gs.yaml\n\n\n{}\n\n\nseldon model status iris -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer iris \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"09263298-ca66-49c5-acb9-0ca75b06f825\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload iris\n\n\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "70b14d0e-a1f4-461f-9b41-bcc24d23d0bd", "page": "examples/model-zoo", "section": "tensorflow-cifar10-image-classification-model", "text": "\nTensorflow CIFAR10 Image Classification Model\u00b6\nimport requests\nimport json\nfrom typing import Dict, List\nimport numpy as np\nimport os\nimport tensorflow as tf\nfrom alibi_detect.utils.perturbation import apply_mask\nfrom alibi_detect.datasets import fetch_cifar10c\nimport matplotlib.pyplot as plt\ntf.keras.backend.clear_session()\n\n\n2023-03-09 19:43:43.637892: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n2023-03-09 19:43:43.637906: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n\n\n\ntrain, test = tf.keras.datasets.cifar10.load_data()\nX_train, y_train = train\nX_test, y_test = test\n\nX_train = X_train.astype('float32') / 255\nX_test = X_test.astype('float32') / 255\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nclasses = (\n    \"plane\",\n    \"car\",\n    \"bird\",\n    \"cat\",\n    \"deer\",\n    \"dog\",\n    \"frog\",\n    \"horse\",\n    \"ship\",\n    \"truck\",\n)\n\n\n\n(50000, 32, 32, 3) (50000, 1) (10000, 32, 32, 3) (10000, 1)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\ndef infer(resourceName: str, idx: int):\n    rows = X_train[idx:idx+1]\n    show(rows[0])\n    reqJson[\"inputs\"][0][\"data\"] = rows.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [1, 32, 32, 3]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":resourceName}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    probs = np.array(response_raw.json()[\"outputs\"][0][\"data\"])\n    print(classes[probs.argmax(axis=0)])\n\n\ndef show(X):\n    plt.imshow(X.reshape(32, 32, 3))\n    plt.axis(\"off\")\n    plt.show()\n\n\n\ncat ./models/cifar10-no-config.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/tensorflow/cifar10\"\n  requirements:\n  - tensorflow\n\n\nseldon model load -f ./models/cifar10-no-config.yaml\n\n\n{}\n\n\nseldon model status cifar10 -w ModelAvailable | jq -M .\n\n\n{}\n\n\ninfer(\"cifar10\",4)\n\n\n![png](model-zoo_files/model-zoo_14_0.png)\n\n\n\ncar\n\n\n\nseldon model unload cifar10\n\n\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "bd126bf4-e47b-43d3-9eae-906e6df97f68", "page": "examples/model-zoo", "section": "xgboost-model", "text": "\nXGBoost Model\u00b6\nThe training code for this model can be found at ./scripts/models/income-xgb\ncat ./models/income-xgb.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-xgb\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/income-xgb\"\n  requirements:\n  - xgboost\n\n\nseldon model load -f ./models/income-xgb.yaml\n\n\n{}\n\n\nseldon model status income-xgb -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer income-xgb \\\n  '{ \"parameters\": {\"content_type\": \"pd\"}, \"inputs\": [{\"name\": \"Age\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [47]},{\"name\": \"Workclass\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Education\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Marital Status\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Occupation\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Relationship\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [3]},{\"name\": \"Race\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Sex\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Capital Gain\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Capital Loss\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Hours per week\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [40]},{\"name\": \"Country\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [9]}]}'\n\n\n{\n\t\"model_name\": \"income-xgb_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"e30c3b44-fa14-4e5f-88f5-d6f4d287da20\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"FP32\",\n\t\t\t\"data\": [\n\t\t\t\t-1.8380107879638672\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload income-xgb\n\n\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "08486ae7-2519-4e16-9261-8dc79febadfa", "page": "examples/model-zoo", "section": "onnx-mnist-model", "text": "\nONNX MNIST Model\u00b6\nThis model is a pretrained model as defined in ./scripts/models/Makefile target mnist-onnx\nimport matplotlib.pyplot as plt\nimport json\nimport requests\nfrom torchvision.datasets import MNIST\nfrom torchvision.transforms import ToTensor\nfrom torchvision import transforms\nfrom torch.utils.data import DataLoader\nimport numpy as np\ntraining_data = MNIST(\n    root=\".\",\n    download=True,\n    train=False,\n    transform = transforms.Compose([\n              transforms.ToTensor()\n          ])\n)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"Input3\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ndl = DataLoader(training_data, batch_size=1, shuffle=False)\ndlIter = iter(dl)\n\ndef infer_mnist():\n    x, y = next(dlIter)\n    data = x.cpu().numpy()\n    reqJson[\"inputs\"][0][\"data\"] = data.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [1, 1, 28, 28]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":\"mnist-onnx\"}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    show_mnist(x)\n    probs = np.array(response_raw.json()[\"outputs\"][0][\"data\"])\n    print(probs.argmax(axis=0))\n\n\ndef show_mnist(X):\n    plt.imshow(X.reshape(28, 28))\n    plt.axis(\"off\")\n    plt.show()\n\n\ncat ./models/mnist-onnx.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mnist-onnx\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mnist-onnx\"\n  requirements:\n  - onnx\n\n\nseldon model load -f ./models/mnist-onnx.yaml\n\n\n{}\n\n\nseldon model status mnist-onnx -w ModelAvailable | jq -M .\n\n\n{}\n\n\ninfer_mnist()\n\n\n![png](model-zoo_files/model-zoo_28_0.png)\n\n\n\n7\n\n\n\nseldon model unload mnist-onnx\n\n\n{}\n\n\n\nLightGBM Model\u00b6\nThe training code for this model can be found at ./scripts/models/income-lgb\ncat ./models/income-lgb.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-lgb\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/income-lgb\"\n  requirements:\n  - lightgbm\n\n\nseldon model load -f ./models/income-lgb.yaml\n\n\n{}\n\n\nseldon model status income-lgb -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer income-lgb \\\n  '{ \"parameters\": {\"content_type\": \"pd\"}, \"inputs\": [{\"name\": \"Age\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [47]},{\"name\": \"Workclass\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "f8fa9c39-332f-4916-989a-c5d4a7b3d229", "page": "examples/model-zoo", "section": "onnx-mnist-model", "text": "training code for this model can be found at ./scripts/models/income-lgb\ncat ./models/income-lgb.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-lgb\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/income-lgb\"\n  requirements:\n  - lightgbm\n\n\nseldon model load -f ./models/income-lgb.yaml\n\n\n{}\n\n\nseldon model status income-lgb -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer income-lgb \\\n  '{ \"parameters\": {\"content_type\": \"pd\"}, \"inputs\": [{\"name\": \"Age\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [47]},{\"name\": \"Workclass\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Education\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Marital Status\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Occupation\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Relationship\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [3]},{\"name\": \"Race\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Sex\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Capital Gain\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Capital Loss\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Hours per week\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [40]},{\"name\": \"Country\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [9]}]}'\n\n\n{\n\t\"model_name\": \"income-lgb_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"4437a71e-9af1-4e3b-aa4b-cb95d2cd86b9\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"FP64\",\n\t\t\t\"data\": [\n\t\t\t\t0.06279460120044741\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload income-lgb\n\n\n{}\n\n\n\n\nMLFlow Wine Model\u00b6\nThe training code for this model can be found at ./scripts/models/wine-mlflow\ncat ./models/wine-mlflow.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: wine\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/wine-mlflow\"\n  requirements:\n  - mlflow\n\n\nseldon model load -f ./models/wine-mlflow.yaml\n\n\n{}\n\n\nseldon model status wine -w ModelAvailable | jq -M .\n\n\n{}\n\n\nimport requests\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ninference_request = {\n    \"inputs\": [\n        {\n          \"name\": \"fixed acidity\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "fd3e062f-7de8-4b05-b332-d87591874319", "page": "examples/model-zoo", "section": "onnx-mnist-model", "text": "status wine -w ModelAvailable | jq -M .\n\n\n{}\n\n\nimport requests\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ninference_request = {\n    \"inputs\": [\n        {\n          \"name\": \"fixed acidity\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [7.4],\n        },\n        {\n          \"name\": \"volatile acidity\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.7000],\n        },\n        {\n          \"name\": \"citric acid\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0],\n        },\n        {\n          \"name\": \"residual sugar\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [1.9],\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "f6b4b41e-e5e7-43b7-88d5-60c95b3a0157", "page": "examples/model-zoo", "section": "onnx-mnist-model", "text": "[0],\n        },\n        {\n          \"name\": \"residual sugar\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [1.9],\n        },\n        {\n          \"name\": \"chlorides\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.076],\n        },\n        {\n          \"name\": \"free sulfur dioxide\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [11],\n        },\n        {\n          \"name\": \"total sulfur dioxide\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [34],\n        },\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "5681d98a-dca0-4a78-b402-f98aa28f7ea0", "page": "examples/model-zoo", "section": "onnx-mnist-model", "text": "       {\n          \"name\": \"total sulfur dioxide\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [34],\n        },\n        {\n          \"name\": \"density\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.9978],\n        },\n        {\n          \"name\": \"pH\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [3.51],\n        },\n        {\n          \"name\": \"sulphates\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.56],\n        },\n        {\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "58bced0f-c5a9-43c8-b9a5-225c4a9970fe", "page": "examples/model-zoo", "section": "onnx-mnist-model", "text": "       \"name\": \"sulphates\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.56],\n        },\n        {\n          \"name\": \"alcohol\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [9.4],\n        },\n    ]\n}\nheaders = {\"Content-Type\": \"application/json\", \"seldon-model\":\"wine\"}\nresponse_raw = requests.post(url, json=inference_request, headers=headers)\nprint(response_raw.json())\n\n\n{'model_name': 'wine_1', 'model_version': '1', 'id': '0d7e44f8-b46c-4438-b8af-a749e6aa6039', 'parameters': {}, 'outputs': [{'name': 'output-1', 'shape': [1, 1], 'datatype': 'FP64', 'data': [5.576883936610762]}]}\n\n\n\nseldon model unload wine\n\n\n{}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "e1531925-ba77-4deb-8203-7745138c7f39", "page": "examples/model-zoo", "section": "lightgbm-model", "text": "\nLightGBM Model\u00b6\nThe training code for this model can be found at ./scripts/models/income-lgb\ncat ./models/income-lgb.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-lgb\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/income-lgb\"\n  requirements:\n  - lightgbm\n\n\nseldon model load -f ./models/income-lgb.yaml\n\n\n{}\n\n\nseldon model status income-lgb -w ModelAvailable | jq -M .\n\n\n{}\n\n\nseldon model infer income-lgb \\\n  '{ \"parameters\": {\"content_type\": \"pd\"}, \"inputs\": [{\"name\": \"Age\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [47]},{\"name\": \"Workclass\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Education\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Marital Status\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Occupation\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Relationship\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [3]},{\"name\": \"Race\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [4]},{\"name\": \"Sex\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [1]},{\"name\": \"Capital Gain\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Capital Loss\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [0]},{\"name\": \"Hours per week\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [40]},{\"name\": \"Country\", \"shape\": [1, 1], \"datatype\": \"INT64\", \"data\": [9]}]}'\n\n\n{\n\t\"model_name\": \"income-lgb_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"4437a71e-9af1-4e3b-aa4b-cb95d2cd86b9\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"FP64\",\n\t\t\t\"data\": [\n\t\t\t\t0.06279460120044741\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload income-lgb\n\n\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "c9e7a4cc-2060-4fb1-a982-d6adab18721b", "page": "examples/model-zoo", "section": "mlflow-wine-model", "text": "\nMLFlow Wine Model\u00b6\nThe training code for this model can be found at ./scripts/models/wine-mlflow\ncat ./models/wine-mlflow.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: wine\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/wine-mlflow\"\n  requirements:\n  - mlflow\n\n\nseldon model load -f ./models/wine-mlflow.yaml\n\n\n{}\n\n\nseldon model status wine -w ModelAvailable | jq -M .\n\n\n{}\n\n\nimport requests\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ninference_request = {\n    \"inputs\": [\n        {\n          \"name\": \"fixed acidity\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [7.4],\n        },\n        {\n          \"name\": \"volatile acidity\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.7000],\n        },\n        {\n          \"name\": \"citric acid\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0],\n        },\n        {\n          \"name\": \"residual sugar\",\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "07229670-5e19-4a5a-9498-d68cd7100ae0", "page": "examples/model-zoo", "section": "mlflow-wine-model", "text": "         \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0],\n        },\n        {\n          \"name\": \"residual sugar\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [1.9],\n        },\n        {\n          \"name\": \"chlorides\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.076],\n        },\n        {\n          \"name\": \"free sulfur dioxide\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [11],\n        },\n        {\n          \"name\": \"total sulfur dioxide\",\n          \"shape\": [1],\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "6bf2f40c-7850-43da-951f-9daa21a0709a", "page": "examples/model-zoo", "section": "mlflow-wine-model", "text": "\"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [11],\n        },\n        {\n          \"name\": \"total sulfur dioxide\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [34],\n        },\n        {\n          \"name\": \"density\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.9978],\n        },\n        {\n          \"name\": \"pH\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [3.51],\n        },\n        {\n          \"name\": \"sulphates\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "e29b74b1-df70-4565-bd32-d453afbcc7a5", "page": "examples/model-zoo", "section": "mlflow-wine-model", "text": " \"datatype\": \"FP32\",\n          \"data\": [3.51],\n        },\n        {\n          \"name\": \"sulphates\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [0.56],\n        },\n        {\n          \"name\": \"alcohol\",\n          \"shape\": [1],\n          \"datatype\": \"FP32\",\n          \"data\": [9.4],\n        },\n    ]\n}\nheaders = {\"Content-Type\": \"application/json\", \"seldon-model\":\"wine\"}\nresponse_raw = requests.post(url, json=inference_request, headers=headers)\nprint(response_raw.json())\n\n\n{'model_name': 'wine_1', 'model_version': '1', 'id': '0d7e44f8-b46c-4438-b8af-a749e6aa6039', 'parameters': {}, 'outputs': [{'name': 'output-1', 'shape': [1, 1], 'datatype': 'FP64', 'data': [5.576883936610762]}]}\n\n\n\nseldon model unload wine\n\n\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "a6537617-4521-4b94-8041-ab03b58616dc", "page": "examples/model-zoo", "section": "pytorch-mnist-model", "text": "\nPytorch MNIST Model\u00b6\nThis example model is downloaded and trained in ./scripts/models/Makefile target mnist-pytorch\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport json\nimport requests\nfrom torchvision.datasets import MNIST\nfrom torchvision.transforms import ToTensor\nfrom torchvision import transforms\nfrom torch.utils.data import DataLoader\ntraining_data = MNIST(\n    root=\".\",\n    download=True,\n    train=False,\n    transform = transforms.Compose([\n              transforms.ToTensor()\n          ])\n)\n\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"x__0\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\ndl = DataLoader(training_data, batch_size=1, shuffle=False)\ndlIter = iter(dl)\n\ndef infer_mnist():\n    x, y = next(dlIter)\n    data = x.cpu().numpy()\n    reqJson[\"inputs\"][0][\"data\"] = data.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [1, 1, 28, 28]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":\"mnist-pytorch\"}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    show_mnist(x)\n    probs = np.array(response_raw.json()[\"outputs\"][0][\"data\"])\n    print(probs.argmax(axis=0))\n\n\ndef show_mnist(X):\n    plt.imshow(X.reshape(28, 28))\n    plt.axis(\"off\")\n    plt.show()\n\n\ncat ./models/mnist-pytorch.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mnist-pytorch\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mnist-pytorch\"\n  requirements:\n  - pytorch\n\n\nseldon model load -f ./models/mnist-pytorch.yaml\n\n\n{}\n\n\nseldon model status mnist-pytorch -w ModelAvailable | jq -M .\n\n\n{}\n\n\ninfer_mnist()\n\n\n![png](model-zoo_files/model-zoo_48_0.png)\n\n\n\n7\n\n\n\nseldon model unload mnist-pytorch\n\n\n{}\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/model-zoo.html", "key": "examples/model-zoo"}}, {"key": "562db530-79d4-46f7-82d8-335c33796dc7", "page": "kubernetes/autoscaling", "section": "autoscaling", "text": "\nAutoscaling\u00b6\nAutoscaling in Seldon applies to various concerns:\n\nInference servers autoscaling\nModel autoscaling\nModel memory overcommit\n\n\nInference servers autoscaling\u00b6\nAutoscaling of servers can be done via HorizontalPodAutoscaler (HPA).\nHPA can be applied to any deployed Server resource.\nIn this case HPA will manage the number of server replicas in the corresponding statefulset according to utilisation metrics  (e.g. CPU or memory).\nFor example assuming that a triton server is deployed, then the user can attach an HPA based on cpu utilisation as follows:\nkubectl autoscale server triton --cpu-percent=50 --min=1 --max=5\n\n\nIn this case, according to load, the system will add / remove server replicas to / from the triton statefulset.\nIt is worth considering the following points:\n\nIf HPA adds a new server replica, this new replica will be included in any future scheduling decisions.\nIn other words, when deploying a new model or rescheduling failed models this new replica will be considered.\nIf HPA deletes an existing server replica, the scheduler will first attempt to drain any loaded model on this server replica before the server replica gets actually deleted. This is achieved by leveraging a PreStop hook on the server replica pod that triggers a process before receiving the termination signal. This draining process is capped by terminationGracePeriodSeconds, which the user can set (default is 2 minutes).\n\nTherefore there should generally be minimal disruption to the inference workload during scaling.\nFor more details on HPA check this Kubernetes walk-through.\n\nNote\nAutoscaling of inference servers via seldon-scheduler is under consideration for the roadmap. This allow for more fine grained interactions with model autoscaling.\n\n\n\nModel autoscaling\u00b6\nAs each model server can serve multiple models, models can scale", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "5067aa98-58a5-48b6-847f-93f85fe09e9d", "page": "kubernetes/autoscaling", "section": "autoscaling", "text": "capped by terminationGracePeriodSeconds, which the user can set (default is 2 minutes).\n\nTherefore there should generally be minimal disruption to the inference workload during scaling.\nFor more details on HPA check this Kubernetes walk-through.\n\nNote\nAutoscaling of inference servers via seldon-scheduler is under consideration for the roadmap. This allow for more fine grained interactions with model autoscaling.\n\n\n\nModel autoscaling\u00b6\nAs each model server can serve multiple models, models can scale across the available replicas of the server according to load.\nAutoscaling of models is enabled if at least MinReplicas or MaxReplicas is set in the model custom resource. Then according to load the system will scale the number of Replicas within this range.\nFor example the following model will be deployed at first with 1 replica and it can scale up according to load.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n  minReplicas: 1\n  replicas: 1\n\n\nNote that model autoscaling will not attempt to add extra servers if the desired number of replicas cannot be currently fulfilled by the current provisioned number of servers. This is a process left to be done by server autoscaling.\nAdditionally when the system autoscales, the initial model spec is not changed (e.g. the number of Replicas) and therefore the user cannot reset the number of replicas back to the initial specified value without an explicit change.\nIf only Replicas is specified by the user, autoscaling of models is disabled and the system will have exactly the number of replicas of this model deployed regardless of inference load.\n\nArchitecture\u00b6\nThe model autoscaling architecture is", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "bae726a5-f814-41e4-a8c0-2c8be5637367", "page": "kubernetes/autoscaling", "section": "autoscaling", "text": "model spec is not changed (e.g. the number of Replicas) and therefore the user cannot reset the number of replicas back to the initial specified value without an explicit change.\nIf only Replicas is specified by the user, autoscaling of models is disabled and the system will have exactly the number of replicas of this model deployed regardless of inference load.\n\nArchitecture\u00b6\nThe model autoscaling architecture is designed such as each agent decides on which models to scale up / down according to some defined internal metrics and then sends a triggering message to the scheduler. The current metrics are collected from the data plane (inference path), representing a proxy on how loaded is a given model with fulfilling inference requests.\n\n\n\nAgent autoscaling stats collection\u00b6\n\nScale up logic:\u00b6\nThe main idea is that we keep the \u201clag\u201d for each model. We define the \u201clag\u201d as the difference between incoming and outgoing requests in a given time period. If the lag crosses a threshold, then we trigger a model scale up event. This threshold can be defined via SELDON_MODEL_INFERENCE_LAG_THRESHOLD inference server environment variable.\n\n\nScale down logic:\u00b6\nFor now we keep things simple and we trigger model scale down events if a model has not been used for a number of seconds. This is defined in SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD inference server environment variable.\nEach agent checks the above stats periodically and if any model hits the corresponding threshold, then the agent sends an event to the scheduler to request model scaling.\nHow often this process executes can be defined via SELDON_SCALING_STATS_PERIOD_SECONDS inference server environment variable.\n\n\n\nScheduler autoscaling\u00b6\n\nThe scheduler will perform model", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "f8351bf0-9fad-48cb-b5f4-2ffdf082980c", "page": "kubernetes/autoscaling", "section": "autoscaling", "text": "model has not been used for a number of seconds. This is defined in SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD inference server environment variable.\nEach agent checks the above stats periodically and if any model hits the corresponding threshold, then the agent sends an event to the scheduler to request model scaling.\nHow often this process executes can be defined via SELDON_SCALING_STATS_PERIOD_SECONDS inference server environment variable.\n\n\n\nScheduler autoscaling\u00b6\n\nThe scheduler will perform model autoscale if:\n\nThe model is stable (no state change in the last 5 minutes) and available.\nThe desired number of replicas is within range. Note we always have a least 1 replica of any deployed model and we rely on over commit to reduce the resources used further.\nFor scaling up, there is enough capacity for the new model replica.\n\n\n\n\nModel memory overcommit\u00b6\nServers can hold more models than available memory if overcommit is swictched on (default yes). This allows under utilized models to be moved from inference server memory to allow for other models to take their place. Note that these evicted models are still registered and in the case future inference requests arrive, the system will reload the models back to memory before serving the requests. If traffic patterns for inference of models vary then this can allow more models than available server memory to be run on the system.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "7429d13f-ccd5-4072-8e64-534eab150956", "page": "kubernetes/autoscaling", "section": "inference-servers-autoscaling", "text": "\nInference servers autoscaling\u00b6\nAutoscaling of servers can be done via HorizontalPodAutoscaler (HPA).\nHPA can be applied to any deployed Server resource.\nIn this case HPA will manage the number of server replicas in the corresponding statefulset according to utilisation metrics  (e.g. CPU or memory).\nFor example assuming that a triton server is deployed, then the user can attach an HPA based on cpu utilisation as follows:\nkubectl autoscale server triton --cpu-percent=50 --min=1 --max=5\n\n\nIn this case, according to load, the system will add / remove server replicas to / from the triton statefulset.\nIt is worth considering the following points:\n\nIf HPA adds a new server replica, this new replica will be included in any future scheduling decisions.\nIn other words, when deploying a new model or rescheduling failed models this new replica will be considered.\nIf HPA deletes an existing server replica, the scheduler will first attempt to drain any loaded model on this server replica before the server replica gets actually deleted. This is achieved by leveraging a PreStop hook on the server replica pod that triggers a process before receiving the termination signal. This draining process is capped by terminationGracePeriodSeconds, which the user can set (default is 2 minutes).\n\nTherefore there should generally be minimal disruption to the inference workload during scaling.\nFor more details on HPA check this Kubernetes walk-through.\n\nNote\nAutoscaling of inference servers via seldon-scheduler is under consideration for the roadmap. This allow for more fine grained interactions with model autoscaling.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "04c34c76-df95-4a16-8cff-dc245e5e1082", "page": "kubernetes/autoscaling", "section": "model-autoscaling", "text": "\nModel autoscaling\u00b6\nAs each model server can serve multiple models, models can scale across the available replicas of the server according to load.\nAutoscaling of models is enabled if at least MinReplicas or MaxReplicas is set in the model custom resource. Then according to load the system will scale the number of Replicas within this range.\nFor example the following model will be deployed at first with 1 replica and it can scale up according to load.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: tfsimple\nspec:\n  storageUri: \"gs://seldon-models/triton/simple\"\n  requirements:\n  - tensorflow\n  memory: 100Ki\n  minReplicas: 1\n  replicas: 1\n\n\nNote that model autoscaling will not attempt to add extra servers if the desired number of replicas cannot be currently fulfilled by the current provisioned number of servers. This is a process left to be done by server autoscaling.\nAdditionally when the system autoscales, the initial model spec is not changed (e.g. the number of Replicas) and therefore the user cannot reset the number of replicas back to the initial specified value without an explicit change.\nIf only Replicas is specified by the user, autoscaling of models is disabled and the system will have exactly the number of replicas of this model deployed regardless of inference load.\n\nArchitecture\u00b6\nThe model autoscaling architecture is designed such as each agent decides on which models to scale up / down according to some defined internal metrics and then sends a triggering message to the scheduler. The current metrics are collected from the data plane (inference path), representing a proxy on how loaded is a given model with fulfilling", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "67253a90-7ecc-48cf-9274-e1e3e14bfd88", "page": "kubernetes/autoscaling", "section": "model-autoscaling", "text": "of this model deployed regardless of inference load.\n\nArchitecture\u00b6\nThe model autoscaling architecture is designed such as each agent decides on which models to scale up / down according to some defined internal metrics and then sends a triggering message to the scheduler. The current metrics are collected from the data plane (inference path), representing a proxy on how loaded is a given model with fulfilling inference requests.\n\n\n\nAgent autoscaling stats collection\u00b6\n\nScale up logic:\u00b6\nThe main idea is that we keep the \u201clag\u201d for each model. We define the \u201clag\u201d as the difference between incoming and outgoing requests in a given time period. If the lag crosses a threshold, then we trigger a model scale up event. This threshold can be defined via SELDON_MODEL_INFERENCE_LAG_THRESHOLD inference server environment variable.\n\n\nScale down logic:\u00b6\nFor now we keep things simple and we trigger model scale down events if a model has not been used for a number of seconds. This is defined in SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD inference server environment variable.\nEach agent checks the above stats periodically and if any model hits the corresponding threshold, then the agent sends an event to the scheduler to request model scaling.\nHow often this process executes can be defined via SELDON_SCALING_STATS_PERIOD_SECONDS inference server environment variable.\n\n\n\nScheduler autoscaling\u00b6\n\nThe scheduler will perform model autoscale if:\n\nThe model is stable (no state change in the last 5 minutes) and available.\nThe desired number of replicas is within range. Note we always have a least 1 replica of any deployed model and we rely on over commit to reduce the resources used further.\nFor scaling up, there is enough capacity", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "c5ef496f-3de5-49be-af79-06b7f9f87595", "page": "kubernetes/autoscaling", "section": "model-autoscaling", "text": "defined via SELDON_SCALING_STATS_PERIOD_SECONDS inference server environment variable.\n\n\n\nScheduler autoscaling\u00b6\n\nThe scheduler will perform model autoscale if:\n\nThe model is stable (no state change in the last 5 minutes) and available.\nThe desired number of replicas is within range. Note we always have a least 1 replica of any deployed model and we rely on over commit to reduce the resources used further.\nFor scaling up, there is enough capacity for the new model replica.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "6c14d1da-eff1-40e7-a271-fdd2072bbbf0", "page": "kubernetes/autoscaling", "section": "agent-autoscaling-stats-collection", "text": "\nAgent autoscaling stats collection\u00b6\n\nScale up logic:\u00b6\nThe main idea is that we keep the \u201clag\u201d for each model. We define the \u201clag\u201d as the difference between incoming and outgoing requests in a given time period. If the lag crosses a threshold, then we trigger a model scale up event. This threshold can be defined via SELDON_MODEL_INFERENCE_LAG_THRESHOLD inference server environment variable.\n\n\nScale down logic:\u00b6\nFor now we keep things simple and we trigger model scale down events if a model has not been used for a number of seconds. This is defined in SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD inference server environment variable.\nEach agent checks the above stats periodically and if any model hits the corresponding threshold, then the agent sends an event to the scheduler to request model scaling.\nHow often this process executes can be defined via SELDON_SCALING_STATS_PERIOD_SECONDS inference server environment variable.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "1277ce35-ec0b-4ebc-ad44-5e00a2c5178f", "page": "kubernetes/autoscaling", "section": "scale-down-logic", "text": "\nScale down logic:\u00b6\nFor now we keep things simple and we trigger model scale down events if a model has not been used for a number of seconds. This is defined in SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD inference server environment variable.\nEach agent checks the above stats periodically and if any model hits the corresponding threshold, then the agent sends an event to the scheduler to request model scaling.\nHow often this process executes can be defined via SELDON_SCALING_STATS_PERIOD_SECONDS inference server environment variable.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "aaf0f993-060b-4100-8474-42b87777c2b5", "page": "kubernetes/autoscaling", "section": "model-memory-overcommit", "text": "\nModel memory overcommit\u00b6\nServers can hold more models than available memory if overcommit is swictched on (default yes). This allows under utilized models to be moved from inference server memory to allow for other models to take their place. Note that these evicted models are still registered and in the case future inference requests arrive, the system will reload the models back to memory before serving the requests. If traffic patterns for inference of models vary then this can allow more models than available server memory to be run on the system.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/autoscaling/index.html", "key": "kubernetes/autoscaling"}}, {"key": "857b25af-43b1-4c5a-8e23-ea706576f328", "page": "getting-started/kubernetes-installation/security/confluent-oauth", "section": "confluent-cloud-oauth-2-0-example", "text": "\nConfluent Cloud Oauth 2.0 Example\u00b6\n\nNew in Seldon Core 2.7.0\n\nSeldon Core v2 can integrate with Confluent Cloud managed Kafka.\nIn this example we use Oauth 2.0 security mechanism.\n\nConfigure Identity Provider in Confluent Cloud Console\u00b6\nIn your Confluent Cloud Console go to Account & Access / Identity providers and register your Identity Provider.\nSee Confluent Cloud documentation for further details.\n\n\nConfigure Identity Pool\u00b6\nIn your Confluent Cloud Console go to Account & Access / Identity providers and add new identity pool to your newly registered Identity Provider.\nSee Confluent Cloud documentation for further details.\n\n\nCreate Kubernetes Secret\u00b6\nSeldon Core v2 expects oauth credentials to be in form of K8s secret\napiVersion: v1\nkind: Secret\nmetadata:\n  name: confluent-kafka-oauth\n  namespace: seldon-mesh\ntype: Opaque\nstringData:\n  method: OIDC\n  client_id: <client id>\n  client_secret: <client secret>\n  token_endpoint_url: <token endpoint url>\n  extensions: logicalCluster=<cluster id>,identityPoolId=<identity pool id>\n  scope: \"\"\n\n\nYou will need following information from Confluent Cloud:\n\nCluster ID: Cluster Overview \u2192 Cluster Settings \u2192 General \u2192 Identification\nIdentity Pool ID: Accounts & access \u2192 Identity providers \u2192 <specific provider details>\n\nClient ID, client secret and token endpoint url should come from identity provider, e.g. Keycloak or Azure AD.\n\n\nConfigure Seldon Core v2\u00b6\nConfigure Seldon Core v2 by setting following Helm values:\nkafka:\n  bootstrap: < Confluent Cloud Broker Endpoints >\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n  consumer:\n    messageMaxBytes: 8388608\n  producer:\n    messageMaxBytes: 8388608\n\nsecurity:\n  kafka:\n    protocol: SASL_SSL\n    sasl:\n      mechanism: OAUTHBEARER\n      client:\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/confluent-oauth.html", "key": "getting-started/kubernetes-installation/security/confluent-oauth"}}, {"key": "dbca4f0b-118d-40b2-b187-732b10134ea3", "page": "getting-started/kubernetes-installation/security/confluent-oauth", "section": "confluent-cloud-oauth-2-0-example", "text": "bootstrap: < Confluent Cloud Broker Endpoints >\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n  consumer:\n    messageMaxBytes: 8388608\n  producer:\n    messageMaxBytes: 8388608\n\nsecurity:\n  kafka:\n    protocol: SASL_SSL\n    sasl:\n      mechanism: OAUTHBEARER\n      client:\n          secret: confluent-kafka-oauth\n    ssl:\n      client:\n        secret:\n        brokerValidationSecret:\n\n\nNote you may need to tweak replicationFactor and numPartitions to your cluster configuration.\n\n\nTroubleshooting\u00b6\n\nFirst check Confluent Cloud documentation.\nSet the kafka config map debug setting to all. For Helm install you can set kafka.debug=all.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/confluent-oauth.html", "key": "getting-started/kubernetes-installation/security/confluent-oauth"}}, {"key": "1144285f-ec64-450a-8c5d-fdda9731b195", "page": "getting-started/kubernetes-installation/security/confluent-oauth", "section": "create-kubernetes-secret", "text": "\nCreate Kubernetes Secret\u00b6\nSeldon Core v2 expects oauth credentials to be in form of K8s secret\napiVersion: v1\nkind: Secret\nmetadata:\n  name: confluent-kafka-oauth\n  namespace: seldon-mesh\ntype: Opaque\nstringData:\n  method: OIDC\n  client_id: <client id>\n  client_secret: <client secret>\n  token_endpoint_url: <token endpoint url>\n  extensions: logicalCluster=<cluster id>,identityPoolId=<identity pool id>\n  scope: \"\"\n\n\nYou will need following information from Confluent Cloud:\n\nCluster ID: Cluster Overview \u2192 Cluster Settings \u2192 General \u2192 Identification\nIdentity Pool ID: Accounts & access \u2192 Identity providers \u2192 <specific provider details>\n\nClient ID, client secret and token endpoint url should come from identity provider, e.g. Keycloak or Azure AD.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/confluent-oauth.html", "key": "getting-started/kubernetes-installation/security/confluent-oauth"}}, {"key": "9594aec4-8921-4bfa-b8f9-f0d1d573a221", "page": "getting-started/kubernetes-installation/security/confluent-oauth", "section": "configure-seldon-core-v2", "text": "\nConfigure Seldon Core v2\u00b6\nConfigure Seldon Core v2 by setting following Helm values:\nkafka:\n  bootstrap: < Confluent Cloud Broker Endpoints >\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n  consumer:\n    messageMaxBytes: 8388608\n  producer:\n    messageMaxBytes: 8388608\n\nsecurity:\n  kafka:\n    protocol: SASL_SSL\n    sasl:\n      mechanism: OAUTHBEARER\n      client:\n          secret: confluent-kafka-oauth\n    ssl:\n      client:\n        secret:\n        brokerValidationSecret:\n\n\nNote you may need to tweak replicationFactor and numPartitions to your cluster configuration.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/confluent-oauth.html", "key": "getting-started/kubernetes-installation/security/confluent-oauth"}}, {"key": "fc82b0aa-e847-4115-beed-286467c26b17", "page": "metrics", "section": "metrics", "text": "\nMetrics\u00b6\nThere are two kinds of metrics present in Seldon Core v2:\n\noperational metrics\nusage metrics\n\nOperational metrics describe the performance of components in the system.\nExamples of common operational considerations are memory consumption and CPU usage, request latency and throughput, and cache utilisation rates.\nGenerally speaking, these are the metrics system administrators, operations teams, and engineers will be interested in.\nUsage metrics describe the system at a higher and less dynamic level.\nExamples include the number of deployed servers and models, and component versions.\nThese are not typically metrics that engineers need insight into, but may be relevant to platform providers and operations teams.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/metrics/index.html", "key": "metrics"}}, {"key": "4c13f355-7bd5-4781-9dbd-209733d5285f", "page": "architecture/dataflow", "section": "data-flow-design-paradigm-in-seldon-core", "text": "\nData flow design paradigm in Seldon Core\u00b6\nSeldon Core v2 is designed around data flow paradigm. Here we will explain what that means and some of the rationals behind this choice.\n\nSeldon Core v1\u00b6\nInitial release of Seldon Core introduced a concept of an inference graph, which can be thought of as a sequence of operations that happen to the inference request. Here is how it may look like:\n\nIn reality though this was not how Seldon Core v1 is implemented. Instead, Seldon deployment consists of a range of independent services that host models, transformations, detectors and explainers, and a central orchestrator that knows the inference graph topology and makes service calls in the correct order, passing data between requests and responses as necessary. Here is how the picture looks under the hood:\n\nWhile this is a convenient way of implementing evaluation graph with microservices, it has a few problems. Orchestrator becomes a bottleneck and a single point of failure. It also hides all the data transformations that need to happen to translate one service\u2019s response to another service\u2019s request. Data tracing and lineage becomes difficult. All in all, while Seldon platform is all about processing data, under-the-hood implementation was still focused on order of operations and not on data itself.\n\n\nData flow\u00b6\nThe realisation of this disparity led to a new approach towards inference graph evaluation in v2, based on the data flow paradigm. Data flow is a well known concept in software engineering, known from 1960s. In contrast to services, that model programs as a control flow, focusing on the order", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "8ef4497d-07b8-4a51-a4c9-740c02bc474d", "page": "architecture/dataflow", "section": "data-flow-design-paradigm-in-seldon-core", "text": "under-the-hood implementation was still focused on order of operations and not on data itself.\n\n\nData flow\u00b6\nThe realisation of this disparity led to a new approach towards inference graph evaluation in v2, based on the data flow paradigm. Data flow is a well known concept in software engineering, known from 1960s. In contrast to services, that model programs as a control flow, focusing on the order of operations, data flow proposes to model software systems as a series of connections that modify incoming data, focusing on data flowing through the system. A particular flavor of data flow paradigm used by v2 is known as flow-based programming, FBP. FBP defines software applications as a set of processes which exchange data via connections that are external to those processes. Connections are made via named ports, which promotes data coupling between components of the system.\nData flow design makes data in software the top priority. That is one of the key messages of the so called \u201cdata-centric AI\u201d idea, which is becoming increasingly popular within the ML community. Data is a key component of a successful ML project. Data needs to be discovered, described, cleaned, understood, monitored and verified. Consequently, there is a growing demand for data-centric platforms and solutions. Making Seldon Core data-centric was one of the key goals of the v2 design.\n\n\nSeldon Core v2\u00b6\nIn the context of Seldon Core application of FBP design approach means that the evaluation implementation is done the same way inferece graph. So instead of routing everything through a centralized orchestrator the evaluation happens in the", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "34457282-726a-4318-85b5-07887fa52849", "page": "architecture/dataflow", "section": "data-flow-design-paradigm-in-seldon-core", "text": "verified. Consequently, there is a growing demand for data-centric platforms and solutions. Making Seldon Core data-centric was one of the key goals of the v2 design.\n\n\nSeldon Core v2\u00b6\nIn the context of Seldon Core application of FBP design approach means that the evaluation implementation is done the same way inferece graph. So instead of routing everything through a centralized orchestrator the evaluation happens in the same graph-like manner:\n\nAs far as implementation goes, Seldon Core v2 runs on Kafka. Inference request is put onto a pipeline input topic, which triggers an evaluation. Each part of the inference graph is a service running in its own container fronted by a model gateway. Model gateway listens to a corresponding input Kafka topic, reads data from it, calls the service and puts the received response to an output Kafka topic. There is also a pipeline gateway that allows to interact with Seldon Core in synchronous manner.\nThis approach gives SCv2 several important features. Firstly, Seldon Core natively supports both synchronous and asynchronous modes of operation. Asynchronicity is achieved via streaming: input data can be sent to an input topic in Kafka, and after the evaluation the output topic will contain the inference result. For those looking to use it in the v1 style, a service API is provided.\nSecondly, there is no single point of failure. Even if one or more nodes in the graph go down, the data will still be sitting on the streams waiting to be processed, and the evaluation resumes whenever the failed node comes back up.\nThirdly, data flow", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "c0eb1d51-9042-4f64-8946-35e6df9f82b7", "page": "architecture/dataflow", "section": "data-flow-design-paradigm-in-seldon-core", "text": "will contain the inference result. For those looking to use it in the v1 style, a service API is provided.\nSecondly, there is no single point of failure. Even if one or more nodes in the graph go down, the data will still be sitting on the streams waiting to be processed, and the evaluation resumes whenever the failed node comes back up.\nThirdly, data flow means intermediate data can be accessed at any arbitrary step of the graph, inspected and collected as necessary. Data lineage is possible throughout, which opens up opportunities for advanced monitoring and explainability use cases. This is a key feature for effective error surfacing in production environments as it allows:\n\nAdding context from different parts of the graph to better understand a particular output\nReducing false positive rates of alerts as different slices of the data can be investigated\nEnabling reproducing of results as fined-grained lineage of computation and associated data transformation are tracked by design\n\nFinally, inference graph can now be extended with adding new nodes at arbitrary places, all without affecting the pipeline execution. This kind of flexibility was not possible with v1. This also allows multiple pipelines to share common nodes and therefore optimising resources usage.\n\n\nReferences\u00b6\nMore details and information on data-centric AI and data flow paradigm can be found in these resources:\n\nData-centric AI Resource Hub: https://datacentricai.org/\nStanford MLSys seminar \u201cWhat can Data-Centric AI Learn from Data and ML Engineering?\u201d: https://www.youtube.com/watch?v=cqDgxP8DcJA\nA paper that explores data flow in ML deployment context: https://arxiv.org/abs/2204.12781\nIntroduction to flow based programming from its creator J.P. Morrison: https://jpaulm.github.io/fbp/index.html\nPathways: Asynchronous Distributed Dataflow for ML", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "fd55b742-e114-4bce-b848-b4b051d20578", "page": "architecture/dataflow", "section": "data-flow-design-paradigm-in-seldon-core", "text": "nodes and therefore optimising resources usage.\n\n\nReferences\u00b6\nMore details and information on data-centric AI and data flow paradigm can be found in these resources:\n\nData-centric AI Resource Hub: https://datacentricai.org/\nStanford MLSys seminar \u201cWhat can Data-Centric AI Learn from Data and ML Engineering?\u201d: https://www.youtube.com/watch?v=cqDgxP8DcJA\nA paper that explores data flow in ML deployment context: https://arxiv.org/abs/2204.12781\nIntroduction to flow based programming from its creator J.P. Morrison: https://jpaulm.github.io/fbp/index.html\nPathways: Asynchronous Distributed Dataflow for ML (research work from Google on the design and implementation of data flow based orchestration layer for accelerators): https://arxiv.org/abs/2203.12533\nBetter understanding of data requires tracking its history and context: https://queue.acm.org/detail.cfm?id=2602651\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "d95815b2-1226-41ac-a9b7-7f49171e1f03", "page": "architecture/dataflow", "section": "seldon-core-v1", "text": "\nSeldon Core v1\u00b6\nInitial release of Seldon Core introduced a concept of an inference graph, which can be thought of as a sequence of operations that happen to the inference request. Here is how it may look like:\n\nIn reality though this was not how Seldon Core v1 is implemented. Instead, Seldon deployment consists of a range of independent services that host models, transformations, detectors and explainers, and a central orchestrator that knows the inference graph topology and makes service calls in the correct order, passing data between requests and responses as necessary. Here is how the picture looks under the hood:\n\nWhile this is a convenient way of implementing evaluation graph with microservices, it has a few problems. Orchestrator becomes a bottleneck and a single point of failure. It also hides all the data transformations that need to happen to translate one service\u2019s response to another service\u2019s request. Data tracing and lineage becomes difficult. All in all, while Seldon platform is all about processing data, under-the-hood implementation was still focused on order of operations and not on data itself.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "65434cd8-3075-4fed-9dd8-e02ca3a87bc1", "page": "architecture/dataflow", "section": "data-flow", "text": "\nData flow\u00b6\nThe realisation of this disparity led to a new approach towards inference graph evaluation in v2, based on the data flow paradigm. Data flow is a well known concept in software engineering, known from 1960s. In contrast to services, that model programs as a control flow, focusing on the order of operations, data flow proposes to model software systems as a series of connections that modify incoming data, focusing on data flowing through the system. A particular flavor of data flow paradigm used by v2 is known as flow-based programming, FBP. FBP defines software applications as a set of processes which exchange data via connections that are external to those processes. Connections are made via named ports, which promotes data coupling between components of the system.\nData flow design makes data in software the top priority. That is one of the key messages of the so called \u201cdata-centric AI\u201d idea, which is becoming increasingly popular within the ML community. Data is a key component of a successful ML project. Data needs to be discovered, described, cleaned, understood, monitored and verified. Consequently, there is a growing demand for data-centric platforms and solutions. Making Seldon Core data-centric was one of the key goals of the v2 design.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "0be725a8-db80-469c-853b-eeaa097c30a9", "page": "architecture/dataflow", "section": "seldon-core-v2", "text": "\nSeldon Core v2\u00b6\nIn the context of Seldon Core application of FBP design approach means that the evaluation implementation is done the same way inferece graph. So instead of routing everything through a centralized orchestrator the evaluation happens in the same graph-like manner:\n\nAs far as implementation goes, Seldon Core v2 runs on Kafka. Inference request is put onto a pipeline input topic, which triggers an evaluation. Each part of the inference graph is a service running in its own container fronted by a model gateway. Model gateway listens to a corresponding input Kafka topic, reads data from it, calls the service and puts the received response to an output Kafka topic. There is also a pipeline gateway that allows to interact with Seldon Core in synchronous manner.\nThis approach gives SCv2 several important features. Firstly, Seldon Core natively supports both synchronous and asynchronous modes of operation. Asynchronicity is achieved via streaming: input data can be sent to an input topic in Kafka, and after the evaluation the output topic will contain the inference result. For those looking to use it in the v1 style, a service API is provided.\nSecondly, there is no single point of failure. Even if one or more nodes in the graph go down, the data will still be sitting on the streams waiting to be processed, and the evaluation resumes whenever the failed node comes back up.\nThirdly, data flow means intermediate data can be accessed at any arbitrary step of the graph, inspected and collected as necessary. Data lineage is possible throughout, which opens", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "e5d3baa8-9cdc-4d2c-a227-a7b6a0820992", "page": "architecture/dataflow", "section": "seldon-core-v2", "text": "of failure. Even if one or more nodes in the graph go down, the data will still be sitting on the streams waiting to be processed, and the evaluation resumes whenever the failed node comes back up.\nThirdly, data flow means intermediate data can be accessed at any arbitrary step of the graph, inspected and collected as necessary. Data lineage is possible throughout, which opens up opportunities for advanced monitoring and explainability use cases. This is a key feature for effective error surfacing in production environments as it allows:\n\nAdding context from different parts of the graph to better understand a particular output\nReducing false positive rates of alerts as different slices of the data can be investigated\nEnabling reproducing of results as fined-grained lineage of computation and associated data transformation are tracked by design\n\nFinally, inference graph can now be extended with adding new nodes at arbitrary places, all without affecting the pipeline execution. This kind of flexibility was not possible with v1. This also allows multiple pipelines to share common nodes and therefore optimising resources usage.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "2200b960-0fc7-4fde-964b-c3efb80e8d38", "page": "architecture/dataflow", "section": "references", "text": "\nReferences\u00b6\nMore details and information on data-centric AI and data flow paradigm can be found in these resources:\n\nData-centric AI Resource Hub: https://datacentricai.org/\nStanford MLSys seminar \u201cWhat can Data-Centric AI Learn from Data and ML Engineering?\u201d: https://www.youtube.com/watch?v=cqDgxP8DcJA\nA paper that explores data flow in ML deployment context: https://arxiv.org/abs/2204.12781\nIntroduction to flow based programming from its creator J.P. Morrison: https://jpaulm.github.io/fbp/index.html\nPathways: Asynchronous Distributed Dataflow for ML (research work from Google on the design and implementation of data flow based orchestration layer for accelerators): https://arxiv.org/abs/2203.12533\nBetter understanding of data requires tracking its history and context: https://queue.acm.org/detail.cfm?id=2602651\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/architecture/dataflow.html", "key": "architecture/dataflow"}}, {"key": "9d2142e1-05e3-45d9-9ae7-6c226222e081", "page": "examples/multi-version", "section": "artifact-versions", "text": "\nArtifact Versions\u00b6\nRun these examples from the samples folder.\n\nSeldon V2 Kubernetes Multi Version Artifact Examples\u00b6\nWe have a Triton model that has two version folders\nModel 1 adds 10 to input, Model 2 multiples by 10 the input. The structure of the artifact repo is shown below:\nconfig.pbtxt\n1/model.py <add 10>\n2/model.py <mul 10>\n\n\n\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.19.255.1'\n\n\n\n\nModel\u00b6\ncat ./models/multi-version-1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: math\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/multi-version\"\n  artifactVersion: 1\n  requirements:\n  - triton\n  - python\n\n\nkubectl apply -f ./models/multi-version-1.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math condition met\n\n\n\nseldon model infer math --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n  '{\"model_name\":\"math\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"math_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\ncat ./models/multi-version-2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: math\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/multi-version\"\n  artifactVersion: 2\n  requirements:\n  - triton\n  - python\n\n\nkubectl apply", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/multi-version.html", "key": "examples/multi-version"}}, {"key": "c1608abd-2674-4030-951e-18fdad12a918", "page": "examples/multi-version", "section": "artifact-versions", "text": "  12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\ncat ./models/multi-version-2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: math\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/multi-version\"\n  artifactVersion: 2\n  requirements:\n  - triton\n  - python\n\n\nkubectl apply -f ./models/multi-version-2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math configured\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math condition met\n\n\n\nseldon model infer math --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n  '{\"model_name\":\"math\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"math_2\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f ./models/multi-version-1.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"math\" deleted\n\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/multi-version.html", "key": "examples/multi-version"}}, {"key": "d1128063-eeff-425e-80c9-24ca01d33806", "page": "examples/multi-version", "section": "seldon-v2-kubernetes-multi-version-artifact-examples", "text": "\nSeldon V2 Kubernetes Multi Version Artifact Examples\u00b6\nWe have a Triton model that has two version folders\nModel 1 adds 10 to input, Model 2 multiples by 10 the input. The structure of the artifact repo is shown below:\nconfig.pbtxt\n1/model.py <add 10>\n2/model.py <mul 10>\n\n\n\nimport os\nos.environ[\"NAMESPACE\"] = \"seldon-mesh\"\n\n\nMESH_IP=!kubectl get svc seldon-mesh -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nMESH_IP=MESH_IP[0]\nimport os\nos.environ['MESH_IP'] = MESH_IP\nMESH_IP\n\n\n'172.19.255.1'\n\n\n\n\nModel\u00b6\ncat ./models/multi-version-1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: math\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/multi-version\"\n  artifactVersion: 1\n  requirements:\n  - triton\n  - python\n\n\nkubectl apply -f ./models/multi-version-1.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math condition met\n\n\n\nseldon model infer math --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n  '{\"model_name\":\"math\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"math_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\ncat ./models/multi-version-2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: math\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/multi-version\"\n  artifactVersion: 2\n  requirements:\n  - triton\n  - python\n\n\nkubectl apply -f ./models/multi-version-2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math configured\n\n\n\nkubectl wait --for", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/multi-version.html", "key": "examples/multi-version"}}, {"key": "5d3cd954-12ea-46bd-a6ce-30bd6be27728", "page": "examples/multi-version", "section": "seldon-v2-kubernetes-multi-version-artifact-examples", "text": "     13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\ncat ./models/multi-version-2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: math\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/multi-version\"\n  artifactVersion: 2\n  requirements:\n  - triton\n  - python\n\n\nkubectl apply -f ./models/multi-version-2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math configured\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math condition met\n\n\n\nseldon model infer math --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n  '{\"model_name\":\"math\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"math_2\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f ./models/multi-version-1.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"math\" deleted\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/multi-version.html", "key": "examples/multi-version"}}, {"key": "91ded6cb-0104-4236-af1b-94526d52ed83", "page": "examples/multi-version", "section": "model", "text": "\nModel\u00b6\ncat ./models/multi-version-1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: math\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/multi-version\"\n  artifactVersion: 1\n  requirements:\n  - triton\n  - python\n\n\nkubectl apply -f ./models/multi-version-1.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math created\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math condition met\n\n\n\nseldon model infer math --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n  '{\"model_name\":\"math\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"math_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\ncat ./models/multi-version-2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: math\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/multi-version\"\n  artifactVersion: 2\n  requirements:\n  - triton\n  - python\n\n\nkubectl apply -f ./models/multi-version-2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math configured\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math condition met\n\n\n\nseldon model infer math --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n  '{\"model_name\":\"math\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"math_2\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/multi-version.html", "key": "examples/multi-version"}}, {"key": "ae5e83d3-b444-4c95-bd25-44b660f571bb", "page": "examples/multi-version", "section": "model", "text": " - python\n\n\nkubectl apply -f ./models/multi-version-2.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math configured\n\n\n\nkubectl wait --for condition=ready --timeout=300s model --all -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io/math condition met\n\n\n\nseldon model infer math --inference-mode grpc --inference-host ${MESH_IP}:80 \\\n  '{\"model_name\":\"math\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"modelName\": \"math_2\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\nkubectl delete -f ./models/multi-version-1.yaml -n ${NAMESPACE}\n\n\nmodel.mlops.seldon.io \"math\" deleted\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/multi-version.html", "key": "examples/multi-version"}}, {"key": "5237204b-d581-4968-9bab-42d02ad4c936", "page": "performance-tests", "section": "performance-tests", "text": "\nPerformance tests\u00b6\nThis section describes how a user can run performance tests to understand the limits of a particular SCv2 deployment.\nThe base directly is tests/k6\n\nDriver\u00b6\nk6 is used to drive requests for load, unload and infer workloads. It is recommended that the load test is run within the same cluster that has SCv2 installed as it requires internal access to some of the services that are not automatically exposed to the outside world. Furthermore having the driver withthin the same cluster minimises link latency to SCv2 entrypoint; therefore infer latencies are more representatives of actual overheads of the system.\n\n\nTests\u00b6\n\nEnvoy\nTests synchronous inference requests via envoy\n\nTo run: make deploy-envoy-test\n\nAgent\nTests inference requests direct to a specific agent, defaults to triton-0 or mlserver-0\n\nTo run: make deploy-rproxy-test pr make deploy-rproxy-mlserver-test\n\nServer\nTests inference requests direct to a specific server (bypassing agent), defaults to triton-0 or mlserver-0\n\nto run: make deploy-server-test or deploy-server-mlserver-test\n\nPipeline gateway (HTTP-Kafka gateway)\nTests inference requests to one-node pipeline HTTP and GPRC requests\n\nTo run: make deploy-kpipeline-test\n\nModel gateway (Kafka-HTTP gateway)\nTests inference requests to a model via kafka\n\nTo run: deploy-kmodel-test\n\n\nResults\u00b6\nOne way to look at results is to look at the log of the pod that executed the kubernetes job.\nResults can also be persisted to a gs bucket, a service account k6-sa-key in the same namespace is required,\nUsers can also look at the metrics that are exposed in prometheus while the test is underway\n\n\nBuilding k6 image\u00b6\nIn the case a user is modifying the actual scenario of the test:\n\nexport DOCKERHUB_USERNAME=mydockerhubaccount\nbuild the k6 image via make build-push\nin the same shell environment, deploying jobs will use this custome built docker image\n\n\n\nModifying", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/performance-tests/index.html", "key": "performance-tests"}}, {"key": "0e8785cd-9fec-43ac-aa3a-ca27884b4043", "page": "performance-tests", "section": "performance-tests", "text": "to a gs bucket, a service account k6-sa-key in the same namespace is required,\nUsers can also look at the metrics that are exposed in prometheus while the test is underway\n\n\nBuilding k6 image\u00b6\nIn the case a user is modifying the actual scenario of the test:\n\nexport DOCKERHUB_USERNAME=mydockerhubaccount\nbuild the k6 image via make build-push\nin the same shell environment, deploying jobs will use this custome built docker image\n\n\n\nModifying tests\u00b6\nUsers can modify settings of the tests in tests/k6/configs/k8s/base/k6.yaml. This will apply to all subsequent tests that are deployed using the above process.\n\n\nSettings\u00b6\nSome settings that can be changed\n\nk6 args\n          \"--no-teardown\",\n          \"--summary-export\",\n          \"results/base.json\",\n          \"--out\",\n          \"csv=results/base.gz\",\n          \"-u\",\n          \"5\",\n          \"-i\",\n          \"100000\",\n          \"-d\",\n          \"120m\",\n          \"scenarios/infer_constant_vu.js\",\n          ]\n        # infer_constant_vu\n        # args: [\n        #   \"--no-teardown\",\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/performance-tests/index.html", "key": "performance-tests"}}, {"key": "5d28aa6f-67f7-4e6d-8079-5464981506d2", "page": "performance-tests", "section": "performance-tests", "text": "\"-d\",\n          \"120m\",\n          \"scenarios/infer_constant_vu.js\",\n          ]\n        # infer_constant_vu\n        # args: [\n        #   \"--no-teardown\",\n        #   \"--summary-export\",\n        #   \"results/base.json\",\n        #   \"--out\",\n        #   \"csv=results/base.gz\",\n        #   \"scenarios/infer_constant_rate.js\",\n        #   ]\n\n\n\n\nfor a full list, check k6 args\n\nEnvironment variables\n        - name: INFER_HTTP_ITERATIONS\n          value: \"1\"\n        - name: INFER_GRPC_ITERATIONS\n          value: \"1\"\n        - name: MODELNAME_PREFIX\n          value: \"tfsimplea,pytorch_cifar10a,tfmnista,mlflow_winea,irisa\"\n        - name: MODEL_TYPE\n          value: \"tfsimple,pytorch_cifar10,tfmnist,mlflow_wine,iris\"\n        - name: MODEL_MEMORY_BYTES\n          value: \"400000,8000000,43000000,200000,3000000\"\n        - name: MAX_NUM_MODELS\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/performance-tests/index.html", "key": "performance-tests"}}, {"key": "4a9794c8-2c1a-4fe6-b148-713c2174a68b", "page": "performance-tests", "section": "performance-tests", "text": "   value: \"tfsimplea,pytorch_cifar10a,tfmnista,mlflow_winea,irisa\"\n        - name: MODEL_TYPE\n          value: \"tfsimple,pytorch_cifar10,tfmnist,mlflow_wine,iris\"\n        - name: MODEL_MEMORY_BYTES\n          value: \"400000,8000000,43000000,200000,3000000\"\n        - name: MAX_NUM_MODELS\n          value: \"800,100,25,100,100\"\n          # value: \"0,0,25,100,100\"\n        - name: INFER_BATCH_SIZE\n          value: \"1,1,1,1,1\"\n        - name: WARMUP\n          value: \"false\"\n\n\n\nfor MODEL_TYPE, choose from:\n\nconst tfsimple_string = \"tfsimple_string\"\nconst tfsimple = \"tfsimple\"\nconst iris = \"iris\"  // mlserver\nconst pytorch_cifar10 = \"pytorch_cifar10\"\nconst tfmnist = \"tfmnist\"\nconst tfresnet152 = \"tfresnet152\"\nconst onnx_gpt2 = \"onnx_gpt2\"\nconst mlflow_wine = \"mlflow_wine\" // mlserver\nconst add10 = \"add10\" // https://github.com/SeldonIO/triton-python-examples/tree/master/add10\nconst sentiment = \"sentiment\" // mlserver\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/performance-tests/index.html", "key": "performance-tests"}}, {"key": "ffe40de5-6d32-4721-9e2c-40d1e344b01f", "page": "performance-tests", "section": "driver", "text": "\nDriver\u00b6\nk6 is used to drive requests for load, unload and infer workloads. It is recommended that the load test is run within the same cluster that has SCv2 installed as it requires internal access to some of the services that are not automatically exposed to the outside world. Furthermore having the driver withthin the same cluster minimises link latency to SCv2 entrypoint; therefore infer latencies are more representatives of actual overheads of the system.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/performance-tests/index.html", "key": "performance-tests"}}, {"key": "5b173783-f279-4a8d-88de-1c994ab028cb", "page": "performance-tests", "section": "tests", "text": "\nTests\u00b6\n\nEnvoy\nTests synchronous inference requests via envoy\n\nTo run: make deploy-envoy-test\n\nAgent\nTests inference requests direct to a specific agent, defaults to triton-0 or mlserver-0\n\nTo run: make deploy-rproxy-test pr make deploy-rproxy-mlserver-test\n\nServer\nTests inference requests direct to a specific server (bypassing agent), defaults to triton-0 or mlserver-0\n\nto run: make deploy-server-test or deploy-server-mlserver-test\n\nPipeline gateway (HTTP-Kafka gateway)\nTests inference requests to one-node pipeline HTTP and GPRC requests\n\nTo run: make deploy-kpipeline-test\n\nModel gateway (Kafka-HTTP gateway)\nTests inference requests to a model via kafka\n\nTo run: deploy-kmodel-test\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/performance-tests/index.html", "key": "performance-tests"}}, {"key": "ad45604a-6e72-435b-bda2-b97036b6504b", "page": "performance-tests", "section": "settings", "text": "\nSettings\u00b6\nSome settings that can be changed\n\nk6 args\n          \"--no-teardown\",\n          \"--summary-export\",\n          \"results/base.json\",\n          \"--out\",\n          \"csv=results/base.gz\",\n          \"-u\",\n          \"5\",\n          \"-i\",\n          \"100000\",\n          \"-d\",\n          \"120m\",\n          \"scenarios/infer_constant_vu.js\",\n          ]\n        # infer_constant_vu\n        # args: [\n        #   \"--no-teardown\",\n        #   \"--summary-export\",\n        #   \"results/base.json\",\n        #   \"--out\",\n        #   \"csv=results/base.gz\",\n        #   \"scenarios/infer_constant_rate.js\",\n        #   ]\n\n\n\n\nfor a full list, check k6 args\n\nEnvironment variables\n        - name: INFER_HTTP_ITERATIONS\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/performance-tests/index.html", "key": "performance-tests"}}, {"key": "0e20d4cd-dde6-495a-8387-a0583806d320", "page": "performance-tests", "section": "settings", "text": "    #   \"--out\",\n        #   \"csv=results/base.gz\",\n        #   \"scenarios/infer_constant_rate.js\",\n        #   ]\n\n\n\n\nfor a full list, check k6 args\n\nEnvironment variables\n        - name: INFER_HTTP_ITERATIONS\n          value: \"1\"\n        - name: INFER_GRPC_ITERATIONS\n          value: \"1\"\n        - name: MODELNAME_PREFIX\n          value: \"tfsimplea,pytorch_cifar10a,tfmnista,mlflow_winea,irisa\"\n        - name: MODEL_TYPE\n          value: \"tfsimple,pytorch_cifar10,tfmnist,mlflow_wine,iris\"\n        - name: MODEL_MEMORY_BYTES\n          value: \"400000,8000000,43000000,200000,3000000\"\n        - name: MAX_NUM_MODELS\n          value: \"800,100,25,100,100\"\n          # value: \"0,0,25,100,100\"\n        - name: INFER_BATCH_SIZE\n          value: \"1,1,1,1,1\"\n        - name: WARMUP\n          value: \"false\"\n\n\n\nfor MODEL_TYPE, choose from:\n\nconst tfsimple_string = \"tfsimple_string\"\nconst tfsimple = \"tfsimple\"\nconst iris = \"iris\"  // mlserver\nconst pytorch_cifar10 = \"pytorch_cifar10\"\nconst tfmnist = \"tfmnist\"\nconst tfresnet152 = \"tfresnet152\"\nconst onnx_gpt2 = \"onnx_gpt2\"\nconst mlflow_wine", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/performance-tests/index.html", "key": "performance-tests"}}, {"key": "373ac597-62d7-4b63-a413-17274572ea35", "page": "performance-tests", "section": "settings", "text": " - name: INFER_BATCH_SIZE\n          value: \"1,1,1,1,1\"\n        - name: WARMUP\n          value: \"false\"\n\n\n\nfor MODEL_TYPE, choose from:\n\nconst tfsimple_string = \"tfsimple_string\"\nconst tfsimple = \"tfsimple\"\nconst iris = \"iris\"  // mlserver\nconst pytorch_cifar10 = \"pytorch_cifar10\"\nconst tfmnist = \"tfmnist\"\nconst tfresnet152 = \"tfresnet152\"\nconst onnx_gpt2 = \"onnx_gpt2\"\nconst mlflow_wine = \"mlflow_wine\" // mlserver\nconst add10 = \"add10\" // https://github.com/SeldonIO/triton-python-examples/tree/master/add10\nconst sentiment = \"sentiment\" // mlserver\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/performance-tests/index.html", "key": "performance-tests"}}, {"key": "7e9e481c-abc8-4a13-af80-49b73804e33a", "page": "drift", "section": "drift-detection", "text": "\nDrift Detection\u00b6\nDrift detection models are treated as any other Model. You can run any saved Alibi-Detect drift detection model by adding the requirement alibi-detect.\nAn example drift detection model from the CIFAR10 image classification example is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nUsually you would run these models in an asynchronous part of a Pipeline, i.e. they are not connected to the output of the Pipeline which defines the synchronous path. For example, the CIFAR-10 image detection example uses a pipeline as shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: cifar10-production\nspec:\n  steps:\n    - name: cifar10\n    - name: cifar10-outlier\n    - name: cifar10-drift\n      batch:\n        size: 20\n  output:\n    steps:\n    - cifar10\n    - cifar10-outlier.outputs.is_outlier\n\n\nNote how the cifar10-drift model is not part of the path to the outputs. Drift alerts can be read from the Kafka topic of the model.\n\nExamples\u00b6\n\nCIFAR10 image classification with drift detector\nTabular income classification model with drift detector\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/drift/index.html", "key": "drift"}}, {"key": "21cefa03-3e14-4c87-803d-30429f2b7320", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "\nIstio\u00b6\nIstio provides a service mesh and ingress solution.\nWe will run through some examples as shown in the notebook service-meshes/istio/istio.ipynb\n\nSingle Model\u00b6\n\nA Seldon Iris Model\nAn istio Gateway\nAn instio VirtualService to expose REST and gRPC\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - istio-system/seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n           ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "586f051f-0e58-443c-a092-9ff85773420a", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "    prefix: /v2\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n\n\n\n\nTraffic Split\u00b6\n\nTwo Iris Models\nAn istio Gateway\nAn istio VirtualService with traffic split\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n  - hosts:\n    - '*'\n    port:\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "e2fa3e01-5bb8-4634-b05f-5bd4479a44cc", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - istio-system/seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2/models/iris\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "2445dc32-2464-4957-b19e-a2fc54bbdea3", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "         seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n\n\n\n\nIstio Notebook Examples\u00b6\nAssumes\n\nYou have installed istio as per their docs\nYou have exposed the ingressgateway as an external loadbalancer\n\ntested with:\nistioctl version\n1.13.2\n\nistioctl install --set profile=demo -y\n\n\nINGRESS_IP=!kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nINGRESS_IP=INGRESS_IP[0]\nimport os\nos.environ['INGRESS_IP'] = INGRESS_IP\nINGRESS_IP\n\n\n'172.21.255.1'\n\n\n\nIstio Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "73a5f955-1c6b-4845-8ae5-4525db76247c", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "     set:\n            seldon-model: iris2\n      weight: 50\n\n\n\n\nIstio Notebook Examples\u00b6\nAssumes\n\nYou have installed istio as per their docs\nYou have exposed the ingressgateway as an external loadbalancer\n\ntested with:\nistioctl version\n1.13.2\n\nistioctl install --set profile=demo -y\n\n\nINGRESS_IP=!kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nINGRESS_IP=INGRESS_IP[0]\nimport os\nos.environ['INGRESS_IP'] = INGRESS_IP\nINGRESS_IP\n\n\n'172.21.255.1'\n\n\n\nIstio Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - istio-system/seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "a02e86e9-ed0f-4692-98bd-964f0cbcbf7b", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "/etc/istio/ingressgateway-certs/tls.crt\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - istio-system/seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n\n\n!kustomize build config/single-model | kubectl apply -f -\n\n\nmodel.mlops.seldon.io/iris unchanged\ngateway.networking.istio.io/seldon-gateway unchanged\nvirtualservice.networking.istio.io/iris-route configured\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n<", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "b7f8545f-f5fc-4cf1-a48d-a46d1b92e3be", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:34:11 GMT\n< server: istio-envoy\n< x-envoy-upstream-service-time: 802\n< seldon-route: iris_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"83520c4a-c7f1-4363-9bfd-60c5d8ee2dc5\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nmodel.mlops.seldon.io \"iris\" deleted\ngateway.networking.istio.io \"seldon-gateway\" deleted\nvirtualservice.networking.istio.io \"iris-route\" deleted\n\n\n\n\nTraffic Split Two Models\u00b6\n!kustomize build config/traffic-split\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "5cd290fe-690c-48b6-8986-3fd317c97185", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "      ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nmodel.mlops.seldon.io \"iris\" deleted\ngateway.networking.istio.io \"seldon-gateway\" deleted\nvirtualservice.networking.istio.io \"iris-route\" deleted\n\n\n\n\nTraffic Split Two Models\u00b6\n!kustomize build config/traffic-split\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2/models/iris\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "3fcca62e-7be3-471f-affb-c4fd9359b5da", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "     request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\ngateway.networking.istio.io/seldon-gateway created\nvirtualservice.networking.istio.io/iris-route created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "e423d393-2d00-48bc-bfb9-0362b4bae34f", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": "     headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\ngateway.networking.istio.io/seldon-gateway created\nvirtualservice.networking.istio.io/iris-route created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 197\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:35:01 GMT\n< server: istio-envoy\n< x-envoy-upstream-service-time: 801\n< seldon-route: iris1_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris1_1\",\"model_version\":\"1\",\"id\":\"b54e6d8c-d253-4bb9-bb64-02c2ee49e89f\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris1\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris1_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "c76f5a83-6c75-4ab4-82e6-2f03acd92cd3", "page": "kubernetes/service-meshes/istio", "section": "istio", "text": " {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/traffic-split | kubectl delete -f -\n\n\nmodel.mlops.seldon.io \"iris1\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\ngateway.networking.istio.io \"seldon-gateway\" deleted\nvirtualservice.networking.istio.io \"iris-route\" deleted\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "45341281-fdae-4947-9048-23ec3ccae117", "page": "kubernetes/service-meshes/istio", "section": "single-model", "text": "\nSingle Model\u00b6\n\nA Seldon Iris Model\nAn istio Gateway\nAn instio VirtualService to expose REST and gRPC\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - istio-system/seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n  - match:\n    - uri:\n        prefix:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "81a33ed4-9249-4ecc-b693-fdee887b8f91", "page": "kubernetes/service-meshes/istio", "section": "single-model", "text": "- destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "ce747c7f-15b7-4a83-967d-8a794b9292ac", "page": "kubernetes/service-meshes/istio", "section": "traffic-split", "text": "\nTraffic Split\u00b6\n\nTwo Iris Models\nAn istio Gateway\nAn istio VirtualService with traffic split\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - istio-system/seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2/models/iris\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "25f5d732-ce28-4724-8bae-05385433b6c6", "page": "kubernetes/service-meshes/istio", "section": "traffic-split", "text": "/v2/models/iris\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "911fd3a1-3d38-467e-b347-a08483e4fc36", "page": "kubernetes/service-meshes/istio", "section": "traffic-split", "text": "         seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "cef1bd61-91a1-430d-9e99-c127681a05c7", "page": "kubernetes/service-meshes/istio", "section": "istio-notebook-examples", "text": "\nIstio Notebook Examples\u00b6\nAssumes\n\nYou have installed istio as per their docs\nYou have exposed the ingressgateway as an external loadbalancer\n\ntested with:\nistioctl version\n1.13.2\n\nistioctl install --set profile=demo -y\n\n\nINGRESS_IP=!kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}'\nINGRESS_IP=INGRESS_IP[0]\nimport os\nos.environ['INGRESS_IP'] = INGRESS_IP\nINGRESS_IP\n\n\n'172.21.255.1'\n\n\n\nIstio Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - istio-system/seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "228e32a8-c9af-4db1-bdfa-b577ea00e4b0", "page": "kubernetes/service-meshes/istio", "section": "istio-notebook-examples", "text": "  - uri:\n        prefix: /v2\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n\n\n!kustomize build config/single-model | kubectl apply -f -\n\n\nmodel.mlops.seldon.io/iris unchanged\ngateway.networking.istio.io/seldon-gateway unchanged\nvirtualservice.networking.istio.io/iris-route configured\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:34:11 GMT\n< server: istio-envoy\n< x-envoy-upstream-service-time: 802\n< seldon-route: iris_1\n< \n* Connection #0 to host", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "7a3369d0-6331-4f29-81f7-a99391852ab0", "page": "kubernetes/service-meshes/istio", "section": "istio-notebook-examples", "text": "\"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:34:11 GMT\n< server: istio-envoy\n< x-envoy-upstream-service-time: 802\n< seldon-route: iris_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"83520c4a-c7f1-4363-9bfd-60c5d8ee2dc5\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nmodel.mlops.seldon.io \"iris\" deleted\ngateway.networking.istio.io \"seldon-gateway\" deleted\nvirtualservice.networking.istio.io \"iris-route\" deleted\n\n\n\n\nTraffic Split Two Models\u00b6\n!kustomize build config/traffic-split\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "a5db831a-ac8f-4b7d-9621-9148c6233dde", "page": "kubernetes/service-meshes/istio", "section": "istio-notebook-examples", "text": "-\n\n\nmodel.mlops.seldon.io \"iris\" deleted\ngateway.networking.istio.io \"seldon-gateway\" deleted\nvirtualservice.networking.istio.io \"iris-route\" deleted\n\n\n\n\nTraffic Split Two Models\u00b6\n!kustomize build config/traffic-split\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2/models/iris\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "d8411a14-bea6-48c3-9c43-ba995cc86aca", "page": "kubernetes/service-meshes/istio", "section": "istio-notebook-examples", "text": "  seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\ngateway.networking.istio.io/seldon-gateway created\nvirtualservice.networking.istio.io/iris-route created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\",", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "8342b80f-2d7c-4af7-a61b-18f996648924", "page": "kubernetes/service-meshes/istio", "section": "istio-notebook-examples", "text": "          seldon-model: iris2\n      weight: 50\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\ngateway.networking.istio.io/seldon-gateway created\nvirtualservice.networking.istio.io/iris-route created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 197\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:35:01 GMT\n< server: istio-envoy\n< x-envoy-upstream-service-time: 801\n< seldon-route: iris1_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris1_1\",\"model_version\":\"1\",\"id\":\"b54e6d8c-d253-4bb9-bb64-02c2ee49e89f\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris1\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris1_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/traffic-split | kubectl delete -f", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "3f128c95-eb65-4613-804c-e0882ac90814", "page": "kubernetes/service-meshes/istio", "section": "istio-notebook-examples", "text": "     \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/traffic-split | kubectl delete -f -\n\n\nmodel.mlops.seldon.io \"iris1\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\ngateway.networking.istio.io \"seldon-gateway\" deleted\nvirtualservice.networking.istio.io \"iris-route\" deleted\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "7bbfcf9c-11c7-4790-890f-6dc4a4b76f53", "page": "kubernetes/service-meshes/istio", "section": "istio-single-model-example", "text": "\nIstio Single Model Example\u00b6\n!kustomize build config/single-model\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      privateKey: /etc/istio/ingressgateway-certs/tls.key\n      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - istio-system/seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "d51afff6-650d-4df0-8bf6-6f5ca66e8520", "page": "kubernetes/service-meshes/istio", "section": "istio-single-model-example", "text": " host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris\n\n\n!kustomize build config/single-model | kubectl apply -f -\n\n\nmodel.mlops.seldon.io/iris unchanged\ngateway.networking.istio.io/seldon-gateway unchanged\nvirtualservice.networking.istio.io/iris-route configured\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:34:11 GMT\n< server: istio-envoy\n< x-envoy-upstream-service-time: 802\n< seldon-route: iris_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"83520c4a-c7f1-4363-9bfd-60c5d8ee2dc5\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "e5f730d0-f839-46bd-ac8e-7394ef84a29e", "page": "kubernetes/service-meshes/istio", "section": "istio-single-model-example", "text": "off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 196\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:34:11 GMT\n< server: istio-envoy\n< x-envoy-upstream-service-time: 802\n< seldon-route: iris_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris_1\",\"model_version\":\"1\",\"id\":\"83520c4a-c7f1-4363-9bfd-60c5d8ee2dc5\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/single-model | kubectl delete -f -\n\n\nmodel.mlops.seldon.io \"iris\" deleted\ngateway.networking.istio.io \"seldon-gateway\" deleted\nvirtualservice.networking.istio.io \"iris-route\" deleted\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "44f36536-9649-420b-9541-f869f7654359", "page": "kubernetes/service-meshes/istio", "section": "traffic-split-two-models", "text": "\nTraffic Split Two Models\u00b6\n!kustomize build config/traffic-split\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris1\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\n  namespace: seldon-mesh\nspec:\n  requirements:\n  - sklearn\n  storageUri: gs://seldon-models/mlserver/iris\n---\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: seldon-gateway\n  namespace: seldon-mesh\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: iris-route\n  namespace: seldon-mesh\nspec:\n  gateways:\n  - seldon-gateway\n  hosts:\n  - '*'\n  http:\n  - match:\n    - uri:\n        prefix: /v2/models/iris\n    name: iris-http\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "9f4e44f1-cbaf-42ae-abf4-46a72c476220", "page": "kubernetes/service-meshes/istio", "section": "traffic-split-two-models", "text": "   weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n  - match:\n    - uri:\n        prefix: /inference.GRPCInferenceService\n    name: iris-grpc\n    route:\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris1\n      weight: 50\n    - destination:\n        host: seldon-mesh.seldon-mesh.svc.cluster.local\n      headers:\n        request:\n          set:\n            seldon-model: iris2\n      weight: 50\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\ngateway.networking.istio.io/seldon-gateway created\nvirtualservice.networking.istio.io/iris-route created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n* ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "eaa8e7f7-f8a0-49ec-9e62-245acaea5d67", "page": "kubernetes/service-meshes/istio", "section": "traffic-split-two-models", "text": "    seldon-model: iris2\n      weight: 50\n\n\n!kustomize build config/traffic-split | kubectl apply -f -\n\n\nmodel.mlops.seldon.io/iris1 created\nmodel.mlops.seldon.io/iris2 created\ngateway.networking.istio.io/seldon-gateway created\nvirtualservice.networking.istio.io/iris-route created\n\n\n!kubectl wait --for condition=ready --timeout=300s model --all -n seldon-mesh\n\n\nmodel.mlops.seldon.io/iris1 condition met\nmodel.mlops.seldon.io/iris2 condition met\n\n\n!curl -v http://${INGRESS_IP}/v2/models/iris/infer -H \"Content-Type: application/json\" \\\n        -d '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n*   Trying 172.21.255.1...\n* Connected to 172.21.255.1 (172.21.255.1) port 80 (#0)\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: 172.21.255.1\n> User-Agent: curl/7.47.0\n> Accept: */*\n> Content-Type: application/json\n> Content-Length: 94\n> \n* upload completely sent off: 94 out of 94 bytes\n< HTTP/1.1 200 OK\n< content-length: 197\n< content-type: application/json\n< date: Sat, 16 Apr 2022 15:35:01 GMT\n< server: istio-envoy\n< x-envoy-upstream-service-time: 801\n< seldon-route: iris1_1\n< \n* Connection #0 to host 172.21.255.1 left intact\n{\"model_name\":\"iris1_1\",\"model_version\":\"1\",\"id\":\"b54e6d8c-d253-4bb9-bb64-02c2ee49e89f\",\"parameters\":null,\"outputs\":[{\"name\":\"predict\",\"shape\":[1],\"datatype\":\"INT64\",\"parameters\":null,\"data\":[2]}]}\n\n\n!grpcurl -d '{\"model_name\":\"iris1\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}' \\\n    -plaintext \\\n    -import-path ../../apis \\\n    -proto ../../apis/mlops/v2_dataplane/v2_dataplane.proto \\\n    ${INGRESS_IP}:80 inference.GRPCInferenceService/ModelInfer\n\n\n{\n  \"modelName\": \"iris1_1\",\n  \"modelVersion\": \"1\",\n  \"outputs\": [\n    {\n      \"name\": \"predict\",\n      \"datatype\": \"INT64\",\n      \"shape\": [\n        \"1\"\n      ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/traffic-split | kubectl delete -f -\n\n\nmodel.mlops.seldon.io \"iris1\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\ngateway.networking.istio.io \"seldon-gateway\"", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "84872fb1-504c-4ec7-a989-9863d2232366", "page": "kubernetes/service-meshes/istio", "section": "traffic-split-two-models", "text": "     ],\n      \"contents\": {\n        \"int64Contents\": [\n          \"2\"\n        ]\n      }\n    }\n  ]\n}\n\n\n!kustomize build config/traffic-split | kubectl delete -f -\n\n\nmodel.mlops.seldon.io \"iris1\" deleted\nmodel.mlops.seldon.io \"iris2\" deleted\ngateway.networking.istio.io \"seldon-gateway\" deleted\nvirtualservice.networking.istio.io \"iris-route\" deleted\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/istio/index.html", "key": "kubernetes/service-meshes/istio"}}, {"key": "2b48d942-f75f-4e40-8008-afee8bc0f427", "page": "faqs", "section": "faqs", "text": "\nFAQs\u00b6\n\nCan Seldon Core V2 be used with Seldon Core V1\u00b6\nThe two projects are able to be run side by side. Existing users of Seldon Core can update to deploy their models using Seldon Core V2 as needed to take advantage of the new functionality. Both will be supported.\n\n\nShould I choose V1 APIs or V2 APIs\u00b6\nThis depends on your use case. V2 APIs are not yet at GA so might contain breaking changes in future releases.\nUse V1 for:\n\nTight integration to Seldon V1 protocol\nTensorflow Server requirements\nNeed managed istio integration\n\nUse V2 for:\n\nMulti-model serving\nMore expressive DAG inference pipelines\nData-centric (Kafka)\nService mesh agnostic\nSimpler single model usage\nV2 Protocol\n\n\n\nCan I do payload logging in Seldon Core v2?\u00b6\nBy default, the input and output of every step in a pipeline (as well as the pipeline itself) is logged in Kafka.\nFrom there it\u2019s up to you what to do with the data.\nYou could use something like Kafka Connect to stream the logs to a datastore of your choice.\nNote that there is no automatic request logging for models being accessed directly over REST or gRPC.\nRequests need to be sent via pipelines to be recorded in Kafka.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/faqs/index.html", "key": "faqs"}}, {"key": "0426a30d-4e52-46e7-8ceb-96efe88f605c", "page": "faqs", "section": "can-i-do-payload-logging-in-seldon-core-v2", "text": "\nCan I do payload logging in Seldon Core v2?\u00b6\nBy default, the input and output of every step in a pipeline (as well as the pipeline itself) is logged in Kafka.\nFrom there it\u2019s up to you what to do with the data.\nYou could use something like Kafka Connect to stream the logs to a datastore of your choice.\nNote that there is no automatic request logging for models being accessed directly over REST or gRPC.\nRequests need to be sent via pipelines to be recorded in Kafka.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/faqs/index.html", "key": "faqs"}}, {"key": "31ba25ab-2dd8-4638-8c01-3cf8de5e9c4c", "page": "getting-started/kubernetes-installation/security/aws-msk-sasl", "section": "aws-msk-sasl", "text": "\nAWS MSK SASL\u00b6\n\nNew in Seldon Core 2.5.0\n\nSeldon Core v2 can integrate with Amazon managed Apache Kafka (MSK). You can control access to your Amazon MSK clusters using sign-in credentials that are stored and secured using AWS Secrets Manager. Storing user credentials in Secrets Manager reduces the overhead of cluster authentication such as auditing, updating, and rotating credentials. Secrets Manager also lets you share user credentials across clusters.\n\nNote\nConfiguration of the AWS MSK instance itself is out of scope for this example.\nPlease follow the official AWS documentation on how to enable SASL and public access to the Kafka cluster (if required).\n\n\nSetting up SASL/SCRAM authentication for an Amazon MSK cluster\u00b6\nTo setup SASL/SCRAM in an Amazon MSK cluster, please follow the guide from Amazon\u2019s Official documentation.\nDo not forget to also copy the bootstrap.servers which we will use it in our configuration later below for Seldon.\n\n\nCreate Kubernetes Secret\u00b6\nSeldon Core v2 expects password to be in form of K8s secret\nkubectl create secret generic aws-msk-kafka-secret -n seldon-mesh --from-literal password=\"<MSK SASL Password>\"\n\n\n\n\nConfigure Seldon Core v2\u00b6\nConfigure Seldon Core v2 by setting following Helm values:\nkafka:\n  bootstrap: <msk-bootstrap-server-endpoints>\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n\nsecurity:\n    kafka:\n      protocol: SASL_SSL\n      sasl:\n        mechanism: SCRAM-SHA-512\n        client:\n          username: < username >\n          secret: aws-msk-kafka-secret\n        ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-sasl.html", "key": "getting-started/kubernetes-installation/security/aws-msk-sasl"}}, {"key": "1fa9e7eb-2f6d-45fd-b69b-8c96ba5d61df", "page": "getting-started/kubernetes-installation/security/aws-msk-sasl", "section": "aws-msk-sasl", "text": " kafka:\n      protocol: SASL_SSL\n      sasl:\n        mechanism: SCRAM-SHA-512\n        client:\n          username: < username >\n          secret: aws-msk-kafka-secret\n          passwordPath: password\n      ssl:\n        client:\n          secret:\n          brokerValidationSecret:\n\n\nNote you may need to tweak replicationFactor and numPartitions to your cluster configuration.\n\n\nTroubleshooting\u00b6\n\nPlease check Amazon MSK Troubleshooting documentation.\nSet the kafka config map debug setting to all. For Helm install you can set kafka.debug=all.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-sasl.html", "key": "getting-started/kubernetes-installation/security/aws-msk-sasl"}}, {"key": "db8bfad8-39c6-4f44-9301-4ec82b6c2f21", "page": "getting-started/kubernetes-installation/security/aws-msk-sasl", "section": "configure-seldon-core-v2", "text": "\nConfigure Seldon Core v2\u00b6\nConfigure Seldon Core v2 by setting following Helm values:\nkafka:\n  bootstrap: <msk-bootstrap-server-endpoints>\n  topics:\n    replicationFactor: 3\n    numPartitions: 4\n\nsecurity:\n    kafka:\n      protocol: SASL_SSL\n      sasl:\n        mechanism: SCRAM-SHA-512\n        client:\n          username: < username >\n          secret: aws-msk-kafka-secret\n          passwordPath: password\n      ssl:\n        client:\n          secret:\n          brokerValidationSecret:\n\n\nNote you may need to tweak replicationFactor and numPartitions to your cluster configuration.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/aws-msk-sasl.html", "key": "getting-started/kubernetes-installation/security/aws-msk-sasl"}}, {"key": "001481f8-94c2-46d0-a051-310b87aca3f5", "page": "apis/scheduler", "section": "scheduler-api", "text": "\nScheduler API\u00b6\nThe Seldon scheduler API provides a gRPC service to allow Models, Servers, Experiments, and Pipelines to be managed. In Kubernetes the manager deployed by Seldon translates Kubernetes custom resource definitions into calls to the Seldon Scheduler.\nIn non-Kubernetes environments users of Seldon could create a client to directly control Seldon resources using this API.\n\nProto Definition\u00b6\nsyntax = \"proto3\";\n\npackage seldon.mlops.scheduler;\n\noption go_package = \"github.com/seldonio/seldon-core/apis/go/v2/mlops/scheduler\";\n\nimport \"google/protobuf/timestamp.proto\";\n\n// [START Messages]\n\nmessage LoadModelRequest {\n  Model model = 1;\n}\n\nmessage Model {\n  MetaData meta = 1;\n  ModelSpec modelSpec = 2;\n  DeploymentSpec deploymentSpec = 3;\n  StreamSpec streamSpec = 4;\n}\n\nmessage MetaData {\n  string name = 1;\n  optional string kind = 2;\n  optional string version = 3;\n  optional KubernetesMeta kubernetesMeta = 4; // Kubernetes specific config\n}\n\nmessage DeploymentSpec {\n  uint32 replicas = 1;\n  uint32 minReplicas = 2;\n  uint32 maxReplicas = 3;\n  bool logPayloads = 4;\n}\n\n/* ModelDetails\n*/\nmessage ModelSpec {\n  string uri = 1; // storage uri from where to download the artifacts\n  optional uint32 artifactVersion = 2; // Optional v2 version folder to select\n  optional StorageConfig storageConfig = 3; // Storage auth configuration\n  repeated string requirements = 4; // list of capabilities the server must satisfy to run this model\n  optional uint64 memoryBytes = 5; // Requested memory\n  optional string server = 6; // the particular model server to load the model. If unspecified will be chosen.\n  optional ExplainerSpec explainer = 7; // optional black box explainer details\n  repeated ParameterSpec parameters = 8; // parameters to load with model\n}\n\nmessage ParameterSpec", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "accc4dc3-f1d5-4ff1-91d5-273d11f3a05a", "page": "apis/scheduler", "section": "scheduler-api", "text": "of capabilities the server must satisfy to run this model\n  optional uint64 memoryBytes = 5; // Requested memory\n  optional string server = 6; // the particular model server to load the model. If unspecified will be chosen.\n  optional ExplainerSpec explainer = 7; // optional black box explainer details\n  repeated ParameterSpec parameters = 8; // parameters to load with model\n}\n\nmessage ParameterSpec {\n  string name = 1;\n  string value = 2;\n}\n\nmessage ExplainerSpec {\n  string type = 1;\n  // 1 of semantic either model or pipeline reference\n  optional string modelRef = 2;\n  optional string pipelineRef = 3;\n}\n\nmessage KubernetesMeta {\n  string namespace = 1;\n  int64 generation = 2;\n}\n\nmessage StreamSpec {\n  string inputTopic = 2;\n  string outputTopic = 3;\n}\n\nmessage StorageConfig {\n  oneof config {\n    string storageSecretName = 1;\n    string storageRcloneConfig = 2;\n  }\n}\n\nmessage LoadModelResponse {\n\n}\n\n/* ModelReference represents a unique model\n*/\nmessage ModelReference {\n  string name = 1;\n  optional uint32 version = 2;\n}\n\nmessage UnloadModelRequest {\n  ModelReference model = 1;\n  optional KubernetesMeta kubernetesMeta = 2;\n}\n\nmessage UnloadModelResponse {\n}\n\n/* ModelStatusResponse provides the current assignment of the model onto a server\n*/\nmessage ModelStatusResponse {\n  string modelName = 1;\n  repeated ModelVersionStatus versions = 2;\n  bool deleted = 3;\n}\n\nmessage ModelVersionStatus {\n  uint32 version = 2;\n  string serverName = 3;\n  optional KubernetesMeta kubernetesMeta = 4;\n  map<int32,ModelReplicaStatus> modelReplicaState = 5;\n  ModelStatus state = 6;\n  optional Model modelDefn = 7;\n}\n\nmessage ModelStatus {\n  enum ModelState {\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "945225ab-7b1c-48c9-a88b-9a0de83063b4", "page": "apis/scheduler", "section": "scheduler-api", "text": "model onto a server\n*/\nmessage ModelStatusResponse {\n  string modelName = 1;\n  repeated ModelVersionStatus versions = 2;\n  bool deleted = 3;\n}\n\nmessage ModelVersionStatus {\n  uint32 version = 2;\n  string serverName = 3;\n  optional KubernetesMeta kubernetesMeta = 4;\n  map<int32,ModelReplicaStatus> modelReplicaState = 5;\n  ModelStatus state = 6;\n  optional Model modelDefn = 7;\n}\n\nmessage ModelStatus {\n  enum ModelState {\n      ModelStateUnknown = 0;\n      ModelProgressing = 1;\n      ModelAvailable = 2;\n      ModelFailed = 3;\n      ModelTerminating = 4;\n      ModelTerminated = 5;\n      ModelTerminateFailed = 6;\n      ScheduleFailed = 7;\n  }\n  ModelState state = 1;\n  string reason = 2;\n  uint32 availableReplicas = 3;\n  uint32 unavailableReplicas = 4;\n  google.protobuf.Timestamp lastChangeTimestamp = 5;\n}\n\nmessage ModelReplicaStatus {\n  enum ModelReplicaState {\n      ModelReplicaStateUnknown = 0;\n      LoadRequested = 1;\n      Loading = 2;\n      Loaded = 3;\n      LoadFailed = 4;\n      UnloadRequested = 5;\n      Unloading = 6;\n      Unloaded = 7;\n      UnloadFailed = 8;\n      Available = 9;\n      LoadedUnavailable = 10;\n      UnloadEnvoyRequested = 11;\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "448a71df-25e1-4020-bfde-6426051b9828", "page": "apis/scheduler", "section": "scheduler-api", "text": "    LoadFailed = 4;\n      UnloadRequested = 5;\n      Unloading = 6;\n      Unloaded = 7;\n      UnloadFailed = 8;\n      Available = 9;\n      LoadedUnavailable = 10;\n      UnloadEnvoyRequested = 11;\n      Draining = 12;\n  }\n  ModelReplicaState state = 1;\n  string reason = 2;\n  google.protobuf.Timestamp lastChangeTimestamp = 3;\n}\n\nmessage ServerStatusRequest {\n  string subscriberName = 1;\n  optional string name = 2; // Leave empty for all servers\n}\n\n/* ServerStatusResponse provides details of current server status\n*/\nmessage ServerStatusResponse {\n  string serverName = 1;\n  repeated ServerReplicaResources resources = 2;\n  int32 expectedReplicas = 3;\n  int32 availableReplicas = 4;\n  int32 numLoadedModelReplicas = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n}\n\nmessage ServerReplicaResources {\n  uint32 replicaIdx = 1;\n  uint64 totalMemoryBytes = 2;\n  uint64 availableMemoryBytes = 3;\n  int32 numLoadedModels = 4;\n  uint32 overCommitPercentage = 5;\n}\n\nmessage ModelSubscriptionRequest {\n  string subscriberName = 1; //Name of the subscription caller\n}\n\nmessage ModelStatusRequest {\n  string subscriberName = 1;\n  optional ModelReference model = 2;\n  bool allVersions = 3;\n}\n\nmessage ServerNotifyRequest {\n  string name = 1;\n  int32 expectedReplicas = 2;\n  bool shared = 3;\n  optional KubernetesMeta kubernetesMeta = 4;\n}\n\nmessage ServerNotifyResponse {\n\n}\n\nmessage ServerSubscriptionRequest {\n  string subscriberName = 1; //Name of the subscription caller\n}\n\n// Experiments\n\nmessage StartExperimentRequest {\n  Experiment experiment = 1;\n}\n\nenum ResourceType {\n  MODEL = 0;\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "e4d92192-476a-465b-9075-0598961c9299", "page": "apis/scheduler", "section": "scheduler-api", "text": "= 1;\n  optional ModelReference model = 2;\n  bool allVersions = 3;\n}\n\nmessage ServerNotifyRequest {\n  string name = 1;\n  int32 expectedReplicas = 2;\n  bool shared = 3;\n  optional KubernetesMeta kubernetesMeta = 4;\n}\n\nmessage ServerNotifyResponse {\n\n}\n\nmessage ServerSubscriptionRequest {\n  string subscriberName = 1; //Name of the subscription caller\n}\n\n// Experiments\n\nmessage StartExperimentRequest {\n  Experiment experiment = 1;\n}\n\nenum ResourceType {\n  MODEL = 0;\n  PIPELINE = 1;\n}\n\nmessage Experiment {\n  string name = 1;\n  optional string default = 2;\n  repeated ExperimentCandidate candidates = 3;\n  optional ExperimentMirror mirror = 4;\n  optional ExperimentConfig config = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n  ResourceType resourceType = 7;\n}\n\nmessage ExperimentConfig {\n  bool stickySessions = 1;\n}\n\nmessage ExperimentCandidate {\n  string name = 1;\n  uint32 weight = 2;\n}\n\nmessage ExperimentMirror {\n  string name = 1;\n  uint32 percent = 2;\n}\n\nmessage StartExperimentResponse {\n}\n\nmessage StopExperimentRequest {\n  string name = 1;\n}\n\nmessage StopExperimentResponse {\n}\n\nmessage ExperimentSubscriptionRequest {\n  string subscriberName = 1; //Name of the subscription caller\n}\n\nmessage ExperimentStatusResponse {\n  string experimentName = 1;\n  bool active = 2;\n  bool candidatesReady = 3;\n  bool mirrorReady = 4;\n  string statusDescription = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n}\n\nmessage LoadPipelineRequest {\n  Pipeline pipeline = 1;\n}\n\nmessage ExperimentStatusRequest {\n  string subscriberName = 1;\n  optional string name = 2; // Leave empty for all experiments\n}\n\nmessage Pipeline {\n  string name = 1;\n  string uid = 2;\n  uint32 version = 3;\n  repeated PipelineStep steps = 4;\n  optional PipelineOutput output = 5;\n  optional KubernetesMeta kubernetesMeta", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "6ea877aa-b758-4d8e-b7cd-ad740d165107", "page": "apis/scheduler", "section": "scheduler-api", "text": "optional KubernetesMeta kubernetesMeta = 6;\n}\n\nmessage LoadPipelineRequest {\n  Pipeline pipeline = 1;\n}\n\nmessage ExperimentStatusRequest {\n  string subscriberName = 1;\n  optional string name = 2; // Leave empty for all experiments\n}\n\nmessage Pipeline {\n  string name = 1;\n  string uid = 2;\n  uint32 version = 3;\n  repeated PipelineStep steps = 4;\n  optional PipelineOutput output = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n  optional PipelineInput input = 7;\n}\n\nmessage PipelineStep {\n  enum JoinOp {\n    INNER = 0;\n    OUTER = 1;\n    ANY = 2;\n  }\n  string name = 1;\n  repeated string inputs = 2;\n  optional uint32 joinWindowMs = 3; // Join window millisecs, some nonzero default (TBD)\n  map<string,string> tensorMap = 4; // optional map of tensor name mappings\n  JoinOp inputsJoin = 5;\n  repeated string triggers = 6;\n  JoinOp triggersJoin = 7;\n  Batch batch = 8;\n}\n\nmessage Batch {\n  optional uint32 size = 1;\n  optional uint32 windowMs = 2;\n}\n\nmessage PipelineInput {\n  enum JoinOp {\n    INNER = 0;\n    OUTER = 1;\n    ANY = 2;\n  }\n  repeated string externalInputs = 1;\n  repeated string externalTriggers = 2;\n  optional uint32 joinWindowMs = 3; // Join window millisecs for output, default 0\n  JoinOp joinType = 4;\n  JoinOp triggersJoin = 5;\n  map<string,string> tensorMap = 6; // optional map of tensor name mappings\n}\n\nmessage PipelineOutput {\n  enum JoinOp {\n    INNER = 0;\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "30a94ee6-84f6-418a-b44d-05dd32ed2dd5", "page": "apis/scheduler", "section": "scheduler-api", "text": "= 2;\n  }\n  repeated string externalInputs = 1;\n  repeated string externalTriggers = 2;\n  optional uint32 joinWindowMs = 3; // Join window millisecs for output, default 0\n  JoinOp joinType = 4;\n  JoinOp triggersJoin = 5;\n  map<string,string> tensorMap = 6; // optional map of tensor name mappings\n}\n\nmessage PipelineOutput {\n  enum JoinOp {\n    INNER = 0;\n    OUTER = 1;\n    ANY = 2;\n  }\n  repeated string steps = 1;\n  uint32 joinWindowMs = 2; // Join window millisecs for output, default 0\n  JoinOp stepsJoin = 3;\n  map<string,string> tensorMap = 4; // optional map of tensor name mappings\n}\n\nmessage LoadPipelineResponse {\n\n}\n\nmessage UnloadPipelineRequest {\n  string name = 1;\n}\n\nmessage UnloadPipelineResponse {\n\n}\n\nmessage PipelineStatusRequest {\n  string subscriberName = 1;\n  optional string name = 2; // Leave empty for all pipelines\n  bool allVersions = 3;\n}\n\nmessage PipelineSubscriptionRequest {\n  string subscriberName = 1; //Name of the subscription caller\n}\n\nmessage PipelineStatusResponse {\n  string pipelineName = 1;\n  repeated PipelineWithState versions = 2;\n}\n\nmessage PipelineWithState {\n  Pipeline pipeline = 1;\n  PipelineVersionState state = 2;\n}\n\nmessage PipelineVersionState {\n  enum PipelineStatus {\n    PipelineStatusUnknown = 0;\n    PipelineCreate = 1;\n    PipelineCreating = 2;\n    PipelineReady = 3;\n    PipelineFailed = 4;\n    PipelineTerminate = 5;\n    PipelineTerminating = 6;\n    PipelineTerminated = 7;\n  }\n  uint32 pipelineVersion = 1;\n  PipelineStatus status = 2;\n  string reason =", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "77830ef9-84de-4772-8302-919da0e7a3f2", "page": "apis/scheduler", "section": "scheduler-api", "text": "   PipelineStatusUnknown = 0;\n    PipelineCreate = 1;\n    PipelineCreating = 2;\n    PipelineReady = 3;\n    PipelineFailed = 4;\n    PipelineTerminate = 5;\n    PipelineTerminating = 6;\n    PipelineTerminated = 7;\n  }\n  uint32 pipelineVersion = 1;\n  PipelineStatus status = 2;\n  string reason = 3;\n  google.protobuf.Timestamp lastChangeTimestamp = 4;\n  bool modelsReady = 5;\n}\n\nmessage SchedulerStatusRequest {\n  string subscriberName = 1;\n}\n\nmessage SchedulerStatusResponse {\n  string applicationVersion = 1;\n}\n\n// [END Messages]\n\n\n// [START Services]\n\nservice Scheduler {\n  rpc ServerNotify(ServerNotifyRequest) returns (ServerNotifyResponse) {};\n\n  rpc LoadModel(LoadModelRequest) returns (LoadModelResponse) {};\n  rpc UnloadModel(UnloadModelRequest) returns (UnloadModelResponse) {};\n\n  rpc LoadPipeline(LoadPipelineRequest) returns (LoadPipelineResponse) {};\n  rpc UnloadPipeline(UnloadPipelineRequest) returns (UnloadPipelineResponse) {};\n\n  rpc StartExperiment(StartExperimentRequest) returns (StartExperimentResponse) {};\n  rpc StopExperiment(StopExperimentRequest) returns (StopExperimentResponse) {};\n\n  rpc ServerStatus(ServerStatusRequest) returns (stream ServerStatusResponse) {}\n  rpc ModelStatus(ModelStatusRequest) returns (stream ModelStatusResponse) {}\n  rpc PipelineStatus(PipelineStatusRequest) returns (stream PipelineStatusResponse) {};\n  rpc ExperimentStatus(ExperimentStatusRequest) returns (stream ExperimentStatusResponse) {};\n  rpc SchedulerStatus(SchedulerStatusRequest) returns (SchedulerStatusResponse) {};\n\n  rpc SubscribeServerStatus(ServerSubscriptionRequest) returns (stream ServerStatusResponse) {};\n  rpc SubscribeModelStatus(ModelSubscriptionRequest) returns (stream ModelStatusResponse) {};\n  rpc SubscribeExperimentStatus(ExperimentSubscriptionRequest) returns (stream ExperimentStatusResponse) {};\n  rpc SubscribePipelineStatus(PipelineSubscriptionRequest) returns (stream PipelineStatusResponse) {};\n}\n\n// [END Services]\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "9cbad934-835f-4c16-aee3-448b6ae80d65", "page": "apis/scheduler", "section": "proto-definition", "text": "\nProto Definition\u00b6\nsyntax = \"proto3\";\n\npackage seldon.mlops.scheduler;\n\noption go_package = \"github.com/seldonio/seldon-core/apis/go/v2/mlops/scheduler\";\n\nimport \"google/protobuf/timestamp.proto\";\n\n// [START Messages]\n\nmessage LoadModelRequest {\n  Model model = 1;\n}\n\nmessage Model {\n  MetaData meta = 1;\n  ModelSpec modelSpec = 2;\n  DeploymentSpec deploymentSpec = 3;\n  StreamSpec streamSpec = 4;\n}\n\nmessage MetaData {\n  string name = 1;\n  optional string kind = 2;\n  optional string version = 3;\n  optional KubernetesMeta kubernetesMeta = 4; // Kubernetes specific config\n}\n\nmessage DeploymentSpec {\n  uint32 replicas = 1;\n  uint32 minReplicas = 2;\n  uint32 maxReplicas = 3;\n  bool logPayloads = 4;\n}\n\n/* ModelDetails\n*/\nmessage ModelSpec {\n  string uri = 1; // storage uri from where to download the artifacts\n  optional uint32 artifactVersion = 2; // Optional v2 version folder to select\n  optional StorageConfig storageConfig = 3; // Storage auth configuration\n  repeated string requirements = 4; // list of capabilities the server must satisfy to run this model\n  optional uint64 memoryBytes = 5; // Requested memory\n  optional string server = 6; // the particular model server to load the model. If unspecified will be chosen.\n  optional ExplainerSpec explainer = 7; // optional black box explainer details\n  repeated ParameterSpec parameters = 8; // parameters to load with model\n}\n\nmessage ParameterSpec {\n  string name = 1;\n  string value = 2;\n}\n\nmessage ExplainerSpec {\n  string type = 1;\n  // 1 of semantic either model or pipeline reference\n  optional string modelRef = 2;\n  optional string pipelineRef = 3;\n}\n\nmessage KubernetesMeta {\n  string namespace = 1;\n  int64 generation = 2;\n}\n\nmessage StreamSpec", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "0cd26a05-3d3b-4833-9f14-7d79d032785b", "page": "apis/scheduler", "section": "proto-definition", "text": "ParameterSpec parameters = 8; // parameters to load with model\n}\n\nmessage ParameterSpec {\n  string name = 1;\n  string value = 2;\n}\n\nmessage ExplainerSpec {\n  string type = 1;\n  // 1 of semantic either model or pipeline reference\n  optional string modelRef = 2;\n  optional string pipelineRef = 3;\n}\n\nmessage KubernetesMeta {\n  string namespace = 1;\n  int64 generation = 2;\n}\n\nmessage StreamSpec {\n  string inputTopic = 2;\n  string outputTopic = 3;\n}\n\nmessage StorageConfig {\n  oneof config {\n    string storageSecretName = 1;\n    string storageRcloneConfig = 2;\n  }\n}\n\nmessage LoadModelResponse {\n\n}\n\n/* ModelReference represents a unique model\n*/\nmessage ModelReference {\n  string name = 1;\n  optional uint32 version = 2;\n}\n\nmessage UnloadModelRequest {\n  ModelReference model = 1;\n  optional KubernetesMeta kubernetesMeta = 2;\n}\n\nmessage UnloadModelResponse {\n}\n\n/* ModelStatusResponse provides the current assignment of the model onto a server\n*/\nmessage ModelStatusResponse {\n  string modelName = 1;\n  repeated ModelVersionStatus versions = 2;\n  bool deleted = 3;\n}\n\nmessage ModelVersionStatus {\n  uint32 version = 2;\n  string serverName = 3;\n  optional KubernetesMeta kubernetesMeta = 4;\n  map<int32,ModelReplicaStatus> modelReplicaState = 5;\n  ModelStatus state = 6;\n  optional Model modelDefn = 7;\n}\n\nmessage ModelStatus {\n  enum ModelState {\n      ModelStateUnknown = 0;\n      ModelProgressing = 1;\n      ModelAvailable = 2;\n      ModelFailed = 3;\n      ModelTerminating = 4;\n      ModelTerminated = 5;\n      ModelTerminateFailed =", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "1b753b89-cae6-4a05-905a-133ee88374e3", "page": "apis/scheduler", "section": "proto-definition", "text": "modelDefn = 7;\n}\n\nmessage ModelStatus {\n  enum ModelState {\n      ModelStateUnknown = 0;\n      ModelProgressing = 1;\n      ModelAvailable = 2;\n      ModelFailed = 3;\n      ModelTerminating = 4;\n      ModelTerminated = 5;\n      ModelTerminateFailed = 6;\n      ScheduleFailed = 7;\n  }\n  ModelState state = 1;\n  string reason = 2;\n  uint32 availableReplicas = 3;\n  uint32 unavailableReplicas = 4;\n  google.protobuf.Timestamp lastChangeTimestamp = 5;\n}\n\nmessage ModelReplicaStatus {\n  enum ModelReplicaState {\n      ModelReplicaStateUnknown = 0;\n      LoadRequested = 1;\n      Loading = 2;\n      Loaded = 3;\n      LoadFailed = 4;\n      UnloadRequested = 5;\n      Unloading = 6;\n      Unloaded = 7;\n      UnloadFailed = 8;\n      Available = 9;\n      LoadedUnavailable = 10;\n      UnloadEnvoyRequested = 11;\n      Draining = 12;\n  }\n  ModelReplicaState state = 1;\n  string reason = 2;\n  google.protobuf.Timestamp lastChangeTimestamp = 3;\n}\n\nmessage ServerStatusRequest {\n  string subscriberName = 1;\n  optional string name = 2; // Leave empty for all servers\n}\n\n/* ServerStatusResponse provides details of current server status\n*/\nmessage ServerStatusResponse {\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "61a7de6e-958e-4bf8-a7a3-8f8ea63c4c17", "page": "apis/scheduler", "section": "proto-definition", "text": "= 10;\n      UnloadEnvoyRequested = 11;\n      Draining = 12;\n  }\n  ModelReplicaState state = 1;\n  string reason = 2;\n  google.protobuf.Timestamp lastChangeTimestamp = 3;\n}\n\nmessage ServerStatusRequest {\n  string subscriberName = 1;\n  optional string name = 2; // Leave empty for all servers\n}\n\n/* ServerStatusResponse provides details of current server status\n*/\nmessage ServerStatusResponse {\n  string serverName = 1;\n  repeated ServerReplicaResources resources = 2;\n  int32 expectedReplicas = 3;\n  int32 availableReplicas = 4;\n  int32 numLoadedModelReplicas = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n}\n\nmessage ServerReplicaResources {\n  uint32 replicaIdx = 1;\n  uint64 totalMemoryBytes = 2;\n  uint64 availableMemoryBytes = 3;\n  int32 numLoadedModels = 4;\n  uint32 overCommitPercentage = 5;\n}\n\nmessage ModelSubscriptionRequest {\n  string subscriberName = 1; //Name of the subscription caller\n}\n\nmessage ModelStatusRequest {\n  string subscriberName = 1;\n  optional ModelReference model = 2;\n  bool allVersions = 3;\n}\n\nmessage ServerNotifyRequest {\n  string name = 1;\n  int32 expectedReplicas = 2;\n  bool shared = 3;\n  optional KubernetesMeta kubernetesMeta = 4;\n}\n\nmessage ServerNotifyResponse {\n\n}\n\nmessage ServerSubscriptionRequest {\n  string subscriberName = 1; //Name of the subscription caller\n}\n\n// Experiments\n\nmessage StartExperimentRequest {\n  Experiment experiment = 1;\n}\n\nenum ResourceType {\n  MODEL = 0;\n  PIPELINE = 1;\n}\n\nmessage Experiment {\n  string name = 1;\n  optional string default = 2;\n  repeated ExperimentCandidate candidates = 3;\n  optional ExperimentMirror mirror = 4;\n  optional ExperimentConfig config = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n  ResourceType resourceType = 7;\n}\n\nmessage ExperimentConfig {\n  bool stickySessions = 1;\n}\n\nmessage", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "ec687703-4287-4f81-9800-8812b637fbb6", "page": "apis/scheduler", "section": "proto-definition", "text": " Experiment experiment = 1;\n}\n\nenum ResourceType {\n  MODEL = 0;\n  PIPELINE = 1;\n}\n\nmessage Experiment {\n  string name = 1;\n  optional string default = 2;\n  repeated ExperimentCandidate candidates = 3;\n  optional ExperimentMirror mirror = 4;\n  optional ExperimentConfig config = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n  ResourceType resourceType = 7;\n}\n\nmessage ExperimentConfig {\n  bool stickySessions = 1;\n}\n\nmessage ExperimentCandidate {\n  string name = 1;\n  uint32 weight = 2;\n}\n\nmessage ExperimentMirror {\n  string name = 1;\n  uint32 percent = 2;\n}\n\nmessage StartExperimentResponse {\n}\n\nmessage StopExperimentRequest {\n  string name = 1;\n}\n\nmessage StopExperimentResponse {\n}\n\nmessage ExperimentSubscriptionRequest {\n  string subscriberName = 1; //Name of the subscription caller\n}\n\nmessage ExperimentStatusResponse {\n  string experimentName = 1;\n  bool active = 2;\n  bool candidatesReady = 3;\n  bool mirrorReady = 4;\n  string statusDescription = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n}\n\nmessage LoadPipelineRequest {\n  Pipeline pipeline = 1;\n}\n\nmessage ExperimentStatusRequest {\n  string subscriberName = 1;\n  optional string name = 2; // Leave empty for all experiments\n}\n\nmessage Pipeline {\n  string name = 1;\n  string uid = 2;\n  uint32 version = 3;\n  repeated PipelineStep steps = 4;\n  optional PipelineOutput output = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n  optional PipelineInput input = 7;\n}\n\nmessage PipelineStep {\n  enum JoinOp {\n    INNER = 0;\n    OUTER = 1;\n    ANY = 2;\n  }\n  string name = 1;\n  repeated string inputs = 2;\n  optional uint32 joinWindowMs = 3; // Join", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "af0f865f-b234-48cf-88c6-6cb4f42687f7", "page": "apis/scheduler", "section": "proto-definition", "text": "4;\n  optional PipelineOutput output = 5;\n  optional KubernetesMeta kubernetesMeta = 6;\n  optional PipelineInput input = 7;\n}\n\nmessage PipelineStep {\n  enum JoinOp {\n    INNER = 0;\n    OUTER = 1;\n    ANY = 2;\n  }\n  string name = 1;\n  repeated string inputs = 2;\n  optional uint32 joinWindowMs = 3; // Join window millisecs, some nonzero default (TBD)\n  map<string,string> tensorMap = 4; // optional map of tensor name mappings\n  JoinOp inputsJoin = 5;\n  repeated string triggers = 6;\n  JoinOp triggersJoin = 7;\n  Batch batch = 8;\n}\n\nmessage Batch {\n  optional uint32 size = 1;\n  optional uint32 windowMs = 2;\n}\n\nmessage PipelineInput {\n  enum JoinOp {\n    INNER = 0;\n    OUTER = 1;\n    ANY = 2;\n  }\n  repeated string externalInputs = 1;\n  repeated string externalTriggers = 2;\n  optional uint32 joinWindowMs = 3; // Join window millisecs for output, default 0\n  JoinOp joinType = 4;\n  JoinOp triggersJoin = 5;\n  map<string,string> tensorMap = 6; // optional map of tensor name mappings\n}\n\nmessage PipelineOutput {\n  enum JoinOp {\n    INNER = 0;\n    OUTER = 1;\n    ANY = 2;\n  }\n  repeated string steps = 1;\n  uint32 joinWindowMs = 2; // Join window millisecs for output, default 0\n  JoinOp stepsJoin = 3;\n  map<string,string> tensorMap = 4; // optional map of tensor name mappings\n}\n\nmessage LoadPipelineResponse {\n\n}\n\nmessage UnloadPipelineRequest", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "64c0695f-323b-4dab-b780-b36ed83e7121", "page": "apis/scheduler", "section": "proto-definition", "text": "{\n  enum JoinOp {\n    INNER = 0;\n    OUTER = 1;\n    ANY = 2;\n  }\n  repeated string steps = 1;\n  uint32 joinWindowMs = 2; // Join window millisecs for output, default 0\n  JoinOp stepsJoin = 3;\n  map<string,string> tensorMap = 4; // optional map of tensor name mappings\n}\n\nmessage LoadPipelineResponse {\n\n}\n\nmessage UnloadPipelineRequest {\n  string name = 1;\n}\n\nmessage UnloadPipelineResponse {\n\n}\n\nmessage PipelineStatusRequest {\n  string subscriberName = 1;\n  optional string name = 2; // Leave empty for all pipelines\n  bool allVersions = 3;\n}\n\nmessage PipelineSubscriptionRequest {\n  string subscriberName = 1; //Name of the subscription caller\n}\n\nmessage PipelineStatusResponse {\n  string pipelineName = 1;\n  repeated PipelineWithState versions = 2;\n}\n\nmessage PipelineWithState {\n  Pipeline pipeline = 1;\n  PipelineVersionState state = 2;\n}\n\nmessage PipelineVersionState {\n  enum PipelineStatus {\n    PipelineStatusUnknown = 0;\n    PipelineCreate = 1;\n    PipelineCreating = 2;\n    PipelineReady = 3;\n    PipelineFailed = 4;\n    PipelineTerminate = 5;\n    PipelineTerminating = 6;\n    PipelineTerminated = 7;\n  }\n  uint32 pipelineVersion = 1;\n  PipelineStatus status = 2;\n  string reason = 3;\n  google.protobuf.Timestamp lastChangeTimestamp = 4;\n  bool modelsReady = 5;\n}\n\nmessage SchedulerStatusRequest {\n  string subscriberName = 1;\n}\n\nmessage SchedulerStatusResponse {\n  string applicationVersion = 1;\n}\n\n// [END Messages]\n\n\n// [START Services]\n\nservice Scheduler {\n  rpc ServerNotify(ServerNotifyRequest) returns (ServerNotifyResponse) {};\n\n  rpc LoadModel(LoadModelRequest) returns (LoadModelResponse) {};\n  rpc UnloadModel(UnloadModelRequest) returns (UnloadModelResponse) {};\n\n  rpc LoadPipeline(LoadPipelineRequest) returns", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "c2387651-cb8e-448e-907a-08d90cb103de", "page": "apis/scheduler", "section": "proto-definition", "text": "= 1;\n  PipelineStatus status = 2;\n  string reason = 3;\n  google.protobuf.Timestamp lastChangeTimestamp = 4;\n  bool modelsReady = 5;\n}\n\nmessage SchedulerStatusRequest {\n  string subscriberName = 1;\n}\n\nmessage SchedulerStatusResponse {\n  string applicationVersion = 1;\n}\n\n// [END Messages]\n\n\n// [START Services]\n\nservice Scheduler {\n  rpc ServerNotify(ServerNotifyRequest) returns (ServerNotifyResponse) {};\n\n  rpc LoadModel(LoadModelRequest) returns (LoadModelResponse) {};\n  rpc UnloadModel(UnloadModelRequest) returns (UnloadModelResponse) {};\n\n  rpc LoadPipeline(LoadPipelineRequest) returns (LoadPipelineResponse) {};\n  rpc UnloadPipeline(UnloadPipelineRequest) returns (UnloadPipelineResponse) {};\n\n  rpc StartExperiment(StartExperimentRequest) returns (StartExperimentResponse) {};\n  rpc StopExperiment(StopExperimentRequest) returns (StopExperimentResponse) {};\n\n  rpc ServerStatus(ServerStatusRequest) returns (stream ServerStatusResponse) {}\n  rpc ModelStatus(ModelStatusRequest) returns (stream ModelStatusResponse) {}\n  rpc PipelineStatus(PipelineStatusRequest) returns (stream PipelineStatusResponse) {};\n  rpc ExperimentStatus(ExperimentStatusRequest) returns (stream ExperimentStatusResponse) {};\n  rpc SchedulerStatus(SchedulerStatusRequest) returns (SchedulerStatusResponse) {};\n\n  rpc SubscribeServerStatus(ServerSubscriptionRequest) returns (stream ServerStatusResponse) {};\n  rpc SubscribeModelStatus(ModelSubscriptionRequest) returns (stream ModelStatusResponse) {};\n  rpc SubscribeExperimentStatus(ExperimentSubscriptionRequest) returns (stream ExperimentStatusResponse) {};\n  rpc SubscribePipelineStatus(PipelineSubscriptionRequest) returns (stream PipelineStatusResponse) {};\n}\n\n// [END Services]\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/apis/scheduler/index.html", "key": "apis/scheduler"}}, {"key": "18f4aea0-f10b-4181-9d09-2197f932535c", "page": "development/release#id1", "section": "id1", "text": "\nRelease Process\u00b6\nThis document summarizes the release process for Seldon Core v2.\nIt is aimed mainly at the maintainers.\n\n:warning: NOTE: This is a work in progress.\nThis is an early version of the release process, which is subject to change.\nPlease, always check this document before conducting a release, and verify if everything goes as expected.\n\n\nProcess Summary\u00b6\n\nCut branch for release, e.g. release-0.1\nRun \u201cDraft New Release\u201d workflow (e.g. choose release-0.1 branch and v0.1.0-rc1 version)\nRun \u201cBuild docker images\u201d workflow (e.g. choose release-0.1 branch and 0.1.0-rc1 tag)\nVerify correctness of created artifacts and images (not yet automated!)\nPublish release\nPublish tags for the Go modules\n\n\n\nProcess discussion\u00b6\nThe development process follows a standard GitHub workflow.\n\nThe main development is happening in the v2 branch.\nThis is where new features land through Pull Requests.\nWhen all features for a new release have been merged, for example v0.1.0, we cut a branch for that release, e.g. release-0.1.\nThe release-0.1 branch will be the base for the v0.1.0 release as well as the release candidates, i.e. v0.1.0-rcX, and successive patch releases, i.e. v0.1.X.\nWe use GitHub Actions to prepare the release, build images and run all necessary testing.\nIf the release draft needs to be updated before being published, the new commits should be merged into the release-0.1 branch and relevant workflows re-triggered as required.\n\n\nDraft New Release Action\u00b6\nThe Draft New Release workflow is the first one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version (here v0.1.0-rc1)\n\n\nThis workflow cannot run on the v2 branch.\nIt will validate the provided version", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "297dd299-36bf-495e-b91e-d650b332718d", "page": "development/release#id1", "section": "id1", "text": "be merged into the release-0.1 branch and relevant workflows re-triggered as required.\n\n\nDraft New Release Action\u00b6\nThe Draft New Release workflow is the first one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version (here v0.1.0-rc1)\n\n\nThis workflow cannot run on the v2 branch.\nIt will validate the provided version against a SemVer regex.\nIt will create a few commits with:\n\nUpdated Helm charts\nUpdated Kubernetes YAML manifests\nAn updated changelog\n\n\nOnce the workflow finishes, you will find a new release draft waiting to be published.\n\n\n:warning: NOTE: Before publishing the release, run the images build workflow and necessary tests (not yet automated)!\n\n\n\nBuild docker images Action\u00b6\nThe Build docker images workflow is the second one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version, e.g. 0.1.0-rc1\n\nNote the lack of the v prefix here\n\n\n\n\nThis workflow will then run unit tests and build a series of Docker images that will be automatically pushed to DockerHub.\n\n\nAdd Go module tags\u00b6\nGo module versions are mapped to VCS versions via semantic version tags.\nThis process is described in the Go documentation.\nAs we have multiple Go modules in subdirectories of the repository, we need to use corresponding prefixes for our git tags.\nFrom the above link on mapping versions to commits:\n\nIf a module is defined in a subdirectory within the repository, that is, the module subdirectory portion of the module path is not empty, then each tag name must be", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "bce98ed0-3b3b-4c77-8559-6b62ba74c246", "page": "development/release#id1", "section": "id1", "text": "process is described in the Go documentation.\nAs we have multiple Go modules in subdirectories of the repository, we need to use corresponding prefixes for our git tags.\nFrom the above link on mapping versions to commits:\n\nIf a module is defined in a subdirectory within the repository, that is, the module subdirectory portion of the module path is not empty, then each tag name must be prefixed with the module subdirectory, followed by a slash. For example, the module golang.org/x/tools/gopls is defined in the gopls subdirectory of the repository with root path golang.org/x/tools. The version v0.4.0 of that module must have the tag named gopls/v0.4.0 in that repository.\n\nThus, for any given release, we should have one tag for the release as a whole plus one corresponding tag for every Go module.\nAt the time of writing, this comprises:\n\napis/go\ncomponents/tls\nhodometer\noperator\nscheduler\n\n\n:warning: Adding these tags is currently a manual process.\n\nTo add the appropriate tags:\n\nCheck out the relevant tag, e.g.\ngit checkout v2.4.0\n\n\n\nFind all relevant Go modules and identify their subdirectory paths, e.g. with\nfind . -name go.mod -exec sed -n '1 { s|^module.*seldon-core/||; s|/v2$||; p }' {} \\;\n\n\n\nAdd corresponding tags for each module, e.g.\ngit tag apis/go/v2.4.0 v2.4.0\n\n\n\nConfirm that all tags point to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear as expected both via the git CLI and also in the GitHub UI.\nA short list", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "7a2f4f69-ee49-4b5b-8313-16b0ad64683a", "page": "development/release#id1", "section": "id1", "text": "to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear as expected both via the git CLI and also in the GitHub UI.\nA short list of commands to cover all above in single go is:\nVERSION=v2.4.0\ngit tag apis/go/${VERSION} ${VERSION}\ngit tag components/tls/${VERSION} ${VERSION}\ngit tag hodometer/${VERSION} ${VERSION}\ngit tag operator/${VERSION} ${VERSION}\ngit tag scheduler/${VERSION} ${VERSION}\n\ngit push origin apis/go/${VERSION}\ngit push origin components/tls/${VERSION}\ngit push origin hodometer/${VERSION}\ngit push origin operator/${VERSION}\ngit push origin scheduler/${VERSION}\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "b8e73d9d-dd43-4c4b-bdc6-b4bb34afffa5", "page": "development/release#id1", "section": "process-discussion", "text": "\nProcess discussion\u00b6\nThe development process follows a standard GitHub workflow.\n\nThe main development is happening in the v2 branch.\nThis is where new features land through Pull Requests.\nWhen all features for a new release have been merged, for example v0.1.0, we cut a branch for that release, e.g. release-0.1.\nThe release-0.1 branch will be the base for the v0.1.0 release as well as the release candidates, i.e. v0.1.0-rcX, and successive patch releases, i.e. v0.1.X.\nWe use GitHub Actions to prepare the release, build images and run all necessary testing.\nIf the release draft needs to be updated before being published, the new commits should be merged into the release-0.1 branch and relevant workflows re-triggered as required.\n\n\nDraft New Release Action\u00b6\nThe Draft New Release workflow is the first one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version (here v0.1.0-rc1)\n\n\nThis workflow cannot run on the v2 branch.\nIt will validate the provided version against a SemVer regex.\nIt will create a few commits with:\n\nUpdated Helm charts\nUpdated Kubernetes YAML manifests\nAn updated changelog\n\n\nOnce the workflow finishes, you will find a new release draft waiting to be published.\n\n\n:warning: NOTE: Before publishing the release, run the images build workflow and necessary tests (not yet automated)!\n\n\n\nBuild docker images Action\u00b6\nThe Build docker images workflow is the second one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version, e.g. 0.1.0-rc1\n\nNote the lack of the v prefix here\n\n\n\n\nThis", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "97dbbcf7-48e7-4a25-888d-8ff20dad3b5a", "page": "development/release#id1", "section": "process-discussion", "text": "published.\n\n\n:warning: NOTE: Before publishing the release, run the images build workflow and necessary tests (not yet automated)!\n\n\n\nBuild docker images Action\u00b6\nThe Build docker images workflow is the second one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version, e.g. 0.1.0-rc1\n\nNote the lack of the v prefix here\n\n\n\n\nThis workflow will then run unit tests and build a series of Docker images that will be automatically pushed to DockerHub.\n\n\nAdd Go module tags\u00b6\nGo module versions are mapped to VCS versions via semantic version tags.\nThis process is described in the Go documentation.\nAs we have multiple Go modules in subdirectories of the repository, we need to use corresponding prefixes for our git tags.\nFrom the above link on mapping versions to commits:\n\nIf a module is defined in a subdirectory within the repository, that is, the module subdirectory portion of the module path is not empty, then each tag name must be prefixed with the module subdirectory, followed by a slash. For example, the module golang.org/x/tools/gopls is defined in the gopls subdirectory of the repository with root path golang.org/x/tools. The version v0.4.0 of that module must have the tag named gopls/v0.4.0 in that repository.\n\nThus, for any given release, we should have one tag for the release as a whole plus one corresponding tag for every Go module.\nAt the time of writing, this comprises:\n\napis/go\ncomponents/tls\nhodometer\noperator\nscheduler\n\n\n:warning: Adding these tags is currently a manual process.\n\nTo add the appropriate tags:\n\nCheck out the relevant tag, e.g.\ngit checkout v2.4.0\n\n\n\nFind all relevant Go modules", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "e64beb7d-8623-4de4-a6af-f69b1210c022", "page": "development/release#id1", "section": "process-discussion", "text": "of that module must have the tag named gopls/v0.4.0 in that repository.\n\nThus, for any given release, we should have one tag for the release as a whole plus one corresponding tag for every Go module.\nAt the time of writing, this comprises:\n\napis/go\ncomponents/tls\nhodometer\noperator\nscheduler\n\n\n:warning: Adding these tags is currently a manual process.\n\nTo add the appropriate tags:\n\nCheck out the relevant tag, e.g.\ngit checkout v2.4.0\n\n\n\nFind all relevant Go modules and identify their subdirectory paths, e.g. with\nfind . -name go.mod -exec sed -n '1 { s|^module.*seldon-core/||; s|/v2$||; p }' {} \\;\n\n\n\nAdd corresponding tags for each module, e.g.\ngit tag apis/go/v2.4.0 v2.4.0\n\n\n\nConfirm that all tags point to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear as expected both via the git CLI and also in the GitHub UI.\nA short list of commands to cover all above in single go is:\nVERSION=v2.4.0\ngit tag apis/go/${VERSION} ${VERSION}\ngit tag components/tls/${VERSION} ${VERSION}\ngit tag hodometer/${VERSION} ${VERSION}\ngit tag operator/${VERSION} ${VERSION}\ngit tag scheduler/${VERSION} ${VERSION}\n\ngit push origin apis/go/${VERSION}\ngit push origin components/tls/${VERSION}\ngit push origin hodometer/${VERSION}\ngit push origin operator/${VERSION}\ngit push origin scheduler/${VERSION}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "b554d5b5-4dc8-41c2-85b4-7357599dc930", "page": "development/release#id1", "section": "draft-new-release-action", "text": "\nDraft New Release Action\u00b6\nThe Draft New Release workflow is the first one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version (here v0.1.0-rc1)\n\n\nThis workflow cannot run on the v2 branch.\nIt will validate the provided version against a SemVer regex.\nIt will create a few commits with:\n\nUpdated Helm charts\nUpdated Kubernetes YAML manifests\nAn updated changelog\n\n\nOnce the workflow finishes, you will find a new release draft waiting to be published.\n\n\n:warning: NOTE: Before publishing the release, run the images build workflow and necessary tests (not yet automated)!\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "7acd5972-15c9-41d9-8a15-955ad48abe58", "page": "development/release#id1", "section": "build-docker-images-action", "text": "\nBuild docker images Action\u00b6\nThe Build docker images workflow is the second one to run.\nIt must be triggered manually using the Actions interface in the GitHub UI.\nWhen triggering the workflow, you must:\n\nSelect the release branch (here release-0.1)\nSpecify the release version, e.g. 0.1.0-rc1\n\nNote the lack of the v prefix here\n\n\n\n\nThis workflow will then run unit tests and build a series of Docker images that will be automatically pushed to DockerHub.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "592d40ee-b3f5-48b7-9e90-0f9ac0884d7d", "page": "development/release#id1", "section": "add-go-module-tags", "text": "\nAdd Go module tags\u00b6\nGo module versions are mapped to VCS versions via semantic version tags.\nThis process is described in the Go documentation.\nAs we have multiple Go modules in subdirectories of the repository, we need to use corresponding prefixes for our git tags.\nFrom the above link on mapping versions to commits:\n\nIf a module is defined in a subdirectory within the repository, that is, the module subdirectory portion of the module path is not empty, then each tag name must be prefixed with the module subdirectory, followed by a slash. For example, the module golang.org/x/tools/gopls is defined in the gopls subdirectory of the repository with root path golang.org/x/tools. The version v0.4.0 of that module must have the tag named gopls/v0.4.0 in that repository.\n\nThus, for any given release, we should have one tag for the release as a whole plus one corresponding tag for every Go module.\nAt the time of writing, this comprises:\n\napis/go\ncomponents/tls\nhodometer\noperator\nscheduler\n\n\n:warning: Adding these tags is currently a manual process.\n\nTo add the appropriate tags:\n\nCheck out the relevant tag, e.g.\ngit checkout v2.4.0\n\n\n\nFind all relevant Go modules and identify their subdirectory paths, e.g. with\nfind . -name go.mod -exec sed -n '1 { s|^module.*seldon-core/||; s|/v2$||; p }' {} \\;\n\n\n\nAdd corresponding tags for each module, e.g.\ngit tag apis/go/v2.4.0 v2.4.0\n\n\n\nConfirm that all tags point to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "276c1de9-ec4b-4f11-888f-294e3dbf6c97", "page": "development/release#id1", "section": "add-go-module-tags", "text": "{} \\;\n\n\n\nAdd corresponding tags for each module, e.g.\ngit tag apis/go/v2.4.0 v2.4.0\n\n\n\nConfirm that all tags point to the same place, e.g. with\ngit tag --contains v2.4.0\n\n\n\nPush the tags to the upstream repository, e.g.\ngit push <upstream name> apis/go/v2.4.0 components/tls/v2.4.0 ...\n\n\n\n\nIf you are feeling confident in the process, you can chain these together into a longer pipeline.\nIn any case, it is best to confirm that the tags appear as expected both via the git CLI and also in the GitHub UI.\nA short list of commands to cover all above in single go is:\nVERSION=v2.4.0\ngit tag apis/go/${VERSION} ${VERSION}\ngit tag components/tls/${VERSION} ${VERSION}\ngit tag hodometer/${VERSION} ${VERSION}\ngit tag operator/${VERSION} ${VERSION}\ngit tag scheduler/${VERSION} ${VERSION}\n\ngit push origin apis/go/${VERSION}\ngit push origin components/tls/${VERSION}\ngit push origin hodometer/${VERSION}\ngit push origin operator/${VERSION}\ngit push origin scheduler/${VERSION}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/development/release/index.html#id1", "key": "development/release#id1"}}, {"key": "1c99b370-6c60-44fa-9d66-d3b6e74d7716", "page": "examples/local-experiments", "section": "local-experiments", "text": "\nLocal Experiments\u00b6\nRun these examples from the samples folder.\n\nSeldon V2 Non Kubernetes Local Experiment Examples\u00b6\n\nModel Experiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate experiments.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\n\n\n{}\n{}\n\n\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nCreate an experiment that modifies the iris model to add a second model splitting traffic 50/50 between the two.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nStart the experiment.\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\nWait for the experiment to be ready.\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::27 :iris_1::23]\n\n\n\nShow sticky session header x-seldon-route that is returned\nseldon model infer", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "75899602-3e40-4f6d-b0d8-59138995bfea", "page": "examples/local-experiments", "section": "local-experiments", "text": "\"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::27 :iris_1::23]\n\n\n\nShow sticky session header x-seldon-route that is returned\nseldon model infer iris --show-headers \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: localhost:9000\n> Content-Type:[application/json]\n> Seldon-Model:[iris]\n\n< X-Seldon-Route:[:iris_1:]\n< Ce-Id:[463e96ad-645f-4442-8890-4c340b58820b]\n< Traceparent:[00-fe9e87fcbe4be98ed82fb76166e15ceb-d35e7ac96bd8b718-01]\n< X-Envoy-Upstream-Service-Time:[3]\n< Ce-Specversion:[0.3]\n< Date:[Thu, 29 Jun 2023 14:03:03 GMT]\n< Ce-Source:[io.seldon.serving.deployment.mlserver]\n< Content-Type:[application/json]\n< Server:[envoy]\n< X-Request-Id:[cieou5ofh5ss73fbjdu0]\n< Ce-Endpoint:[iris_1]\n< Ce-Modelid:[iris_1]\n< Ce-Type:[io.seldon.serving.inference.response]\n< Content-Length:[213]\n< Ce-Inferenceservicename:[mlserver]\n< Ce-Requestid:[463e96ad-645f-4442-8890-4c340b58820b]\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"463e96ad-645f-4442-8890-4c340b58820b\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\n\nUse sticky session key passed by last infer request to ensure same route is taken each time.\nseldon model infer iris -s -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -s -i 50\\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nStop the experiment\nseldon experiment stop experiment-sample\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n\n\nPipeline Experiment\u00b6\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n\n\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n\n\ncat ./pipelines/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-mul10\nspec:\n  steps:\n    - name: mul10\n  output:\n    steps:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "2ffab4b1-6553-4fb8-803e-8644fcd74ba6", "page": "examples/local-experiments", "section": "local-experiments", "text": "\"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n\n\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n\n\ncat ./pipelines/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-mul10\nspec:\n  steps:\n    - name: mul10\n  output:\n    steps:\n    - mul10\n\n\ncat ./pipelines/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-add10\nspec:\n  steps:\n    - name: add10\n  output:\n    steps:\n    - add10\n\n\nseldon pipeline load -f ./pipelines/add10.yaml\nseldon pipeline load -f ./pipelines/mul10.yaml\n\n\nseldon pipeline status pipeline-add10 -w PipelineReady\nseldon pipeline status pipeline-mul10 -w PipelineReady\n\n\n{\"pipelineName\":\"pipeline-add10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-add10\", \"uid\":\"cieov47l80lc739juklg\", \"version\":1, \"steps\":[{\"name\":\"add10\"}], \"output\":{\"steps\":[\"add10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:05:04.460868091Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"pipeline-mul10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-mul10\", \"uid\":\"cieov47l80lc739jukm0\", \"version\":1, \"steps\":[{\"name\":\"mul10\"}], \"output\":{\"steps\":[\"mul10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:05:04.631980330Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer pipeline-add10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "be0971a4-dc4e-4931-99fb-ea813493410b", "page": "examples/local-experiments", "section": "local-experiments", "text": "  \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer pipeline-mul10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\ncat ./experiments/addmul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 50\n  - name: pipeline-mul10\n    weight: 50\n\n\nseldon experiment start -f ./experiments/addmul10.yaml\n\n\nseldon experiment status addmul10 -w | jq -M .\n\n\n{\n  \"experimentName\": \"addmul10\",\n  \"active\": true,\n  \"candidatesReady\": true,\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "c19c2c44-3f6c-4cb4-9e7f-5e8b95455ca9", "page": "examples/local-experiments", "section": "local-experiments", "text": "   }\n    }\n  ]\n}\n\n\ncat ./experiments/addmul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 50\n  - name: pipeline-mul10\n    weight: 50\n\n\nseldon experiment start -f ./experiments/addmul10.yaml\n\n\nseldon experiment status addmul10 -w | jq -M .\n\n\n{\n  \"experimentName\": \"addmul10\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nseldon pipeline infer pipeline-add10 -i 50 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::28 :mul10_1::22 :pipeline-add10.pipeline::28 :pipeline-mul10.pipeline::22]\n\n\n\nUse sticky session key passed by last infer request to ensure same route is taken each time.\nseldon pipeline infer pipeline-add10 --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> seldon-model:[pipeline-add10.pipeline]\n\n< x-envoy-expected-rq-timeout-ms:[60000]\n< x-request-id:[cieov8ofh5ss739277i0]\n< date:[Thu, 29 Jun 2023 14:05:23 GMT]\n< server:[envoy]\n< content-type:[application/grpc]\n< x-envoy-upstream-service-time:[6]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n< x-forwarded-proto:[http]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\n\nseldon pipeline infer pipeline-add10 -s --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n> seldon-model:[pipeline-add10.pipeline]\n\n< content-type:[application/grpc]\n< x-forwarded-proto:[http]\n< x-envoy-expected-rq-timeout-ms:[60000]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline: :pipeline-add10.pipeline:]\n< x-request-id:[cieov90fh5ss739277ig]\n< x-envoy-upstream-service-time:[7]\n< date:[Thu, 29 Jun 2023 14:05:24 GMT]\n< server:[envoy]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\n\nseldon pipeline infer pipeline-add10 -s -i 50 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::50 :pipeline-add10.pipeline::150]\n\n\n\ncat ./models/add20.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add20\nspec:\n  storageUri: \"gs://seldon-models/triton/add20\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add20.yaml\n\n\n{}\n\n\nseldon model status add20 -w ModelAvailable\n\n\n{}\n\n\ncat ./experiments/add1020.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: add1020\nspec:\n  default: add10\n  candidates:\n  - name: add10\n    weight: 50\n  - name: add20\n    weight: 50\n\n\nseldon experiment start -f ./experiments/add1020.yaml\n\n\nseldon experiment status add1020 -w | jq -M .\n\n\n{\n  \"experimentName\": \"add1020\",\n  \"active\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "00c3c5f4-4e54-4ff7-a785-dddb39960977", "page": "examples/local-experiments", "section": "local-experiments", "text": "\"gs://seldon-models/triton/add20\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add20.yaml\n\n\n{}\n\n\nseldon model status add20 -w ModelAvailable\n\n\n{}\n\n\ncat ./experiments/add1020.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: add1020\nspec:\n  default: add10\n  candidates:\n  - name: add10\n    weight: 50\n  - name: add20\n    weight: 50\n\n\nseldon experiment start -f ./experiments/add1020.yaml\n\n\nseldon experiment status add1020 -w | jq -M .\n\n\n{\n  \"experimentName\": \"add1020\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nseldon model infer add10 -i 50  --inference-mode grpc \\\n  '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::22 :add20_1::28]\n\n\n\nseldon pipeline infer pipeline-add10 -i 100 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::24 :add20_1::32 :mul10_1::44 :pipeline-add10.pipeline::56 :pipeline-mul10.pipeline::44]\n\n\n\nseldon pipeline infer pipeline-add10 --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> seldon-model:[pipeline-add10.pipeline]\n\n< x-request-id:[cieovf0fh5ss739279u0]\n< x-envoy-upstream-service-time:[5]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n< date:[Thu, 29 Jun 2023 14:05:48 GMT]\n< server:[envoy]\n< content-type:[application/grpc]\n< x-forwarded-proto:[http]\n< x-envoy-expected-rq-timeout-ms:[60000]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\n\nseldon pipeline infer pipeline-add10 -s --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n> seldon-model:[pipeline-add10.pipeline]\n\n< x-forwarded-proto:[http]\n< x-envoy-expected-rq-timeout-ms:[60000]\n< x-request-id:[cieovf8fh5ss739279ug]\n< x-envoy-upstream-service-time:[6]\n< date:[Thu, 29 Jun 2023 14:05:49 GMT]\n< server:[envoy]\n< content-type:[application/grpc]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline: :add20_1: :pipeline-add10.pipeline:]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[21, 22, 23, 24]}}]}\n\n\n\nseldon experiment stop addmul10\nseldon experiment stop add1020\nseldon pipeline unload pipeline-add10\nseldon pipeline unload pipeline-mul10\nseldon model unload add10\nseldon model unload add20\nseldon model unload mul10\n\n\n\n\nModel Mirror Experiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate a model with a mirror.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "19514d70-bd35-41a5-ab03-ae09922b9f41", "page": "examples/local-experiments", "section": "local-experiments", "text": "unload add20\nseldon model unload mul10\n\n\n\n\nModel Mirror Experiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate a model with a mirror.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\n\n\n{}\n{}\n\n\nCreate an experiment that modifies in which we mirror traffic to iris also to iris2.\ncat ./experiments/sklearn-mirror.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: sklearn-mirror\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 100\n  mirror:\n    name: iris2\n    percent: 100\n\n\nStart the experiment.\nseldon experiment start -f ./experiments/sklearn-mirror.yaml\n\n\nWait for the experiment to be ready.\nseldon experiment status sklearn-mirror -w | jq -M .\n\n\n{\n  \"experimentName\": \"sklearn-mirror\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nWe get responses from iris but all requests would also have been mirrored to iris2\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nWe can check the local prometheus port from the agent to validate requests went to iris2\ncurl -s 0.0.0:9006/metrics | grep seldon_model_infer_total | grep iris2_1\n\n\nseldon_model_infer_total{code=\"200\",method_type=\"rest\",model=\"iris\",model_internal=\"iris2_1\",server=\"mlserver\",server_replica=\"0\"} 50\n\n\n\nStop the experiment\nseldon experiment stop sklearn-mirror\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n\n\n\nPipeline Mirror Experiment\u00b6\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "cea34177-721e-4889-8b7f-5dbb476b04ea", "page": "examples/local-experiments", "section": "local-experiments", "text": "3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nWe can check the local prometheus port from the agent to validate requests went to iris2\ncurl -s 0.0.0:9006/metrics | grep seldon_model_infer_total | grep iris2_1\n\n\nseldon_model_infer_total{code=\"200\",method_type=\"rest\",model=\"iris\",model_internal=\"iris2_1\",server=\"mlserver\",server_replica=\"0\"} 50\n\n\n\nStop the experiment\nseldon experiment stop sklearn-mirror\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n\n\n\nPipeline Mirror Experiment\u00b6\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n\n\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n\n\ncat ./pipelines/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-mul10\nspec:\n  steps:\n    - name: mul10\n  output:\n    steps:\n    - mul10\n\n\ncat ./pipelines/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-add10\nspec:\n  steps:\n    - name: add10\n  output:\n    steps:\n    - add10\n\n\nseldon pipeline load -f ./pipelines/add10.yaml\nseldon pipeline load -f ./pipelines/mul10.yaml\n\n\nseldon pipeline status pipeline-add10 -w PipelineReady\nseldon pipeline status pipeline-mul10 -w PipelineReady\n\n\n{\"pipelineName\":\"pipeline-add10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-add10\", \"uid\":\"ciep072i8ufs73flaipg\", \"version\":1, \"steps\":[{\"name\":\"add10\"}], \"output\":{\"steps\":[\"add10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:07:24.903503109Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"pipeline-mul10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-mul10\", \"uid\":\"ciep072i8ufs73flaiq0\", \"version\":1, \"steps\":[{\"name\":\"mul10\"}], \"output\":{\"steps\":[\"mul10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:07:25.082642153Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer pipeline-add10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\nseldon pipeline infer pipeline-mul10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[10, 20, 30, 40]}}]}\n\n\ncat ./experiments/addmul10-mirror.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10-mirror\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 100\n  mirror:\n    name: pipeline-mul10\n    percent: 100\n\n\nseldon experiment start -f ./experiments/addmul10-mirror.yaml\n\n\nseldon experiment status addmul10-mirror -w |", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "e9dcf1dd-59be-45ad-8be1-796bd0f5882e", "page": "examples/local-experiments", "section": "local-experiments", "text": "'{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\nseldon pipeline infer pipeline-mul10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[10, 20, 30, 40]}}]}\n\n\ncat ./experiments/addmul10-mirror.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10-mirror\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 100\n  mirror:\n    name: pipeline-mul10\n    percent: 100\n\n\nseldon experiment start -f ./experiments/addmul10-mirror.yaml\n\n\nseldon experiment status addmul10-mirror -w | jq -M .\n\n\n{\n  \"experimentName\": \"addmul10-mirror\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nseldon pipeline infer pipeline-add10 -i 1 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\nLet\u2019s check that the mul10 model was called.\ncurl -s 0.0.0:9007/metrics | grep seldon_model_infer_total | grep mul10_1\n\n\nseldon_model_infer_total{code=\"OK\",method_type=\"grpc\",model=\"mul10\",model_internal=\"mul10_1\",server=\"triton\",server_replica=\"0\"} 2\n\n\n\ncurl -s 0.0.0:9007/metrics | grep seldon_model_infer_total | grep add10_1\n\n\nseldon_model_infer_total{code=\"OK\",method_type=\"grpc\",model=\"add10\",model_internal=\"add10_1\",server=\"triton\",server_replica=\"0\"} 2\n\n\n\nLet\u2019s do an http call and check agaib the two models\nseldon pipeline infer pipeline-add10 -i 1 \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"data\":[1,2,3,4],\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t11,\n\t\t\t\t12,\n\t\t\t\t13,\n\t\t\t\t14\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT\",\n\t\t\t\"shape\": [\n\t\t\t\t4\n\t\t\t],\n\t\t\t\"datatype\": \"FP32\"\n\t\t}\n\t]\n}\n\n\ncurl -s 0.0.0:9007/metrics | grep seldon_model_infer_total | grep mul10_1\n\n\nseldon_model_infer_total{code=\"OK\",method_type=\"grpc\",model=\"mul10\",model_internal=\"mul10_1\",server=\"triton\",server_replica=\"0\"} 3\n\n\n\ncurl -s 0.0.0:9007/metrics | grep seldon_model_infer_total | grep add10_1\n\n\nseldon_model_infer_total{code=\"OK\",method_type=\"grpc\",model=\"add10\",model_internal=\"add10_1\",server=\"triton\",server_replica=\"0\"} 3\n\n\n\nseldon pipeline inspect pipeline-mul10\n\n\nseldon.default.model.mul10.inputs\tciep0bofh5ss73dpdiq0\t{\"inputs\":[{\"name\":\"INPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[1, 2, 3, 4]}}]}\nseldon.default.model.mul10.outputs\tciep0bofh5ss73dpdiq0\t{\"modelName\":\"mul10_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[10, 20, 30, 40]}}]}\nseldon.default.pipeline.pipeline-mul10.inputs\tciep0bofh5ss73dpdiq0\t{\"inputs\":[{\"name\":\"INPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[1, 2, 3, 4]}}]}\nseldon.default.pipeline.pipeline-mul10.outputs\tciep0bofh5ss73dpdiq0\t{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[10, 20, 30, 40]}}]}\n\n\n\nseldon experiment stop addmul10-mirror\nseldon pipeline unload pipeline-add10\nseldon pipeline unload pipeline-mul10\nseldon model unload add10\nseldon model unload mul10\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "af0367fe-f701-4c6c-87de-576f260b1b7f", "page": "examples/local-experiments", "section": "seldon-v2-non-kubernetes-local-experiment-examples", "text": "\nSeldon V2 Non Kubernetes Local Experiment Examples\u00b6\n\nModel Experiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate experiments.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\n\n\n{}\n{}\n\n\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nCreate an experiment that modifies the iris model to add a second model splitting traffic 50/50 between the two.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nStart the experiment.\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\nWait for the experiment to be ready.\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::27 :iris_1::23]\n\n\n\nShow sticky session header x-seldon-route that is returned\nseldon model infer iris --show-headers \\\n  '{\"inputs\": [{\"name\": \"predict\",", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "00fa3d18-3765-4cb4-8236-9296a98fd55c", "page": "examples/local-experiments", "section": "seldon-v2-non-kubernetes-local-experiment-examples", "text": "true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::27 :iris_1::23]\n\n\n\nShow sticky session header x-seldon-route that is returned\nseldon model infer iris --show-headers \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: localhost:9000\n> Content-Type:[application/json]\n> Seldon-Model:[iris]\n\n< X-Seldon-Route:[:iris_1:]\n< Ce-Id:[463e96ad-645f-4442-8890-4c340b58820b]\n< Traceparent:[00-fe9e87fcbe4be98ed82fb76166e15ceb-d35e7ac96bd8b718-01]\n< X-Envoy-Upstream-Service-Time:[3]\n< Ce-Specversion:[0.3]\n< Date:[Thu, 29 Jun 2023 14:03:03 GMT]\n< Ce-Source:[io.seldon.serving.deployment.mlserver]\n< Content-Type:[application/json]\n< Server:[envoy]\n< X-Request-Id:[cieou5ofh5ss73fbjdu0]\n< Ce-Endpoint:[iris_1]\n< Ce-Modelid:[iris_1]\n< Ce-Type:[io.seldon.serving.inference.response]\n< Content-Length:[213]\n< Ce-Inferenceservicename:[mlserver]\n< Ce-Requestid:[463e96ad-645f-4442-8890-4c340b58820b]\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"463e96ad-645f-4442-8890-4c340b58820b\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\n\nUse sticky session key passed by last infer request to ensure same route is taken each time.\nseldon model infer iris -s -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -s -i 50\\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nStop the experiment\nseldon experiment stop experiment-sample\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n\n\nPipeline Experiment\u00b6\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n\n\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n\n\ncat ./pipelines/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-mul10\nspec:\n  steps:\n    - name: mul10\n  output:\n    steps:\n    - mul10\n\n\ncat ./pipelines/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind:", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "820652b8-4c9c-4a80-a015-c573fa727f36", "page": "examples/local-experiments", "section": "seldon-v2-non-kubernetes-local-experiment-examples", "text": "- python\n\n\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n\n\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n\n\ncat ./pipelines/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-mul10\nspec:\n  steps:\n    - name: mul10\n  output:\n    steps:\n    - mul10\n\n\ncat ./pipelines/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-add10\nspec:\n  steps:\n    - name: add10\n  output:\n    steps:\n    - add10\n\n\nseldon pipeline load -f ./pipelines/add10.yaml\nseldon pipeline load -f ./pipelines/mul10.yaml\n\n\nseldon pipeline status pipeline-add10 -w PipelineReady\nseldon pipeline status pipeline-mul10 -w PipelineReady\n\n\n{\"pipelineName\":\"pipeline-add10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-add10\", \"uid\":\"cieov47l80lc739juklg\", \"version\":1, \"steps\":[{\"name\":\"add10\"}], \"output\":{\"steps\":[\"add10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:05:04.460868091Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"pipeline-mul10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-mul10\", \"uid\":\"cieov47l80lc739jukm0\", \"version\":1, \"steps\":[{\"name\":\"mul10\"}], \"output\":{\"steps\":[\"mul10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:05:04.631980330Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer pipeline-add10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "925e6e05-7734-416c-a0d7-6b99131de3fc", "page": "examples/local-experiments", "section": "seldon-v2-non-kubernetes-local-experiment-examples", "text": "    \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer pipeline-mul10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\ncat ./experiments/addmul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 50\n  - name: pipeline-mul10\n    weight: 50\n\n\nseldon experiment start -f ./experiments/addmul10.yaml\n\n\nseldon experiment status addmul10 -w | jq -M .\n\n\n{\n  \"experimentName\": \"addmul10\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "234fcda4-ea50-4ac7-bdce-527513192dd2", "page": "examples/local-experiments", "section": "seldon-v2-non-kubernetes-local-experiment-examples", "text": "}\n  ]\n}\n\n\ncat ./experiments/addmul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 50\n  - name: pipeline-mul10\n    weight: 50\n\n\nseldon experiment start -f ./experiments/addmul10.yaml\n\n\nseldon experiment status addmul10 -w | jq -M .\n\n\n{\n  \"experimentName\": \"addmul10\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nseldon pipeline infer pipeline-add10 -i 50 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::28 :mul10_1::22 :pipeline-add10.pipeline::28 :pipeline-mul10.pipeline::22]\n\n\n\nUse sticky session key passed by last infer request to ensure same route is taken each time.\nseldon pipeline infer pipeline-add10 --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> seldon-model:[pipeline-add10.pipeline]\n\n< x-envoy-expected-rq-timeout-ms:[60000]\n< x-request-id:[cieov8ofh5ss739277i0]\n< date:[Thu, 29 Jun 2023 14:05:23 GMT]\n< server:[envoy]\n< content-type:[application/grpc]\n< x-envoy-upstream-service-time:[6]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n< x-forwarded-proto:[http]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\n\nseldon pipeline infer pipeline-add10 -s --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n> seldon-model:[pipeline-add10.pipeline]\n\n< content-type:[application/grpc]\n< x-forwarded-proto:[http]\n< x-envoy-expected-rq-timeout-ms:[60000]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline: :pipeline-add10.pipeline:]\n< x-request-id:[cieov90fh5ss739277ig]\n< x-envoy-upstream-service-time:[7]\n< date:[Thu, 29 Jun 2023 14:05:24 GMT]\n< server:[envoy]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\n\nseldon pipeline infer pipeline-add10 -s -i 50 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::50 :pipeline-add10.pipeline::150]\n\n\n\ncat ./models/add20.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add20\nspec:\n  storageUri: \"gs://seldon-models/triton/add20\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add20.yaml\n\n\n{}\n\n\nseldon model status add20 -w ModelAvailable\n\n\n{}\n\n\ncat ./experiments/add1020.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: add1020\nspec:\n  default: add10\n  candidates:\n  - name: add10\n    weight: 50\n  - name: add20\n    weight: 50\n\n\nseldon experiment start -f ./experiments/add1020.yaml\n\n\nseldon experiment status add1020 -w | jq -M .\n\n\n{\n  \"experimentName\": \"add1020\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "1af86d7f-1761-4909-a69d-be8c83bfb512", "page": "examples/local-experiments", "section": "seldon-v2-non-kubernetes-local-experiment-examples", "text": "- python\n\n\nseldon model load -f ./models/add20.yaml\n\n\n{}\n\n\nseldon model status add20 -w ModelAvailable\n\n\n{}\n\n\ncat ./experiments/add1020.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: add1020\nspec:\n  default: add10\n  candidates:\n  - name: add10\n    weight: 50\n  - name: add20\n    weight: 50\n\n\nseldon experiment start -f ./experiments/add1020.yaml\n\n\nseldon experiment status add1020 -w | jq -M .\n\n\n{\n  \"experimentName\": \"add1020\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nseldon model infer add10 -i 50  --inference-mode grpc \\\n  '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::22 :add20_1::28]\n\n\n\nseldon pipeline infer pipeline-add10 -i 100 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::24 :add20_1::32 :mul10_1::44 :pipeline-add10.pipeline::56 :pipeline-mul10.pipeline::44]\n\n\n\nseldon pipeline infer pipeline-add10 --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> seldon-model:[pipeline-add10.pipeline]\n\n< x-request-id:[cieovf0fh5ss739279u0]\n< x-envoy-upstream-service-time:[5]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n< date:[Thu, 29 Jun 2023 14:05:48 GMT]\n< server:[envoy]\n< content-type:[application/grpc]\n< x-forwarded-proto:[http]\n< x-envoy-expected-rq-timeout-ms:[60000]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\n\nseldon pipeline infer pipeline-add10 -s --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n> seldon-model:[pipeline-add10.pipeline]\n\n< x-forwarded-proto:[http]\n< x-envoy-expected-rq-timeout-ms:[60000]\n< x-request-id:[cieovf8fh5ss739279ug]\n< x-envoy-upstream-service-time:[6]\n< date:[Thu, 29 Jun 2023 14:05:49 GMT]\n< server:[envoy]\n< content-type:[application/grpc]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline: :add20_1: :pipeline-add10.pipeline:]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[21, 22, 23, 24]}}]}\n\n\n\nseldon experiment stop addmul10\nseldon experiment stop add1020\nseldon pipeline unload pipeline-add10\nseldon pipeline unload pipeline-mul10\nseldon model unload add10\nseldon model unload add20\nseldon model unload mul10\n\n\n\n\nModel Mirror Experiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate a model with a mirror.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris -w ModelAvailable\nseldon model", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "2f557d94-1300-4296-a1d5-ed2b99997c53", "page": "examples/local-experiments", "section": "seldon-v2-non-kubernetes-local-experiment-examples", "text": "will use two SKlearn Iris classification models to illustrate a model with a mirror.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\n\n\n{}\n{}\n\n\nCreate an experiment that modifies in which we mirror traffic to iris also to iris2.\ncat ./experiments/sklearn-mirror.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: sklearn-mirror\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 100\n  mirror:\n    name: iris2\n    percent: 100\n\n\nStart the experiment.\nseldon experiment start -f ./experiments/sklearn-mirror.yaml\n\n\nWait for the experiment to be ready.\nseldon experiment status sklearn-mirror -w | jq -M .\n\n\n{\n  \"experimentName\": \"sklearn-mirror\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nWe get responses from iris but all requests would also have been mirrored to iris2\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nWe can check the local prometheus port from the agent to validate requests went to iris2\ncurl -s 0.0.0:9006/metrics | grep seldon_model_infer_total | grep iris2_1\n\n\nseldon_model_infer_total{code=\"200\",method_type=\"rest\",model=\"iris\",model_internal=\"iris2_1\",server=\"mlserver\",server_replica=\"0\"} 50\n\n\n\nStop the experiment\nseldon experiment stop sklearn-mirror\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "fc28c0e6-f1cd-4934-a9a8-4a2382c9f5b4", "page": "examples/local-experiments", "section": "model-experiment", "text": "\nModel Experiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate experiments.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\n\n\n{}\n{}\n\n\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nCreate an experiment that modifies the iris model to add a second model splitting traffic 50/50 between the two.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nStart the experiment.\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\nWait for the experiment to be ready.\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::27 :iris_1::23]\n\n\n\nShow sticky session header x-seldon-route that is returned\nseldon model infer iris --show-headers \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "487b534f-0210-458e-baf1-4058cd6152da", "page": "examples/local-experiments", "section": "model-experiment", "text": "\"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::27 :iris_1::23]\n\n\n\nShow sticky session header x-seldon-route that is returned\nseldon model infer iris --show-headers \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\n> POST /v2/models/iris/infer HTTP/1.1\n> Host: localhost:9000\n> Content-Type:[application/json]\n> Seldon-Model:[iris]\n\n< X-Seldon-Route:[:iris_1:]\n< Ce-Id:[463e96ad-645f-4442-8890-4c340b58820b]\n< Traceparent:[00-fe9e87fcbe4be98ed82fb76166e15ceb-d35e7ac96bd8b718-01]\n< X-Envoy-Upstream-Service-Time:[3]\n< Ce-Specversion:[0.3]\n< Date:[Thu, 29 Jun 2023 14:03:03 GMT]\n< Ce-Source:[io.seldon.serving.deployment.mlserver]\n< Content-Type:[application/json]\n< Server:[envoy]\n< X-Request-Id:[cieou5ofh5ss73fbjdu0]\n< Ce-Endpoint:[iris_1]\n< Ce-Modelid:[iris_1]\n< Ce-Type:[io.seldon.serving.inference.response]\n< Content-Length:[213]\n< Ce-Inferenceservicename:[mlserver]\n< Ce-Requestid:[463e96ad-645f-4442-8890-4c340b58820b]\n\n{\n\t\"model_name\": \"iris_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"463e96ad-645f-4442-8890-4c340b58820b\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t2\n\t\t\t]\n\t\t}\n\t]\n}\n\n\n\nUse sticky session key passed by last infer request to ensure same route is taken each time.\nseldon model infer iris -s -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris --inference-mode grpc -s -i 50\\\n   '{\"model_name\":\"iris\",\"inputs\":[{\"name\":\"input\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[1,4]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nStop the experiment\nseldon experiment stop experiment-sample\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "9184b532-5e31-453b-9db8-abbaaca61ee9", "page": "examples/local-experiments", "section": "pipeline-experiment", "text": "\nPipeline Experiment\u00b6\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n\n\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n\n\ncat ./pipelines/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-mul10\nspec:\n  steps:\n    - name: mul10\n  output:\n    steps:\n    - mul10\n\n\ncat ./pipelines/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-add10\nspec:\n  steps:\n    - name: add10\n  output:\n    steps:\n    - add10\n\n\nseldon pipeline load -f ./pipelines/add10.yaml\nseldon pipeline load -f ./pipelines/mul10.yaml\n\n\nseldon pipeline status pipeline-add10 -w PipelineReady\nseldon pipeline status pipeline-mul10 -w PipelineReady\n\n\n{\"pipelineName\":\"pipeline-add10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-add10\", \"uid\":\"cieov47l80lc739juklg\", \"version\":1, \"steps\":[{\"name\":\"add10\"}], \"output\":{\"steps\":[\"add10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:05:04.460868091Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"pipeline-mul10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-mul10\", \"uid\":\"cieov47l80lc739jukm0\", \"version\":1, \"steps\":[{\"name\":\"mul10\"}], \"output\":{\"steps\":[\"mul10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:05:04.631980330Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer pipeline-add10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "ac405428-2f67-4898-a6b3-8fce21505e80", "page": "examples/local-experiments", "section": "pipeline-experiment", "text": "\"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          11,\n          12,\n          13,\n          14\n        ]\n      }\n    }\n  ]\n}\n\n\nseldon pipeline infer pipeline-mul10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}' | jq -M .\n\n\n{\n  \"outputs\": [\n    {\n      \"name\": \"OUTPUT\",\n      \"datatype\": \"FP32\",\n      \"shape\": [\n        \"4\"\n      ],\n      \"contents\": {\n        \"fp32Contents\": [\n          10,\n          20,\n          30,\n          40\n        ]\n      }\n    }\n  ]\n}\n\n\ncat ./experiments/addmul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 50\n  - name: pipeline-mul10\n    weight: 50\n\n\nseldon experiment start -f ./experiments/addmul10.yaml\n\n\nseldon experiment status addmul10 -w | jq -M .\n\n\n{\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "ffa70baa-e2a9-4c7a-bf6f-a0763777e403", "page": "examples/local-experiments", "section": "pipeline-experiment", "text": "       ]\n      }\n    }\n  ]\n}\n\n\ncat ./experiments/addmul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 50\n  - name: pipeline-mul10\n    weight: 50\n\n\nseldon experiment start -f ./experiments/addmul10.yaml\n\n\nseldon experiment status addmul10 -w | jq -M .\n\n\n{\n  \"experimentName\": \"addmul10\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nseldon pipeline infer pipeline-add10 -i 50 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::28 :mul10_1::22 :pipeline-add10.pipeline::28 :pipeline-mul10.pipeline::22]\n\n\n\nUse sticky session key passed by last infer request to ensure same route is taken each time.\nseldon pipeline infer pipeline-add10 --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> seldon-model:[pipeline-add10.pipeline]\n\n< x-envoy-expected-rq-timeout-ms:[60000]\n< x-request-id:[cieov8ofh5ss739277i0]\n< date:[Thu, 29 Jun 2023 14:05:23 GMT]\n< server:[envoy]\n< content-type:[application/grpc]\n< x-envoy-upstream-service-time:[6]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n< x-forwarded-proto:[http]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\n\nseldon pipeline infer pipeline-add10 -s --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n> seldon-model:[pipeline-add10.pipeline]\n\n< content-type:[application/grpc]\n< x-forwarded-proto:[http]\n< x-envoy-expected-rq-timeout-ms:[60000]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline: :pipeline-add10.pipeline:]\n< x-request-id:[cieov90fh5ss739277ig]\n< x-envoy-upstream-service-time:[7]\n< date:[Thu, 29 Jun 2023 14:05:24 GMT]\n< server:[envoy]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\n\nseldon pipeline infer pipeline-add10 -s -i 50 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::50 :pipeline-add10.pipeline::150]\n\n\n\ncat ./models/add20.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add20\nspec:\n  storageUri: \"gs://seldon-models/triton/add20\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add20.yaml\n\n\n{}\n\n\nseldon model status add20 -w ModelAvailable\n\n\n{}\n\n\ncat ./experiments/add1020.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: add1020\nspec:\n  default: add10\n  candidates:\n  - name: add10\n    weight: 50\n  - name: add20\n    weight: 50\n\n\nseldon experiment start -f ./experiments/add1020.yaml\n\n\nseldon experiment status add1020", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "614e9f5e-d035-48bd-915b-205cbdbd208c", "page": "examples/local-experiments", "section": "pipeline-experiment", "text": "map[:add10_1::50 :pipeline-add10.pipeline::150]\n\n\n\ncat ./models/add20.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add20\nspec:\n  storageUri: \"gs://seldon-models/triton/add20\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add20.yaml\n\n\n{}\n\n\nseldon model status add20 -w ModelAvailable\n\n\n{}\n\n\ncat ./experiments/add1020.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: add1020\nspec:\n  default: add10\n  candidates:\n  - name: add10\n    weight: 50\n  - name: add20\n    weight: 50\n\n\nseldon experiment start -f ./experiments/add1020.yaml\n\n\nseldon experiment status add1020 -w | jq -M .\n\n\n{\n  \"experimentName\": \"add1020\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nseldon model infer add10 -i 50  --inference-mode grpc \\\n  '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::22 :add20_1::28]\n\n\n\nseldon pipeline infer pipeline-add10 -i 100 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\nSuccess: map[:add10_1::24 :add20_1::32 :mul10_1::44 :pipeline-add10.pipeline::56 :pipeline-mul10.pipeline::44]\n\n\n\nseldon pipeline infer pipeline-add10 --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> seldon-model:[pipeline-add10.pipeline]\n\n< x-request-id:[cieovf0fh5ss739279u0]\n< x-envoy-upstream-service-time:[5]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n< date:[Thu, 29 Jun 2023 14:05:48 GMT]\n< server:[envoy]\n< content-type:[application/grpc]\n< x-forwarded-proto:[http]\n< x-envoy-expected-rq-timeout-ms:[60000]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\n\nseldon pipeline infer pipeline-add10 -s --show-headers --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n> /inference.GRPCInferenceService/ModelInfer HTTP/2\n> Host: localhost:9000\n> x-seldon-route:[:add10_1: :pipeline-add10.pipeline:]\n> seldon-model:[pipeline-add10.pipeline]\n\n< x-forwarded-proto:[http]\n< x-envoy-expected-rq-timeout-ms:[60000]\n< x-request-id:[cieovf8fh5ss739279ug]\n< x-envoy-upstream-service-time:[6]\n< date:[Thu, 29 Jun 2023 14:05:49 GMT]\n< server:[envoy]\n< content-type:[application/grpc]\n< x-seldon-route:[:add10_1: :pipeline-add10.pipeline: :add20_1: :pipeline-add10.pipeline:]\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[21, 22, 23, 24]}}]}\n\n\n\nseldon experiment stop addmul10\nseldon experiment stop add1020\nseldon pipeline unload pipeline-add10\nseldon pipeline unload pipeline-mul10\nseldon model unload add10\nseldon model unload add20\nseldon model unload mul10\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "17b1362b-80a4-4191-8c69-aa84bbaa4be3", "page": "examples/local-experiments", "section": "model-mirror-experiment", "text": "\nModel Mirror Experiment\u00b6\nWe will use two SKlearn Iris classification models to illustrate a model with a mirror.\ncat ./models/sklearn1.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\ncat ./models/sklearn2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris2\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  requirements:\n  - sklearn\n\n\nLoad both models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\n\n\n{}\n{}\n\n\nWait for both models to be ready.\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\n\n\n{}\n{}\n\n\nCreate an experiment that modifies in which we mirror traffic to iris also to iris2.\ncat ./experiments/sklearn-mirror.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: sklearn-mirror\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 100\n  mirror:\n    name: iris2\n    percent: 100\n\n\nStart the experiment.\nseldon experiment start -f ./experiments/sklearn-mirror.yaml\n\n\nWait for the experiment to be ready.\nseldon experiment status sklearn-mirror -w | jq -M .\n\n\n{\n  \"experimentName\": \"sklearn-mirror\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nWe get responses from iris but all requests would also have been mirrored to iris2\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nWe can check the local prometheus port from the agent to validate requests went to iris2\ncurl -s 0.0.0:9006/metrics | grep seldon_model_infer_total | grep iris2_1\n\n\nseldon_model_infer_total{code=\"200\",method_type=\"rest\",model=\"iris\",model_internal=\"iris2_1\",server=\"mlserver\",server_replica=\"0\"} 50\n\n\n\nStop the experiment\nseldon experiment stop sklearn-mirror\n\n\nUnload both models.\nseldon model unload iris\nseldon model unload iris2\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "3a863d3d-581e-4e7f-8e54-8c8619b6eae5", "page": "examples/local-experiments", "section": "pipeline-mirror-experiment", "text": "\nPipeline Mirror Experiment\u00b6\ncat ./models/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: add10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/add10\"\n  requirements:\n  - triton\n  - python\n\n\ncat ./models/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: mul10\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/triton_23-03/mul10\"\n  requirements:\n  - triton\n  - python\n\n\nseldon model load -f ./models/add10.yaml\nseldon model load -f ./models/mul10.yaml\n\n\n{}\n{}\n\n\nseldon model status add10 -w ModelAvailable\nseldon model status mul10 -w ModelAvailable\n\n\n{}\n{}\n\n\ncat ./pipelines/mul10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-mul10\nspec:\n  steps:\n    - name: mul10\n  output:\n    steps:\n    - mul10\n\n\ncat ./pipelines/add10.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: pipeline-add10\nspec:\n  steps:\n    - name: add10\n  output:\n    steps:\n    - add10\n\n\nseldon pipeline load -f ./pipelines/add10.yaml\nseldon pipeline load -f ./pipelines/mul10.yaml\n\n\nseldon pipeline status pipeline-add10 -w PipelineReady\nseldon pipeline status pipeline-mul10 -w PipelineReady\n\n\n{\"pipelineName\":\"pipeline-add10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-add10\", \"uid\":\"ciep072i8ufs73flaipg\", \"version\":1, \"steps\":[{\"name\":\"add10\"}], \"output\":{\"steps\":[\"add10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:07:24.903503109Z\", \"modelsReady\":true}}]}\n{\"pipelineName\":\"pipeline-mul10\", \"versions\":[{\"pipeline\":{\"name\":\"pipeline-mul10\", \"uid\":\"ciep072i8ufs73flaiq0\", \"version\":1, \"steps\":[{\"name\":\"mul10\"}], \"output\":{\"steps\":[\"mul10.outputs\"]}, \"kubernetesMeta\":{}}, \"state\":{\"pipelineVersion\":1, \"status\":\"PipelineReady\", \"reason\":\"created pipeline\", \"lastChangeTimestamp\":\"2023-06-29T14:07:25.082642153Z\", \"modelsReady\":true}}]}\n\n\nseldon pipeline infer pipeline-add10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\nseldon pipeline infer pipeline-mul10 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[10, 20, 30, 40]}}]}\n\n\ncat ./experiments/addmul10-mirror.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: addmul10-mirror\nspec:\n  default: pipeline-add10\n  resourceType: pipeline\n  candidates:\n  - name: pipeline-add10\n    weight: 100\n  mirror:\n    name: pipeline-mul10\n    percent: 100\n\n\nseldon experiment start -f ./experiments/addmul10-mirror.yaml\n\n\nseldon experiment status addmul10-mirror -w | jq -M .\n\n\n{\n  \"experimentName\": \"addmul10-mirror\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nseldon pipeline infer pipeline-add10 -i 1 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\nLet\u2019s check that", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "35c5b56c-5c5c-4219-a5e3-1c63e29843ae", "page": "examples/local-experiments", "section": "pipeline-mirror-experiment", "text": "  weight: 100\n  mirror:\n    name: pipeline-mul10\n    percent: 100\n\n\nseldon experiment start -f ./experiments/addmul10-mirror.yaml\n\n\nseldon experiment status addmul10-mirror -w | jq -M .\n\n\n{\n  \"experimentName\": \"addmul10-mirror\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nseldon pipeline infer pipeline-add10 -i 1 --inference-mode grpc \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"contents\":{\"fp32_contents\":[1,2,3,4]},\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[11, 12, 13, 14]}}]}\n\n\nLet\u2019s check that the mul10 model was called.\ncurl -s 0.0.0:9007/metrics | grep seldon_model_infer_total | grep mul10_1\n\n\nseldon_model_infer_total{code=\"OK\",method_type=\"grpc\",model=\"mul10\",model_internal=\"mul10_1\",server=\"triton\",server_replica=\"0\"} 2\n\n\n\ncurl -s 0.0.0:9007/metrics | grep seldon_model_infer_total | grep add10_1\n\n\nseldon_model_infer_total{code=\"OK\",method_type=\"grpc\",model=\"add10\",model_internal=\"add10_1\",server=\"triton\",server_replica=\"0\"} 2\n\n\n\nLet\u2019s do an http call and check agaib the two models\nseldon pipeline infer pipeline-add10 -i 1 \\\n '{\"model_name\":\"add10\",\"inputs\":[{\"name\":\"INPUT\",\"data\":[1,2,3,4],\"datatype\":\"FP32\",\"shape\":[4]}]}'\n\n\n{\n\t\"model_name\": \"\",\n\t\"outputs\": [\n\t\t{\n\t\t\t\"data\": [\n\t\t\t\t11,\n\t\t\t\t12,\n\t\t\t\t13,\n\t\t\t\t14\n\t\t\t],\n\t\t\t\"name\": \"OUTPUT\",\n\t\t\t\"shape\": [\n\t\t\t\t4\n\t\t\t],\n\t\t\t\"datatype\": \"FP32\"\n\t\t}\n\t]\n}\n\n\ncurl -s 0.0.0:9007/metrics | grep seldon_model_infer_total | grep mul10_1\n\n\nseldon_model_infer_total{code=\"OK\",method_type=\"grpc\",model=\"mul10\",model_internal=\"mul10_1\",server=\"triton\",server_replica=\"0\"} 3\n\n\n\ncurl -s 0.0.0:9007/metrics | grep seldon_model_infer_total | grep add10_1\n\n\nseldon_model_infer_total{code=\"OK\",method_type=\"grpc\",model=\"add10\",model_internal=\"add10_1\",server=\"triton\",server_replica=\"0\"} 3\n\n\n\nseldon pipeline inspect pipeline-mul10\n\n\nseldon.default.model.mul10.inputs\tciep0bofh5ss73dpdiq0\t{\"inputs\":[{\"name\":\"INPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[1, 2, 3, 4]}}]}\nseldon.default.model.mul10.outputs\tciep0bofh5ss73dpdiq0\t{\"modelName\":\"mul10_1\", \"modelVersion\":\"1\", \"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[10, 20, 30, 40]}}]}\nseldon.default.pipeline.pipeline-mul10.inputs\tciep0bofh5ss73dpdiq0\t{\"inputs\":[{\"name\":\"INPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[1, 2, 3, 4]}}]}\nseldon.default.pipeline.pipeline-mul10.outputs\tciep0bofh5ss73dpdiq0\t{\"outputs\":[{\"name\":\"OUTPUT\", \"datatype\":\"FP32\", \"shape\":[\"4\"], \"contents\":{\"fp32Contents\":[10, 20, 30, 40]}}]}\n\n\n\nseldon experiment stop addmul10-mirror\nseldon pipeline unload pipeline-add10\nseldon pipeline unload pipeline-mul10\nseldon model unload add10\nseldon model unload mul10\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/local-experiments.html", "key": "examples/local-experiments"}}, {"key": "2d7c2776-6686-44df-9b65-6a6d1b4feac0", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": "\nProduction Income Classifier with Drift, Outlier and Explanations\u00b6\nRun these examples from the samples/examples/income_classifier folder.\n\nTabular Income Classifier Production Deployment\u00b6\nTo run this notebook you need the inference data. This can be acquired in two ways:\n\nRun make train or,\ngsutil cp -R gs://seldon-models/scv2/examples/income/infer-data .\n\nimport numpy as np\nimport json\nimport requests\n\n\nwith open('./infer-data/test.npy', 'rb') as f:\n    x_ref = np.load(f)\n    x_h1 = np.load(f)\n    y_ref = np.load(f)\n    x_outlier = np.load(f)\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\n\ndef infer(resourceName: str, batchSz: int, requestType: str):\n    if requestType == \"outlier\":\n        rows = x_outlier[0:0+batchSz]\n    elif requestType == \"drift\":\n        rows = x_h1[0:0+batchSz]\n    else:\n        rows = x_ref[0:0+batchSz]\n    reqJson[\"inputs\"][0][\"data\"] = rows.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [batchSz, rows.shape[1]]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":resourceName}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    print(response_raw)\n    print(response_raw.json())\n\n\n\nPipeline with model, drift detector and outlier detector\u00b6\ncat ../../models/income-preprocess.yaml\necho \"---\"\ncat ../../models/income.yaml\necho \"---\"\ncat ../../models/income-drift.yaml\necho \"---\"\ncat ../../models/income-outlier.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-preprocess\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/preprocessor\"\n  requirements:\n  - sklearn\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/classifier\"\n  requirements:\n  - sklearn\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/income-preprocess.yaml\nseldon model load -f ../../models/income.yaml\nseldon", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "c58aae2e-2605-4b1c-9b8f-e73b4bac6a65", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": " - sklearn\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/classifier\"\n  requirements:\n  - sklearn\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/income-preprocess.yaml\nseldon model load -f ../../models/income.yaml\nseldon model load -f ../../models/income-drift.yaml\nseldon model load -f ../../models/income-outlier.yaml\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model status income-preprocess -w ModelAvailable | jq .\nseldon model status income -w ModelAvailable | jq .\nseldon model status income-drift -w ModelAvailable | jq .\nseldon model status income-outlier -w ModelAvailable | jq .\n\n\n{}\n{}\n{}\n{}\n\n\ncat ../../pipelines/income.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: income-production\nspec:\n  steps:\n    - name: income\n    - name: income-preprocess\n    - name: income-outlier\n      inputs:\n      - income-preprocess\n    - name: income-drift\n      batch:\n        size: 20\n  output:\n    steps:\n    - income\n    - income-outlier.outputs.is_outlier\n\n\nseldon pipeline load -f ../../pipelines/income.yaml\n\n\nseldon pipeline status income-production -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"income-production\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"income-production\",\n        \"uid\": \"cifej8iufmbc73e5int0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "9ccf4613-9f79-4029-9432-2d3a88e4a91a", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": ".\n\n\n{\n  \"pipelineName\": \"income-production\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"income-production\",\n        \"uid\": \"cifej8iufmbc73e5int0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"income\"\n          },\n          {\n            \"name\": \"income-drift\",\n            \"batch\": {\n              \"size\": 20\n            }\n          },\n          {\n            \"name\": \"income-outlier\",\n            \"inputs\": [\n              \"income-preprocess.outputs\"\n            ]\n          },\n          {\n            \"name\": \"income-preprocess\"\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "dc5b4f1b-1fe3-4d00-be13-e9052329cd05", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": "  \"inputs\": [\n              \"income-preprocess.outputs\"\n            ]\n          },\n          {\n            \"name\": \"income-preprocess\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"income.outputs\",\n            \"income-outlier.outputs.is_outlier\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:41:38.343754921Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nShow predictions from reference set. Should not be drift or outliers.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"normal\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data':", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "60868b23-0e12-47b2-bdd2-85c2ed2f7c9d", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": "pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:41:38.343754921Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nShow predictions from reference set. Should not be drift or outliers.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"normal\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifej9gfh5ss738i5br0\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"0\"]}}\n\n\n\nShow predictions from drift data. Should be drift and probably not outliers.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"drift\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifejaofh5ss738i5brg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\nShow predictions from outlier data. Should be outliers and probably not drift.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"outlier\")\n\n\n[0 0 1 1 0 1 0 0 1 0", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "5120fbcd-d9e4-4fb7-ae2e-c5df9cd48f8e", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": "'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifejaofh5ss738i5brg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\nShow predictions from outlier data. Should be outliers and probably not drift.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"outlier\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifejb8fh5ss738i5bs0\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"0\"]}}\n\n\n\n\n\nExplanations\u00b6\ncat ../../models/income-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/explainer\"\n  explainer:\n    type: anchor_tabular\n    modelRef: income\n\n\nseldon model load -f ../../models/income-explainer.yaml\n\n\n{}\n\n\nseldon model status income-explainer -w ModelAvailable | jq .\n\n\n{}\n\n\nbatchSz=1\nprint(y_ref[0:batchSz])\ninfer(\"income-explainer\",batchSz,\"normal\")\n\n\n[0]\n<Response [200]>\n{'model_name': 'income-explainer_1', 'model_version': '1', 'id': 'cdd68ba5-c569-4930-886f-fbdc26e24866', 'parameters': {}, 'outputs': [{'name': 'explanation', 'shape': [1, 1], 'datatype': 'BYTES', 'parameters': {'content_type': 'str'}, 'data': ['{\"meta\": {\"name\": \"AnchorTabular\", \"type\": [\"blackbox\"], \"explanations\": [\"local\"], \"params\": {\"seed\": 1, \"disc_perc\": [25, 50, 75], \"threshold\": 0.95, \"delta\": 0.1, \"tau\": 0.15, \"batch_size\": 100, \"coverage_samples\": 10000, \"beam_size\": 1, \"stop_on_first\": false, \"max_anchor_size\": null, \"min_samples_start\": 100, \"n_covered_ex\": 10, \"binary_cache_size\": 10000, \"cache_margin\": 1000, \"verbose\": false, \"verbose_every\": 1, \"kwargs\": {}}, \"version\": \"0.9.1\"}, \"data\": {\"anchor\": [\"Marital Status = Never-Married\", \"Relationship = Own-child\", \"Capital", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "c289176b-3d3e-439d-9d19-3a2ad76a5c78", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": "[1, 1], 'datatype': 'BYTES', 'parameters': {'content_type': 'str'}, 'data': ['{\"meta\": {\"name\": \"AnchorTabular\", \"type\": [\"blackbox\"], \"explanations\": [\"local\"], \"params\": {\"seed\": 1, \"disc_perc\": [25, 50, 75], \"threshold\": 0.95, \"delta\": 0.1, \"tau\": 0.15, \"batch_size\": 100, \"coverage_samples\": 10000, \"beam_size\": 1, \"stop_on_first\": false, \"max_anchor_size\": null, \"min_samples_start\": 100, \"n_covered_ex\": 10, \"binary_cache_size\": 10000, \"cache_margin\": 1000, \"verbose\": false, \"verbose_every\": 1, \"kwargs\": {}}, \"version\": \"0.9.1\"}, \"data\": {\"anchor\": [\"Marital Status = Never-Married\", \"Relationship = Own-child\", \"Capital Gain <= 0.00\"], \"precision\": 0.9942028985507246, \"coverage\": 0.0657, \"raw\": {\"feature\": [3, 5, 8], \"mean\": [0.7914951989026063, 0.9400749063670412, 0.9942028985507246], \"precision\": [0.7914951989026063, 0.9400749063670412, 0.9942028985507246], \"coverage\": [0.3043, 0.069, 0.0657], \"examples\": [{\"covered_true\": [[30, 0, 1, 1, 0, 1, 1, 0, 0, 0, 50, 2], [49, 4, 2, 1, 6, 0, 4, 1, 0, 0, 60, 9], [39, 2, 5, 1, 5, 0, 4, 1, 0, 0, 40, 9], [33, 4, 2, 1, 5, 0, 4, 1, 0, 0, 40, 9], [63, 4, 1, 1, 8, 1, 4, 0, 0, 0, 40, 9], [23, 4, 1, 1, 7, 1, 4, 1, 0, 0, 66, 8], [45, 4, 1, 1, 8, 0, 1, 1, 0, 0, 40, 1], [54, 4, 1, 1, 8, 4, 4, 1, 0, 0, 45, 9], [32, 6, 1, 1, 8, 4, 2, 0, 0, 0, 30, 9], [40, 5, 1, 1, 2, 0, 4, 1, 0, 0, 40, 9]], \"covered_false\": [[57, 4, 5, 1, 5, 0, 4, 1, 0, 1977, 45, 9], [53, 0, 5, 1, 0, 1, 4, 0, 8614, 0, 35, 9], [37, 4, 1, 1, 5, 0, 4, 1, 0, 0, 45, 9], [53, 4, 5, 1, 8, 0, 4, 1, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "1af03e7d-bcb1-4141-a7d9-09d1bceacf43", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": "2, 0, 0, 0, 30, 9], [40, 5, 1, 1, 2, 0, 4, 1, 0, 0, 40, 9]], \"covered_false\": [[57, 4, 5, 1, 5, 0, 4, 1, 0, 1977, 45, 9], [53, 0, 5, 1, 0, 1, 4, 0, 8614, 0, 35, 9], [37, 4, 1, 1, 5, 0, 4, 1, 0, 0, 45, 9], [53, 4, 5, 1, 8, 0, 4, 1, 0, 1977, 55, 9], [35, 4, 1, 1, 8, 0, 4, 1, 7688, 0, 50, 9], [32, 4, 1, 1, 5, 1, 4, 1, 0, 0, 40, 9], [42, 4, 1, 1, 5, 0, 4, 1, 99999, 0, 40, 9], [32, 4, 1, 1, 8, 0, 4, 1, 15024, 0, 50, 9], [53, 7, 5, 1, 8, 0, 4, 1, 0, 0, 42, 9], [52, 1, 1, 1, 8, 0, 4, 1, 0, 0, 45, 9]], \"uncovered_true\": [], \"uncovered_false\": []}, {\"covered_true\": [[52, 7, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [27, 4, 1, 1, 8, 3, 4, 1, 0, 0, 40, 9], [28, 4, 1, 1, 6, 3, 4, 1, 0, 0, 60, 9], [46, 6, 5, 1, 2, 3, 4, 1, 0, 0, 50, 9], [53, 2, 5, 1, 5, 3, 2, 0, 0, 1669, 35, 9], [27, 4, 5, 1, 8, 3, 4, 0, 0, 0, 40, 9], [25, 4, 1, 1, 8, 3, 4, 0, 0, 0, 40, 9], [29, 6, 5, 1, 2, 3, 4, 1, 0, 0, 30, 9], [64, 0, 1, 1, 0, 3, 4, 1, 0, 0, 50, 9], [63, 0, 5, 1,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "d1bfc385-f79f-47ba-98c6-997d8cc9b25d", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": "[53, 2, 5, 1, 5, 3, 2, 0, 0, 1669, 35, 9], [27, 4, 5, 1, 8, 3, 4, 0, 0, 0, 40, 9], [25, 4, 1, 1, 8, 3, 4, 0, 0, 0, 40, 9], [29, 6, 5, 1, 2, 3, 4, 1, 0, 0, 30, 9], [64, 0, 1, 1, 0, 3, 4, 1, 0, 0, 50, 9], [63, 0, 5, 1, 0, 3, 4, 1, 0, 0, 30, 9]], \"covered_false\": [[50, 5, 1, 1, 8, 3, 4, 1, 15024, 0, 60, 9], [45, 6, 1, 1, 6, 3, 4, 1, 14084, 0, 45, 9], [37, 4, 1, 1, 8, 3, 4, 1, 15024, 0, 40, 9], [33, 4, 1, 1, 8, 3, 4, 1, 15024, 0, 60, 9], [41, 6, 5, 1, 8, 3, 4, 1, 7298, 0, 70, 9], [42, 6, 1, 1, 2, 3, 4, 1, 15024, 0, 60, 9]], \"uncovered_true\": [], \"uncovered_false\": []}, {\"covered_true\": [[41, 4, 1, 1, 1, 3, 4, 1, 0, 0, 40, 9], [55, 2, 5, 1, 8, 3, 4, 1, 0, 0, 50, 9], [35, 4, 5, 1, 5, 3, 4, 0, 0, 0, 32, 9], [31, 4, 1, 1, 2, 3, 4, 1, 0, 0, 40, 9], [47, 4, 1, 1, 1, 3, 4, 1, 0, 0, 40, 9], [33, 4, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [58, 0, 1, 1, 0, 3, 4, 0, 0, 0, 50, 9], [44, 6, 1, 1, 2, 3, 4, 1, 0, 0, 90, 9], [30, 4, 1, 1, 6, 3, 4, 1, 0, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "65fc5f46-e2be-4d64-a4bd-d19c5e569b55", "page": "examples/income", "section": "production-income-classifier-with-drift-outlier-and-explanations", "text": "4, 1, 0, 0, 40, 9], [47, 4, 1, 1, 1, 3, 4, 1, 0, 0, 40, 9], [33, 4, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [58, 0, 1, 1, 0, 3, 4, 0, 0, 0, 50, 9], [44, 6, 1, 1, 2, 3, 4, 1, 0, 0, 90, 9], [30, 4, 1, 1, 6, 3, 4, 1, 0, 0, 40, 9], [25, 4, 1, 1, 5, 3, 4, 1, 0, 0, 40, 9]], \"covered_false\": [], \"uncovered_true\": [], \"uncovered_false\": []}], \"all_precision\": 0, \"num_preds\": 1000000, \"success\": true, \"names\": [\"Marital Status = Never-Married\", \"Relationship = Own-child\", \"Capital Gain <= 0.00\"], \"prediction\": [0], \"instance\": [47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0], \"instances\": [[47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0]]}}}']}]}\n\n\n\n\n\nCleanup\u00b6\nseldon pipeline unload income-production\nseldon model unload income-preprocess\nseldon model unload income\nseldon model unload income-drift\nseldon model unload income-outlier\nseldon model unload income-explainer\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "d1183732-2511-432b-bf86-65a45fef3914", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": "\nTabular Income Classifier Production Deployment\u00b6\nTo run this notebook you need the inference data. This can be acquired in two ways:\n\nRun make train or,\ngsutil cp -R gs://seldon-models/scv2/examples/income/infer-data .\n\nimport numpy as np\nimport json\nimport requests\n\n\nwith open('./infer-data/test.npy', 'rb') as f:\n    x_ref = np.load(f)\n    x_h1 = np.load(f)\n    y_ref = np.load(f)\n    x_outlier = np.load(f)\n\n\nreqJson = json.loads('{\"inputs\":[{\"name\":\"input_1\",\"data\":[],\"datatype\":\"FP32\",\"shape\":[]}]}')\nurl = \"http://0.0.0.0:9000/v2/models/model/infer\"\n\n\ndef infer(resourceName: str, batchSz: int, requestType: str):\n    if requestType == \"outlier\":\n        rows = x_outlier[0:0+batchSz]\n    elif requestType == \"drift\":\n        rows = x_h1[0:0+batchSz]\n    else:\n        rows = x_ref[0:0+batchSz]\n    reqJson[\"inputs\"][0][\"data\"] = rows.flatten().tolist()\n    reqJson[\"inputs\"][0][\"shape\"] = [batchSz, rows.shape[1]]\n    headers = {\"Content-Type\": \"application/json\", \"seldon-model\":resourceName}\n    response_raw = requests.post(url, json=reqJson, headers=headers)\n    print(response_raw)\n    print(response_raw.json())\n\n\n\nPipeline with model, drift detector and outlier detector\u00b6\ncat ../../models/income-preprocess.yaml\necho \"---\"\ncat ../../models/income.yaml\necho \"---\"\ncat ../../models/income-drift.yaml\necho \"---\"\ncat ../../models/income-outlier.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-preprocess\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/preprocessor\"\n  requirements:\n  - sklearn\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/classifier\"\n  requirements:\n  - sklearn\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/income-preprocess.yaml\nseldon model load -f ../../models/income.yaml\nseldon model load -f ../../models/income-drift.yaml\nseldon model load -f ../../models/income-outlier.yaml\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model status income-preprocess -w ModelAvailable", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "69d7987e-b3fa-44ec-bb24-8f909aa90545", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": " - sklearn\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/income-preprocess.yaml\nseldon model load -f ../../models/income.yaml\nseldon model load -f ../../models/income-drift.yaml\nseldon model load -f ../../models/income-outlier.yaml\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model status income-preprocess -w ModelAvailable | jq .\nseldon model status income -w ModelAvailable | jq .\nseldon model status income-drift -w ModelAvailable | jq .\nseldon model status income-outlier -w ModelAvailable | jq .\n\n\n{}\n{}\n{}\n{}\n\n\ncat ../../pipelines/income.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: income-production\nspec:\n  steps:\n    - name: income\n    - name: income-preprocess\n    - name: income-outlier\n      inputs:\n      - income-preprocess\n    - name: income-drift\n      batch:\n        size: 20\n  output:\n    steps:\n    - income\n    - income-outlier.outputs.is_outlier\n\n\nseldon pipeline load -f ../../pipelines/income.yaml\n\n\nseldon pipeline status income-production -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"income-production\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"income-production\",\n        \"uid\": \"cifej8iufmbc73e5int0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"income\"\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "86a7f62a-a09f-43d6-8281-283b042d2737", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": "   \"pipeline\": {\n        \"name\": \"income-production\",\n        \"uid\": \"cifej8iufmbc73e5int0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"income\"\n          },\n          {\n            \"name\": \"income-drift\",\n            \"batch\": {\n              \"size\": 20\n            }\n          },\n          {\n            \"name\": \"income-outlier\",\n            \"inputs\": [\n              \"income-preprocess.outputs\"\n            ]\n          },\n          {\n            \"name\": \"income-preprocess\"\n          }\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "e7b2ae13-b18c-49a0-9193-c00e6c20705e", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": "    \"income-preprocess.outputs\"\n            ]\n          },\n          {\n            \"name\": \"income-preprocess\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"income.outputs\",\n            \"income-outlier.outputs.is_outlier\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:41:38.343754921Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nShow predictions from reference set. Should not be drift or outliers.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"normal\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "73593d05-351b-4503-9b15-0f988b0490f5", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": "    \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nShow predictions from reference set. Should not be drift or outliers.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"normal\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifej9gfh5ss738i5br0\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"0\"]}}\n\n\n\nShow predictions from drift data. Should be drift and probably not outliers.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"drift\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifejaofh5ss738i5brg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\nShow predictions from outlier data. Should be outliers and probably not drift.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"outlier\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs':", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "92cc3256-8187-4c6d-a0b4-fb2f9ee45dfa", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifejaofh5ss738i5brg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\nShow predictions from outlier data. Should be outliers and probably not drift.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"outlier\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifejb8fh5ss738i5bs0\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"0\"]}}\n\n\n\n\n\nExplanations\u00b6\ncat ../../models/income-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/explainer\"\n  explainer:\n    type: anchor_tabular\n    modelRef: income\n\n\nseldon model load -f ../../models/income-explainer.yaml\n\n\n{}\n\n\nseldon model status income-explainer -w ModelAvailable | jq .\n\n\n{}\n\n\nbatchSz=1\nprint(y_ref[0:batchSz])\ninfer(\"income-explainer\",batchSz,\"normal\")\n\n\n[0]\n<Response [200]>\n{'model_name': 'income-explainer_1', 'model_version': '1', 'id': 'cdd68ba5-c569-4930-886f-fbdc26e24866', 'parameters': {}, 'outputs': [{'name': 'explanation', 'shape': [1, 1], 'datatype': 'BYTES', 'parameters': {'content_type': 'str'}, 'data': ['{\"meta\": {\"name\": \"AnchorTabular\", \"type\": [\"blackbox\"], \"explanations\": [\"local\"], \"params\": {\"seed\": 1, \"disc_perc\": [25, 50, 75], \"threshold\": 0.95, \"delta\": 0.1, \"tau\": 0.15, \"batch_size\": 100, \"coverage_samples\": 10000, \"beam_size\": 1, \"stop_on_first\": false, \"max_anchor_size\": null, \"min_samples_start\": 100, \"n_covered_ex\": 10, \"binary_cache_size\": 10000, \"cache_margin\": 1000, \"verbose\": false, \"verbose_every\": 1, \"kwargs\": {}}, \"version\": \"0.9.1\"}, \"data\": {\"anchor\": [\"Marital Status = Never-Married\", \"Relationship = Own-child\", \"Capital Gain <= 0.00\"], \"precision\": 0.9942028985507246, \"coverage\": 0.0657, \"raw\": {\"feature\": [3, 5, 8], \"mean\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "dd8adb74-3cc4-4e9b-bd71-ebebd7f86079", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": "\"explanations\": [\"local\"], \"params\": {\"seed\": 1, \"disc_perc\": [25, 50, 75], \"threshold\": 0.95, \"delta\": 0.1, \"tau\": 0.15, \"batch_size\": 100, \"coverage_samples\": 10000, \"beam_size\": 1, \"stop_on_first\": false, \"max_anchor_size\": null, \"min_samples_start\": 100, \"n_covered_ex\": 10, \"binary_cache_size\": 10000, \"cache_margin\": 1000, \"verbose\": false, \"verbose_every\": 1, \"kwargs\": {}}, \"version\": \"0.9.1\"}, \"data\": {\"anchor\": [\"Marital Status = Never-Married\", \"Relationship = Own-child\", \"Capital Gain <= 0.00\"], \"precision\": 0.9942028985507246, \"coverage\": 0.0657, \"raw\": {\"feature\": [3, 5, 8], \"mean\": [0.7914951989026063, 0.9400749063670412, 0.9942028985507246], \"precision\": [0.7914951989026063, 0.9400749063670412, 0.9942028985507246], \"coverage\": [0.3043, 0.069, 0.0657], \"examples\": [{\"covered_true\": [[30, 0, 1, 1, 0, 1, 1, 0, 0, 0, 50, 2], [49, 4, 2, 1, 6, 0, 4, 1, 0, 0, 60, 9], [39, 2, 5, 1, 5, 0, 4, 1, 0, 0, 40, 9], [33, 4, 2, 1, 5, 0, 4, 1, 0, 0, 40, 9], [63, 4, 1, 1, 8, 1, 4, 0, 0, 0, 40, 9], [23, 4, 1, 1, 7, 1, 4, 1, 0, 0, 66, 8], [45, 4, 1, 1, 8, 0, 1, 1, 0, 0, 40, 1], [54, 4, 1, 1, 8, 4, 4, 1, 0, 0, 45, 9], [32, 6, 1, 1, 8, 4, 2, 0, 0, 0, 30, 9], [40, 5, 1, 1, 2, 0, 4, 1, 0, 0, 40, 9]], \"covered_false\": [[57, 4, 5, 1, 5, 0, 4, 1, 0, 1977, 45, 9], [53, 0, 5, 1, 0, 1, 4, 0, 8614, 0, 35, 9], [37, 4, 1, 1, 5, 0, 4, 1, 0, 0, 45, 9], [53, 4, 5, 1, 8, 0, 4, 1, 0, 1977, 55, 9], [35, 4, 1, 1, 8, 0, 4, 1, 7688, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "c621b467-6fee-4502-b76d-d920a15df36f", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": "1, 0, 0, 40, 9]], \"covered_false\": [[57, 4, 5, 1, 5, 0, 4, 1, 0, 1977, 45, 9], [53, 0, 5, 1, 0, 1, 4, 0, 8614, 0, 35, 9], [37, 4, 1, 1, 5, 0, 4, 1, 0, 0, 45, 9], [53, 4, 5, 1, 8, 0, 4, 1, 0, 1977, 55, 9], [35, 4, 1, 1, 8, 0, 4, 1, 7688, 0, 50, 9], [32, 4, 1, 1, 5, 1, 4, 1, 0, 0, 40, 9], [42, 4, 1, 1, 5, 0, 4, 1, 99999, 0, 40, 9], [32, 4, 1, 1, 8, 0, 4, 1, 15024, 0, 50, 9], [53, 7, 5, 1, 8, 0, 4, 1, 0, 0, 42, 9], [52, 1, 1, 1, 8, 0, 4, 1, 0, 0, 45, 9]], \"uncovered_true\": [], \"uncovered_false\": []}, {\"covered_true\": [[52, 7, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [27, 4, 1, 1, 8, 3, 4, 1, 0, 0, 40, 9], [28, 4, 1, 1, 6, 3, 4, 1, 0, 0, 60, 9], [46, 6, 5, 1, 2, 3, 4, 1, 0, 0, 50, 9], [53, 2, 5, 1, 5, 3, 2, 0, 0, 1669, 35, 9], [27, 4, 5, 1, 8, 3, 4, 0, 0, 0, 40, 9], [25, 4, 1, 1, 8, 3, 4, 0, 0, 0, 40, 9], [29, 6, 5, 1, 2, 3, 4, 1, 0, 0, 30, 9], [64, 0, 1, 1, 0, 3, 4, 1, 0, 0, 50, 9], [63, 0, 5, 1, 0, 3, 4, 1, 0, 0, 30, 9]], \"covered_false\": [[50, 5, 1, 1,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "2f8c7c8b-8d79-4dd9-92d2-970de9256349", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": "4, 5, 1, 8, 3, 4, 0, 0, 0, 40, 9], [25, 4, 1, 1, 8, 3, 4, 0, 0, 0, 40, 9], [29, 6, 5, 1, 2, 3, 4, 1, 0, 0, 30, 9], [64, 0, 1, 1, 0, 3, 4, 1, 0, 0, 50, 9], [63, 0, 5, 1, 0, 3, 4, 1, 0, 0, 30, 9]], \"covered_false\": [[50, 5, 1, 1, 8, 3, 4, 1, 15024, 0, 60, 9], [45, 6, 1, 1, 6, 3, 4, 1, 14084, 0, 45, 9], [37, 4, 1, 1, 8, 3, 4, 1, 15024, 0, 40, 9], [33, 4, 1, 1, 8, 3, 4, 1, 15024, 0, 60, 9], [41, 6, 5, 1, 8, 3, 4, 1, 7298, 0, 70, 9], [42, 6, 1, 1, 2, 3, 4, 1, 15024, 0, 60, 9]], \"uncovered_true\": [], \"uncovered_false\": []}, {\"covered_true\": [[41, 4, 1, 1, 1, 3, 4, 1, 0, 0, 40, 9], [55, 2, 5, 1, 8, 3, 4, 1, 0, 0, 50, 9], [35, 4, 5, 1, 5, 3, 4, 0, 0, 0, 32, 9], [31, 4, 1, 1, 2, 3, 4, 1, 0, 0, 40, 9], [47, 4, 1, 1, 1, 3, 4, 1, 0, 0, 40, 9], [33, 4, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [58, 0, 1, 1, 0, 3, 4, 0, 0, 0, 50, 9], [44, 6, 1, 1, 2, 3, 4, 1, 0, 0, 90, 9], [30, 4, 1, 1, 6, 3, 4, 1, 0, 0, 40, 9], [25, 4, 1, 1, 5, 3, 4, 1, 0, 0, 40,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "c043ba21-123e-405d-8813-370dd6203451", "page": "examples/income", "section": "tabular-income-classifier-production-deployment", "text": "1, 0, 0, 40, 9], [33, 4, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [58, 0, 1, 1, 0, 3, 4, 0, 0, 0, 50, 9], [44, 6, 1, 1, 2, 3, 4, 1, 0, 0, 90, 9], [30, 4, 1, 1, 6, 3, 4, 1, 0, 0, 40, 9], [25, 4, 1, 1, 5, 3, 4, 1, 0, 0, 40, 9]], \"covered_false\": [], \"uncovered_true\": [], \"uncovered_false\": []}], \"all_precision\": 0, \"num_preds\": 1000000, \"success\": true, \"names\": [\"Marital Status = Never-Married\", \"Relationship = Own-child\", \"Capital Gain <= 0.00\"], \"prediction\": [0], \"instance\": [47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0], \"instances\": [[47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0]]}}}']}]}\n\n\n\n\n\nCleanup\u00b6\nseldon pipeline unload income-production\nseldon model unload income-preprocess\nseldon model unload income\nseldon model unload income-drift\nseldon model unload income-outlier\nseldon model unload income-explainer\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "39775764-ca7b-41f0-8ac9-262191608dc3", "page": "examples/income", "section": "pipeline-with-model-drift-detector-and-outlier-detector", "text": "\nPipeline with model, drift detector and outlier detector\u00b6\ncat ../../models/income-preprocess.yaml\necho \"---\"\ncat ../../models/income.yaml\necho \"---\"\ncat ../../models/income-drift.yaml\necho \"---\"\ncat ../../models/income-outlier.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-preprocess\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/preprocessor\"\n  requirements:\n  - sklearn\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/classifier\"\n  requirements:\n  - sklearn\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-drift\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/drift-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\nseldon model load -f ../../models/income-preprocess.yaml\nseldon model load -f ../../models/income.yaml\nseldon model load -f ../../models/income-drift.yaml\nseldon model load -f ../../models/income-outlier.yaml\n\n\n{}\n{}\n{}\n{}\n\n\nseldon model status income-preprocess -w ModelAvailable | jq .\nseldon model status income -w ModelAvailable | jq .\nseldon model status income-drift -w ModelAvailable | jq .\nseldon model status income-outlier -w ModelAvailable | jq .\n\n\n{}\n{}\n{}\n{}\n\n\ncat ../../pipelines/income.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: income-production\nspec:\n  steps:\n    - name: income\n    - name: income-preprocess\n    - name: income-outlier\n      inputs:\n      - income-preprocess\n    - name: income-drift\n      batch:\n        size: 20\n  output:\n    steps:\n    - income\n    - income-outlier.outputs.is_outlier\n\n\nseldon pipeline load -f ../../pipelines/income.yaml\n\n\nseldon pipeline status income-production -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"income-production\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"income-production\",\n        \"uid\": \"cifej8iufmbc73e5int0\",\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "0ed3ea5c-ff63-4c6c-8221-bd8495d5cd99", "page": "examples/income", "section": "pipeline-with-model-drift-detector-and-outlier-detector", "text": "  steps:\n    - income\n    - income-outlier.outputs.is_outlier\n\n\nseldon pipeline load -f ../../pipelines/income.yaml\n\n\nseldon pipeline status income-production -w PipelineReady | jq -M .\n\n\n{\n  \"pipelineName\": \"income-production\",\n  \"versions\": [\n    {\n      \"pipeline\": {\n        \"name\": \"income-production\",\n        \"uid\": \"cifej8iufmbc73e5int0\",\n        \"version\": 1,\n        \"steps\": [\n          {\n            \"name\": \"income\"\n          },\n          {\n            \"name\": \"income-drift\",\n            \"batch\": {\n              \"size\": 20\n            }\n          },\n          {\n            \"name\": \"income-outlier\",\n            \"inputs\": [\n              \"income-preprocess.outputs\"\n            ]\n         ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "a41dbc11-8bf5-4c7f-9431-3609790003f5", "page": "examples/income", "section": "pipeline-with-model-drift-detector-and-outlier-detector", "text": "  {\n            \"name\": \"income-outlier\",\n            \"inputs\": [\n              \"income-preprocess.outputs\"\n            ]\n          },\n          {\n            \"name\": \"income-preprocess\"\n          }\n        ],\n        \"output\": {\n          \"steps\": [\n            \"income.outputs\",\n            \"income-outlier.outputs.is_outlier\"\n          ]\n        },\n        \"kubernetesMeta\": {}\n      },\n      \"state\": {\n        \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:41:38.343754921Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nShow predictions from reference set. Should not be drift", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "6844362f-9c06-47d4-8a3f-47d5fca93f06", "page": "examples/income", "section": "pipeline-with-model-drift-detector-and-outlier-detector", "text": "     \"pipelineVersion\": 1,\n        \"status\": \"PipelineReady\",\n        \"reason\": \"created pipeline\",\n        \"lastChangeTimestamp\": \"2023-06-30T14:41:38.343754921Z\",\n        \"modelsReady\": true\n      }\n    }\n  ]\n}\n\n\nShow predictions from reference set. Should not be drift or outliers.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"normal\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifej9gfh5ss738i5br0\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"0\"]}}\n\n\n\nShow predictions from drift data. Should be drift and probably not outliers.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"drift\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifejaofh5ss738i5brg\t{\"name\":\"is_drift\",", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "8b97758d-c7f3-4bdd-bfba-5c781dbd0074", "page": "examples/income", "section": "pipeline-with-model-drift-detector-and-outlier-detector", "text": "[0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifejaofh5ss738i5brg\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"1\"]}}\n\n\n\nShow predictions from outlier data. Should be outliers and probably not drift.\nbatchSz=20\nprint(y_ref[0:batchSz])\ninfer(\"income-production.pipeline\",batchSz,\"outlier\")\n\n\n[0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1]\n<Response [200]>\n{'model_name': '', 'outputs': [{'data': [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1], 'name': 'predict', 'shape': [20, 1], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}, {'data': [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], 'name': 'is_outlier', 'shape': [1, 20], 'datatype': 'INT64', 'parameters': {'content_type': 'np'}}]}\n\n\n\nseldon pipeline inspect income-production.income-drift.outputs.is_drift\n\n\nseldon.default.model.income-drift.outputs\tcifejb8fh5ss738i5bs0\t{\"name\":\"is_drift\", \"datatype\":\"INT64\", \"shape\":[\"1\", \"1\"], \"parameters\":{\"content_type\":{\"stringParam\":\"np\"}}, \"contents\":{\"int64Contents\":[\"0\"]}}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "7dbf9ac7-40fb-47e0-8448-551dc568bb64", "page": "examples/income", "section": "explanations", "text": "\nExplanations\u00b6\ncat ../../models/income-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/explainer\"\n  explainer:\n    type: anchor_tabular\n    modelRef: income\n\n\nseldon model load -f ../../models/income-explainer.yaml\n\n\n{}\n\n\nseldon model status income-explainer -w ModelAvailable | jq .\n\n\n{}\n\n\nbatchSz=1\nprint(y_ref[0:batchSz])\ninfer(\"income-explainer\",batchSz,\"normal\")\n\n\n[0]\n<Response [200]>\n{'model_name': 'income-explainer_1', 'model_version': '1', 'id': 'cdd68ba5-c569-4930-886f-fbdc26e24866', 'parameters': {}, 'outputs': [{'name': 'explanation', 'shape': [1, 1], 'datatype': 'BYTES', 'parameters': {'content_type': 'str'}, 'data': ['{\"meta\": {\"name\": \"AnchorTabular\", \"type\": [\"blackbox\"], \"explanations\": [\"local\"], \"params\": {\"seed\": 1, \"disc_perc\": [25, 50, 75], \"threshold\": 0.95, \"delta\": 0.1, \"tau\": 0.15, \"batch_size\": 100, \"coverage_samples\": 10000, \"beam_size\": 1, \"stop_on_first\": false, \"max_anchor_size\": null, \"min_samples_start\": 100, \"n_covered_ex\": 10, \"binary_cache_size\": 10000, \"cache_margin\": 1000, \"verbose\": false, \"verbose_every\": 1, \"kwargs\": {}}, \"version\": \"0.9.1\"}, \"data\": {\"anchor\": [\"Marital Status = Never-Married\", \"Relationship = Own-child\", \"Capital Gain <= 0.00\"], \"precision\": 0.9942028985507246, \"coverage\": 0.0657, \"raw\": {\"feature\": [3, 5, 8], \"mean\": [0.7914951989026063, 0.9400749063670412, 0.9942028985507246], \"precision\": [0.7914951989026063, 0.9400749063670412, 0.9942028985507246], \"coverage\": [0.3043, 0.069, 0.0657], \"examples\": [{\"covered_true\": [[30, 0, 1, 1, 0, 1, 1, 0, 0, 0, 50, 2], [49, 4, 2, 1, 6, 0, 4, 1, 0, 0, 60, 9], [39, 2, 5, 1, 5, 0, 4, 1, 0, 0, 40, 9], [33, 4, 2, 1, 5, 0, 4, 1, 0, 0, 40, 9], [63, 4, 1, 1, 8, 1, 4, 0, 0, 0, 40, 9], [23, 4, 1, 1, 7, 1, 4, 1, 0, 0, 66, 8], [45, 4, 1, 1, 8, 0, 1, 1, 0, 0, 40, 1], [54, 4, 1, 1, 8, 4, 4, 1, 0, 0, 45, 9], [32, 6, 1, 1, 8, 4, 2, 0, 0, 0, 30, 9], [40, 5, 1, 1, 2, 0, 4, 1, 0, 0, 40, 9]],", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "0d862cc7-be28-4a41-80f6-d2605244c530", "page": "examples/income", "section": "explanations", "text": "0, 0, 40, 9], [23, 4, 1, 1, 7, 1, 4, 1, 0, 0, 66, 8], [45, 4, 1, 1, 8, 0, 1, 1, 0, 0, 40, 1], [54, 4, 1, 1, 8, 4, 4, 1, 0, 0, 45, 9], [32, 6, 1, 1, 8, 4, 2, 0, 0, 0, 30, 9], [40, 5, 1, 1, 2, 0, 4, 1, 0, 0, 40, 9]], \"covered_false\": [[57, 4, 5, 1, 5, 0, 4, 1, 0, 1977, 45, 9], [53, 0, 5, 1, 0, 1, 4, 0, 8614, 0, 35, 9], [37, 4, 1, 1, 5, 0, 4, 1, 0, 0, 45, 9], [53, 4, 5, 1, 8, 0, 4, 1, 0, 1977, 55, 9], [35, 4, 1, 1, 8, 0, 4, 1, 7688, 0, 50, 9], [32, 4, 1, 1, 5, 1, 4, 1, 0, 0, 40, 9], [42, 4, 1, 1, 5, 0, 4, 1, 99999, 0, 40, 9], [32, 4, 1, 1, 8, 0, 4, 1, 15024, 0, 50, 9], [53, 7, 5, 1, 8, 0, 4, 1, 0, 0, 42, 9], [52, 1, 1, 1, 8, 0, 4, 1, 0, 0, 45, 9]], \"uncovered_true\": [], \"uncovered_false\": []}, {\"covered_true\": [[52, 7, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [27, 4, 1, 1, 8, 3, 4, 1, 0, 0, 40, 9], [28, 4, 1, 1, 6, 3, 4, 1, 0, 0, 60, 9], [46, 6, 5, 1, 2, 3, 4, 1, 0, 0, 50, 9], [53, 2, 5, 1, 5, 3, 2, 0, 0, 1669, 35, 9], [27, 4, 5, 1, 8, 3,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "c48bf94c-32cd-4f9d-b568-2f3635afb930", "page": "examples/income", "section": "explanations", "text": "5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [27, 4, 1, 1, 8, 3, 4, 1, 0, 0, 40, 9], [28, 4, 1, 1, 6, 3, 4, 1, 0, 0, 60, 9], [46, 6, 5, 1, 2, 3, 4, 1, 0, 0, 50, 9], [53, 2, 5, 1, 5, 3, 2, 0, 0, 1669, 35, 9], [27, 4, 5, 1, 8, 3, 4, 0, 0, 0, 40, 9], [25, 4, 1, 1, 8, 3, 4, 0, 0, 0, 40, 9], [29, 6, 5, 1, 2, 3, 4, 1, 0, 0, 30, 9], [64, 0, 1, 1, 0, 3, 4, 1, 0, 0, 50, 9], [63, 0, 5, 1, 0, 3, 4, 1, 0, 0, 30, 9]], \"covered_false\": [[50, 5, 1, 1, 8, 3, 4, 1, 15024, 0, 60, 9], [45, 6, 1, 1, 6, 3, 4, 1, 14084, 0, 45, 9], [37, 4, 1, 1, 8, 3, 4, 1, 15024, 0, 40, 9], [33, 4, 1, 1, 8, 3, 4, 1, 15024, 0, 60, 9], [41, 6, 5, 1, 8, 3, 4, 1, 7298, 0, 70, 9], [42, 6, 1, 1, 2, 3, 4, 1, 15024, 0, 60, 9]], \"uncovered_true\": [], \"uncovered_false\": []}, {\"covered_true\": [[41, 4, 1, 1, 1, 3, 4, 1, 0, 0, 40, 9], [55, 2, 5, 1, 8, 3, 4, 1, 0, 0, 50, 9], [35, 4, 5, 1, 5, 3, 4, 0, 0, 0, 32, 9], [31, 4, 1, 1, 2, 3, 4, 1, 0, 0, 40, 9], [47, 4, 1, 1, 1, 3, 4, 1, 0, 0, 40, 9],", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "27c13a3c-bc87-46af-8ae8-ce912357f0a3", "page": "examples/income", "section": "explanations", "text": "[], \"uncovered_false\": []}, {\"covered_true\": [[41, 4, 1, 1, 1, 3, 4, 1, 0, 0, 40, 9], [55, 2, 5, 1, 8, 3, 4, 1, 0, 0, 50, 9], [35, 4, 5, 1, 5, 3, 4, 0, 0, 0, 32, 9], [31, 4, 1, 1, 2, 3, 4, 1, 0, 0, 40, 9], [47, 4, 1, 1, 1, 3, 4, 1, 0, 0, 40, 9], [33, 4, 5, 1, 5, 3, 4, 1, 0, 0, 40, 9], [58, 0, 1, 1, 0, 3, 4, 0, 0, 0, 50, 9], [44, 6, 1, 1, 2, 3, 4, 1, 0, 0, 90, 9], [30, 4, 1, 1, 6, 3, 4, 1, 0, 0, 40, 9], [25, 4, 1, 1, 5, 3, 4, 1, 0, 0, 40, 9]], \"covered_false\": [], \"uncovered_true\": [], \"uncovered_false\": []}], \"all_precision\": 0, \"num_preds\": 1000000, \"success\": true, \"names\": [\"Marital Status = Never-Married\", \"Relationship = Own-child\", \"Capital Gain <= 0.00\"], \"prediction\": [0], \"instance\": [47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0], \"instances\": [[47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0]]}}}']}]}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/income.html", "key": "examples/income"}}, {"key": "177d0102-4870-46fd-b108-84b0873e71ed", "page": "kubernetes/service-meshes", "section": "service-meshes", "text": "\nService Meshes\u00b6\nThe Seldon models and pipelines are exposed via a single service endpoint in the install namespace called seldon-mesh. All models, pipelines and experiments can be reached via this single Service endpoint by setting appropriate headers on the inference REST/gRPC request. By this means Seldon is agnostic to any service mesh you may wish to use in your organisation. We provide some example integrations for some example service meshes below (alphabetical order):\n\nAmbassador\nIstio\nTraefik\n\nWe welcome help to extend these to other service meshes.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/service-meshes/index.html", "key": "kubernetes/service-meshes"}}, {"key": "a4821447-cb19-4c77-a079-bb66e9d2abc4", "page": "tutorials", "section": "workflow-and-tutorials", "text": "\nWorkflow and Tutorials\u00b6\n\nWorkflow\u00b6\nSeldon inference is built from atomic Model components. Models as shown here cover a wide range of artifacts including:\n\nCore machine learning models, e.g. a Tensorflow model.\nFeature transformations that might be built with custom python code.\nDrift detectors.\nOutlier detectors.\nExplainers\nAdversarial detectors.\n\nA typical workflow for a production machine learning setup might be as follows:\n\nYou create a Tensorflow model for your core application use case and test this model in isolation to validate.\nYou create SKLearn feature transformation component before your model to convert the input into the correct form for your model. You also create Drift and Outlier detectors using Seldon\u2019s open source Alibi-detect library and test these in isolation.\nYou join these components together into a Pipeline for the final production setup.\n\nThese steps are shown in the diagram below:\n\n\n\nWorked Examples\u00b6\nSee our selection of examples.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/tutorials/index.html", "key": "tutorials"}}, {"key": "c55e1458-a713-48a7-b860-7b2e9c96501b", "page": "tutorials", "section": "workflow", "text": "\nWorkflow\u00b6\nSeldon inference is built from atomic Model components. Models as shown here cover a wide range of artifacts including:\n\nCore machine learning models, e.g. a Tensorflow model.\nFeature transformations that might be built with custom python code.\nDrift detectors.\nOutlier detectors.\nExplainers\nAdversarial detectors.\n\nA typical workflow for a production machine learning setup might be as follows:\n\nYou create a Tensorflow model for your core application use case and test this model in isolation to validate.\nYou create SKLearn feature transformation component before your model to convert the input into the correct form for your model. You also create Drift and Outlier detectors using Seldon\u2019s open source Alibi-detect library and test these in isolation.\nYou join these components together into a Pipeline for the final production setup.\n\nThese steps are shown in the diagram below:\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/tutorials/index.html", "key": "tutorials"}}, {"key": "e53bfa24-a810-4926-92da-2308c3abcb06", "page": "kubernetes/resources/serverconfig", "section": "server-config", "text": "\nServer Config\u00b6\n\nNote\nThis section is for advanced usage where you want to define new types of inference servers.\n\nServer configurations define how to create an inference server. By default one is provided for Seldon MLServer and one for NVIDIA Triton Inference Server. Both these servers support the V2 inference protocol which is a requirement for all inference servers. They define how the Kubernetes ReplicaSet is defined which includes the Seldon Agent reverse proxy as well as an Rclone server for downloading artifacts for the server. The Kustomize ServerConfig for MlServer is shown below:\n---\napiVersion: mlops.seldon.io/v1alpha1\nkind: ServerConfig\nmetadata:\n  name: mlserver\nspec:\n  podSpec:\n    terminationGracePeriodSeconds: 120\n    serviceAccountName: seldon-server\n    containers:\n    - image: rclone:latest\n      imagePullPolicy: IfNotPresent\n      name: rclone\n      ports:\n      - containerPort: 5572\n        name: rclone\n        protocol: TCP\n      lifecycle:\n        preStop:\n          httpGet:\n            port: 9007\n            path: terminate\n      resources:\n        requests:\n          cpu: \"200m\"\n          memory: '100M'\n      readinessProbe:\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/serverconfig/index.html", "key": "kubernetes/resources/serverconfig"}}, {"key": "f53eb661-bf26-4a29-87d2-1e0f841aac46", "page": "kubernetes/resources/serverconfig", "section": "server-config", "text": "       port: 9007\n            path: terminate\n      resources:\n        requests:\n          cpu: \"200m\"\n          memory: '100M'\n      readinessProbe:\n        failureThreshold: 3\n        initialDelaySeconds: 5\n        periodSeconds: 5\n        successThreshold: 1\n        tcpSocket:\n          port: 5572\n        timeoutSeconds: 1\n      volumeMounts:\n      - mountPath: /mnt/agent\n        name: mlserver-models\n    - image: agent:latest\n      imagePullPolicy: IfNotPresent\n      command:\n        - /bin/agent\n      args:\n        - --tracing-config-path=/mnt/tracing/tracing.json\n      name: agent\n      env:\n      - name: SELDON_SERVER_CAPABILITIES\n        value: \"mlserver,alibi-detect,alibi-explain,huggingface,lightgbm,mlflow,python,sklearn,spark-mlib,xgboost\"\n      - name: SELDON_OVERCOMMIT_PERCENTAGE\n        value: \"10\"\n      - name: SELDON_MODEL_INFERENCE_LAG_THRESHOLD\n       ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/serverconfig/index.html", "key": "kubernetes/resources/serverconfig"}}, {"key": "246ff01d-e140-4664-b12d-201480d7ce9b", "page": "kubernetes/resources/serverconfig", "section": "server-config", "text": "- --tracing-config-path=/mnt/tracing/tracing.json\n      name: agent\n      env:\n      - name: SELDON_SERVER_CAPABILITIES\n        value: \"mlserver,alibi-detect,alibi-explain,huggingface,lightgbm,mlflow,python,sklearn,spark-mlib,xgboost\"\n      - name: SELDON_OVERCOMMIT_PERCENTAGE\n        value: \"10\"\n      - name: SELDON_MODEL_INFERENCE_LAG_THRESHOLD\n        value: \"30\"\n      - name: SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD\n        value: \"600\"\n      - name: SELDON_SCALING_STATS_PERIOD_SECONDS\n        value: \"20\"\n      - name: SELDON_SERVER_HTTP_PORT\n        value: \"9000\"\n      - name: SELDON_SERVER_GRPC_PORT\n        value: \"9500\"\n      - name: SELDON_REVERSE_PROXY_HTTP_PORT\n        value: \"9001\"\n      - name: SELDON_REVERSE_PROXY_GRPC_PORT\n        value: \"9501\"\n      - name: SELDON_SCHEDULER_HOST\n        value: \"seldon-scheduler\"\n      - name: SELDON_SCHEDULER_PORT\n        value: \"9005\"\n      - name: SELDON_SCHEDULER_TLS_PORT\n        value: \"9055\"\n      - name: SELDON_METRICS_PORT\n        value: \"9006\"\n      - name: SELDON_DRAINER_PORT\n        value: \"9007\"\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/serverconfig/index.html", "key": "kubernetes/resources/serverconfig"}}, {"key": "61916220-7c23-44a9-ba55-edfe5113ef03", "page": "kubernetes/resources/serverconfig", "section": "server-config", "text": "SELDON_SCHEDULER_PORT\n        value: \"9005\"\n      - name: SELDON_SCHEDULER_TLS_PORT\n        value: \"9055\"\n      - name: SELDON_METRICS_PORT\n        value: \"9006\"\n      - name: SELDON_DRAINER_PORT\n        value: \"9007\"\n      - name: AGENT_TLS_SECRET_NAME\n        value: \"\"\n      - name: AGENT_TLS_FOLDER_PATH\n        value: \"\"\n      - name: SELDON_SERVER_TYPE\n        value: \"mlserver\"\n      - name: SELDON_ENVOY_HOST\n        value: \"seldon-mesh\"\n      - name: SELDON_ENVOY_PORT\n        value: \"80\"\n      - name: POD_NAME\n        valueFrom:\n          fieldRef:\n            fieldPath: metadata.name\n      - name: POD_NAMESPACE\n        valueFrom:\n          fieldRef:\n            fieldPath: metadata.namespace\n      - name: MEMORY_REQUEST\n        valueFrom:\n          resourceFieldRef:\n      ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/serverconfig/index.html", "key": "kubernetes/resources/serverconfig"}}, {"key": "bf7385b2-adbe-4691-ac7b-f8502bd9c36f", "page": "kubernetes/resources/serverconfig", "section": "server-config", "text": "POD_NAMESPACE\n        valueFrom:\n          fieldRef:\n            fieldPath: metadata.namespace\n      - name: MEMORY_REQUEST\n        valueFrom:\n          resourceFieldRef:\n            containerName: mlserver\n            resource: requests.memory\n      ports:\n      - containerPort: 9501\n        name: grpc\n        protocol: TCP\n      - containerPort: 9001\n        name: http\n        protocol: TCP\n      - containerPort: 9006\n        name: metrics\n        protocol: TCP\n      lifecycle:\n        preStop:\n          httpGet:\n            port: 9007\n            path: terminate\n      resources:\n        requests:\n          cpu: \"500m\"\n          memory: '500M'\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/serverconfig/index.html", "key": "kubernetes/resources/serverconfig"}}, {"key": "d2ed03ef-5a92-4220-90d8-fbf14b554189", "page": "kubernetes/resources/serverconfig", "section": "server-config", "text": "           port: 9007\n            path: terminate\n      resources:\n        requests:\n          cpu: \"500m\"\n          memory: '500M'\n      volumeMounts:\n      - mountPath: /mnt/agent\n        name: mlserver-models\n      - name: config-volume\n        mountPath: /mnt/config\n      - name: tracing-config-volume\n        mountPath: /mnt/tracing\n    - image: mlserver:latest\n      imagePullPolicy: IfNotPresent\n      env:\n      - name: MLSERVER_HTTP_PORT\n        value: \"9000\"\n      - name: MLSERVER_GRPC_PORT\n        value: \"9500\"\n      - name: MLSERVER_MODELS_DIR\n        value: \"/mnt/agent/models\"\n      - name: MLSERVER_MODEL_PARALLEL_WORKERS\n        value: \"1\"\n      - name: MLSERVER_LOAD_MODELS_AT_STARTUP\n        value: \"false\"\n      - name: MLSERVER_GRPC_MAX_MESSAGE_LENGTH\n        value: \"1048576000\" # 100MB (100 * 1024 * 1024)\n      resources:\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/serverconfig/index.html", "key": "kubernetes/resources/serverconfig"}}, {"key": "35cea18e-3ec6-40c5-ae82-50aeeccade70", "page": "kubernetes/resources/serverconfig", "section": "server-config", "text": "  - name: MLSERVER_MODEL_PARALLEL_WORKERS\n        value: \"1\"\n      - name: MLSERVER_LOAD_MODELS_AT_STARTUP\n        value: \"false\"\n      - name: MLSERVER_GRPC_MAX_MESSAGE_LENGTH\n        value: \"1048576000\" # 100MB (100 * 1024 * 1024)\n      resources:\n        requests:\n          cpu: 1\n          memory: '1G'\n      lifecycle:\n        preStop:\n          httpGet:\n            port: 9007\n            path: terminate\n      livenessProbe:\n        httpGet:\n          path: /v2/health/live\n          port: server-http\n      readinessProbe:\n        httpGet:\n          path: /v2/health/live\n          port: server-http\n        initialDelaySeconds: 5\n        periodSeconds: 5\n      startupProbe:\n        httpGet:\n          path: /v2/health/live\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/serverconfig/index.html", "key": "kubernetes/resources/serverconfig"}}, {"key": "20df4507-da13-4238-915a-efc5f28704ea", "page": "kubernetes/resources/serverconfig", "section": "server-config", "text": "        path: /v2/health/live\n          port: server-http\n        initialDelaySeconds: 5\n        periodSeconds: 5\n      startupProbe:\n        httpGet:\n          path: /v2/health/live\n          port: server-http\n        failureThreshold: 10\n        periodSeconds: 10\n      name: mlserver\n      ports:\n      - containerPort: 9500\n        name: server-grpc\n        protocol: TCP\n      - containerPort: 9000\n        name: server-http\n        protocol: TCP\n      - containerPort: 8082\n        name: server-metrics\n      volumeMounts:\n      - mountPath: /mnt/agent\n        name: mlserver-models\n        readOnly: true\n      - mountPath: /mnt/certs\n        name: downstream-ca-certs\n        readOnly: true\n    securityContext:\n      fsGroup: 2000\n      runAsUser: 1000\n     ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/serverconfig/index.html", "key": "kubernetes/resources/serverconfig"}}, {"key": "5c112aa8-7957-4a37-91cc-22621267d735", "page": "kubernetes/resources/serverconfig", "section": "server-config", "text": "    name: mlserver-models\n        readOnly: true\n      - mountPath: /mnt/certs\n        name: downstream-ca-certs\n        readOnly: true\n    securityContext:\n      fsGroup: 2000\n      runAsUser: 1000\n      runAsNonRoot: true\n    volumes:\n    - name: config-volume\n      configMap:\n        name: seldon-agent\n    - name: tracing-config-volume\n      configMap:\n        name: seldon-tracing\n    - name: downstream-ca-certs\n      secret:\n        secretName: seldon-downstream-server\n        optional: true\n  volumeClaimTemplates:\n  - name: mlserver-models\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 1Gi\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/serverconfig/index.html", "key": "kubernetes/resources/serverconfig"}}, {"key": "9a42f3b7-57dc-4ebd-8742-d4cfd4676a87", "page": "outlier", "section": "outlier-detection", "text": "\nOutlier Detection\u00b6\nOutlier detection models are treated as any other Model. You can run any saved Alibi-Detect outlier detection model by adding the requirement alibi-detect.\nAn example outlier detection model from the CIFAR10 image classification example is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: cifar10-outlier\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/cifar10/outlier-detector\"\n  requirements:\n    - mlserver\n    - alibi-detect\n\n\n\nExamples\u00b6\n\nCIFAR10 image classification with outlier detector\nTabular income classification model with outlier detector\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/outlier/index.html", "key": "outlier"}}, {"key": "b54780f0-76c2-48af-b37a-3e2dc07892f8", "page": "kubernetes/resources/seldonruntime", "section": "seldon-runtime", "text": "\nSeldon Runtime\u00b6\nThe SeldonRuntime resource is used to create an instance of Seldon installed in a particular namespace.\ntype SeldonRuntimeSpec struct {\n\tSeldonConfig string              `json:\"seldonConfig\"`\n\tOverrides    []*OverrideSpec     `json:\"overrides,omitempty\"`\n\tConfig       SeldonConfiguration `json:\"config,omitempty\"`\n\t// +Optional\n\t// If set then when the referenced SeldonConfig changes we will NOT update the SeldonRuntime immediately.\n\t// Explicit changes to the SeldonRuntime itself will force a reconcile though\n\tDisableAutoUpdate bool `json:\"disableAutoUpdate,omitempty\"`\n}\n\ntype OverrideSpec struct {\n\tName        string         `json:\"name\"`\n\tDisable     bool           `json:\"disable,omitempty\"`\n\tReplicas    *int32         `json:\"replicas,omitempty\"`\n\tServiceType v1.ServiceType `json:\"serviceType,omitempty\"`\n\tPodSpec     *PodSpec       `json:\"podSpec,omitempty\"`\n}\n\n\nFor the definition of SeldonConfiguration above see the SeldonConfig resource.\nThe specification above contains overrides for the chosen SeldonConfig.\nTo override the PodSpec for a given component, the overrides field needs to specify the component name and the PodSpec needs to specify the container name, along with fields to override.\nFor instance, the following overrides the resource limits for cpu and memory in the hodometer component in the seldon-mesh namespace, while using values specified in the seldonConfig elsewhere (e.g. default).\napiVersion: mlops.seldon.io/v1alpha1\nkind: SeldonRuntime\nmetadata:\n  name: seldon\n  namespace: seldon-mesh\nspec:\n  overrides:\n  - name: hodometer\n    podSpec:\n      containers:\n      - name: hodometer\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonruntime/index.html", "key": "kubernetes/resources/seldonruntime"}}, {"key": "c615daad-041c-4079-bcbc-7d59baddf97e", "page": "kubernetes/resources/seldonruntime", "section": "seldon-runtime", "text": "the following overrides the resource limits for cpu and memory in the hodometer component in the seldon-mesh namespace, while using values specified in the seldonConfig elsewhere (e.g. default).\napiVersion: mlops.seldon.io/v1alpha1\nkind: SeldonRuntime\nmetadata:\n  name: seldon\n  namespace: seldon-mesh\nspec:\n  overrides:\n  - name: hodometer\n    podSpec:\n      containers:\n      - name: hodometer\n        resources:\n          limits:\n            memory: 64Mi\n            cpu: 20m\n  seldonConfig: default\n\n\nAs a minimal use you should just define the SeldonConfig to use as a base for this install, for example to install in the seldon-mesh namespace with the SeldonConfig named default:\napiVersion: mlops.seldon.io/v1alpha1\nkind: SeldonRuntime\nmetadata:\n  name: seldon\n  namespace: seldon-mesh  \nspec:\n  seldonConfig: default\n\n\nThe helm chart seldon-core-v2-runtime allows easy creation of this resource and associated default Servers for an installation of Seldon in a particular namespace.\n\nSeldonConfig Update Propagation\u00b6\nWhen a SeldonConfig resource changes any SeldonRuntime resources that reference the changed SeldonConfig will also be updated immediately. If this behaviour is not desired you can set spec.disableAutoUpdate in the SeldonRuntime resource for it not be be updated immediately but only when it changes or any owned resource changes.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/seldonruntime/index.html", "key": "kubernetes/resources/seldonruntime"}}, {"key": "d680d59a-87e6-4c19-8826-5b606fb4854c", "page": "examples/experiment-versions", "section": "experiments-versions", "text": "\nExperiments Versions\u00b6\nRun these examples from the samples folder.\n\nSeldon V2 Experiment Version Tests\u00b6\nThis notebook will show how we can update running experiments.\n\nTest change candidate for a model\u00b6\nWe will use three SKlearn Iris classification models to illustrate experiment updates.\nLoad all models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\nseldon model load -f ./models/sklearn3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\nseldon model status iris3 -w ModelAvailable\n\n\n{}\n{}\n{}\n\n\nLet\u2019s call all three models individually first.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nWe will start an experiment to change the iris endpoint to split traffic with the iris2 model.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nNow when we call the iris model we should see a roughly 50/50 split between the two models.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::48 :iris_1::52]\n\n\n\nNow we update the experiment to change", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "079bd5c1-4047-4849-8f36-01fb0042b4bd", "page": "examples/experiment-versions", "section": "experiments-versions", "text": " \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nNow when we call the iris model we should see a roughly 50/50 split between the two models.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::48 :iris_1::52]\n\n\n\nNow we update the experiment to change to a split with the iris3 model.\ncat ./experiments/ab-default-model2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris3\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model2.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nNow we should see a split with the iris3 model.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::42 :iris_1::58]\n\n\n\nseldon experiment stop experiment-sample\n\n\n{}\n\n\nNow the experiment has been stopped we check everything as before.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nseldon model unload iris\nseldon model unload iris2\nseldon model unload iris3\n\n\n{}\n{}\n{}\n\n\n\n\nTest change default model in an experiment\u00b6\nHere we test changing", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "8dde4b13-c676-4c59-bd02-36ec0444180b", "page": "examples/experiment-versions", "section": "experiments-versions", "text": "2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nseldon model unload iris\nseldon model unload iris2\nseldon model unload iris3\n\n\n{}\n{}\n{}\n\n\n\n\nTest change default model in an experiment\u00b6\nHere we test changing the model we want to split traffic on. We will use three SKlearn Iris classification models to illustrate.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\nseldon model load -f ./models/sklearn3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\nseldon model status iris3 -w ModelAvailable\n\n\n{}\n{}\n{}\n\n\nLet\u2019s call all three models to verify initial conditions.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nNow we start an experiment to change calls to the iris model to split with the iris2 model.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "d201a641-a523-4162-b0e1-96ab573b23a7", "page": "examples/experiment-versions", "section": "experiments-versions", "text": "split with the iris2 model.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::51 :iris_1::49]\n\n\n\nNow let\u2019s change the model we want to experiment to modify to the iris3 model. Splitting between that and iris2.\ncat ./experiments/ab-default-model3.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris3\n  candidates:\n  - name: iris3\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model3.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nLet\u2019s check the iris model is now as before but the iris3 model has traffic split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::25 :iris3_1::25]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\":", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "76c870a1-611e-4650-b5eb-f1c3827257c6", "page": "examples/experiment-versions", "section": "experiments-versions", "text": "but the iris3 model has traffic split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::25 :iris3_1::25]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon experiment stop experiment-sample\n\n\n{}\n\n\nFinally, let\u2019s check now the experiment has stopped as is as at the start.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nseldon model unload iris\nseldon model unload iris2\nseldon model unload iris3\n\n\n{}\n{}\n{}\n\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "adf9662c-4a99-4923-a3de-1a32e948d96b", "page": "examples/experiment-versions", "section": "seldon-v2-experiment-version-tests", "text": "\nSeldon V2 Experiment Version Tests\u00b6\nThis notebook will show how we can update running experiments.\n\nTest change candidate for a model\u00b6\nWe will use three SKlearn Iris classification models to illustrate experiment updates.\nLoad all models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\nseldon model load -f ./models/sklearn3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\nseldon model status iris3 -w ModelAvailable\n\n\n{}\n{}\n{}\n\n\nLet\u2019s call all three models individually first.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nWe will start an experiment to change the iris endpoint to split traffic with the iris2 model.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nNow when we call the iris model we should see a roughly 50/50 split between the two models.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::48 :iris_1::52]\n\n\n\nNow we update the experiment to change to a split with the iris3 model.\ncat", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "efbc347e-f56e-4cdc-896c-0c16119e6694", "page": "examples/experiment-versions", "section": "seldon-v2-experiment-version-tests", "text": "\"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nNow when we call the iris model we should see a roughly 50/50 split between the two models.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::48 :iris_1::52]\n\n\n\nNow we update the experiment to change to a split with the iris3 model.\ncat ./experiments/ab-default-model2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris3\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model2.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nNow we should see a split with the iris3 model.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::42 :iris_1::58]\n\n\n\nseldon experiment stop experiment-sample\n\n\n{}\n\n\nNow the experiment has been stopped we check everything as before.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nseldon model unload iris\nseldon model unload iris2\nseldon model unload iris3\n\n\n{}\n{}\n{}\n\n\n\n\nTest change default model in an experiment\u00b6\nHere we test changing the model we want to split traffic", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "8771ea22-eb7b-4381-be1b-de7144b3997d", "page": "examples/experiment-versions", "section": "seldon-v2-experiment-version-tests", "text": "-i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nseldon model unload iris\nseldon model unload iris2\nseldon model unload iris3\n\n\n{}\n{}\n{}\n\n\n\n\nTest change default model in an experiment\u00b6\nHere we test changing the model we want to split traffic on. We will use three SKlearn Iris classification models to illustrate.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\nseldon model load -f ./models/sklearn3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\nseldon model status iris3 -w ModelAvailable\n\n\n{}\n{}\n{}\n\n\nLet\u2019s call all three models to verify initial conditions.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nNow we start an experiment to change calls to the iris model to split with the iris2 model.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "16af8767-7e69-41ac-b1fa-e195da66a72d", "page": "examples/experiment-versions", "section": "seldon-v2-experiment-version-tests", "text": "Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::51 :iris_1::49]\n\n\n\nNow let\u2019s change the model we want to experiment to modify to the iris3 model. Splitting between that and iris2.\ncat ./experiments/ab-default-model3.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris3\n  candidates:\n  - name: iris3\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model3.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nLet\u2019s check the iris model is now as before but the iris3 model has traffic split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::25 :iris3_1::25]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "a0b7b65d-2c77-421b-97d1-22b00396d483", "page": "examples/experiment-versions", "section": "seldon-v2-experiment-version-tests", "text": "model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::25 :iris3_1::25]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon experiment stop experiment-sample\n\n\n{}\n\n\nFinally, let\u2019s check now the experiment has stopped as is as at the start.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nseldon model unload iris\nseldon model unload iris2\nseldon model unload iris3\n\n\n{}\n{}\n{}\n\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "adf853e2-1d31-48cd-a741-b9a5ca79cb90", "page": "examples/experiment-versions", "section": "test-change-candidate-for-a-model", "text": "\nTest change candidate for a model\u00b6\nWe will use three SKlearn Iris classification models to illustrate experiment updates.\nLoad all models.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\nseldon model load -f ./models/sklearn3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\nseldon model status iris3 -w ModelAvailable\n\n\n{}\n{}\n{}\n\n\nLet\u2019s call all three models individually first.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nWe will start an experiment to change the iris endpoint to split traffic with the iris2 model.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nNow when we call the iris model we should see a roughly 50/50 split between the two models.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::48 :iris_1::52]\n\n\n\nNow we update the experiment to change to a split with the iris3 model.\ncat ./experiments/ab-default-model2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  -", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "06cdc10f-2f16-42c9-a4b3-ec4b5b78c57f", "page": "examples/experiment-versions", "section": "test-change-candidate-for-a-model", "text": "we call the iris model we should see a roughly 50/50 split between the two models.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::48 :iris_1::52]\n\n\n\nNow we update the experiment to change to a split with the iris3 model.\ncat ./experiments/ab-default-model2.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris3\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model2.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nNow we should see a split with the iris3 model.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::42 :iris_1::58]\n\n\n\nseldon experiment stop experiment-sample\n\n\n{}\n\n\nNow the experiment has been stopped we check everything as before.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nseldon model unload iris\nseldon model unload iris2\nseldon model unload iris3\n\n\n{}\n{}\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "b160ab9f-87e7-44f5-bbc6-623275e1252a", "page": "examples/experiment-versions", "section": "test-change-default-model-in-an-experiment", "text": "\nTest change default model in an experiment\u00b6\nHere we test changing the model we want to split traffic on. We will use three SKlearn Iris classification models to illustrate.\nseldon model load -f ./models/sklearn1.yaml\nseldon model load -f ./models/sklearn2.yaml\nseldon model load -f ./models/sklearn3.yaml\n\n\n{}\n{}\n{}\n\n\nseldon model status iris -w ModelAvailable\nseldon model status iris2 -w ModelAvailable\nseldon model status iris3 -w ModelAvailable\n\n\n{}\n{}\n{}\n\n\nLet\u2019s call all three models to verify initial conditions.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nNow we start an experiment to change calls to the iris model to split with the iris2 model.\ncat ./experiments/ab-default-model.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris\n  candidates:\n  - name: iris\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::51 :iris_1::49]\n\n\n\nNow let\u2019s change the model we want to experiment to modify to the iris3", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "c000a573-b9af-4840-9777-60c818cd5c4c", "page": "examples/experiment-versions", "section": "test-change-default-model-in-an-experiment", "text": "true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nRun a set of calls and record which route the traffic took. There should be roughly a 50/50 split.\nseldon model infer iris -i 100 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::51 :iris_1::49]\n\n\n\nNow let\u2019s change the model we want to experiment to modify to the iris3 model. Splitting between that and iris2.\ncat ./experiments/ab-default-model3.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Experiment\nmetadata:\n  name: experiment-sample\nspec:\n  default: iris3\n  candidates:\n  - name: iris3\n    weight: 50\n  - name: iris2\n    weight: 50\n\n\nseldon experiment start -f ./experiments/ab-default-model3.yaml\n\n\n{}\n\n\nseldon experiment status experiment-sample -w | jq -M .\n\n\n{\n  \"experimentName\": \"experiment-sample\",\n  \"active\": true,\n  \"candidatesReady\": true,\n  \"mirrorReady\": true,\n  \"statusDescription\": \"experiment active\",\n  \"kubernetesMeta\": {}\n}\n\n\nLet\u2019s check the iris model is now as before but the iris3 model has traffic split.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::25 :iris3_1::25]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon experiment stop experiment-sample\n\n\n{}\n\n\nFinally, let\u2019s check now the experiment has stopped as is as at the start.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\",", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "3e61f458-623d-49a8-88c1-5f21d0e71b0e", "page": "examples/experiment-versions", "section": "test-change-default-model-in-an-experiment", "text": "50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon experiment stop experiment-sample\n\n\n{}\n\n\nFinally, let\u2019s check now the experiment has stopped as is as at the start.\nseldon model infer iris -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris_1::50]\n\n\n\nseldon model infer iris2 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris2_1::50]\n\n\n\nseldon model infer iris3 -i 50 \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 4], \"datatype\": \"FP32\", \"data\": [[1, 2, 3, 4]]}]}'\n\n\nSuccess: map[:iris3_1::50]\n\n\n\nseldon model unload iris\nseldon model unload iris2\nseldon model unload iris3\n\n\n{}\n{}\n{}\n\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/experiment-versions.html", "key": "examples/experiment-versions"}}, {"key": "294f797c-6b04-4dac-b7ad-0ed354ebc3f4", "page": "cli/docs/seldon_model_infer", "section": "seldon-model-infer", "text": "\nseldon model infer\u00b6\nrun inference on a model\n\nSynopsis\u00b6\ncall a model with a given input and get a prediction\nseldon model infer <modelName> (data) [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        inference payload file\n      --header stringArray      add a header, e.g. key=value; use the flag multiple times to add more than one header\n  -h, --help                    help for infer\n      --inference-host string   seldon inference host (default \"0.0.0.0:9000\")\n      --inference-mode string   inference mode (rest or grpc) (default \"rest\")\n  -i, --iterations int          how many times to run inference (default 1)\n  -t, --seconds int             number of secs to run inference\n      --show-headers            show request and response headers\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -s, --sticky-session          use sticky session from last inference (only", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_model_infer.html", "key": "cli/docs/seldon_model_infer"}}, {"key": "236cce4a-7c9e-49ef-ad34-0b11bde3e76f", "page": "cli/docs/seldon_model_infer", "section": "seldon-model-infer", "text": "       show request and response headers\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -s, --sticky-session          use sticky session from last inference (only works with experiments)\n\n\n\n\nSEE ALSO\u00b6\n\nseldon model\t - manage models\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_model_infer.html", "key": "cli/docs/seldon_model_infer"}}, {"key": "fb720404-17fa-4048-8621-8b2f5a51d84e", "page": "cli/docs/seldon_model_infer", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        inference payload file\n      --header stringArray      add a header, e.g. key=value; use the flag multiple times to add more than one header\n  -h, --help                    help for infer\n      --inference-host string   seldon inference host (default \"0.0.0.0:9000\")\n      --inference-mode string   inference mode (rest or grpc) (default \"rest\")\n  -i, --iterations int          how many times to run inference (default 1)\n  -t, --seconds int             number of secs to run inference\n      --show-headers            show request and response headers\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n  -s, --sticky-session          use sticky session from last inference (only works with experiments)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_model_infer.html", "key": "cli/docs/seldon_model_infer"}}, {"key": "3d3dcf81-1be3-4cfa-a68a-d108399f1e9b", "page": "getting-started/configuration", "section": "configuration", "text": "\nConfiguration\u00b6\nSeldon can be configured via various config files.\n\nKafka Configuration\u00b6\nWe allow configuration of the Kafka integration. In general this configuration looks like:\n{\n    \"topicPrefix\": \"seldon\",\n    \"bootstrap.servers\":\"kafka:9093\",\n    \"consumer\":{\n\t\"session.timeout.ms\":6000,\n\t\"auto.offset.reset\":\"earliest\",\n\t\"topic.metadata.propagation.max.ms\": 300000,\n\t\"message.max.bytes\":1000000000\n    },\n    \"producer\":{\n\t\"linger.ms\":0,\n\t\"message.max.bytes\":1000000000\n    },\n    \"streams\":{\n    }\n}\n\n\nThe top level keys are:\n\ntopicPrefix : the prefix to add to kafka topics created by Seldon\nconsumerGroupIdPrefix : the prefix to add to Kafka consumer group IDs created by Seldon\nbootstrap.servers : the global bootstrap kafka servers to use\nconsumer : consumer settings\nproducer : producer settings\nstreams : KStreams settings\n\nFor topicPrefix you can use any acceptable kafka topic characters which are a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). We use . (dot) internally as topic naming separator so we would suggest you don\u2019t end your topic prefix with a dot for clarity. For illustration, an example topic could be seldon.default.model.mymodel.inputs where seldon is the topic prefix.\nThe consumerGroupIdPrefix will ensure that all consumer groups created have a given prefix.\n\nKubernetes\u00b6\nFor Kubernetes this is controlled via a ConfigMap called seldon-kafka whose default values are defined in the SeldonConfig custom resource.\n      bootstrap.servers: 'seldon-kafka-bootstrap.seldon-mesh:9092'\n      consumer:\n        auto.offset.reset: 'earliest'\n        message.max.bytes: '1000000000'\n        session.timeout.ms: '6000'\n        topic.metadata.propagation.max.ms: '300000'\n      consumerGroupIdPrefix: ''\n      debug: ''\n   ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "2bb8c00e-1f2e-4033-8a40-d416de28f4f5", "page": "getting-started/configuration", "section": "configuration", "text": "   bootstrap.servers: 'seldon-kafka-bootstrap.seldon-mesh:9092'\n      consumer:\n        auto.offset.reset: 'earliest'\n        message.max.bytes: '1000000000'\n        session.timeout.ms: '6000'\n        topic.metadata.propagation.max.ms: '300000'\n      consumerGroupIdPrefix: ''\n      debug: ''\n      producer:\n        linger.ms: '0'\n        message.max.bytes: '1000000000'\n      topicPrefix: 'seldon'\n\n\nWhen the SeldonRuntime is installed in a namespace a configMap will be created with these settings for Kafka configuration.\nTo customize the settings you can add and modify the Kafka configuration via Helm, for example below is a custom Helm values file that add compression for producers:\nconfig:\n  kafkaConfig:\n    producer:\n      compression.type: gzip\n\n\nTo use this with the SeldonRuntime Helm chart:\nhelm install seldon-v2-runtime k8s/helm-charts/seldon-core-v2-runtime \\\n    --namespace seldon-mesh \\\n    --values k8s/samples/values-runtime-kafka-compression.yaml\n\n\n\n\nTopic and consumer isolation\u00b6\nIf you use a shared Kafka cluster with other applications you may want to isolate the topic names and consumer group IDs from other users of the cluster to ensure there is no name clash. For this we provide two settings:\n\ntopicPrefix: set a prefix for all topics\nconsumerGroupIdPrefix: set a prefix for all consumer groups\n\nAn example to set this in the configuration when using the helm installation is showm below for creating the default SeldonConfig:\nhelm upgrade --install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh \\\n ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "a1a07474-d622-4096-9f58-119bffec5105", "page": "getting-started/configuration", "section": "configuration", "text": "and consumer group IDs from other users of the cluster to ensure there is no name clash. For this we provide two settings:\n\ntopicPrefix: set a prefix for all topics\nconsumerGroupIdPrefix: set a prefix for all consumer groups\n\nAn example to set this in the configuration when using the helm installation is showm below for creating the default SeldonConfig:\nhelm upgrade --install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh \\\n    --set controller.clusterwide=true \\\n    --set kafka.topicPrefix=myorg \\\n    --set kafka.consumerGroupIdPrefix=myorg\n\n\nYou can find a worked example here.\nYou can create alternate SeldonConfigs with different values or override values for particular SeldonRuntime installs.\n\n\n\nTracing Configuration\u00b6\nWe allow configuration of tracing. This file looks like:\n{\n  \"disable\": false,\n  \"otelExporterEndpoint\": \"otel-collector:4317\",\n  \"otelExporterProtocol\": \"grpc\",\n  \"ratio\": \"1\"\n}\n\n\nThe top level keys are:\n\nenable : whether to enable tracing\notelExporterEndpoint : The host and port for the OTEL exporter\notelExporterProtocol : The protocol for the OTEL exporter. Currently used for\njvm-based components only (such as dataflow-engine), because opentelemetry-java-instrumentation\nrequires a http(s) URI for the endpoint but defaults to http/protobuf as a protocol.\nBecause of this, gRPC connections (over http) can only be set up by setting this option to grpc\nratio : The ratio of requests to trace. Takes values between 0 and 1 inclusive.\n\n\nKubernetes\u00b6\nFor Kubernetes this is controlled via a ConfigMap call seldon-tracing whose default value is shown below:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tracing\ndata:\n  tracing.json: |-\n   {\n     \"enable\": true,\n     \"otelExporterEndpoint\": \"seldon-collector:4317\",\n     \"otelExporterProtocol\": \"grpc\",\n     \"ratio\": \"1\"\n   }\n  OTEL_JAVAAGENT_ENABLED: \"true\"\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "dc93fdd5-8370-478b-97b1-9b7677c7d26b", "page": "getting-started/configuration", "section": "configuration", "text": "trace. Takes values between 0 and 1 inclusive.\n\n\nKubernetes\u00b6\nFor Kubernetes this is controlled via a ConfigMap call seldon-tracing whose default value is shown below:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tracing\ndata:\n  tracing.json: |-\n   {\n     \"enable\": true,\n     \"otelExporterEndpoint\": \"seldon-collector:4317\",\n     \"otelExporterProtocol\": \"grpc\",\n     \"ratio\": \"1\"\n   }\n  OTEL_JAVAAGENT_ENABLED: \"true\"\n  OTEL_EXPORTER_OTLP_ENDPOINT: \"http://seldon-collector:4317\"\n  OTEL_EXPORTER_OTLP_PROTOCOL: \"grpc\"\n\n\nNote, this ConfigMap is created via our Helm charts and there is usually no need to modify it manually.\nAt present Java instrumentation (for the dataflow engine) is duplicated via separate keys.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "1dfac860-e2be-41c2-bd20-d5f9fb89a6a5", "page": "getting-started/configuration", "section": "kafka-configuration", "text": "\nKafka Configuration\u00b6\nWe allow configuration of the Kafka integration. In general this configuration looks like:\n{\n    \"topicPrefix\": \"seldon\",\n    \"bootstrap.servers\":\"kafka:9093\",\n    \"consumer\":{\n\t\"session.timeout.ms\":6000,\n\t\"auto.offset.reset\":\"earliest\",\n\t\"topic.metadata.propagation.max.ms\": 300000,\n\t\"message.max.bytes\":1000000000\n    },\n    \"producer\":{\n\t\"linger.ms\":0,\n\t\"message.max.bytes\":1000000000\n    },\n    \"streams\":{\n    }\n}\n\n\nThe top level keys are:\n\ntopicPrefix : the prefix to add to kafka topics created by Seldon\nconsumerGroupIdPrefix : the prefix to add to Kafka consumer group IDs created by Seldon\nbootstrap.servers : the global bootstrap kafka servers to use\nconsumer : consumer settings\nproducer : producer settings\nstreams : KStreams settings\n\nFor topicPrefix you can use any acceptable kafka topic characters which are a-z, A-Z, 0-9, . (dot), _ (underscore), and - (dash). We use . (dot) internally as topic naming separator so we would suggest you don\u2019t end your topic prefix with a dot for clarity. For illustration, an example topic could be seldon.default.model.mymodel.inputs where seldon is the topic prefix.\nThe consumerGroupIdPrefix will ensure that all consumer groups created have a given prefix.\n\nKubernetes\u00b6\nFor Kubernetes this is controlled via a ConfigMap called seldon-kafka whose default values are defined in the SeldonConfig custom resource.\n      bootstrap.servers: 'seldon-kafka-bootstrap.seldon-mesh:9092'\n      consumer:\n        auto.offset.reset: 'earliest'\n        message.max.bytes: '1000000000'\n        session.timeout.ms: '6000'\n        topic.metadata.propagation.max.ms: '300000'\n      consumerGroupIdPrefix: ''\n      debug: ''\n      producer:\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "7e8f9c94-3d63-46d8-800b-05b60ff405fa", "page": "getting-started/configuration", "section": "kafka-configuration", "text": "   consumer:\n        auto.offset.reset: 'earliest'\n        message.max.bytes: '1000000000'\n        session.timeout.ms: '6000'\n        topic.metadata.propagation.max.ms: '300000'\n      consumerGroupIdPrefix: ''\n      debug: ''\n      producer:\n        linger.ms: '0'\n        message.max.bytes: '1000000000'\n      topicPrefix: 'seldon'\n\n\nWhen the SeldonRuntime is installed in a namespace a configMap will be created with these settings for Kafka configuration.\nTo customize the settings you can add and modify the Kafka configuration via Helm, for example below is a custom Helm values file that add compression for producers:\nconfig:\n  kafkaConfig:\n    producer:\n      compression.type: gzip\n\n\nTo use this with the SeldonRuntime Helm chart:\nhelm install seldon-v2-runtime k8s/helm-charts/seldon-core-v2-runtime \\\n    --namespace seldon-mesh \\\n    --values k8s/samples/values-runtime-kafka-compression.yaml\n\n\n\n\nTopic and consumer isolation\u00b6\nIf you use a shared Kafka cluster with other applications you may want to isolate the topic names and consumer group IDs from other users of the cluster to ensure there is no name clash. For this we provide two settings:\n\ntopicPrefix: set a prefix for all topics\nconsumerGroupIdPrefix: set a prefix for all consumer groups\n\nAn example to set this in the configuration when using the helm installation is showm below for creating the default SeldonConfig:\nhelm upgrade --install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh \\\n    --set controller.clusterwide=true \\\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "304c7e1d-1ea0-48f5-b06c-48802aae6b82", "page": "getting-started/configuration", "section": "kafka-configuration", "text": "of the cluster to ensure there is no name clash. For this we provide two settings:\n\ntopicPrefix: set a prefix for all topics\nconsumerGroupIdPrefix: set a prefix for all consumer groups\n\nAn example to set this in the configuration when using the helm installation is showm below for creating the default SeldonConfig:\nhelm upgrade --install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh \\\n    --set controller.clusterwide=true \\\n    --set kafka.topicPrefix=myorg \\\n    --set kafka.consumerGroupIdPrefix=myorg\n\n\nYou can find a worked example here.\nYou can create alternate SeldonConfigs with different values or override values for particular SeldonRuntime installs.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "a9a0cc9a-2ec5-43a9-92fa-976f847b0db2", "page": "getting-started/configuration", "section": "kubernetes", "text": "\nKubernetes\u00b6\nFor Kubernetes this is controlled via a ConfigMap called seldon-kafka whose default values are defined in the SeldonConfig custom resource.\n      bootstrap.servers: 'seldon-kafka-bootstrap.seldon-mesh:9092'\n      consumer:\n        auto.offset.reset: 'earliest'\n        message.max.bytes: '1000000000'\n        session.timeout.ms: '6000'\n        topic.metadata.propagation.max.ms: '300000'\n      consumerGroupIdPrefix: ''\n      debug: ''\n      producer:\n        linger.ms: '0'\n        message.max.bytes: '1000000000'\n      topicPrefix: 'seldon'\n\n\nWhen the SeldonRuntime is installed in a namespace a configMap will be created with these settings for Kafka configuration.\nTo customize the settings you can add and modify the Kafka configuration via Helm, for example below is a custom Helm values file that add compression for producers:\nconfig:\n  kafkaConfig:\n    producer:\n      compression.type: gzip\n\n\nTo use this with the SeldonRuntime Helm chart:\nhelm install seldon-v2-runtime k8s/helm-charts/seldon-core-v2-runtime \\\n    --namespace seldon-mesh \\\n    --values k8s/samples/values-runtime-kafka-compression.yaml\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "ee891010-cd53-46d2-8b7e-3e15a4f5b617", "page": "getting-started/configuration", "section": "topic-and-consumer-isolation", "text": "\nTopic and consumer isolation\u00b6\nIf you use a shared Kafka cluster with other applications you may want to isolate the topic names and consumer group IDs from other users of the cluster to ensure there is no name clash. For this we provide two settings:\n\ntopicPrefix: set a prefix for all topics\nconsumerGroupIdPrefix: set a prefix for all consumer groups\n\nAn example to set this in the configuration when using the helm installation is showm below for creating the default SeldonConfig:\nhelm upgrade --install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh \\\n    --set controller.clusterwide=true \\\n    --set kafka.topicPrefix=myorg \\\n    --set kafka.consumerGroupIdPrefix=myorg\n\n\nYou can find a worked example here.\nYou can create alternate SeldonConfigs with different values or override values for particular SeldonRuntime installs.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "02308d80-cb72-430f-9165-84913b059026", "page": "getting-started/configuration", "section": "tracing-configuration", "text": "\nTracing Configuration\u00b6\nWe allow configuration of tracing. This file looks like:\n{\n  \"disable\": false,\n  \"otelExporterEndpoint\": \"otel-collector:4317\",\n  \"otelExporterProtocol\": \"grpc\",\n  \"ratio\": \"1\"\n}\n\n\nThe top level keys are:\n\nenable : whether to enable tracing\notelExporterEndpoint : The host and port for the OTEL exporter\notelExporterProtocol : The protocol for the OTEL exporter. Currently used for\njvm-based components only (such as dataflow-engine), because opentelemetry-java-instrumentation\nrequires a http(s) URI for the endpoint but defaults to http/protobuf as a protocol.\nBecause of this, gRPC connections (over http) can only be set up by setting this option to grpc\nratio : The ratio of requests to trace. Takes values between 0 and 1 inclusive.\n\n\nKubernetes\u00b6\nFor Kubernetes this is controlled via a ConfigMap call seldon-tracing whose default value is shown below:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tracing\ndata:\n  tracing.json: |-\n   {\n     \"enable\": true,\n     \"otelExporterEndpoint\": \"seldon-collector:4317\",\n     \"otelExporterProtocol\": \"grpc\",\n     \"ratio\": \"1\"\n   }\n  OTEL_JAVAAGENT_ENABLED: \"true\"\n  OTEL_EXPORTER_OTLP_ENDPOINT: \"http://seldon-collector:4317\"\n  OTEL_EXPORTER_OTLP_PROTOCOL: \"grpc\"\n\n\nNote, this ConfigMap is created via our Helm charts and there is usually no need to modify it manually.\nAt present Java instrumentation (for the dataflow engine) is duplicated via separate keys.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "50e6f133-0ef3-4018-b915-f36f5a3d83e6", "page": "getting-started/configuration", "section": "id1", "text": "\nKubernetes\u00b6\nFor Kubernetes this is controlled via a ConfigMap call seldon-tracing whose default value is shown below:\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tracing\ndata:\n  tracing.json: |-\n   {\n     \"enable\": true,\n     \"otelExporterEndpoint\": \"seldon-collector:4317\",\n     \"otelExporterProtocol\": \"grpc\",\n     \"ratio\": \"1\"\n   }\n  OTEL_JAVAAGENT_ENABLED: \"true\"\n  OTEL_EXPORTER_OTLP_ENDPOINT: \"http://seldon-collector:4317\"\n  OTEL_EXPORTER_OTLP_PROTOCOL: \"grpc\"\n\n\nNote, this ConfigMap is created via our Helm charts and there is usually no need to modify it manually.\nAt present Java instrumentation (for the dataflow engine) is duplicated via separate keys.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/configuration/index.html", "key": "getting-started/configuration"}}, {"key": "e1864c0d-2609-4a75-8e4c-2dc9e7077f7d", "page": "examples/explainer-examples", "section": "explainer-examples", "text": "\nExplainer Examples\u00b6\nRun these examples from the samples folder.\n\nAnchor Tabular Explainer for SKLearn Income Model\u00b6\ncat ./models/income.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/classifier\"\n  requirements:\n  - sklearn\n\n\nseldon model load -f ./models/income.yaml\n\n\n{}\n\n\nseldon model status income -w ModelAvailable\n\n\n{}\n\n\nseldon model infer income \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 12], \"datatype\": \"FP32\", \"data\": [[47,4,1,1,1,3,4,1,0,0,40,9]]}]}'\n\n\n{\n\t\"model_name\": \"income_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"c65b8302-85af-4bac-aac5-91e3bedebee8\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"data\": [\n\t\t\t\t0\n\t\t\t]\n\t\t}\n\t]\n}\n\n\ncat ./models/income-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/explainer\"\n  explainer:\n    type: anchor_tabular\n    modelRef: income\n\n\nseldon model load -f ./models/income-explainer.yaml\n\n\n{}\n\n\nseldon model status income-explainer -w ModelAvailable\n\n\n{}\n\n\nseldon model infer income-explainer \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 12], \"datatype\": \"FP32\", \"data\": [[47,4,1,1,1,3,4,1,0,0,40,9]]}]}'\n\n\n{\n\t\"model_name\": \"income-explainer_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"a22c3785-ff3b-4504-9b3c-199aa48a62d6\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"explanation\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"str\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"meta\\\": {\\\"name\\\": \\\"AnchorTabular\\\", \\\"type\\\": [\\\"blackbox\\\"], \\\"explanations\\\": [\\\"local\\\"], \\\"params\\\": {\\\"seed\\\": 1, \\\"disc_perc\\\": [25, 50, 75], \\\"threshold\\\": 0.95, \\\"delta\\\": 0.1, \\\"tau\\\": 0.15, \\\"batch_size\\\": 100, \\\"coverage_samples\\\": 10000, \\\"beam_size\\\": 1, \\\"stop_on_first\\\": false, \\\"max_anchor_size\\\": null, \\\"min_samples_start\\\": 100, \\\"n_covered_ex\\\": 10, \\\"binary_cache_size\\\": 10000, \\\"cache_margin\\\": 1000, \\\"verbose\\\": false, \\\"verbose_every\\\": 1, \\\"kwargs\\\": {}}, \\\"version\\\": \\\"0.9.0\\\"}, \\\"data\\\": {\\\"anchor\\\": [\\\"Marital Status = Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"precision\\\": 0.9518716577540107, \\\"coverage\\\": 0.07165109034267912, \\\"raw\\\": {\\\"feature\\\": [3, 5], \\\"mean\\\": [0.7959381044487428, 0.9518716577540107], \\\"precision\\\": [0.7959381044487428, 0.9518716577540107], \\\"coverage\\\": [0.3037383177570093, 0.07165109034267912], \\\"examples\\\": [{\\\"covered_true\\\": [[52, 5, 5, 1, 8, 1, 2, 0, 0, 0, 50, 9], [49, 4, 1, 1, 4, 4, 1, 0, 0, 0, 40, 1], [23, 4, 1, 1, 6, 1, 4, 1, 0, 0, 40, 9], [55, 2, 1, 1, 5, 1, 4, 0, 0, 0, 48, 9], [22, 4, 1, 1, 2, 3, 4, 0, 0, 0, 15, 9], [51, 4, 2, 1, 5, 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "3a6e7d60-56d6-42be-b1db-79e898da0913", "page": "examples/explainer-examples", "section": "explainer-examples", "text": "5, 1, 8, 1, 2, 0, 0, 0, 50, 9], [49, 4, 1, 1, 4, 4, 1, 0, 0, 0, 40, 1], [23, 4, 1, 1, 6, 1, 4, 1, 0, 0, 40, 9], [55, 2, 1, 1, 5, 1, 4, 0, 0, 0, 48, 9], [22, 4, 1, 1, 2, 3, 4, 0, 0, 0, 15, 9], [51, 4, 2, 1, 5, 0, 1, 1, 0, 0, 99, 4], [40, 4, 1, 1, 5, 1, 4, 0, 0, 0, 40, 9], [40, 6, 1, 1, 2, 0, 4, 1, 0, 0, 50, 9], [50, 5, 5, 1, 6, 0, 4, 1, 0, 0, 55, 9], [41, 4, 1, 1, 6, 0, 4, 1, 0, 0, 40, 9]], \\\"covered_false\\\": [[42, 4, 1, 1, 8, 0, 4, 1, 0, 2415, 60, 9], [48, 6, 2, 1, 5, 4, 4, 0, 0, 0, 60, 9], [37, 4, 1, 1, 5, 0, 4, 1, 0, 0, 45, 9], [57, 4, 5, 1, 8, 0, 4, 1, 0, 0, 50, 9], [63, 7, 2, 1, 8, 0, 4, 1, 0, 1902, 50, 9], [51, 4, 5, 1, 8, 0, 4, 1, 0, 1887, 47, 9], [51, 2, 2, 1, 8, 1, 4, 0, 0, 0, 45, 9], [68, 7, 5, 1, 5, 0, 4, 1, 0, 2377, 42, 0], [45, 4, 1, 1, 8, 0, 4, 1, 15024, 0, 40, 9], [45, 4, 1, 1, 8, 0, 4, 1, 0, 1977, 60, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}, {\\\"covered_true\\\": [[44, 6, 5, 1, 8, 3, 4, 0, 0, 1902, 60, 9],", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "5a3147d7-560e-4ae3-9c24-0ba94187feac", "page": "examples/explainer-examples", "section": "explainer-examples", "text": "2, 2, 1, 8, 1, 4, 0, 0, 0, 45, 9], [68, 7, 5, 1, 5, 0, 4, 1, 0, 2377, 42, 0], [45, 4, 1, 1, 8, 0, 4, 1, 15024, 0, 40, 9], [45, 4, 1, 1, 8, 0, 4, 1, 0, 1977, 60, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}, {\\\"covered_true\\\": [[44, 6, 5, 1, 8, 3, 4, 0, 0, 1902, 60, 9], [58, 7, 2, 1, 5, 3, 1, 1, 4064, 0, 40, 1], [50, 7, 1, 1, 1, 3, 2, 0, 0, 0, 37, 9], [34, 4, 2, 1, 5, 3, 4, 1, 0, 0, 45, 9], [45, 4, 1, 1, 5, 3, 4, 1, 0, 0, 40, 9], [33, 7, 5, 1, 5, 3, 1, 1, 0, 0, 30, 6], [61, 7, 2, 1, 5, 3, 4, 1, 0, 0, 40, 0], [35, 4, 5, 1, 1, 3, 4, 1, 0, 0, 40, 9], [71, 2, 1, 1, 5, 3, 4, 0, 0, 0, 6, 9], [44, 4, 1, 1, 8, 3, 2, 1, 0, 0, 35, 9]], \\\"covered_false\\\": [[30, 4, 5, 1, 5, 3, 4, 1, 10520, 0, 40, 9], [54, 7, 2, 1, 8, 3, 4, 1, 0, 1902, 50, 9], [66, 6, 2, 1, 6, 3, 4, 1, 0, 2377, 25, 9], [35, 4, 2, 1, 5, 3, 4, 1, 7298, 0, 40, 9], [44, 4, 1, 1, 8, 3, 4, 1, 7298, 0, 48, 9], [31, 4, 1, 1, 8, 3, 4, 0, 13550, 0, 50, 9], [35, 4, 1, 1, 8, 3, 4, 1, 8614, 0, 45,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "509fbd8a-f975-4b4d-b22d-4f1104ebbcca", "page": "examples/explainer-examples", "section": "explainer-examples", "text": "1, 0, 1902, 50, 9], [66, 6, 2, 1, 6, 3, 4, 1, 0, 2377, 25, 9], [35, 4, 2, 1, 5, 3, 4, 1, 7298, 0, 40, 9], [44, 4, 1, 1, 8, 3, 4, 1, 7298, 0, 48, 9], [31, 4, 1, 1, 8, 3, 4, 0, 13550, 0, 50, 9], [35, 4, 1, 1, 8, 3, 4, 1, 8614, 0, 45, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}], \\\"all_precision\\\": 0, \\\"num_preds\\\": 1000000, \\\"success\\\": true, \\\"names\\\": [\\\"Marital Status = Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"prediction\\\": [0], \\\"instance\\\": [47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0], \\\"instances\\\": [[47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0]]}}}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload income-explainer\n\n\n{}\n\n\nseldon model unload income\n\n\n{}\n\n\n\n\nAnchor Text Explainer for SKLearn Movies Sentiment Model\u00b6\ncat ./models/moviesentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/moviesentiment-sklearn\"\n  requirements:\n  - sklearn\n\n\nseldon model load -f ./models/moviesentiment.yaml\n\n\n{}\n\n\nseldon model status sentiment -w ModelAvailable\n\n\n{}\n\n\nseldon model infer sentiment \\\n  '{\"parameters\": {\"content_type\": \"str\"}, \"inputs\": [{\"name\": \"foo\", \"data\": [\"I am good\"], \"datatype\": \"BYTES\",\"shape\": [1]}]}'\n\n\n{\n\t\"model_name\": \"sentiment_2\",\n\t\"model_version\": \"1\",\n\t\"id\": \"f5c07363-7e9d-4f09-aa30-228c81fdf4a4\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t0\n\t\t\t]\n\t\t}\n\t]\n}\n\n\ncat ./models/moviesentiment-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/moviesentiment-sklearn-explainer\"\n  explainer:\n    type: anchor_text\n    modelRef: sentiment\n\n\nseldon model load -f ./models/moviesentiment-explainer.yaml\n\n\n{}\n\n\nseldon model status sentiment-explainer -w ModelAvailable\n\n\n{}\n\n\nseldon model infer sentiment-explainer \\\n  '{\"parameters\": {\"content_type\": \"str\"}, \"inputs\": [{\"name\": \"foo\", \"data\": [\"I am good\"], \"datatype\": \"BYTES\",\"shape\": [1]}]}'\n\n\nError: V2 server error: 500 Traceback (most recent call last):\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 162, in __call__\n    await self.app(scope, receive, _send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette_exporter/middleware.py\", line 307, in __call__\n  ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "2c6f0816-1567-4f5f-a1d3-422de101d7a5", "page": "examples/explainer-examples", "section": "explainer-examples", "text": "   modelRef: sentiment\n\n\nseldon model load -f ./models/moviesentiment-explainer.yaml\n\n\n{}\n\n\nseldon model status sentiment-explainer -w ModelAvailable\n\n\n{}\n\n\nseldon model infer sentiment-explainer \\\n  '{\"parameters\": {\"content_type\": \"str\"}, \"inputs\": [{\"name\": \"foo\", \"data\": [\"I am good\"], \"datatype\": \"BYTES\",\"shape\": [1]}]}'\n\n\nError: V2 server error: 500 Traceback (most recent call last):\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 162, in __call__\n    await self.app(scope, receive, _send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette_exporter/middleware.py\", line 307, in __call__\n    await self.app(scope, receive, wrapped_send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/gzip.py\", line 24, in __call__\n    await responder(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/gzip.py\", line 44, in __call__\n    await self.app(scope, receive, self.send_with_gzip)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\n    raise exc\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\n    await self.app(scope, receive, sender)\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py\", line 21, in __call__\n    raise e\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py\", line 18, in __call__\n    await self.app(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/routing.py\", line 706, in __call__\n    await route.handle(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/routing.py\", line 276, in handle\n    await self.app(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/routing.py\", line 66, in app\n    response = await func(request)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver/rest/app.py\", line 42, in custom_route_handler\n    return await original_route_handler(request)\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/routing.py\", line 237, in app\n    raw_response = await run_endpoint_function(\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/routing.py\", line 163, in run_endpoint_function\n    return await dependant.call(**values)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver/rest/endpoints.py\", line 99, in infer\n    inference_response = await self._data_plane.infer(\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver/handlers/dataplane.py\", line 103, in infer\n    prediction", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "98205440-adad-46cc-9c86-92b1f78e077c", "page": "examples/explainer-examples", "section": "explainer-examples", "text": "File \"/opt/conda/lib/python3.8/site-packages/mlserver/rest/app.py\", line 42, in custom_route_handler\n    return await original_route_handler(request)\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/routing.py\", line 237, in app\n    raw_response = await run_endpoint_function(\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/routing.py\", line 163, in run_endpoint_function\n    return await dependant.call(**values)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver/rest/endpoints.py\", line 99, in infer\n    inference_response = await self._data_plane.infer(\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver/handlers/dataplane.py\", line 103, in infer\n    prediction = await model.predict(payload)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver_alibi_explain/runtime.py\", line 86, in predict\n    output_data = await self._async_explain_impl(input_data, payload.parameters)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver_alibi_explain/runtime.py\", line 119, in _async_explain_impl\n    explanation = await loop.run_in_executor(self._executor, explain_call)\n  File \"/opt/conda/lib/python3.8/concurrent/futures/thread.py\", line 57, in run\n    result = self.fn(*self.args, **self.kwargs)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver_alibi_explain/explainers/black_box_runtime.py\", line 62, in _explain_impl\n    input_data = input_data[0]\nKeyError: 0\n\n\n\nseldon model unload sentiment-explainer\n\n\n{}\n\n\nseldon model unload sentiment\n\n\n{}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "c582fef2-c55d-45e4-81e2-1d88497b6750", "page": "examples/explainer-examples", "section": "anchor-tabular-explainer-for-sklearn-income-model", "text": "\nAnchor Tabular Explainer for SKLearn Income Model\u00b6\ncat ./models/income.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/classifier\"\n  requirements:\n  - sklearn\n\n\nseldon model load -f ./models/income.yaml\n\n\n{}\n\n\nseldon model status income -w ModelAvailable\n\n\n{}\n\n\nseldon model infer income \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 12], \"datatype\": \"FP32\", \"data\": [[47,4,1,1,1,3,4,1,0,0,40,9]]}]}'\n\n\n{\n\t\"model_name\": \"income_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"c65b8302-85af-4bac-aac5-91e3bedebee8\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"data\": [\n\t\t\t\t0\n\t\t\t]\n\t\t}\n\t]\n}\n\n\ncat ./models/income-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: income-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/examples/mlserver_1.3.5/income/explainer\"\n  explainer:\n    type: anchor_tabular\n    modelRef: income\n\n\nseldon model load -f ./models/income-explainer.yaml\n\n\n{}\n\n\nseldon model status income-explainer -w ModelAvailable\n\n\n{}\n\n\nseldon model infer income-explainer \\\n  '{\"inputs\": [{\"name\": \"predict\", \"shape\": [1, 12], \"datatype\": \"FP32\", \"data\": [[47,4,1,1,1,3,4,1,0,0,40,9]]}]}'\n\n\n{\n\t\"model_name\": \"income-explainer_1\",\n\t\"model_version\": \"1\",\n\t\"id\": \"a22c3785-ff3b-4504-9b3c-199aa48a62d6\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"explanation\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"BYTES\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"str\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t\"{\\\"meta\\\": {\\\"name\\\": \\\"AnchorTabular\\\", \\\"type\\\": [\\\"blackbox\\\"], \\\"explanations\\\": [\\\"local\\\"], \\\"params\\\": {\\\"seed\\\": 1, \\\"disc_perc\\\": [25, 50, 75], \\\"threshold\\\": 0.95, \\\"delta\\\": 0.1, \\\"tau\\\": 0.15, \\\"batch_size\\\": 100, \\\"coverage_samples\\\": 10000, \\\"beam_size\\\": 1, \\\"stop_on_first\\\": false, \\\"max_anchor_size\\\": null, \\\"min_samples_start\\\": 100, \\\"n_covered_ex\\\": 10, \\\"binary_cache_size\\\": 10000, \\\"cache_margin\\\": 1000, \\\"verbose\\\": false, \\\"verbose_every\\\": 1, \\\"kwargs\\\": {}}, \\\"version\\\": \\\"0.9.0\\\"}, \\\"data\\\": {\\\"anchor\\\": [\\\"Marital Status = Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"precision\\\": 0.9518716577540107, \\\"coverage\\\": 0.07165109034267912, \\\"raw\\\": {\\\"feature\\\": [3, 5], \\\"mean\\\": [0.7959381044487428, 0.9518716577540107], \\\"precision\\\": [0.7959381044487428, 0.9518716577540107], \\\"coverage\\\": [0.3037383177570093, 0.07165109034267912], \\\"examples\\\": [{\\\"covered_true\\\": [[52, 5, 5, 1, 8, 1, 2, 0, 0, 0, 50, 9], [49, 4, 1, 1, 4, 4, 1, 0, 0, 0, 40, 1], [23, 4, 1, 1, 6, 1, 4, 1, 0, 0, 40, 9], [55, 2, 1, 1, 5, 1, 4, 0, 0, 0, 48, 9], [22, 4, 1, 1, 2, 3, 4, 0, 0, 0, 15, 9], [51, 4, 2, 1, 5, 0, 1, 1, 0, 0, 99, 4], [40,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "38922e14-ab3d-4e45-9684-bcf006640c44", "page": "examples/explainer-examples", "section": "anchor-tabular-explainer-for-sklearn-income-model", "text": "0, 50, 9], [49, 4, 1, 1, 4, 4, 1, 0, 0, 0, 40, 1], [23, 4, 1, 1, 6, 1, 4, 1, 0, 0, 40, 9], [55, 2, 1, 1, 5, 1, 4, 0, 0, 0, 48, 9], [22, 4, 1, 1, 2, 3, 4, 0, 0, 0, 15, 9], [51, 4, 2, 1, 5, 0, 1, 1, 0, 0, 99, 4], [40, 4, 1, 1, 5, 1, 4, 0, 0, 0, 40, 9], [40, 6, 1, 1, 2, 0, 4, 1, 0, 0, 50, 9], [50, 5, 5, 1, 6, 0, 4, 1, 0, 0, 55, 9], [41, 4, 1, 1, 6, 0, 4, 1, 0, 0, 40, 9]], \\\"covered_false\\\": [[42, 4, 1, 1, 8, 0, 4, 1, 0, 2415, 60, 9], [48, 6, 2, 1, 5, 4, 4, 0, 0, 0, 60, 9], [37, 4, 1, 1, 5, 0, 4, 1, 0, 0, 45, 9], [57, 4, 5, 1, 8, 0, 4, 1, 0, 0, 50, 9], [63, 7, 2, 1, 8, 0, 4, 1, 0, 1902, 50, 9], [51, 4, 5, 1, 8, 0, 4, 1, 0, 1887, 47, 9], [51, 2, 2, 1, 8, 1, 4, 0, 0, 0, 45, 9], [68, 7, 5, 1, 5, 0, 4, 1, 0, 2377, 42, 0], [45, 4, 1, 1, 8, 0, 4, 1, 15024, 0, 40, 9], [45, 4, 1, 1, 8, 0, 4, 1, 0, 1977, 60, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}, {\\\"covered_true\\\": [[44, 6, 5, 1, 8, 3, 4, 0, 0, 1902, 60, 9], [58, 7, 2, 1, 5, 3, 1,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "f195528b-edfd-4bc9-b3df-0456342933a9", "page": "examples/explainer-examples", "section": "anchor-tabular-explainer-for-sklearn-income-model", "text": "0, 0, 45, 9], [68, 7, 5, 1, 5, 0, 4, 1, 0, 2377, 42, 0], [45, 4, 1, 1, 8, 0, 4, 1, 15024, 0, 40, 9], [45, 4, 1, 1, 8, 0, 4, 1, 0, 1977, 60, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}, {\\\"covered_true\\\": [[44, 6, 5, 1, 8, 3, 4, 0, 0, 1902, 60, 9], [58, 7, 2, 1, 5, 3, 1, 1, 4064, 0, 40, 1], [50, 7, 1, 1, 1, 3, 2, 0, 0, 0, 37, 9], [34, 4, 2, 1, 5, 3, 4, 1, 0, 0, 45, 9], [45, 4, 1, 1, 5, 3, 4, 1, 0, 0, 40, 9], [33, 7, 5, 1, 5, 3, 1, 1, 0, 0, 30, 6], [61, 7, 2, 1, 5, 3, 4, 1, 0, 0, 40, 0], [35, 4, 5, 1, 1, 3, 4, 1, 0, 0, 40, 9], [71, 2, 1, 1, 5, 3, 4, 0, 0, 0, 6, 9], [44, 4, 1, 1, 8, 3, 2, 1, 0, 0, 35, 9]], \\\"covered_false\\\": [[30, 4, 5, 1, 5, 3, 4, 1, 10520, 0, 40, 9], [54, 7, 2, 1, 8, 3, 4, 1, 0, 1902, 50, 9], [66, 6, 2, 1, 6, 3, 4, 1, 0, 2377, 25, 9], [35, 4, 2, 1, 5, 3, 4, 1, 7298, 0, 40, 9], [44, 4, 1, 1, 8, 3, 4, 1, 7298, 0, 48, 9], [31, 4, 1, 1, 8, 3, 4, 0, 13550, 0, 50, 9], [35, 4, 1, 1, 8, 3, 4, 1, 8614, 0, 45, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}], \\\"all_precision\\\": 0,", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "9312bee5-07e1-42f4-9f84-f2935d37452c", "page": "examples/explainer-examples", "section": "anchor-tabular-explainer-for-sklearn-income-model", "text": "2, 1, 6, 3, 4, 1, 0, 2377, 25, 9], [35, 4, 2, 1, 5, 3, 4, 1, 7298, 0, 40, 9], [44, 4, 1, 1, 8, 3, 4, 1, 7298, 0, 48, 9], [31, 4, 1, 1, 8, 3, 4, 0, 13550, 0, 50, 9], [35, 4, 1, 1, 8, 3, 4, 1, 8614, 0, 45, 9]], \\\"uncovered_true\\\": [], \\\"uncovered_false\\\": []}], \\\"all_precision\\\": 0, \\\"num_preds\\\": 1000000, \\\"success\\\": true, \\\"names\\\": [\\\"Marital Status = Never-Married\\\", \\\"Relationship = Own-child\\\"], \\\"prediction\\\": [0], \\\"instance\\\": [47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0], \\\"instances\\\": [[47.0, 4.0, 1.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 0.0, 40.0, 9.0]]}}}\"\n\t\t\t]\n\t\t}\n\t]\n}\n\n\nseldon model unload income-explainer\n\n\n{}\n\n\nseldon model unload income\n\n\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "3893d675-8b5d-40c3-8892-4dfd9a6c5c13", "page": "examples/explainer-examples", "section": "anchor-text-explainer-for-sklearn-movies-sentiment-model", "text": "\nAnchor Text Explainer for SKLearn Movies Sentiment Model\u00b6\ncat ./models/moviesentiment.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/moviesentiment-sklearn\"\n  requirements:\n  - sklearn\n\n\nseldon model load -f ./models/moviesentiment.yaml\n\n\n{}\n\n\nseldon model status sentiment -w ModelAvailable\n\n\n{}\n\n\nseldon model infer sentiment \\\n  '{\"parameters\": {\"content_type\": \"str\"}, \"inputs\": [{\"name\": \"foo\", \"data\": [\"I am good\"], \"datatype\": \"BYTES\",\"shape\": [1]}]}'\n\n\n{\n\t\"model_name\": \"sentiment_2\",\n\t\"model_version\": \"1\",\n\t\"id\": \"f5c07363-7e9d-4f09-aa30-228c81fdf4a4\",\n\t\"parameters\": {},\n\t\"outputs\": [\n\t\t{\n\t\t\t\"name\": \"predict\",\n\t\t\t\"shape\": [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"datatype\": \"INT64\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"content_type\": \"np\"\n\t\t\t},\n\t\t\t\"data\": [\n\t\t\t\t0\n\t\t\t]\n\t\t}\n\t]\n}\n\n\ncat ./models/moviesentiment-explainer.yaml\n\n\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: sentiment-explainer\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.3.5/moviesentiment-sklearn-explainer\"\n  explainer:\n    type: anchor_text\n    modelRef: sentiment\n\n\nseldon model load -f ./models/moviesentiment-explainer.yaml\n\n\n{}\n\n\nseldon model status sentiment-explainer -w ModelAvailable\n\n\n{}\n\n\nseldon model infer sentiment-explainer \\\n  '{\"parameters\": {\"content_type\": \"str\"}, \"inputs\": [{\"name\": \"foo\", \"data\": [\"I am good\"], \"datatype\": \"BYTES\",\"shape\": [1]}]}'\n\n\nError: V2 server error: 500 Traceback (most recent call last):\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 162, in __call__\n    await self.app(scope, receive, _send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette_exporter/middleware.py\", line 307, in __call__\n    await self.app(scope, receive, wrapped_send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/gzip.py\", line 24, in __call__\n    await responder(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/gzip.py\", line 44, in __call__\n    await self.app(scope, receive, self.send_with_gzip)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\n    raise exc\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\n    await self.app(scope, receive, sender)\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py\", line 21, in __call__\n    raise e\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py\", line 18, in __call__\n    await self.app(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/routing.py\", line 706, in __call__\n    await route.handle(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/routing.py\", line 276, in handle\n    await self.app(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/routing.py\",", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "6158144e-26c8-407e-84d5-9ee2587df387", "page": "examples/explainer-examples", "section": "anchor-text-explainer-for-sklearn-movies-sentiment-model", "text": "   await self.app(scope, receive, sender)\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py\", line 21, in __call__\n    raise e\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/middleware/asyncexitstack.py\", line 18, in __call__\n    await self.app(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/routing.py\", line 706, in __call__\n    await route.handle(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/routing.py\", line 276, in handle\n    await self.app(scope, receive, send)\n  File \"/opt/conda/lib/python3.8/site-packages/starlette/routing.py\", line 66, in app\n    response = await func(request)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver/rest/app.py\", line 42, in custom_route_handler\n    return await original_route_handler(request)\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/routing.py\", line 237, in app\n    raw_response = await run_endpoint_function(\n  File \"/opt/conda/lib/python3.8/site-packages/fastapi/routing.py\", line 163, in run_endpoint_function\n    return await dependant.call(**values)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver/rest/endpoints.py\", line 99, in infer\n    inference_response = await self._data_plane.infer(\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver/handlers/dataplane.py\", line 103, in infer\n    prediction = await model.predict(payload)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver_alibi_explain/runtime.py\", line 86, in predict\n    output_data = await self._async_explain_impl(input_data, payload.parameters)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver_alibi_explain/runtime.py\", line 119, in _async_explain_impl\n    explanation = await loop.run_in_executor(self._executor, explain_call)\n  File \"/opt/conda/lib/python3.8/concurrent/futures/thread.py\", line 57, in run\n    result = self.fn(*self.args, **self.kwargs)\n  File \"/opt/conda/lib/python3.8/site-packages/mlserver_alibi_explain/explainers/black_box_runtime.py\", line 62, in _explain_impl\n    input_data = input_data[0]\nKeyError: 0\n\n\n\nseldon model unload sentiment-explainer\n\n\n{}\n\n\nseldon model unload sentiment\n\n\n{}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/examples/explainer-examples.html", "key": "examples/explainer-examples"}}, {"key": "1d36d0ac-dc7c-4211-88dc-7494e700bd31", "page": "getting-started/kubernetes-installation", "section": "kubernetes-installation", "text": "\nKubernetes Installation\u00b6\n\nPrerequisites\u00b6\n\nA running Kubernetes Cluster\u00b6\nYou will need a running Kubernetes cluster or can create a local KinD one for testing via Ansible.\n\n\nInstall Ecosystem Components\u00b6\nYou will also need to install our ecosystem components. For this we provide directions for Ansible to install these.\n\n\nComponent\nSummary\n\n\n\nKafka\nRequired for inference Pipeline usage.\n\nPrometheus\n(Optional) Exposes metrics.\n\nGrafana\n(Optional) UI for metrics.\n\nOpenTelemetry\n(Optional) Exposes tracing.\n\nJaeger\n(Optional) UI for traces.\n\n\n\n\n\nInstall\u00b6\nTo install Seldon Core V2 itself you can choose from the following. At present, all require a clone of the source repository.\n\nHelm Installation (recommended for production systems)\nAnsible (recommended for test / dev / trial purposes)\n\nThe Kubernetes operator that is installed runs in namespaced mode so any resources you create need to be in the same namespace as you installed into.\n\n\nKustomize\u00b6\nOur recommended and supported way to install is via Helm or Ansible. If you wish to use Kustomize then you can base your configuration on the raw yaml we create in the folder k8s/yaml or follow the steps in k8s/Makefile which illustrate how we build this yaml from our own Kustomize bases.\n\n\n\nOperations\u00b6\n\nSecurity\n\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/index.html", "key": "getting-started/kubernetes-installation"}}, {"key": "86e3cb62-fe82-4656-a273-6acd43772e51", "page": "getting-started/kubernetes-installation", "section": "prerequisites", "text": "\nPrerequisites\u00b6\n\nA running Kubernetes Cluster\u00b6\nYou will need a running Kubernetes cluster or can create a local KinD one for testing via Ansible.\n\n\nInstall Ecosystem Components\u00b6\nYou will also need to install our ecosystem components. For this we provide directions for Ansible to install these.\n\n\nComponent\nSummary\n\n\n\nKafka\nRequired for inference Pipeline usage.\n\nPrometheus\n(Optional) Exposes metrics.\n\nGrafana\n(Optional) UI for metrics.\n\nOpenTelemetry\n(Optional) Exposes tracing.\n\nJaeger\n(Optional) UI for traces.\n\n\n\n\n\nInstall\u00b6\nTo install Seldon Core V2 itself you can choose from the following. At present, all require a clone of the source repository.\n\nHelm Installation (recommended for production systems)\nAnsible (recommended for test / dev / trial purposes)\n\nThe Kubernetes operator that is installed runs in namespaced mode so any resources you create need to be in the same namespace as you installed into.\n\n\nKustomize\u00b6\nOur recommended and supported way to install is via Helm or Ansible. If you wish to use Kustomize then you can base your configuration on the raw yaml we create in the folder k8s/yaml or follow the steps in k8s/Makefile which illustrate how we build this yaml from our own Kustomize bases.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/index.html", "key": "getting-started/kubernetes-installation"}}, {"key": "6773bb4b-3b62-468e-9a31-0ba19c2aa67c", "page": "kubernetes/resources/pipeline", "section": "pipeline", "text": "\nPipeline\u00b6\nPipelines allow one to connect flows of inference data transformed by Model components. A directed acyclic graph (DAG) of steps can be defined to join Models together. Each Model will need to be capable of receiving a V2 inference request and respond with a V2 inference response. An example Pipeline is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Pipeline\nmetadata:\n  name: join\nspec:\n  steps:\n    - name: tfsimple1\n    - name: tfsimple2\n    - name: tfsimple3      \n      inputs:\n      - tfsimple1.outputs.OUTPUT0\n      - tfsimple2.outputs.OUTPUT1\n      tensorMap:\n        tfsimple1.outputs.OUTPUT0: INPUT0\n        tfsimple2.outputs.OUTPUT1: INPUT1\n  output:\n    steps:\n    - tfsimple3\n\n\nThe steps list shows three models: tfsimple1, tfsimple2 and tfsimple3. These three models each take two tensors called INPUT0 and INPUT1 of integers. The models produce two outputs OUTPUT0 (the sum of the inputs) and OUTPUT1 (subtraction of the second input from the first).\ntfsimple1 and tfsimple2 take as inputs the input to the Pipeline: the default assumption when no explicit inputs are defined. tfsimple3 takes one V2 tensor input from each of the outputs of tfsimple1 and tfsimple2. As the outputs of tfsimple1 and tfsimple2 have tensors named OUTPUT0 and OUTPUT1 their names need to be changed to respect the expected input tensors and this is done with a tensorMap component providing this tensor renaming. This is only", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/pipeline/index.html", "key": "kubernetes/resources/pipeline"}}, {"key": "d5a61da5-8980-4b8d-a8a6-5ccc0969301a", "page": "kubernetes/resources/pipeline", "section": "pipeline", "text": "the default assumption when no explicit inputs are defined. tfsimple3 takes one V2 tensor input from each of the outputs of tfsimple1 and tfsimple2. As the outputs of tfsimple1 and tfsimple2 have tensors named OUTPUT0 and OUTPUT1 their names need to be changed to respect the expected input tensors and this is done with a tensorMap component providing this tensor renaming. This is only required if your models can not be directly chained together.\nThe output of the Pipeline is the output from the tfsimple3 model.\n\nDetailed Specification\u00b6\nThe full GoLang specification for a Pipeline is shown below:\ntype PipelineSpec struct {\n\t// External inputs to this pipeline, optional\n\tInput *PipelineInput `json:\"input,omitempty\"`\n\n\t// The steps of this inference graph pipeline\n\tSteps []PipelineStep `json:\"steps\"`\n\n\t// Synchronous output from this pipeline, optional\n\tOutput *PipelineOutput `json:\"output,omitempty\"`\n}\n\n// +kubebuilder:validation:Enum=inner;outer;any\ntype JoinType string\n\nconst (\n\t// data must be available from all inputs\n\tJoinTypeInner JoinType = \"inner\"\n\t// data will include any data from any inputs at end of window\n\tJoinTypeOuter JoinType = \"outer\"\n\t// first data input that arrives will be forwarded\n\tJoinTypeAny JoinType = \"any\"\n)\n\ntype PipelineStep struct {\n\t// Name of the step\n\tName string `json:\"name\"`\n\n\t// Previous step to receive data from\n\tInputs []string `json:\"inputs,omitempty\"`\n\n\t// msecs to wait for messages from multiple inputs to arrive before joining the inputs\n\tJoinWindowMs *uint32 `json:\"joinWindowMs,omitempty\"`\n\n\t// Map of tensor name conversions to use e.g. output1 -> input1\n\tTensorMap map[string]string `json:\"tensorMap,omitempty\"`\n\n\t// Triggers required to activate step\n\tTriggers []string `json:\"triggers,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tInputsJoinType *JoinType `json:\"inputsJoinType,omitempty\"`\n\n\tTriggersJoinType *JoinType `json:\"triggersJoinType,omitempty\"`\n\n\t// Batch size of request required before data will be sent to this step\n\tBatch *PipelineBatch `json:\"batch,omitempty\"`\n}\n\ntype PipelineBatch struct {\n\tSize     *uint32 `json:\"size,omitempty\"`\n\tWindowMs *uint32 `json:\"windowMs,omitempty\"`\n\tRolling  bool    `json:\"rolling,omitempty\"`\n}\n\ntype PipelineInput struct {\n\t//", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/pipeline/index.html", "key": "kubernetes/resources/pipeline"}}, {"key": "c971afc6-b341-4e7a-8dd5-187a22b10d40", "page": "kubernetes/resources/pipeline", "section": "pipeline", "text": "the inputs\n\tJoinWindowMs *uint32 `json:\"joinWindowMs,omitempty\"`\n\n\t// Map of tensor name conversions to use e.g. output1 -> input1\n\tTensorMap map[string]string `json:\"tensorMap,omitempty\"`\n\n\t// Triggers required to activate step\n\tTriggers []string `json:\"triggers,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tInputsJoinType *JoinType `json:\"inputsJoinType,omitempty\"`\n\n\tTriggersJoinType *JoinType `json:\"triggersJoinType,omitempty\"`\n\n\t// Batch size of request required before data will be sent to this step\n\tBatch *PipelineBatch `json:\"batch,omitempty\"`\n}\n\ntype PipelineBatch struct {\n\tSize     *uint32 `json:\"size,omitempty\"`\n\tWindowMs *uint32 `json:\"windowMs,omitempty\"`\n\tRolling  bool    `json:\"rolling,omitempty\"`\n}\n\ntype PipelineInput struct {\n\t// Previous external pipeline steps to receive data from\n\tExternalInputs []string `json:\"externalInputs,omitempty\"`\n\n\t// Triggers required to activate inputs\n\tExternalTriggers []string `json:\"externalTriggers,omitempty\"`\n\n\t// msecs to wait for messages from multiple inputs to arrive before joining the inputs\n\tJoinWindowMs *uint32 `json:\"joinWindowMs,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tJoinType *JoinType `json:\"joinType,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tTriggersJoinType *JoinType `json:\"triggersJoinType,omitempty\"`\n\n\t// Map of tensor name conversions to use e.g. output1 -> input1\n\tTensorMap map[string]string `json:\"tensorMap,omitempty\"`\n}\n\ntype PipelineOutput struct {\n\t// Previous step to receive data from\n\tSteps []string `json:\"steps,omitempty\"`\n\n\t// msecs to wait for messages from multiple inputs to arrive before joining the inputs\n\tJoinWindowMs uint32 `json:\"joinWindowMs,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tStepsJoin *JoinType `json:\"stepsJoin,omitempty\"`\n\n\t// Map of tensor name conversions to use e.g. output1 -> input1\n\tTensorMap map[string]string `json:\"tensorMap,omitempty\"`\n}\n\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/pipeline/index.html", "key": "kubernetes/resources/pipeline"}}, {"key": "07641ba7-e483-4e1f-8ab0-2dd819a4fb84", "page": "kubernetes/resources/pipeline", "section": "detailed-specification", "text": "\nDetailed Specification\u00b6\nThe full GoLang specification for a Pipeline is shown below:\ntype PipelineSpec struct {\n\t// External inputs to this pipeline, optional\n\tInput *PipelineInput `json:\"input,omitempty\"`\n\n\t// The steps of this inference graph pipeline\n\tSteps []PipelineStep `json:\"steps\"`\n\n\t// Synchronous output from this pipeline, optional\n\tOutput *PipelineOutput `json:\"output,omitempty\"`\n}\n\n// +kubebuilder:validation:Enum=inner;outer;any\ntype JoinType string\n\nconst (\n\t// data must be available from all inputs\n\tJoinTypeInner JoinType = \"inner\"\n\t// data will include any data from any inputs at end of window\n\tJoinTypeOuter JoinType = \"outer\"\n\t// first data input that arrives will be forwarded\n\tJoinTypeAny JoinType = \"any\"\n)\n\ntype PipelineStep struct {\n\t// Name of the step\n\tName string `json:\"name\"`\n\n\t// Previous step to receive data from\n\tInputs []string `json:\"inputs,omitempty\"`\n\n\t// msecs to wait for messages from multiple inputs to arrive before joining the inputs\n\tJoinWindowMs *uint32 `json:\"joinWindowMs,omitempty\"`\n\n\t// Map of tensor name conversions to use e.g. output1 -> input1\n\tTensorMap map[string]string `json:\"tensorMap,omitempty\"`\n\n\t// Triggers required to activate step\n\tTriggers []string `json:\"triggers,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tInputsJoinType *JoinType `json:\"inputsJoinType,omitempty\"`\n\n\tTriggersJoinType *JoinType `json:\"triggersJoinType,omitempty\"`\n\n\t// Batch size of request required before data will be sent to this step\n\tBatch *PipelineBatch `json:\"batch,omitempty\"`\n}\n\ntype PipelineBatch struct {\n\tSize     *uint32 `json:\"size,omitempty\"`\n\tWindowMs *uint32 `json:\"windowMs,omitempty\"`\n\tRolling  bool    `json:\"rolling,omitempty\"`\n}\n\ntype PipelineInput struct {\n\t// Previous external pipeline steps to receive data from\n\tExternalInputs []string `json:\"externalInputs,omitempty\"`\n\n\t// Triggers required to activate inputs\n\tExternalTriggers []string `json:\"externalTriggers,omitempty\"`\n\n\t// msecs to wait for messages from multiple inputs to arrive before joining the inputs\n\tJoinWindowMs *uint32 `json:\"joinWindowMs,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tJoinType *JoinType `json:\"joinType,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tTriggersJoinType *JoinType `json:\"triggersJoinType,omitempty\"`\n\n\t// Map of tensor name conversions to use e.g. output1 -> input1\n\tTensorMap map[string]string `json:\"tensorMap,omitempty\"`\n}\n\ntype PipelineOutput struct {\n\t// Previous step to receive data from\n\tSteps []string `json:\"steps,omitempty\"`\n\n\t// msecs to wait for messages from multiple inputs to arrive before joining the inputs\n\tJoinWindowMs uint32 `json:\"joinWindowMs,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tStepsJoin *JoinType `json:\"stepsJoin,omitempty\"`\n\n\t// Map of", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/pipeline/index.html", "key": "kubernetes/resources/pipeline"}}, {"key": "1ec97a41-5707-4c17-bd23-753def56b1cd", "page": "kubernetes/resources/pipeline", "section": "detailed-specification", "text": "for messages from multiple inputs to arrive before joining the inputs\n\tJoinWindowMs *uint32 `json:\"joinWindowMs,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tJoinType *JoinType `json:\"joinType,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tTriggersJoinType *JoinType `json:\"triggersJoinType,omitempty\"`\n\n\t// Map of tensor name conversions to use e.g. output1 -> input1\n\tTensorMap map[string]string `json:\"tensorMap,omitempty\"`\n}\n\ntype PipelineOutput struct {\n\t// Previous step to receive data from\n\tSteps []string `json:\"steps,omitempty\"`\n\n\t// msecs to wait for messages from multiple inputs to arrive before joining the inputs\n\tJoinWindowMs uint32 `json:\"joinWindowMs,omitempty\"`\n\n\t// +kubebuilder:default=inner\n\tStepsJoin *JoinType `json:\"stepsJoin,omitempty\"`\n\n\t// Map of tensor name conversions to use e.g. output1 -> input1\n\tTensorMap map[string]string `json:\"tensorMap,omitempty\"`\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/pipeline/index.html", "key": "kubernetes/resources/pipeline"}}, {"key": "52a8e446-580f-4310-8a5e-0f1578dea531", "page": "models", "section": "models", "text": "\nModels\u00b6\nModels provide the atomic building blocks of Seldon. They represents machine learning models, drift detectors, outlier detectors, explainers, feature transformations, and more complex routing models such as multi-armed bandits.\n\nSeldon can handle a wide range of inference artifacts\nArtifacts can be stored on any of the 40 or more cloud storage technologies as well as from local (mounted) folder as discussed here.\n\n\nKubernetes Example\u00b6\nA Kubernetes yaml example is shown below for a SKLearn model for iris classification:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.5.0/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nIts Kubernetes spec has two core requirements\n\nA storageUri specifying the location of the artifact. This can be any rclone URI specification.\nA requirements list which provides tags that need to be matched by the Server that can run this artifact type. By default when you install Seldon we provide a set of Servers that cover a range of artifact types.\n\n\n\nGRPC Example\u00b6\nYou can also load models directly over the scheduler grpc service. An example is shown below use grpcurl tool:\n!grpcurl -d '{\"model\":{ \\\n              \"meta\":{\"name\":\"iris\"},\\\n              \"modelSpec\":{\"uri\":\"gs://seldon-models/mlserver/iris\",\\\n                           \"requirements\":[\"sklearn\"],\\\n                           \"memoryBytes\":500},\\\n    ", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/index.html", "key": "models"}}, {"key": "491e52a1-f671-49a2-8348-d575be65109a", "page": "models", "section": "models", "text": "     \"modelSpec\":{\"uri\":\"gs://seldon-models/mlserver/iris\",\\\n                           \"requirements\":[\"sklearn\"],\\\n                           \"memoryBytes\":500},\\\n              \"deploymentSpec\":{\"replicas\":1}}}' \\\n         -plaintext \\\n         -import-path ../../apis \\\n         -proto apis/mlops/scheduler/scheduler.proto  0.0.0.0:9004 seldon.mlops.scheduler.Scheduler/LoadModel\n\n\nThe proto buffer definitions for the scheduler are outlined here.\n\n\n\n\nMulti-model Serving with Overcommit\u00b6\nMulti-model serving is an architecture pattern where one ML inference server hosts multiple models at the same time. It is a feature provided out of the box by Nvidia Triton and Seldon MLServer. Multi-model serving reduces infrastructure hardware requirements (e.g. expensive GPUs) which enables the deployment of a large number of models while making it efficient to operate the system at scale.\nSeldon Core v2 leverages multi-model serving by design and it is the default option for deploying models. The system will find an appropriate server to load the model onto based on requirements that the user defines in the Model deployment definition.\nMoreover, in many cases demand patterns allow for further Overcommit of resources. Seldon Core v2 is able to register more models than what can be served by the provisioned (memory) infrastructure and will swap models", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/index.html", "key": "models"}}, {"key": "58698248-638d-44a6-a1cc-446d1a385007", "page": "models", "section": "models", "text": "the default option for deploying models. The system will find an appropriate server to load the model onto based on requirements that the user defines in the Model deployment definition.\nMoreover, in many cases demand patterns allow for further Overcommit of resources. Seldon Core v2 is able to register more models than what can be served by the provisioned (memory) infrastructure and will swap models dynamically according to least used without adding significant latency overheads to inference workload.\nSee Multi-model serving for more information.\n\n\nAutoscaling of Models\u00b6\nSee here for discussion of autoscaling of models.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/index.html", "key": "models"}}, {"key": "db18afdc-b338-44e5-9770-5b7afe172b91", "page": "models", "section": "kubernetes-example", "text": "\nKubernetes Example\u00b6\nA Kubernetes yaml example is shown below for a SKLearn model for iris classification:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/scv2/samples/mlserver_1.5.0/iris-sklearn\"\n  requirements:\n  - sklearn\n  memory: 100Ki\n\n\nIts Kubernetes spec has two core requirements\n\nA storageUri specifying the location of the artifact. This can be any rclone URI specification.\nA requirements list which provides tags that need to be matched by the Server that can run this artifact type. By default when you install Seldon we provide a set of Servers that cover a range of artifact types.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/index.html", "key": "models"}}, {"key": "736f9efa-9197-49de-8744-fef9538fa2b5", "page": "models", "section": "grpc-example", "text": "\nGRPC Example\u00b6\nYou can also load models directly over the scheduler grpc service. An example is shown below use grpcurl tool:\n!grpcurl -d '{\"model\":{ \\\n              \"meta\":{\"name\":\"iris\"},\\\n              \"modelSpec\":{\"uri\":\"gs://seldon-models/mlserver/iris\",\\\n                           \"requirements\":[\"sklearn\"],\\\n                           \"memoryBytes\":500},\\\n              \"deploymentSpec\":{\"replicas\":1}}}' \\\n         -plaintext \\\n         -import-path ../../apis \\\n         -proto apis/mlops/scheduler/scheduler.proto  0.0.0.0:9004 seldon.mlops.scheduler.Scheduler/LoadModel\n\n\nThe proto buffer definitions for the scheduler are outlined here.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/index.html", "key": "models"}}, {"key": "960a2cbb-b4aa-40d1-893d-edb8b6dc5515", "page": "models", "section": "multi-model-serving-with-overcommit", "text": "\nMulti-model Serving with Overcommit\u00b6\nMulti-model serving is an architecture pattern where one ML inference server hosts multiple models at the same time. It is a feature provided out of the box by Nvidia Triton and Seldon MLServer. Multi-model serving reduces infrastructure hardware requirements (e.g. expensive GPUs) which enables the deployment of a large number of models while making it efficient to operate the system at scale.\nSeldon Core v2 leverages multi-model serving by design and it is the default option for deploying models. The system will find an appropriate server to load the model onto based on requirements that the user defines in the Model deployment definition.\nMoreover, in many cases demand patterns allow for further Overcommit of resources. Seldon Core v2 is able to register more models than what can be served by the provisioned (memory) infrastructure and will swap models dynamically according to least used without adding significant latency overheads to inference workload.\nSee Multi-model serving for more information.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/models/index.html", "key": "models"}}, {"key": "7fb44625-a85b-4da4-a481-9ca30d9cc486", "page": "cli/docs/seldon_pipeline", "section": "seldon-pipeline", "text": "\nseldon pipeline\u00b6\nmanage pipelines\n\nSynopsis\u00b6\npipelines allow you to join models together into inference graphs.\nseldon pipeline <subcomand> [flags]\n\n\n\n\nOptions\u00b6\n  -h, --help   help for pipeline\n\n\n\n\nSEE ALSO\u00b6\n\nseldon\t -\nseldon pipeline infer\t - run inference on a pipeline\nseldon pipeline inspect\t - inspect data in a pipeline\nseldon pipeline list\t - list pipelines\nseldon pipeline load\t - load a pipeline\nseldon pipeline status\t - status of a pipeline\nseldon pipeline unload\t - unload a pipeline\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline.html", "key": "cli/docs/seldon_pipeline"}}, {"key": "64a6b830-f80a-40d0-8353-37bcc597a6d2", "page": "cli/docs/seldon_pipeline_load", "section": "seldon-pipeline-load", "text": "\nseldon pipeline load\u00b6\nload a pipeline\n\nSynopsis\u00b6\nload a pipeline\nseldon pipeline load [flags]\n\n\n\n\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        pipeline manifest file (YAML)\n  -h, --help                    help for load\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n\n\nSEE ALSO\u00b6\n\nseldon pipeline\t - manage pipelines\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_load.html", "key": "cli/docs/seldon_pipeline_load"}}, {"key": "9d3bae90-be97-4817-bb38-76e9a4a1312f", "page": "cli/docs/seldon_pipeline_load", "section": "options", "text": "\nOptions\u00b6\n      --authority string        authority (HTTP/2) or virtual host (HTTP/1)\n  -f, --file-path string        pipeline manifest file (YAML)\n  -h, --help                    help for load\n      --scheduler-host string   seldon scheduler host (default \"0.0.0.0:9004\")\n  -r, --show-request            show request\n  -o, --show-response           show response (default true)\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/cli/docs/seldon_pipeline_load.html", "key": "cli/docs/seldon_pipeline_load"}}, {"key": "a3fc3c51-d038-4810-82be-6be6d9c0ad93", "page": "kubernetes/resources/server", "section": "server", "text": "\nServer\u00b6\n\nNote\nThe default installation will provide two initial servers: one MLServer and one Triton. You only need to define additional servers for advanced use cases.\n\nA Server defines an inference server onto which models will be placed for inference. By default on installation two server StatefulSets will be deployed one MlServer and one Triton. An example Server definition is shown below:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver\nspec:\n  serverConfig: mlserver\n  replicas: 1\n\n\nThe main requirement is a reference to a ServerConfig resource in this case mlserver.\n\nDetailed Specs\u00b6\ntype ServerSpec struct {\n\t// Server definition\n\tServerConfig string `json:\"serverConfig\"`\n\t// The extra capabilities this server will advertise\n\t// These are added to the capabilities exposed by the referenced ServerConfig\n\tExtraCapabilities []string `json:\"extraCapabilities,omitempty\"`\n\t// The capabilities this server will advertise\n\t// This will override any from the referenced ServerConfig\n\tCapabilities []string `json:\"capabilities,omitempty\"`\n\t// Image overrides\n\tImageOverrides *ContainerOverrideSpec `json:\"imageOverrides,omitempty\"`\n\t// PodSpec overrides\n\t// Slices such as containers would be appended not overridden\n\tPodSpec *PodSpec `json:\"podSpec,omitempty\"`\n\t// Scaling spec\n\tScalingSpec `json:\",inline\"`\n\t// +Optional\n\t// If set then when the referenced ServerConfig changes we will NOT update the Server immediately.\n\t// Explicit changes to the Server itself will force a reconcile though\n\tDisableAutoUpdate bool `json:\"disableAutoUpdate,omitempty\"`\n}\n\ntype ContainerOverrideSpec struct {\n\t// The Agent overrides\n\tAgent *v1.Container `json:\"agent,omitempty\"`\n\t// The RClone server overrides\n\tRClone *v1.Container `json:\"rclone,omitempty\"`\n}\n\ntype ServerDefn struct {\n\t// Server config name to match\n\t// Required\n\tConfig string `json:\"config\"`\n}\n\n\n\n\nCustom Servers\u00b6\nOne can easily utilize a custom image with the existing ServerConfigs. For example, the following defines an MLServer server with a custom image:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-134\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - mlserver-1.3.4\n  podSpec:\n    containers:\n    - image: seldonio/mlserver:1.3.4\n      name: mlserver\n\n\nThis", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/server/index.html", "key": "kubernetes/resources/server"}}, {"key": "bd7d5433-6a7c-4043-ad75-f0c164c5f13e", "page": "kubernetes/resources/server", "section": "server", "text": "{\n\t// Server config name to match\n\t// Required\n\tConfig string `json:\"config\"`\n}\n\n\n\n\nCustom Servers\u00b6\nOne can easily utilize a custom image with the existing ServerConfigs. For example, the following defines an MLServer server with a custom image:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-134\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - mlserver-1.3.4\n  podSpec:\n    containers:\n    - image: seldonio/mlserver:1.3.4\n      name: mlserver\n\n\nThis server can then be targeted by a particular model by specifying this server name when creating the model, for example:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  server: mlserver-134\n\n\n\nServer with PVC\u00b6\nOne can also create a Server definition to add a persistent volume to your server. This can be used to allow models to be loaded directly from the persistent volume.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-pvc\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - \"pvc\"  \n  podSpec:\n    volumes:\n    - name: models-pvc\n      persistentVolumeClaim:\n        claimName: ml-models-pvc\n    containers:\n    - name: rclone\n      volumeMounts:\n      - name: models-pvc\n        mountPath: /var/models\n\n\nThe server can be targeted by a model whose artifact is on the persistent volume as shown below.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\nA fully worked example for this can be found here.\nAn alternative would be to create your own ServerConfig for more complex use cases", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/server/index.html", "key": "kubernetes/resources/server"}}, {"key": "d8f4b908-6063-4d33-ba77-cacfe9039a03", "page": "kubernetes/resources/server", "section": "server", "text": "       mountPath: /var/models\n\n\nThe server can be targeted by a model whose artifact is on the persistent volume as shown below.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\nA fully worked example for this can be found here.\nAn alternative would be to create your own ServerConfig for more complex use cases or you want to standardise the Server definition in one place.\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/server/index.html", "key": "kubernetes/resources/server"}}, {"key": "ee27644e-6fae-4c11-90d0-18bf7bbad866", "page": "kubernetes/resources/server", "section": "detailed-specs", "text": "\nDetailed Specs\u00b6\ntype ServerSpec struct {\n\t// Server definition\n\tServerConfig string `json:\"serverConfig\"`\n\t// The extra capabilities this server will advertise\n\t// These are added to the capabilities exposed by the referenced ServerConfig\n\tExtraCapabilities []string `json:\"extraCapabilities,omitempty\"`\n\t// The capabilities this server will advertise\n\t// This will override any from the referenced ServerConfig\n\tCapabilities []string `json:\"capabilities,omitempty\"`\n\t// Image overrides\n\tImageOverrides *ContainerOverrideSpec `json:\"imageOverrides,omitempty\"`\n\t// PodSpec overrides\n\t// Slices such as containers would be appended not overridden\n\tPodSpec *PodSpec `json:\"podSpec,omitempty\"`\n\t// Scaling spec\n\tScalingSpec `json:\",inline\"`\n\t// +Optional\n\t// If set then when the referenced ServerConfig changes we will NOT update the Server immediately.\n\t// Explicit changes to the Server itself will force a reconcile though\n\tDisableAutoUpdate bool `json:\"disableAutoUpdate,omitempty\"`\n}\n\ntype ContainerOverrideSpec struct {\n\t// The Agent overrides\n\tAgent *v1.Container `json:\"agent,omitempty\"`\n\t// The RClone server overrides\n\tRClone *v1.Container `json:\"rclone,omitempty\"`\n}\n\ntype ServerDefn struct {\n\t// Server config name to match\n\t// Required\n\tConfig string `json:\"config\"`\n}\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/server/index.html", "key": "kubernetes/resources/server"}}, {"key": "cba40f76-8072-4b24-8044-76f86fbb6e1e", "page": "kubernetes/resources/server", "section": "custom-servers", "text": "\nCustom Servers\u00b6\nOne can easily utilize a custom image with the existing ServerConfigs. For example, the following defines an MLServer server with a custom image:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-134\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - mlserver-1.3.4\n  podSpec:\n    containers:\n    - image: seldonio/mlserver:1.3.4\n      name: mlserver\n\n\nThis server can then be targeted by a particular model by specifying this server name when creating the model, for example:\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"gs://seldon-models/mlserver/iris\"\n  server: mlserver-134\n\n\n\nServer with PVC\u00b6\nOne can also create a Server definition to add a persistent volume to your server. This can be used to allow models to be loaded directly from the persistent volume.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-pvc\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - \"pvc\"  \n  podSpec:\n    volumes:\n    - name: models-pvc\n      persistentVolumeClaim:\n        claimName: ml-models-pvc\n    containers:\n    - name: rclone\n      volumeMounts:\n      - name: models-pvc\n        mountPath: /var/models\n\n\nThe server can be targeted by a model whose artifact is on the persistent volume as shown below.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\nA fully worked example for this can be found here.\nAn alternative would be to create your own ServerConfig for more complex use cases or you want to standardise the Server definition", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/server/index.html", "key": "kubernetes/resources/server"}}, {"key": "44de72f7-0f2f-4943-a7e4-d423927f52a9", "page": "kubernetes/resources/server", "section": "custom-servers", "text": "/var/models\n\n\nThe server can be targeted by a model whose artifact is on the persistent volume as shown below.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\nA fully worked example for this can be found here.\nAn alternative would be to create your own ServerConfig for more complex use cases or you want to standardise the Server definition in one place.\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/server/index.html", "key": "kubernetes/resources/server"}}, {"key": "ec0a9a5c-5189-487a-ba5c-d768e427e87b", "page": "kubernetes/resources/server", "section": "server-with-pvc", "text": "\nServer with PVC\u00b6\nOne can also create a Server definition to add a persistent volume to your server. This can be used to allow models to be loaded directly from the persistent volume.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Server\nmetadata:\n  name: mlserver-pvc\nspec:\n  serverConfig: mlserver\n  extraCapabilities:\n  - \"pvc\"  \n  podSpec:\n    volumes:\n    - name: models-pvc\n      persistentVolumeClaim:\n        claimName: ml-models-pvc\n    containers:\n    - name: rclone\n      volumeMounts:\n      - name: models-pvc\n        mountPath: /var/models\n\n\nThe server can be targeted by a model whose artifact is on the persistent volume as shown below.\napiVersion: mlops.seldon.io/v1alpha1\nkind: Model\nmetadata:\n  name: iris\nspec:\n  storageUri: \"/var/models/iris\"\n  requirements:\n  - sklearn\n  - pvc\n\n\nA fully worked example for this can be found here.\nAn alternative would be to create your own ServerConfig for more complex use cases or you want to standardise the Server definition in one place.\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/kubernetes/resources/server/index.html", "key": "kubernetes/resources/server"}}, {"key": "283ee04a-2424-4fd5-9a45-48eea7d2ed35", "page": "getting-started/kubernetes-installation/security/strimzi-sasl", "section": "strimzi-sasl-example", "text": "\nStrimzi SASL Example\u00b6\nCreate a Strimzi Kafka cluster with SASL_SSL enabled.\nThis can be done with our Ansible scripts by running the following from the ansible/ folder:\nansible-playbook playbooks/setup-ecosystem.yaml -e @../k8s/samples/ansible-strimzi-kafka-sasl-scram.yaml -e strimzi_kafka_operator_feature_gates=\"\"\n\n\nThe referenced SASL/SCRAM YAML file looks like the below:\nseldon_kafka_cluster_values:\n  broker:\n    tls:\n      authentication:\n        type: scram-sha-512\n\n\nThis will use the Strimzi Helm chart provided in Core v2.\nThis will call the Strimzi cluster Helm chart provided by the project with overrides for the cluster authentication type and will also create a user seldon with password credentials in a Kubernetes Secret.\nInstall Core v2 with SASL settings using a custom values file.\nThis sets the secret created by Strimzi for the user created above (seldon) and targets the server certificate authority secret from the name of the cluster created on install of the Kafka cluster (seldon-cluster-ca-cert).\nConfigure Seldon Core v2 by setting following Helm values:\n---\nkafka:\n  bootstrap: seldon-kafka-bootstrap.seldon-mesh.svc.cluster.local:9093\n\nsecurity:\n  kafka:\n    protocol: SASL_SSL\n    sasl:\n      mechanism: SCRAM-SHA-512\n      client:\n        username: seldon\n        secret: seldon\n        passwordPath: password\n    ssl:\n      client:\n        brokerValidationSecret: seldon-cluster-ca-cert\n        brokerCaPath: /tmp/certs/kafka/broker/ca.crt\n\n\nhelm install seldon-v2 k8s/helm-charts/seldon-core-v2-setup/ -n seldon-mesh -f k8s/samples/values-strimzi-kafka-sasl-scram.yaml\n\n\n", "meta": {"url": "https://docs.seldon.io/projects/seldon-core/en/v2/contents/getting-started/kubernetes-installation/security/strimzi-sasl.html", "key": "getting-started/kubernetes-installation/security/strimzi-sasl"}}]